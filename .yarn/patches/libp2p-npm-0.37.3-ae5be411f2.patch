diff --git a/dist/src/circuit/transport.js b/dist/src/circuit/transport.js
index e856e727f9590436691291ece1af52029083ebff..5bc80f3c03105bd7b897a162353396adcdee4ecb 100644
--- a/dist/src/circuit/transport.js
+++ b/dist/src/circuit/transport.js
@@ -1,7 +1,7 @@
 import { logger } from '@libp2p/logger';
 import errCode from 'err-code';
 import * as mafmt from '@multiformats/mafmt';
-import { Multiaddr } from '@multiformats/multiaddr';
+import { Multiaddr, protocols } from '@multiformats/multiaddr';
 import { CircuitRelay as CircuitPB } from './pb/index.js';
 import { codes } from '../errors.js';
 import { streamToMaConnection } from '@libp2p/utils/stream-to-ma-conn';
@@ -142,7 +142,7 @@ export class Circuit {
                     type: CircuitPB.Type.HOP,
                     srcPeer: {
                         id: this.components.getPeerId().toBytes(),
-                        addrs: this.components.getAddressManager().getAddresses().map(addr => addr.bytes)
+                        addrs: this.components.getAddressManager().getAddresses().map(ma => ma.decapsulateCode(protocols('p2p').code).bytes)
                     },
                     dstPeer: {
                         id: destinationPeer.toBytes(),
diff --git a/dist/src/identify/index.js b/dist/src/identify/index.js
index b4b5d11ea497682591f6a95092eb554a2780a4dd..e865a1d2dbe2197bc835c853a5d8f553ee49d614 100644
--- a/dist/src/identify/index.js
+++ b/dist/src/identify/index.js
@@ -80,7 +80,7 @@ export class IdentifyService {
      */
     async push(connections) {
         const signedPeerRecord = await this.components.getPeerStore().addressBook.getRawEnvelope(this.components.getPeerId());
-        const listenAddrs = this.components.getAddressManager().getAddresses().map((ma) => ma.bytes);
+        const listenAddrs = this.components.getAddressManager().getAddresses().map(ma => ma.decapsulateCode(protocols('p2p').code).bytes);
         const protocols = await this.components.getPeerStore().protoBook.get(this.components.getPeerId());
         const pushes = connections.map(async (connection) => {
             const timeoutController = new TimeoutController(this.init.timeout ?? IDENTIFY_TIMEOUT);
diff --git a/src/circuit/transport.ts b/src/circuit/transport.ts
index 1ff71d4ed7e3ab4498a083ea1f2f33d088fe9e02..d0360cefab8b8b312936bbb4fba651fd51d58575 100644
--- a/src/circuit/transport.ts
+++ b/src/circuit/transport.ts
@@ -1,7 +1,7 @@
 import { logger } from '@libp2p/logger'
 import errCode from 'err-code'
 import * as mafmt from '@multiformats/mafmt'
-import { Multiaddr } from '@multiformats/multiaddr'
+import { Multiaddr, protocols } from '@multiformats/multiaddr'
 import { CircuitRelay as CircuitPB } from './pb/index.js'
 import { codes } from '../errors.js'
 import { streamToMaConnection } from '@libp2p/utils/stream-to-ma-conn'
@@ -165,7 +165,7 @@ export class Circuit implements Transport, Initializable {
           type: CircuitPB.Type.HOP,
           srcPeer: {
             id: this.components.getPeerId().toBytes(),
-            addrs: this.components.getAddressManager().getAddresses().map(addr => addr.bytes)
+            addrs: this.components.getAddressManager().getAddresses().map(ma => ma.decapsulateCode(protocols('p2p').code).bytes)
           },
           dstPeer: {
             id: destinationPeer.toBytes(),
diff --git a/src/identify/index.ts b/src/identify/index.ts
index 777c35c1aa7ab4000c32e731077bce4100a1507f..c2541aa24f4a61b917f9225a7ccf1c554927ac81 100644
--- a/src/identify/index.ts
+++ b/src/identify/index.ts
@@ -151,7 +151,7 @@ export class IdentifyService implements Startable {
    */
   async push (connections: Connection[]): Promise<void> {
     const signedPeerRecord = await this.components.getPeerStore().addressBook.getRawEnvelope(this.components.getPeerId())
-    const listenAddrs = this.components.getAddressManager().getAddresses().map((ma) => ma.bytes)
+    const listenAddrs = this.components.getAddressManager().getAddresses().map(ma => ma.decapsulateCode(protocols('p2p').code).bytes)
     const protocols = await this.components.getPeerStore().protoBook.get(this.components.getPeerId())
 
     const pushes = connections.map(async connection => {
