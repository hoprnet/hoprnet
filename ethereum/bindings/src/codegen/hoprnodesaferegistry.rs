/**

Generated by the following Solidity interface...
```solidity
interface HoprNodeSafeRegistry {
    error NodeAddressZero();
    error NodeHasSafe();
    error NodeIsContract();
    error NodeNotModuleMember();
    error NotValidSafe();
    error NotValidSignatureFromNode();
    error SafeAddressZero();

    event DergisteredNodeSafe(address indexed safeAddress, address indexed nodeAddress);
    event DomainSeparatorUpdated(bytes32 indexed domainSeparator);
    event RegisteredNodeSafe(address indexed safeAddress, address indexed nodeAddress);

    constructor();

    function NODE_SAFE_TYPEHASH() external view returns (bytes32);
    function VERSION() external view returns (string memory);
    function deregisterNodeBySafe(address nodeAddr) external;
    function domainSeparator() external view returns (bytes32);
    function isNodeSafeRegistered(address safeAddress, address nodeChainKeyAddress) external view returns (bool);
    function nodeSigNonce(address nodeAddress) external view returns (uint256);
    function nodeToSafe(address nodeAddress) external view returns (address);
    function registerSafeByNode(address safeAddr) external;
    function registerSafeWithNodeSig(address safeAddress, address nodeChainKeyAddress, bytes memory sig) external;
    function updateDomainSeparator() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "NODE_SAFE_TYPEHASH",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "VERSION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "deregisterNodeBySafe",
    "inputs": [
      {
        "name": "nodeAddr",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "domainSeparator",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isNodeSafeRegistered",
    "inputs": [
      {
        "name": "safeAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "nodeChainKeyAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "nodeSigNonce",
    "inputs": [
      {
        "name": "nodeAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "nodeToSafe",
    "inputs": [
      {
        "name": "nodeAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "registerSafeByNode",
    "inputs": [
      {
        "name": "safeAddr",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "registerSafeWithNodeSig",
    "inputs": [
      {
        "name": "safeAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "nodeChainKeyAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sig",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateDomainSeparator",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "DergisteredNodeSafe",
    "inputs": [
      {
        "name": "safeAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "nodeAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DomainSeparatorUpdated",
    "inputs": [
      {
        "name": "domainSeparator",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RegisteredNodeSafe",
    "inputs": [
      {
        "name": "safeAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "nodeAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "NodeAddressZero",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NodeHasSafe",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NodeIsContract",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NodeNotModuleMember",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotValidSafe",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotValidSignatureFromNode",
    "inputs": []
  },
  {
    "type": "error",
    "name": "SafeAddressZero",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod HoprNodeSafeRegistry {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b5061001961001e565b610130565b604080518082018252601081526f4e6f646553616665526567697374727960801b6020918201528151808301835260058152640312e302e360dc1b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f447fbad4d46bbc04590cba6c2c058e72910ea40398cd34085373b98ea4daa0e8818401527f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c60608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600054811461012d57600081815560405182917f771f5240ae5fd8a7640d3fb82fa70aab2fb1dbf35f2ef464f8509946717664c591a25b50565b610cdd8061013f6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806389ccfe891161006657806389ccfe891461016c57806391607c4c14610174578063aa90f2a514610187578063f698da25146101c0578063ffa1ad74146101c957600080fd5b806337480abd146100a357806349d215e1146100cb5780637f935931146100e057806384b0dec2146100f357806389978c4014610128575b600080fd5b6100b66100b13660046109c9565b6101fa565b60405190151581526020015b60405180910390f35b6100de6100d9366004610a02565b61024b565b005b6100de6100ee366004610a94565b6103bb565b61011a7fa8ac7aed128d1a2da0773fecc80b6265d15f7e62bf4401eb23bd46c3fcf5d2f881565b6040519081526020016100c2565b610154610136366004610a94565b6001600160a01b039081166000908152600160205260409020541690565b6040516001600160a01b0390911681526020016100c2565b6100de6103c8565b6100de610182366004610a94565b6104d9565b61011a610195366004610a94565b6001600160a01b0316600090815260016020526040902054600160a01b90046001600160601b031690565b61011a60005481565b6101ed604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516100c29190610ab8565b6001600160a01b0381811660009081526001602052604081205490911661022357506000610245565b506001600160a01b038181166000908152600160205260409020548116908316145b92915050565b6001600160a01b0383811660008181526001602090815260408083205481517fa8ac7aed128d1a2da0773fecc80b6265d15f7e62bf4401eb23bd46c3fcf5d2f881850152958a168683015260608601949094526001600160601b03600160a01b909404939093166080808601919091528351808603909101815260a0850184528051908201208254601960f81b60c0870152600160f81b60c187015260c286015260e2808601829052845180870390910181526101028601808652815191840191909120610122601f8901859004909402870184019095528681529094839261035192869290918a918a9182910183828082843760009201919091525061056d92505050565b9092509050600081600481111561036a5761036a610b06565b1415806103895750866001600160a01b0316826001600160a01b031614155b156103a75760405163b4c91ffb60e01b815260040160405180910390fd5b6103b188886105b2565b5050505050505050565b6103c581336105b2565b50565b604080518082018252601081526f4e6f646553616665526567697374727960801b6020918201528151808301835260058152640312e302e360dc1b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f447fbad4d46bbc04590cba6c2c058e72910ea40398cd34085373b98ea4daa0e8818401527f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c60608201524660808201523060a0808301919091528351808303909101815260c0909101909252815191012060005481146103c557600081815560405182917f771f5240ae5fd8a7640d3fb82fa70aab2fb1dbf35f2ef464f8509946717664c591a250565b6001600160a01b03818116600090815260016020526040902054163314610513576040516315bfa15560e21b815260040160405180910390fd5b61051d3382610710565b6001600160a01b03811660008181526001602052604080822080546001600160a01b03191690555133917fe837f339639296bec9f4bc986154f5ff76bbbefc3149a512920e1311414e3da191a350565b60008082516041036105a35760208301516040840151606085015160001a610597878285856108f0565b945094505050506105ab565b506000905060025b9250929050565b6001600160a01b0382166105d9576040516314e7922160e01b815260040160405180910390fd5b6001600160a01b03811661060057604051633e876a9360e11b815260040160405180910390fd5b6001600160a01b0381163b1561062957604051631f829f0360e21b815260040160405180910390fd5b6001600160a01b038181166000908152600160205260409020541615610662576040516367dc300160e01b815260040160405180910390fd5b61066c8282610710565b6001600160a01b03818116600090815260016020819052604090912080546001600160a01b031916928516929092178083556106b991600160a01b9091046001600160601b031690610b32565b81546001600160601b0391909116600160a01b026001600160a01b03918216178255604051838216918516907f776da40cbf2c223552661bd48502ceb72409b3362bb0c66d8989bd7e20e4497d90600090a3505050565b600060605b6001600160a01b0382166001146108d757604051636617c22960e11b815260016004820152606460248201526001600160a01b0385169063cc2f845290604401600060405180830381865afa158015610772573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261079a9190810190610b7f565b9250905060005b81518110156108d1578181815181106107bc576107bc610c56565b60200260200101516001600160a01b0316634a1ba4086040518163ffffffff1660e01b8152600401602060405180830381865afa158015610801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108259190610c6c565b80156108b3575081818151811061083e5761083e610c56565b602090810291909101015160405162ba80a960e11b81526001600160a01b03868116600483015290911690630175015290602401602060405180830381865afa15801561088f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b39190610c6c565b156108bf575050505050565b806108c981610c8e565b9150506107a1565b50610715565b604051630ba5d7eb60e41b815260040160405180910390fd5b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561092757506000905060036109ab565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561097b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166109a4576000600192509250506109ab565b9150600090505b94509492505050565b6001600160a01b03811681146103c557600080fd5b600080604083850312156109dc57600080fd5b82356109e7816109b4565b915060208301356109f7816109b4565b809150509250929050565b60008060008060608587031215610a1857600080fd5b8435610a23816109b4565b93506020850135610a33816109b4565b9250604085013567ffffffffffffffff80821115610a5057600080fd5b818701915087601f830112610a6457600080fd5b813581811115610a7357600080fd5b886020828501011115610a8557600080fd5b95989497505060200194505050565b600060208284031215610aa657600080fd5b8135610ab1816109b4565b9392505050565b600060208083528351808285015260005b81811015610ae557858101830151858201604001528201610ac9565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6001600160601b03818116838216019080821115610b5257610b52610b1c565b5092915050565b634e487b7160e01b600052604160045260246000fd5b8051610b7a816109b4565b919050565b60008060408385031215610b9257600080fd5b825167ffffffffffffffff80821115610baa57600080fd5b818501915085601f830112610bbe57600080fd5b8151602082821115610bd257610bd2610b59565b8160051b604051601f19603f83011681018181108682111715610bf757610bf7610b59565b604052928352818301935084810182019289841115610c1557600080fd5b948201945b83861015610c3a57610c2b86610b6f565b85529482019493820193610c1a565b9650610c499050878201610b6f565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610c7e57600080fd5b81518015158114610ab157600080fd5b600060018201610ca057610ca0610b1c565b506001019056fea26469706673582212202d67fa1af1ddae10720052d57f9a5d00df56f83f1355f6215bcb0a83874071e264736f6c63430008130033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[Pa\0\x19a\0\x1EV[a\x010V[`@\x80Q\x80\x82\x01\x82R`\x10\x81RoNodeSafeRegistry`\x80\x1B` \x91\x82\x01R\x81Q\x80\x83\x01\x83R`\x05\x81Rd\x03\x12\xE3\x02\xE3`\xDC\x1B\x90\x82\x01R\x81Q\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x81\x83\x01R\x7FD\x7F\xBA\xD4\xD4k\xBC\x04Y\x0C\xBAl,\x05\x8Er\x91\x0E\xA4\x03\x98\xCD4\x08Ss\xB9\x8E\xA4\xDA\xA0\xE8\x81\x84\x01R\x7F\x06\xC0\x15\xBD\"\xB4\xC6\x96\x90\x93<\x10X\x87\x8E\xBD\xFE\xF3\x1F\x9A\xAA\xE4\x0B\xBE\x86\xD8\xA0\x9F\xE1\xB2\x97,``\x82\x01RF`\x80\x82\x01R0`\xA0\x80\x83\x01\x91\x90\x91R\x83Q\x80\x83\x03\x90\x91\x01\x81R`\xC0\x90\x91\x01\x90\x92R\x81Q\x91\x01 `\0T\x81\x14a\x01-W`\0\x81\x81U`@Q\x82\x91\x7Fw\x1FR@\xAE_\xD8\xA7d\r?\xB8/\xA7\n\xAB/\xB1\xDB\xF3_.\xF4d\xF8P\x99Fqvd\xC5\x91\xA2[PV[a\x0C\xDD\x80a\x01?`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\x9EW`\x005`\xE0\x1C\x80c\x89\xCC\xFE\x89\x11a\0fW\x80c\x89\xCC\xFE\x89\x14a\x01lW\x80c\x91`|L\x14a\x01tW\x80c\xAA\x90\xF2\xA5\x14a\x01\x87W\x80c\xF6\x98\xDA%\x14a\x01\xC0W\x80c\xFF\xA1\xADt\x14a\x01\xC9W`\0\x80\xFD[\x80c7H\n\xBD\x14a\0\xA3W\x80cI\xD2\x15\xE1\x14a\0\xCBW\x80c\x7F\x93Y1\x14a\0\xE0W\x80c\x84\xB0\xDE\xC2\x14a\0\xF3W\x80c\x89\x97\x8C@\x14a\x01(W[`\0\x80\xFD[a\0\xB6a\0\xB16`\x04a\t\xC9V[a\x01\xFAV[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xDEa\0\xD96`\x04a\n\x02V[a\x02KV[\0[a\0\xDEa\0\xEE6`\x04a\n\x94V[a\x03\xBBV[a\x01\x1A\x7F\xA8\xACz\xED\x12\x8D\x1A-\xA0w?\xEC\xC8\x0Bbe\xD1_~b\xBFD\x01\xEB#\xBDF\xC3\xFC\xF5\xD2\xF8\x81V[`@Q\x90\x81R` \x01a\0\xC2V[a\x01Ta\x0166`\x04a\n\x94V[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16`\0\x90\x81R`\x01` R`@\x90 T\x16\x90V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\xC2V[a\0\xDEa\x03\xC8V[a\0\xDEa\x01\x826`\x04a\n\x94V[a\x04\xD9V[a\x01\x1Aa\x01\x956`\x04a\n\x94V[`\x01`\x01`\xA0\x1B\x03\x16`\0\x90\x81R`\x01` R`@\x90 T`\x01`\xA0\x1B\x90\x04`\x01`\x01``\x1B\x03\x16\x90V[a\x01\x1A`\0T\x81V[a\x01\xED`@Q\x80`@\x01`@R\x80`\x05\x81R` \x01d\x03\x12\xE3\x02\xE3`\xDC\x1B\x81RP\x81V[`@Qa\0\xC2\x91\x90a\n\xB8V[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16`\0\x90\x81R`\x01` R`@\x81 T\x90\x91\x16a\x02#WP`\0a\x02EV[P`\x01`\x01`\xA0\x1B\x03\x81\x81\x16`\0\x90\x81R`\x01` R`@\x90 T\x81\x16\x90\x83\x16\x14[\x92\x91PPV[`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\0\x81\x81R`\x01` \x90\x81R`@\x80\x83 T\x81Q\x7F\xA8\xACz\xED\x12\x8D\x1A-\xA0w?\xEC\xC8\x0Bbe\xD1_~b\xBFD\x01\xEB#\xBDF\xC3\xFC\xF5\xD2\xF8\x81\x85\x01R\x95\x8A\x16\x86\x83\x01R``\x86\x01\x94\x90\x94R`\x01`\x01``\x1B\x03`\x01`\xA0\x1B\x90\x94\x04\x93\x90\x93\x16`\x80\x80\x86\x01\x91\x90\x91R\x83Q\x80\x86\x03\x90\x91\x01\x81R`\xA0\x85\x01\x84R\x80Q\x90\x82\x01 \x82T`\x19`\xF8\x1B`\xC0\x87\x01R`\x01`\xF8\x1B`\xC1\x87\x01R`\xC2\x86\x01R`\xE2\x80\x86\x01\x82\x90R\x84Q\x80\x87\x03\x90\x91\x01\x81Ra\x01\x02\x86\x01\x80\x86R\x81Q\x91\x84\x01\x91\x90\x91 a\x01\"`\x1F\x89\x01\x85\x90\x04\x90\x94\x02\x87\x01\x84\x01\x90\x95R\x86\x81R\x90\x94\x83\x92a\x03Q\x92\x86\x92\x90\x91\x8A\x91\x8A\x91\x82\x91\x01\x83\x82\x80\x82\x847`\0\x92\x01\x91\x90\x91RPa\x05m\x92PPPV[\x90\x92P\x90P`\0\x81`\x04\x81\x11\x15a\x03jWa\x03ja\x0B\x06V[\x14\x15\x80a\x03\x89WP\x86`\x01`\x01`\xA0\x1B\x03\x16\x82`\x01`\x01`\xA0\x1B\x03\x16\x14\x15[\x15a\x03\xA7W`@Qc\xB4\xC9\x1F\xFB`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x03\xB1\x88\x88a\x05\xB2V[PPPPPPPPV[a\x03\xC5\x813a\x05\xB2V[PV[`@\x80Q\x80\x82\x01\x82R`\x10\x81RoNodeSafeRegistry`\x80\x1B` \x91\x82\x01R\x81Q\x80\x83\x01\x83R`\x05\x81Rd\x03\x12\xE3\x02\xE3`\xDC\x1B\x90\x82\x01R\x81Q\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x81\x83\x01R\x7FD\x7F\xBA\xD4\xD4k\xBC\x04Y\x0C\xBAl,\x05\x8Er\x91\x0E\xA4\x03\x98\xCD4\x08Ss\xB9\x8E\xA4\xDA\xA0\xE8\x81\x84\x01R\x7F\x06\xC0\x15\xBD\"\xB4\xC6\x96\x90\x93<\x10X\x87\x8E\xBD\xFE\xF3\x1F\x9A\xAA\xE4\x0B\xBE\x86\xD8\xA0\x9F\xE1\xB2\x97,``\x82\x01RF`\x80\x82\x01R0`\xA0\x80\x83\x01\x91\x90\x91R\x83Q\x80\x83\x03\x90\x91\x01\x81R`\xC0\x90\x91\x01\x90\x92R\x81Q\x91\x01 `\0T\x81\x14a\x03\xC5W`\0\x81\x81U`@Q\x82\x91\x7Fw\x1FR@\xAE_\xD8\xA7d\r?\xB8/\xA7\n\xAB/\xB1\xDB\xF3_.\xF4d\xF8P\x99Fqvd\xC5\x91\xA2PV[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16`\0\x90\x81R`\x01` R`@\x90 T\x163\x14a\x05\x13W`@Qc\x15\xBF\xA1U`\xE2\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x05\x1D3\x82a\x07\x10V[`\x01`\x01`\xA0\x1B\x03\x81\x16`\0\x81\x81R`\x01` R`@\x80\x82 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90UQ3\x91\x7F\xE87\xF39c\x92\x96\xBE\xC9\xF4\xBC\x98aT\xF5\xFFv\xBB\xBE\xFC1I\xA5\x12\x92\x0E\x13\x11AN=\xA1\x91\xA3PV[`\0\x80\x82Q`A\x03a\x05\xA3W` \x83\x01Q`@\x84\x01Q``\x85\x01Q`\0\x1Aa\x05\x97\x87\x82\x85\x85a\x08\xF0V[\x94P\x94PPPPa\x05\xABV[P`\0\x90P`\x02[\x92P\x92\x90PV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x05\xD9W`@Qc\x14\xE7\x92!`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x06\0W`@Qc>\x87j\x93`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x16;\x15a\x06)W`@Qc\x1F\x82\x9F\x03`\xE2\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16`\0\x90\x81R`\x01` R`@\x90 T\x16\x15a\x06bW`@Qcg\xDC0\x01`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x06l\x82\x82a\x07\x10V[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16`\0\x90\x81R`\x01` \x81\x90R`@\x90\x91 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x92\x85\x16\x92\x90\x92\x17\x80\x83Ua\x06\xB9\x91`\x01`\xA0\x1B\x90\x91\x04`\x01`\x01``\x1B\x03\x16\x90a\x0B2V[\x81T`\x01`\x01``\x1B\x03\x91\x90\x91\x16`\x01`\xA0\x1B\x02`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x17\x82U`@Q\x83\x82\x16\x91\x85\x16\x90\x7Fwm\xA4\x0C\xBF,\"5Rf\x1B\xD4\x85\x02\xCE\xB7$\t\xB36+\xB0\xC6m\x89\x89\xBD~ \xE4I}\x90`\0\x90\xA3PPPV[`\0``[`\x01`\x01`\xA0\x1B\x03\x82\x16`\x01\x14a\x08\xD7W`@Qcf\x17\xC2)`\xE1\x1B\x81R`\x01`\x04\x82\x01R`d`$\x82\x01R`\x01`\x01`\xA0\x1B\x03\x85\x16\x90c\xCC/\x84R\x90`D\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07rW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x07\x9A\x91\x90\x81\x01\x90a\x0B\x7FV[\x92P\x90P`\0[\x81Q\x81\x10\x15a\x08\xD1W\x81\x81\x81Q\x81\x10a\x07\xBCWa\x07\xBCa\x0CVV[` \x02` \x01\x01Q`\x01`\x01`\xA0\x1B\x03\x16cJ\x1B\xA4\x08`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08\x01W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08%\x91\x90a\x0ClV[\x80\x15a\x08\xB3WP\x81\x81\x81Q\x81\x10a\x08>Wa\x08>a\x0CVV[` \x90\x81\x02\x91\x90\x91\x01\x01Q`@Qb\xBA\x80\xA9`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x86\x81\x16`\x04\x83\x01R\x90\x91\x16\x90c\x01u\x01R\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08\x8FW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\xB3\x91\x90a\x0ClV[\x15a\x08\xBFWPPPPPV[\x80a\x08\xC9\x81a\x0C\x8EV[\x91PPa\x07\xA1V[Pa\x07\x15V[`@Qc\x0B\xA5\xD7\xEB`\xE4\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\0\x80\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF]WnsW\xA4P\x1D\xDF\xE9/Fh\x1B \xA0\x83\x11\x15a\t'WP`\0\x90P`\x03a\t\xABV[`@\x80Q`\0\x80\x82R` \x82\x01\x80\x84R\x89\x90R`\xFF\x88\x16\x92\x82\x01\x92\x90\x92R``\x81\x01\x86\x90R`\x80\x81\x01\x85\x90R`\x01\x90`\xA0\x01` `@Q` \x81\x03\x90\x80\x84\x03\x90\x85Z\xFA\x15\x80\x15a\t{W=`\0\x80>=`\0\xFD[PP`@Q`\x1F\x19\x01Q\x91PP`\x01`\x01`\xA0\x1B\x03\x81\x16a\t\xA4W`\0`\x01\x92P\x92PPa\t\xABV[\x91P`\0\x90P[\x94P\x94\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x03\xC5W`\0\x80\xFD[`\0\x80`@\x83\x85\x03\x12\x15a\t\xDCW`\0\x80\xFD[\x825a\t\xE7\x81a\t\xB4V[\x91P` \x83\x015a\t\xF7\x81a\t\xB4V[\x80\x91PP\x92P\x92\x90PV[`\0\x80`\0\x80``\x85\x87\x03\x12\x15a\n\x18W`\0\x80\xFD[\x845a\n#\x81a\t\xB4V[\x93P` \x85\x015a\n3\x81a\t\xB4V[\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\nPW`\0\x80\xFD[\x81\x87\x01\x91P\x87`\x1F\x83\x01\x12a\ndW`\0\x80\xFD[\x815\x81\x81\x11\x15a\nsW`\0\x80\xFD[\x88` \x82\x85\x01\x01\x11\x15a\n\x85W`\0\x80\xFD[\x95\x98\x94\x97PP` \x01\x94PPPV[`\0` \x82\x84\x03\x12\x15a\n\xA6W`\0\x80\xFD[\x815a\n\xB1\x81a\t\xB4V[\x93\x92PPPV[`\0` \x80\x83R\x83Q\x80\x82\x85\x01R`\0[\x81\x81\x10\x15a\n\xE5W\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\n\xC9V[P`\0`@\x82\x86\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x92PPP\x92\x91PPV[cNH{q`\xE0\x1B`\0R`!`\x04R`$`\0\xFD[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\x01`\x01``\x1B\x03\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a\x0BRWa\x0BRa\x0B\x1CV[P\x92\x91PPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[\x80Qa\x0Bz\x81a\t\xB4V[\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\x0B\x92W`\0\x80\xFD[\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x0B\xAAW`\0\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x0B\xBEW`\0\x80\xFD[\x81Q` \x82\x82\x11\x15a\x0B\xD2Wa\x0B\xD2a\x0BYV[\x81`\x05\x1B`@Q`\x1F\x19`?\x83\x01\x16\x81\x01\x81\x81\x10\x86\x82\x11\x17\x15a\x0B\xF7Wa\x0B\xF7a\x0BYV[`@R\x92\x83R\x81\x83\x01\x93P\x84\x81\x01\x82\x01\x92\x89\x84\x11\x15a\x0C\x15W`\0\x80\xFD[\x94\x82\x01\x94[\x83\x86\x10\x15a\x0C:Wa\x0C+\x86a\x0BoV[\x85R\x94\x82\x01\x94\x93\x82\x01\x93a\x0C\x1AV[\x96Pa\x0CI\x90P\x87\x82\x01a\x0BoV[\x94PPPPP\x92P\x92\x90PV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`\0` \x82\x84\x03\x12\x15a\x0C~W`\0\x80\xFD[\x81Q\x80\x15\x15\x81\x14a\n\xB1W`\0\x80\xFD[`\0`\x01\x82\x01a\x0C\xA0Wa\x0C\xA0a\x0B\x1CV[P`\x01\x01\x90V\xFE\xA2dipfsX\"\x12 -g\xFA\x1A\xF1\xDD\xAE\x10r\0R\xD5\x7F\x9A]\0\xDFV\xF8?\x13U\xF6![\xCB\n\x83\x87@q\xE2dsolcC\0\x08\x13\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806389ccfe891161006657806389ccfe891461016c57806391607c4c14610174578063aa90f2a514610187578063f698da25146101c0578063ffa1ad74146101c957600080fd5b806337480abd146100a357806349d215e1146100cb5780637f935931146100e057806384b0dec2146100f357806389978c4014610128575b600080fd5b6100b66100b13660046109c9565b6101fa565b60405190151581526020015b60405180910390f35b6100de6100d9366004610a02565b61024b565b005b6100de6100ee366004610a94565b6103bb565b61011a7fa8ac7aed128d1a2da0773fecc80b6265d15f7e62bf4401eb23bd46c3fcf5d2f881565b6040519081526020016100c2565b610154610136366004610a94565b6001600160a01b039081166000908152600160205260409020541690565b6040516001600160a01b0390911681526020016100c2565b6100de6103c8565b6100de610182366004610a94565b6104d9565b61011a610195366004610a94565b6001600160a01b0316600090815260016020526040902054600160a01b90046001600160601b031690565b61011a60005481565b6101ed604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516100c29190610ab8565b6001600160a01b0381811660009081526001602052604081205490911661022357506000610245565b506001600160a01b038181166000908152600160205260409020548116908316145b92915050565b6001600160a01b0383811660008181526001602090815260408083205481517fa8ac7aed128d1a2da0773fecc80b6265d15f7e62bf4401eb23bd46c3fcf5d2f881850152958a168683015260608601949094526001600160601b03600160a01b909404939093166080808601919091528351808603909101815260a0850184528051908201208254601960f81b60c0870152600160f81b60c187015260c286015260e2808601829052845180870390910181526101028601808652815191840191909120610122601f8901859004909402870184019095528681529094839261035192869290918a918a9182910183828082843760009201919091525061056d92505050565b9092509050600081600481111561036a5761036a610b06565b1415806103895750866001600160a01b0316826001600160a01b031614155b156103a75760405163b4c91ffb60e01b815260040160405180910390fd5b6103b188886105b2565b5050505050505050565b6103c581336105b2565b50565b604080518082018252601081526f4e6f646553616665526567697374727960801b6020918201528151808301835260058152640312e302e360dc1b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f447fbad4d46bbc04590cba6c2c058e72910ea40398cd34085373b98ea4daa0e8818401527f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c60608201524660808201523060a0808301919091528351808303909101815260c0909101909252815191012060005481146103c557600081815560405182917f771f5240ae5fd8a7640d3fb82fa70aab2fb1dbf35f2ef464f8509946717664c591a250565b6001600160a01b03818116600090815260016020526040902054163314610513576040516315bfa15560e21b815260040160405180910390fd5b61051d3382610710565b6001600160a01b03811660008181526001602052604080822080546001600160a01b03191690555133917fe837f339639296bec9f4bc986154f5ff76bbbefc3149a512920e1311414e3da191a350565b60008082516041036105a35760208301516040840151606085015160001a610597878285856108f0565b945094505050506105ab565b506000905060025b9250929050565b6001600160a01b0382166105d9576040516314e7922160e01b815260040160405180910390fd5b6001600160a01b03811661060057604051633e876a9360e11b815260040160405180910390fd5b6001600160a01b0381163b1561062957604051631f829f0360e21b815260040160405180910390fd5b6001600160a01b038181166000908152600160205260409020541615610662576040516367dc300160e01b815260040160405180910390fd5b61066c8282610710565b6001600160a01b03818116600090815260016020819052604090912080546001600160a01b031916928516929092178083556106b991600160a01b9091046001600160601b031690610b32565b81546001600160601b0391909116600160a01b026001600160a01b03918216178255604051838216918516907f776da40cbf2c223552661bd48502ceb72409b3362bb0c66d8989bd7e20e4497d90600090a3505050565b600060605b6001600160a01b0382166001146108d757604051636617c22960e11b815260016004820152606460248201526001600160a01b0385169063cc2f845290604401600060405180830381865afa158015610772573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261079a9190810190610b7f565b9250905060005b81518110156108d1578181815181106107bc576107bc610c56565b60200260200101516001600160a01b0316634a1ba4086040518163ffffffff1660e01b8152600401602060405180830381865afa158015610801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108259190610c6c565b80156108b3575081818151811061083e5761083e610c56565b602090810291909101015160405162ba80a960e11b81526001600160a01b03868116600483015290911690630175015290602401602060405180830381865afa15801561088f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b39190610c6c565b156108bf575050505050565b806108c981610c8e565b9150506107a1565b50610715565b604051630ba5d7eb60e41b815260040160405180910390fd5b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561092757506000905060036109ab565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561097b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166109a4576000600192509250506109ab565b9150600090505b94509492505050565b6001600160a01b03811681146103c557600080fd5b600080604083850312156109dc57600080fd5b82356109e7816109b4565b915060208301356109f7816109b4565b809150509250929050565b60008060008060608587031215610a1857600080fd5b8435610a23816109b4565b93506020850135610a33816109b4565b9250604085013567ffffffffffffffff80821115610a5057600080fd5b818701915087601f830112610a6457600080fd5b813581811115610a7357600080fd5b886020828501011115610a8557600080fd5b95989497505060200194505050565b600060208284031215610aa657600080fd5b8135610ab1816109b4565b9392505050565b600060208083528351808285015260005b81811015610ae557858101830151858201604001528201610ac9565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6001600160601b03818116838216019080821115610b5257610b52610b1c565b5092915050565b634e487b7160e01b600052604160045260246000fd5b8051610b7a816109b4565b919050565b60008060408385031215610b9257600080fd5b825167ffffffffffffffff80821115610baa57600080fd5b818501915085601f830112610bbe57600080fd5b8151602082821115610bd257610bd2610b59565b8160051b604051601f19603f83011681018181108682111715610bf757610bf7610b59565b604052928352818301935084810182019289841115610c1557600080fd5b948201945b83861015610c3a57610c2b86610b6f565b85529482019493820193610c1a565b9650610c499050878201610b6f565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610c7e57600080fd5b81518015158114610ab157600080fd5b600060018201610ca057610ca0610b1c565b506001019056fea26469706673582212202d67fa1af1ddae10720052d57f9a5d00df56f83f1355f6215bcb0a83874071e264736f6c63430008130033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0\x9EW`\x005`\xE0\x1C\x80c\x89\xCC\xFE\x89\x11a\0fW\x80c\x89\xCC\xFE\x89\x14a\x01lW\x80c\x91`|L\x14a\x01tW\x80c\xAA\x90\xF2\xA5\x14a\x01\x87W\x80c\xF6\x98\xDA%\x14a\x01\xC0W\x80c\xFF\xA1\xADt\x14a\x01\xC9W`\0\x80\xFD[\x80c7H\n\xBD\x14a\0\xA3W\x80cI\xD2\x15\xE1\x14a\0\xCBW\x80c\x7F\x93Y1\x14a\0\xE0W\x80c\x84\xB0\xDE\xC2\x14a\0\xF3W\x80c\x89\x97\x8C@\x14a\x01(W[`\0\x80\xFD[a\0\xB6a\0\xB16`\x04a\t\xC9V[a\x01\xFAV[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xDEa\0\xD96`\x04a\n\x02V[a\x02KV[\0[a\0\xDEa\0\xEE6`\x04a\n\x94V[a\x03\xBBV[a\x01\x1A\x7F\xA8\xACz\xED\x12\x8D\x1A-\xA0w?\xEC\xC8\x0Bbe\xD1_~b\xBFD\x01\xEB#\xBDF\xC3\xFC\xF5\xD2\xF8\x81V[`@Q\x90\x81R` \x01a\0\xC2V[a\x01Ta\x0166`\x04a\n\x94V[`\x01`\x01`\xA0\x1B\x03\x90\x81\x16`\0\x90\x81R`\x01` R`@\x90 T\x16\x90V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\xC2V[a\0\xDEa\x03\xC8V[a\0\xDEa\x01\x826`\x04a\n\x94V[a\x04\xD9V[a\x01\x1Aa\x01\x956`\x04a\n\x94V[`\x01`\x01`\xA0\x1B\x03\x16`\0\x90\x81R`\x01` R`@\x90 T`\x01`\xA0\x1B\x90\x04`\x01`\x01``\x1B\x03\x16\x90V[a\x01\x1A`\0T\x81V[a\x01\xED`@Q\x80`@\x01`@R\x80`\x05\x81R` \x01d\x03\x12\xE3\x02\xE3`\xDC\x1B\x81RP\x81V[`@Qa\0\xC2\x91\x90a\n\xB8V[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16`\0\x90\x81R`\x01` R`@\x81 T\x90\x91\x16a\x02#WP`\0a\x02EV[P`\x01`\x01`\xA0\x1B\x03\x81\x81\x16`\0\x90\x81R`\x01` R`@\x90 T\x81\x16\x90\x83\x16\x14[\x92\x91PPV[`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\0\x81\x81R`\x01` \x90\x81R`@\x80\x83 T\x81Q\x7F\xA8\xACz\xED\x12\x8D\x1A-\xA0w?\xEC\xC8\x0Bbe\xD1_~b\xBFD\x01\xEB#\xBDF\xC3\xFC\xF5\xD2\xF8\x81\x85\x01R\x95\x8A\x16\x86\x83\x01R``\x86\x01\x94\x90\x94R`\x01`\x01``\x1B\x03`\x01`\xA0\x1B\x90\x94\x04\x93\x90\x93\x16`\x80\x80\x86\x01\x91\x90\x91R\x83Q\x80\x86\x03\x90\x91\x01\x81R`\xA0\x85\x01\x84R\x80Q\x90\x82\x01 \x82T`\x19`\xF8\x1B`\xC0\x87\x01R`\x01`\xF8\x1B`\xC1\x87\x01R`\xC2\x86\x01R`\xE2\x80\x86\x01\x82\x90R\x84Q\x80\x87\x03\x90\x91\x01\x81Ra\x01\x02\x86\x01\x80\x86R\x81Q\x91\x84\x01\x91\x90\x91 a\x01\"`\x1F\x89\x01\x85\x90\x04\x90\x94\x02\x87\x01\x84\x01\x90\x95R\x86\x81R\x90\x94\x83\x92a\x03Q\x92\x86\x92\x90\x91\x8A\x91\x8A\x91\x82\x91\x01\x83\x82\x80\x82\x847`\0\x92\x01\x91\x90\x91RPa\x05m\x92PPPV[\x90\x92P\x90P`\0\x81`\x04\x81\x11\x15a\x03jWa\x03ja\x0B\x06V[\x14\x15\x80a\x03\x89WP\x86`\x01`\x01`\xA0\x1B\x03\x16\x82`\x01`\x01`\xA0\x1B\x03\x16\x14\x15[\x15a\x03\xA7W`@Qc\xB4\xC9\x1F\xFB`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x03\xB1\x88\x88a\x05\xB2V[PPPPPPPPV[a\x03\xC5\x813a\x05\xB2V[PV[`@\x80Q\x80\x82\x01\x82R`\x10\x81RoNodeSafeRegistry`\x80\x1B` \x91\x82\x01R\x81Q\x80\x83\x01\x83R`\x05\x81Rd\x03\x12\xE3\x02\xE3`\xDC\x1B\x90\x82\x01R\x81Q\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x81\x83\x01R\x7FD\x7F\xBA\xD4\xD4k\xBC\x04Y\x0C\xBAl,\x05\x8Er\x91\x0E\xA4\x03\x98\xCD4\x08Ss\xB9\x8E\xA4\xDA\xA0\xE8\x81\x84\x01R\x7F\x06\xC0\x15\xBD\"\xB4\xC6\x96\x90\x93<\x10X\x87\x8E\xBD\xFE\xF3\x1F\x9A\xAA\xE4\x0B\xBE\x86\xD8\xA0\x9F\xE1\xB2\x97,``\x82\x01RF`\x80\x82\x01R0`\xA0\x80\x83\x01\x91\x90\x91R\x83Q\x80\x83\x03\x90\x91\x01\x81R`\xC0\x90\x91\x01\x90\x92R\x81Q\x91\x01 `\0T\x81\x14a\x03\xC5W`\0\x81\x81U`@Q\x82\x91\x7Fw\x1FR@\xAE_\xD8\xA7d\r?\xB8/\xA7\n\xAB/\xB1\xDB\xF3_.\xF4d\xF8P\x99Fqvd\xC5\x91\xA2PV[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16`\0\x90\x81R`\x01` R`@\x90 T\x163\x14a\x05\x13W`@Qc\x15\xBF\xA1U`\xE2\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x05\x1D3\x82a\x07\x10V[`\x01`\x01`\xA0\x1B\x03\x81\x16`\0\x81\x81R`\x01` R`@\x80\x82 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90UQ3\x91\x7F\xE87\xF39c\x92\x96\xBE\xC9\xF4\xBC\x98aT\xF5\xFFv\xBB\xBE\xFC1I\xA5\x12\x92\x0E\x13\x11AN=\xA1\x91\xA3PV[`\0\x80\x82Q`A\x03a\x05\xA3W` \x83\x01Q`@\x84\x01Q``\x85\x01Q`\0\x1Aa\x05\x97\x87\x82\x85\x85a\x08\xF0V[\x94P\x94PPPPa\x05\xABV[P`\0\x90P`\x02[\x92P\x92\x90PV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x05\xD9W`@Qc\x14\xE7\x92!`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x06\0W`@Qc>\x87j\x93`\xE1\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x16;\x15a\x06)W`@Qc\x1F\x82\x9F\x03`\xE2\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16`\0\x90\x81R`\x01` R`@\x90 T\x16\x15a\x06bW`@Qcg\xDC0\x01`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x06l\x82\x82a\x07\x10V[`\x01`\x01`\xA0\x1B\x03\x81\x81\x16`\0\x90\x81R`\x01` \x81\x90R`@\x90\x91 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x92\x85\x16\x92\x90\x92\x17\x80\x83Ua\x06\xB9\x91`\x01`\xA0\x1B\x90\x91\x04`\x01`\x01``\x1B\x03\x16\x90a\x0B2V[\x81T`\x01`\x01``\x1B\x03\x91\x90\x91\x16`\x01`\xA0\x1B\x02`\x01`\x01`\xA0\x1B\x03\x91\x82\x16\x17\x82U`@Q\x83\x82\x16\x91\x85\x16\x90\x7Fwm\xA4\x0C\xBF,\"5Rf\x1B\xD4\x85\x02\xCE\xB7$\t\xB36+\xB0\xC6m\x89\x89\xBD~ \xE4I}\x90`\0\x90\xA3PPPV[`\0``[`\x01`\x01`\xA0\x1B\x03\x82\x16`\x01\x14a\x08\xD7W`@Qcf\x17\xC2)`\xE1\x1B\x81R`\x01`\x04\x82\x01R`d`$\x82\x01R`\x01`\x01`\xA0\x1B\x03\x85\x16\x90c\xCC/\x84R\x90`D\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07rW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x07\x9A\x91\x90\x81\x01\x90a\x0B\x7FV[\x92P\x90P`\0[\x81Q\x81\x10\x15a\x08\xD1W\x81\x81\x81Q\x81\x10a\x07\xBCWa\x07\xBCa\x0CVV[` \x02` \x01\x01Q`\x01`\x01`\xA0\x1B\x03\x16cJ\x1B\xA4\x08`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08\x01W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08%\x91\x90a\x0ClV[\x80\x15a\x08\xB3WP\x81\x81\x81Q\x81\x10a\x08>Wa\x08>a\x0CVV[` \x90\x81\x02\x91\x90\x91\x01\x01Q`@Qb\xBA\x80\xA9`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x86\x81\x16`\x04\x83\x01R\x90\x91\x16\x90c\x01u\x01R\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08\x8FW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\xB3\x91\x90a\x0ClV[\x15a\x08\xBFWPPPPPV[\x80a\x08\xC9\x81a\x0C\x8EV[\x91PPa\x07\xA1V[Pa\x07\x15V[`@Qc\x0B\xA5\xD7\xEB`\xE4\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\0\x80\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF]WnsW\xA4P\x1D\xDF\xE9/Fh\x1B \xA0\x83\x11\x15a\t'WP`\0\x90P`\x03a\t\xABV[`@\x80Q`\0\x80\x82R` \x82\x01\x80\x84R\x89\x90R`\xFF\x88\x16\x92\x82\x01\x92\x90\x92R``\x81\x01\x86\x90R`\x80\x81\x01\x85\x90R`\x01\x90`\xA0\x01` `@Q` \x81\x03\x90\x80\x84\x03\x90\x85Z\xFA\x15\x80\x15a\t{W=`\0\x80>=`\0\xFD[PP`@Q`\x1F\x19\x01Q\x91PP`\x01`\x01`\xA0\x1B\x03\x81\x16a\t\xA4W`\0`\x01\x92P\x92PPa\t\xABV[\x91P`\0\x90P[\x94P\x94\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x03\xC5W`\0\x80\xFD[`\0\x80`@\x83\x85\x03\x12\x15a\t\xDCW`\0\x80\xFD[\x825a\t\xE7\x81a\t\xB4V[\x91P` \x83\x015a\t\xF7\x81a\t\xB4V[\x80\x91PP\x92P\x92\x90PV[`\0\x80`\0\x80``\x85\x87\x03\x12\x15a\n\x18W`\0\x80\xFD[\x845a\n#\x81a\t\xB4V[\x93P` \x85\x015a\n3\x81a\t\xB4V[\x92P`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\nPW`\0\x80\xFD[\x81\x87\x01\x91P\x87`\x1F\x83\x01\x12a\ndW`\0\x80\xFD[\x815\x81\x81\x11\x15a\nsW`\0\x80\xFD[\x88` \x82\x85\x01\x01\x11\x15a\n\x85W`\0\x80\xFD[\x95\x98\x94\x97PP` \x01\x94PPPV[`\0` \x82\x84\x03\x12\x15a\n\xA6W`\0\x80\xFD[\x815a\n\xB1\x81a\t\xB4V[\x93\x92PPPV[`\0` \x80\x83R\x83Q\x80\x82\x85\x01R`\0[\x81\x81\x10\x15a\n\xE5W\x85\x81\x01\x83\x01Q\x85\x82\x01`@\x01R\x82\x01a\n\xC9V[P`\0`@\x82\x86\x01\x01R`@`\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x92PPP\x92\x91PPV[cNH{q`\xE0\x1B`\0R`!`\x04R`$`\0\xFD[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[`\x01`\x01``\x1B\x03\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a\x0BRWa\x0BRa\x0B\x1CV[P\x92\x91PPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[\x80Qa\x0Bz\x81a\t\xB4V[\x91\x90PV[`\0\x80`@\x83\x85\x03\x12\x15a\x0B\x92W`\0\x80\xFD[\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x0B\xAAW`\0\x80\xFD[\x81\x85\x01\x91P\x85`\x1F\x83\x01\x12a\x0B\xBEW`\0\x80\xFD[\x81Q` \x82\x82\x11\x15a\x0B\xD2Wa\x0B\xD2a\x0BYV[\x81`\x05\x1B`@Q`\x1F\x19`?\x83\x01\x16\x81\x01\x81\x81\x10\x86\x82\x11\x17\x15a\x0B\xF7Wa\x0B\xF7a\x0BYV[`@R\x92\x83R\x81\x83\x01\x93P\x84\x81\x01\x82\x01\x92\x89\x84\x11\x15a\x0C\x15W`\0\x80\xFD[\x94\x82\x01\x94[\x83\x86\x10\x15a\x0C:Wa\x0C+\x86a\x0BoV[\x85R\x94\x82\x01\x94\x93\x82\x01\x93a\x0C\x1AV[\x96Pa\x0CI\x90P\x87\x82\x01a\x0BoV[\x94PPPPP\x92P\x92\x90PV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`\0` \x82\x84\x03\x12\x15a\x0C~W`\0\x80\xFD[\x81Q\x80\x15\x15\x81\x14a\n\xB1W`\0\x80\xFD[`\0`\x01\x82\x01a\x0C\xA0Wa\x0C\xA0a\x0B\x1CV[P`\x01\x01\x90V\xFE\xA2dipfsX\"\x12 -g\xFA\x1A\xF1\xDD\xAE\x10r\0R\xD5\x7F\x9A]\0\xDFV\xF8?\x13U\xF6![\xCB\n\x83\x87@q\xE2dsolcC\0\x08\x13\x003",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NodeAddressZero()` and selector `0x7d0ed526`.
```solidity
error NodeAddressZero();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NodeAddressZero;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NodeAddressZero> for UnderlyingRustTuple<'_> {
            fn from(value: NodeAddressZero) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NodeAddressZero {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NodeAddressZero {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NodeAddressZero()";
            const SELECTOR: [u8; 4] = [125u8, 14u8, 213u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NodeHasSafe()` and selector `0x67dc3001`.
```solidity
error NodeHasSafe();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NodeHasSafe;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NodeHasSafe> for UnderlyingRustTuple<'_> {
            fn from(value: NodeHasSafe) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NodeHasSafe {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NodeHasSafe {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NodeHasSafe()";
            const SELECTOR: [u8; 4] = [103u8, 220u8, 48u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NodeIsContract()` and selector `0x7e0a7c0c`.
```solidity
error NodeIsContract();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NodeIsContract;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NodeIsContract> for UnderlyingRustTuple<'_> {
            fn from(value: NodeIsContract) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NodeIsContract {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NodeIsContract {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NodeIsContract()";
            const SELECTOR: [u8; 4] = [126u8, 10u8, 124u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NodeNotModuleMember()` and selector `0xba5d7eb0`.
```solidity
error NodeNotModuleMember();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NodeNotModuleMember;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NodeNotModuleMember> for UnderlyingRustTuple<'_> {
            fn from(value: NodeNotModuleMember) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NodeNotModuleMember {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NodeNotModuleMember {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NodeNotModuleMember()";
            const SELECTOR: [u8; 4] = [186u8, 93u8, 126u8, 176u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotValidSafe()` and selector `0x56fe8554`.
```solidity
error NotValidSafe();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotValidSafe;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotValidSafe> for UnderlyingRustTuple<'_> {
            fn from(value: NotValidSafe) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotValidSafe {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotValidSafe {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotValidSafe()";
            const SELECTOR: [u8; 4] = [86u8, 254u8, 133u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotValidSignatureFromNode()` and selector `0xb4c91ffb`.
```solidity
error NotValidSignatureFromNode();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotValidSignatureFromNode;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotValidSignatureFromNode>
        for UnderlyingRustTuple<'_> {
            fn from(value: NotValidSignatureFromNode) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NotValidSignatureFromNode {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotValidSignatureFromNode {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotValidSignatureFromNode()";
            const SELECTOR: [u8; 4] = [180u8, 201u8, 31u8, 251u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SafeAddressZero()` and selector `0x14e79221`.
```solidity
error SafeAddressZero();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SafeAddressZero;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SafeAddressZero> for UnderlyingRustTuple<'_> {
            fn from(value: SafeAddressZero) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SafeAddressZero {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SafeAddressZero {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SafeAddressZero()";
            const SELECTOR: [u8; 4] = [20u8, 231u8, 146u8, 33u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `DergisteredNodeSafe(address,address)` and selector `0xe837f339639296bec9f4bc986154f5ff76bbbefc3149a512920e1311414e3da1`.
```solidity
event DergisteredNodeSafe(address indexed safeAddress, address indexed nodeAddress);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DergisteredNodeSafe {
        #[allow(missing_docs)]
        pub safeAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub nodeAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DergisteredNodeSafe {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "DergisteredNodeSafe(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                232u8, 55u8, 243u8, 57u8, 99u8, 146u8, 150u8, 190u8, 201u8, 244u8, 188u8,
                152u8, 97u8, 84u8, 245u8, 255u8, 118u8, 187u8, 190u8, 252u8, 49u8, 73u8,
                165u8, 18u8, 146u8, 14u8, 19u8, 17u8, 65u8, 78u8, 61u8, 161u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    safeAddress: topics.1,
                    nodeAddress: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.safeAddress.clone(),
                    self.nodeAddress.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.safeAddress,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.nodeAddress,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DergisteredNodeSafe {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DergisteredNodeSafe> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DergisteredNodeSafe) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `DomainSeparatorUpdated(bytes32)` and selector `0x771f5240ae5fd8a7640d3fb82fa70aab2fb1dbf35f2ef464f8509946717664c5`.
```solidity
event DomainSeparatorUpdated(bytes32 indexed domainSeparator);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DomainSeparatorUpdated {
        #[allow(missing_docs)]
        pub domainSeparator: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DomainSeparatorUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "DomainSeparatorUpdated(bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                119u8, 31u8, 82u8, 64u8, 174u8, 95u8, 216u8, 167u8, 100u8, 13u8, 63u8,
                184u8, 47u8, 167u8, 10u8, 171u8, 47u8, 177u8, 219u8, 243u8, 95u8, 46u8,
                244u8, 100u8, 248u8, 80u8, 153u8, 70u8, 113u8, 118u8, 100u8, 197u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { domainSeparator: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.domainSeparator.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.domainSeparator);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DomainSeparatorUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DomainSeparatorUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DomainSeparatorUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RegisteredNodeSafe(address,address)` and selector `0x776da40cbf2c223552661bd48502ceb72409b3362bb0c66d8989bd7e20e4497d`.
```solidity
event RegisteredNodeSafe(address indexed safeAddress, address indexed nodeAddress);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RegisteredNodeSafe {
        #[allow(missing_docs)]
        pub safeAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub nodeAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RegisteredNodeSafe {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RegisteredNodeSafe(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                119u8, 109u8, 164u8, 12u8, 191u8, 44u8, 34u8, 53u8, 82u8, 102u8, 27u8,
                212u8, 133u8, 2u8, 206u8, 183u8, 36u8, 9u8, 179u8, 54u8, 43u8, 176u8,
                198u8, 109u8, 137u8, 137u8, 189u8, 126u8, 32u8, 228u8, 73u8, 125u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    safeAddress: topics.1,
                    nodeAddress: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.safeAddress.clone(),
                    self.nodeAddress.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.safeAddress,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.nodeAddress,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RegisteredNodeSafe {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RegisteredNodeSafe> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RegisteredNodeSafe) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `NODE_SAFE_TYPEHASH()` and selector `0x84b0dec2`.
```solidity
function NODE_SAFE_TYPEHASH() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NODE_SAFE_TYPEHASHCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`NODE_SAFE_TYPEHASH()`](NODE_SAFE_TYPEHASHCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NODE_SAFE_TYPEHASHReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<NODE_SAFE_TYPEHASHCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: NODE_SAFE_TYPEHASHCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for NODE_SAFE_TYPEHASHCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<NODE_SAFE_TYPEHASHReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: NODE_SAFE_TYPEHASHReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for NODE_SAFE_TYPEHASHReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for NODE_SAFE_TYPEHASHCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NODE_SAFE_TYPEHASH()";
            const SELECTOR: [u8; 4] = [132u8, 176u8, 222u8, 194u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: NODE_SAFE_TYPEHASHReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: NODE_SAFE_TYPEHASHReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `VERSION()` and selector `0xffa1ad74`.
```solidity
function VERSION() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VERSIONCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`VERSION()`](VERSIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VERSIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<VERSIONCall> for UnderlyingRustTuple<'_> {
                fn from(value: VERSIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for VERSIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<VERSIONReturn> for UnderlyingRustTuple<'_> {
                fn from(value: VERSIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for VERSIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for VERSIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::String;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "VERSION()";
            const SELECTOR: [u8; 4] = [255u8, 161u8, 173u8, 116u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: VERSIONReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: VERSIONReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `deregisterNodeBySafe(address)` and selector `0x91607c4c`.
```solidity
function deregisterNodeBySafe(address nodeAddr) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deregisterNodeBySafeCall {
        #[allow(missing_docs)]
        pub nodeAddr: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`deregisterNodeBySafe(address)`](deregisterNodeBySafeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct deregisterNodeBySafeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deregisterNodeBySafeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: deregisterNodeBySafeCall) -> Self {
                    (value.nodeAddr,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for deregisterNodeBySafeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { nodeAddr: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<deregisterNodeBySafeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: deregisterNodeBySafeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for deregisterNodeBySafeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl deregisterNodeBySafeReturn {
            fn _tokenize(
                &self,
            ) -> <deregisterNodeBySafeCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for deregisterNodeBySafeCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = deregisterNodeBySafeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "deregisterNodeBySafe(address)";
            const SELECTOR: [u8; 4] = [145u8, 96u8, 124u8, 76u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.nodeAddr,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                deregisterNodeBySafeReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `domainSeparator()` and selector `0xf698da25`.
```solidity
function domainSeparator() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct domainSeparatorCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`domainSeparator()`](domainSeparatorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct domainSeparatorReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<domainSeparatorCall> for UnderlyingRustTuple<'_> {
                fn from(value: domainSeparatorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for domainSeparatorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<domainSeparatorReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: domainSeparatorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for domainSeparatorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for domainSeparatorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "domainSeparator()";
            const SELECTOR: [u8; 4] = [246u8, 152u8, 218u8, 37u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: domainSeparatorReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: domainSeparatorReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isNodeSafeRegistered(address,address)` and selector `0x37480abd`.
```solidity
function isNodeSafeRegistered(address safeAddress, address nodeChainKeyAddress) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isNodeSafeRegisteredCall {
        #[allow(missing_docs)]
        pub safeAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub nodeChainKeyAddress: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isNodeSafeRegistered(address,address)`](isNodeSafeRegisteredCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isNodeSafeRegisteredReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isNodeSafeRegisteredCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isNodeSafeRegisteredCall) -> Self {
                    (value.safeAddress, value.nodeChainKeyAddress)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isNodeSafeRegisteredCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        safeAddress: tuple.0,
                        nodeChainKeyAddress: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isNodeSafeRegisteredReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isNodeSafeRegisteredReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isNodeSafeRegisteredReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isNodeSafeRegisteredCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isNodeSafeRegistered(address,address)";
            const SELECTOR: [u8; 4] = [55u8, 72u8, 10u8, 189u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.safeAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.nodeChainKeyAddress,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: isNodeSafeRegisteredReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: isNodeSafeRegisteredReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `nodeSigNonce(address)` and selector `0xaa90f2a5`.
```solidity
function nodeSigNonce(address nodeAddress) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nodeSigNonceCall {
        #[allow(missing_docs)]
        pub nodeAddress: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`nodeSigNonce(address)`](nodeSigNonceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nodeSigNonceReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nodeSigNonceCall> for UnderlyingRustTuple<'_> {
                fn from(value: nodeSigNonceCall) -> Self {
                    (value.nodeAddress,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nodeSigNonceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { nodeAddress: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nodeSigNonceReturn> for UnderlyingRustTuple<'_> {
                fn from(value: nodeSigNonceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nodeSigNonceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for nodeSigNonceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "nodeSigNonce(address)";
            const SELECTOR: [u8; 4] = [170u8, 144u8, 242u8, 165u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.nodeAddress,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: nodeSigNonceReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: nodeSigNonceReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `nodeToSafe(address)` and selector `0x89978c40`.
```solidity
function nodeToSafe(address nodeAddress) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nodeToSafeCall {
        #[allow(missing_docs)]
        pub nodeAddress: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`nodeToSafe(address)`](nodeToSafeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nodeToSafeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nodeToSafeCall> for UnderlyingRustTuple<'_> {
                fn from(value: nodeToSafeCall) -> Self {
                    (value.nodeAddress,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nodeToSafeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { nodeAddress: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nodeToSafeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: nodeToSafeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nodeToSafeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for nodeToSafeCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "nodeToSafe(address)";
            const SELECTOR: [u8; 4] = [137u8, 151u8, 140u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.nodeAddress,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: nodeToSafeReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: nodeToSafeReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `registerSafeByNode(address)` and selector `0x7f935931`.
```solidity
function registerSafeByNode(address safeAddr) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct registerSafeByNodeCall {
        #[allow(missing_docs)]
        pub safeAddr: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`registerSafeByNode(address)`](registerSafeByNodeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct registerSafeByNodeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<registerSafeByNodeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: registerSafeByNodeCall) -> Self {
                    (value.safeAddr,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for registerSafeByNodeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { safeAddr: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<registerSafeByNodeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: registerSafeByNodeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for registerSafeByNodeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl registerSafeByNodeReturn {
            fn _tokenize(
                &self,
            ) -> <registerSafeByNodeCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for registerSafeByNodeCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = registerSafeByNodeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "registerSafeByNode(address)";
            const SELECTOR: [u8; 4] = [127u8, 147u8, 89u8, 49u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.safeAddr,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                registerSafeByNodeReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `registerSafeWithNodeSig(address,address,bytes)` and selector `0x49d215e1`.
```solidity
function registerSafeWithNodeSig(address safeAddress, address nodeChainKeyAddress, bytes memory sig) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct registerSafeWithNodeSigCall {
        #[allow(missing_docs)]
        pub safeAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub nodeChainKeyAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sig: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`registerSafeWithNodeSig(address,address,bytes)`](registerSafeWithNodeSigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct registerSafeWithNodeSigReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<registerSafeWithNodeSigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: registerSafeWithNodeSigCall) -> Self {
                    (value.safeAddress, value.nodeChainKeyAddress, value.sig)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for registerSafeWithNodeSigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        safeAddress: tuple.0,
                        nodeChainKeyAddress: tuple.1,
                        sig: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<registerSafeWithNodeSigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: registerSafeWithNodeSigReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for registerSafeWithNodeSigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl registerSafeWithNodeSigReturn {
            fn _tokenize(
                &self,
            ) -> <registerSafeWithNodeSigCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for registerSafeWithNodeSigCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = registerSafeWithNodeSigReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "registerSafeWithNodeSig(address,address,bytes)";
            const SELECTOR: [u8; 4] = [73u8, 210u8, 21u8, 225u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.safeAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.nodeChainKeyAddress,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.sig,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                registerSafeWithNodeSigReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `updateDomainSeparator()` and selector `0x89ccfe89`.
```solidity
function updateDomainSeparator() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDomainSeparatorCall;
    ///Container type for the return parameters of the [`updateDomainSeparator()`](updateDomainSeparatorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateDomainSeparatorReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDomainSeparatorCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDomainSeparatorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDomainSeparatorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateDomainSeparatorReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateDomainSeparatorReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateDomainSeparatorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl updateDomainSeparatorReturn {
            fn _tokenize(
                &self,
            ) -> <updateDomainSeparatorCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateDomainSeparatorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateDomainSeparatorReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateDomainSeparator()";
            const SELECTOR: [u8; 4] = [137u8, 204u8, 254u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                updateDomainSeparatorReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`HoprNodeSafeRegistry`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum HoprNodeSafeRegistryCalls {
        #[allow(missing_docs)]
        NODE_SAFE_TYPEHASH(NODE_SAFE_TYPEHASHCall),
        #[allow(missing_docs)]
        VERSION(VERSIONCall),
        #[allow(missing_docs)]
        deregisterNodeBySafe(deregisterNodeBySafeCall),
        #[allow(missing_docs)]
        domainSeparator(domainSeparatorCall),
        #[allow(missing_docs)]
        isNodeSafeRegistered(isNodeSafeRegisteredCall),
        #[allow(missing_docs)]
        nodeSigNonce(nodeSigNonceCall),
        #[allow(missing_docs)]
        nodeToSafe(nodeToSafeCall),
        #[allow(missing_docs)]
        registerSafeByNode(registerSafeByNodeCall),
        #[allow(missing_docs)]
        registerSafeWithNodeSig(registerSafeWithNodeSigCall),
        #[allow(missing_docs)]
        updateDomainSeparator(updateDomainSeparatorCall),
    }
    #[automatically_derived]
    impl HoprNodeSafeRegistryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [55u8, 72u8, 10u8, 189u8],
            [73u8, 210u8, 21u8, 225u8],
            [127u8, 147u8, 89u8, 49u8],
            [132u8, 176u8, 222u8, 194u8],
            [137u8, 151u8, 140u8, 64u8],
            [137u8, 204u8, 254u8, 137u8],
            [145u8, 96u8, 124u8, 76u8],
            [170u8, 144u8, 242u8, 165u8],
            [246u8, 152u8, 218u8, 37u8],
            [255u8, 161u8, 173u8, 116u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for HoprNodeSafeRegistryCalls {
        const NAME: &'static str = "HoprNodeSafeRegistryCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 10usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::NODE_SAFE_TYPEHASH(_) => {
                    <NODE_SAFE_TYPEHASHCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::VERSION(_) => <VERSIONCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::deregisterNodeBySafe(_) => {
                    <deregisterNodeBySafeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::domainSeparator(_) => {
                    <domainSeparatorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isNodeSafeRegistered(_) => {
                    <isNodeSafeRegisteredCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::nodeSigNonce(_) => {
                    <nodeSigNonceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::nodeToSafe(_) => {
                    <nodeToSafeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::registerSafeByNode(_) => {
                    <registerSafeByNodeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::registerSafeWithNodeSig(_) => {
                    <registerSafeWithNodeSigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateDomainSeparator(_) => {
                    <updateDomainSeparatorCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls>] = &[
                {
                    fn isNodeSafeRegistered(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <isNodeSafeRegisteredCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::isNodeSafeRegistered)
                    }
                    isNodeSafeRegistered
                },
                {
                    fn registerSafeWithNodeSig(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <registerSafeWithNodeSigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::registerSafeWithNodeSig)
                    }
                    registerSafeWithNodeSig
                },
                {
                    fn registerSafeByNode(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <registerSafeByNodeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::registerSafeByNode)
                    }
                    registerSafeByNode
                },
                {
                    fn NODE_SAFE_TYPEHASH(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <NODE_SAFE_TYPEHASHCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::NODE_SAFE_TYPEHASH)
                    }
                    NODE_SAFE_TYPEHASH
                },
                {
                    fn nodeToSafe(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <nodeToSafeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::nodeToSafe)
                    }
                    nodeToSafe
                },
                {
                    fn updateDomainSeparator(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <updateDomainSeparatorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::updateDomainSeparator)
                    }
                    updateDomainSeparator
                },
                {
                    fn deregisterNodeBySafe(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <deregisterNodeBySafeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::deregisterNodeBySafe)
                    }
                    deregisterNodeBySafe
                },
                {
                    fn nodeSigNonce(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <nodeSigNonceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::nodeSigNonce)
                    }
                    nodeSigNonce
                },
                {
                    fn domainSeparator(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <domainSeparatorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::domainSeparator)
                    }
                    domainSeparator
                },
                {
                    fn VERSION(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <VERSIONCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(HoprNodeSafeRegistryCalls::VERSION)
                    }
                    VERSION
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls>] = &[
                {
                    fn isNodeSafeRegistered(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <isNodeSafeRegisteredCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::isNodeSafeRegistered)
                    }
                    isNodeSafeRegistered
                },
                {
                    fn registerSafeWithNodeSig(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <registerSafeWithNodeSigCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::registerSafeWithNodeSig)
                    }
                    registerSafeWithNodeSig
                },
                {
                    fn registerSafeByNode(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <registerSafeByNodeCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::registerSafeByNode)
                    }
                    registerSafeByNode
                },
                {
                    fn NODE_SAFE_TYPEHASH(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <NODE_SAFE_TYPEHASHCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::NODE_SAFE_TYPEHASH)
                    }
                    NODE_SAFE_TYPEHASH
                },
                {
                    fn nodeToSafe(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <nodeToSafeCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::nodeToSafe)
                    }
                    nodeToSafe
                },
                {
                    fn updateDomainSeparator(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <updateDomainSeparatorCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::updateDomainSeparator)
                    }
                    updateDomainSeparator
                },
                {
                    fn deregisterNodeBySafe(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <deregisterNodeBySafeCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::deregisterNodeBySafe)
                    }
                    deregisterNodeBySafe
                },
                {
                    fn nodeSigNonce(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <nodeSigNonceCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::nodeSigNonce)
                    }
                    nodeSigNonce
                },
                {
                    fn domainSeparator(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <domainSeparatorCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::domainSeparator)
                    }
                    domainSeparator
                },
                {
                    fn VERSION(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryCalls> {
                        <VERSIONCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprNodeSafeRegistryCalls::VERSION)
                    }
                    VERSION
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::NODE_SAFE_TYPEHASH(inner) => {
                    <NODE_SAFE_TYPEHASHCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::VERSION(inner) => {
                    <VERSIONCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::deregisterNodeBySafe(inner) => {
                    <deregisterNodeBySafeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::domainSeparator(inner) => {
                    <domainSeparatorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isNodeSafeRegistered(inner) => {
                    <isNodeSafeRegisteredCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::nodeSigNonce(inner) => {
                    <nodeSigNonceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::nodeToSafe(inner) => {
                    <nodeToSafeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::registerSafeByNode(inner) => {
                    <registerSafeByNodeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::registerSafeWithNodeSig(inner) => {
                    <registerSafeWithNodeSigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateDomainSeparator(inner) => {
                    <updateDomainSeparatorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::NODE_SAFE_TYPEHASH(inner) => {
                    <NODE_SAFE_TYPEHASHCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::VERSION(inner) => {
                    <VERSIONCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::deregisterNodeBySafe(inner) => {
                    <deregisterNodeBySafeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::domainSeparator(inner) => {
                    <domainSeparatorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isNodeSafeRegistered(inner) => {
                    <isNodeSafeRegisteredCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::nodeSigNonce(inner) => {
                    <nodeSigNonceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::nodeToSafe(inner) => {
                    <nodeToSafeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::registerSafeByNode(inner) => {
                    <registerSafeByNodeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::registerSafeWithNodeSig(inner) => {
                    <registerSafeWithNodeSigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateDomainSeparator(inner) => {
                    <updateDomainSeparatorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`HoprNodeSafeRegistry`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum HoprNodeSafeRegistryErrors {
        #[allow(missing_docs)]
        NodeAddressZero(NodeAddressZero),
        #[allow(missing_docs)]
        NodeHasSafe(NodeHasSafe),
        #[allow(missing_docs)]
        NodeIsContract(NodeIsContract),
        #[allow(missing_docs)]
        NodeNotModuleMember(NodeNotModuleMember),
        #[allow(missing_docs)]
        NotValidSafe(NotValidSafe),
        #[allow(missing_docs)]
        NotValidSignatureFromNode(NotValidSignatureFromNode),
        #[allow(missing_docs)]
        SafeAddressZero(SafeAddressZero),
    }
    #[automatically_derived]
    impl HoprNodeSafeRegistryErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [20u8, 231u8, 146u8, 33u8],
            [86u8, 254u8, 133u8, 84u8],
            [103u8, 220u8, 48u8, 1u8],
            [125u8, 14u8, 213u8, 38u8],
            [126u8, 10u8, 124u8, 12u8],
            [180u8, 201u8, 31u8, 251u8],
            [186u8, 93u8, 126u8, 176u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for HoprNodeSafeRegistryErrors {
        const NAME: &'static str = "HoprNodeSafeRegistryErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::NodeAddressZero(_) => {
                    <NodeAddressZero as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NodeHasSafe(_) => {
                    <NodeHasSafe as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NodeIsContract(_) => {
                    <NodeIsContract as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NodeNotModuleMember(_) => {
                    <NodeNotModuleMember as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotValidSafe(_) => {
                    <NotValidSafe as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotValidSignatureFromNode(_) => {
                    <NotValidSignatureFromNode as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SafeAddressZero(_) => {
                    <SafeAddressZero as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<HoprNodeSafeRegistryErrors>] = &[
                {
                    fn SafeAddressZero(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryErrors> {
                        <SafeAddressZero as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(HoprNodeSafeRegistryErrors::SafeAddressZero)
                    }
                    SafeAddressZero
                },
                {
                    fn NotValidSafe(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryErrors> {
                        <NotValidSafe as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(HoprNodeSafeRegistryErrors::NotValidSafe)
                    }
                    NotValidSafe
                },
                {
                    fn NodeHasSafe(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryErrors> {
                        <NodeHasSafe as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(HoprNodeSafeRegistryErrors::NodeHasSafe)
                    }
                    NodeHasSafe
                },
                {
                    fn NodeAddressZero(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryErrors> {
                        <NodeAddressZero as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(HoprNodeSafeRegistryErrors::NodeAddressZero)
                    }
                    NodeAddressZero
                },
                {
                    fn NodeIsContract(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryErrors> {
                        <NodeIsContract as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(HoprNodeSafeRegistryErrors::NodeIsContract)
                    }
                    NodeIsContract
                },
                {
                    fn NotValidSignatureFromNode(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryErrors> {
                        <NotValidSignatureFromNode as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(HoprNodeSafeRegistryErrors::NotValidSignatureFromNode)
                    }
                    NotValidSignatureFromNode
                },
                {
                    fn NodeNotModuleMember(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryErrors> {
                        <NodeNotModuleMember as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(HoprNodeSafeRegistryErrors::NodeNotModuleMember)
                    }
                    NodeNotModuleMember
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<HoprNodeSafeRegistryErrors>] = &[
                {
                    fn SafeAddressZero(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryErrors> {
                        <SafeAddressZero as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprNodeSafeRegistryErrors::SafeAddressZero)
                    }
                    SafeAddressZero
                },
                {
                    fn NotValidSafe(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryErrors> {
                        <NotValidSafe as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprNodeSafeRegistryErrors::NotValidSafe)
                    }
                    NotValidSafe
                },
                {
                    fn NodeHasSafe(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryErrors> {
                        <NodeHasSafe as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprNodeSafeRegistryErrors::NodeHasSafe)
                    }
                    NodeHasSafe
                },
                {
                    fn NodeAddressZero(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryErrors> {
                        <NodeAddressZero as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprNodeSafeRegistryErrors::NodeAddressZero)
                    }
                    NodeAddressZero
                },
                {
                    fn NodeIsContract(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryErrors> {
                        <NodeIsContract as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprNodeSafeRegistryErrors::NodeIsContract)
                    }
                    NodeIsContract
                },
                {
                    fn NotValidSignatureFromNode(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryErrors> {
                        <NotValidSignatureFromNode as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprNodeSafeRegistryErrors::NotValidSignatureFromNode)
                    }
                    NotValidSignatureFromNode
                },
                {
                    fn NodeNotModuleMember(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<HoprNodeSafeRegistryErrors> {
                        <NodeNotModuleMember as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprNodeSafeRegistryErrors::NodeNotModuleMember)
                    }
                    NodeNotModuleMember
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::NodeAddressZero(inner) => {
                    <NodeAddressZero as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NodeHasSafe(inner) => {
                    <NodeHasSafe as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::NodeIsContract(inner) => {
                    <NodeIsContract as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NodeNotModuleMember(inner) => {
                    <NodeNotModuleMember as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotValidSafe(inner) => {
                    <NotValidSafe as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::NotValidSignatureFromNode(inner) => {
                    <NotValidSignatureFromNode as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SafeAddressZero(inner) => {
                    <SafeAddressZero as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::NodeAddressZero(inner) => {
                    <NodeAddressZero as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NodeHasSafe(inner) => {
                    <NodeHasSafe as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NodeIsContract(inner) => {
                    <NodeIsContract as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NodeNotModuleMember(inner) => {
                    <NodeNotModuleMember as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotValidSafe(inner) => {
                    <NotValidSafe as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotValidSignatureFromNode(inner) => {
                    <NotValidSignatureFromNode as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SafeAddressZero(inner) => {
                    <SafeAddressZero as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`HoprNodeSafeRegistry`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum HoprNodeSafeRegistryEvents {
        #[allow(missing_docs)]
        DergisteredNodeSafe(DergisteredNodeSafe),
        #[allow(missing_docs)]
        DomainSeparatorUpdated(DomainSeparatorUpdated),
        #[allow(missing_docs)]
        RegisteredNodeSafe(RegisteredNodeSafe),
    }
    #[automatically_derived]
    impl HoprNodeSafeRegistryEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                119u8, 31u8, 82u8, 64u8, 174u8, 95u8, 216u8, 167u8, 100u8, 13u8, 63u8,
                184u8, 47u8, 167u8, 10u8, 171u8, 47u8, 177u8, 219u8, 243u8, 95u8, 46u8,
                244u8, 100u8, 248u8, 80u8, 153u8, 70u8, 113u8, 118u8, 100u8, 197u8,
            ],
            [
                119u8, 109u8, 164u8, 12u8, 191u8, 44u8, 34u8, 53u8, 82u8, 102u8, 27u8,
                212u8, 133u8, 2u8, 206u8, 183u8, 36u8, 9u8, 179u8, 54u8, 43u8, 176u8,
                198u8, 109u8, 137u8, 137u8, 189u8, 126u8, 32u8, 228u8, 73u8, 125u8,
            ],
            [
                232u8, 55u8, 243u8, 57u8, 99u8, 146u8, 150u8, 190u8, 201u8, 244u8, 188u8,
                152u8, 97u8, 84u8, 245u8, 255u8, 118u8, 187u8, 190u8, 252u8, 49u8, 73u8,
                165u8, 18u8, 146u8, 14u8, 19u8, 17u8, 65u8, 78u8, 61u8, 161u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for HoprNodeSafeRegistryEvents {
        const NAME: &'static str = "HoprNodeSafeRegistryEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <DergisteredNodeSafe as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DergisteredNodeSafe as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::DergisteredNodeSafe)
                }
                Some(
                    <DomainSeparatorUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DomainSeparatorUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::DomainSeparatorUpdated)
                }
                Some(
                    <RegisteredNodeSafe as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RegisteredNodeSafe as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RegisteredNodeSafe)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for HoprNodeSafeRegistryEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::DergisteredNodeSafe(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DomainSeparatorUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RegisteredNodeSafe(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::DergisteredNodeSafe(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DomainSeparatorUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RegisteredNodeSafe(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`HoprNodeSafeRegistry`](self) contract instance.

See the [wrapper's documentation](`HoprNodeSafeRegistryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> HoprNodeSafeRegistryInstance<P, N> {
        HoprNodeSafeRegistryInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<HoprNodeSafeRegistryInstance<P, N>>,
    > {
        HoprNodeSafeRegistryInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        HoprNodeSafeRegistryInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`HoprNodeSafeRegistry`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`HoprNodeSafeRegistry`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct HoprNodeSafeRegistryInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for HoprNodeSafeRegistryInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("HoprNodeSafeRegistryInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > HoprNodeSafeRegistryInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`HoprNodeSafeRegistry`](self) contract instance.

See the [wrapper's documentation](`HoprNodeSafeRegistryInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<HoprNodeSafeRegistryInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> HoprNodeSafeRegistryInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> HoprNodeSafeRegistryInstance<P, N> {
            HoprNodeSafeRegistryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > HoprNodeSafeRegistryInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`NODE_SAFE_TYPEHASH`] function.
        pub fn NODE_SAFE_TYPEHASH(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, NODE_SAFE_TYPEHASHCall, N> {
            self.call_builder(&NODE_SAFE_TYPEHASHCall)
        }
        ///Creates a new call builder for the [`VERSION`] function.
        pub fn VERSION(&self) -> alloy_contract::SolCallBuilder<&P, VERSIONCall, N> {
            self.call_builder(&VERSIONCall)
        }
        ///Creates a new call builder for the [`deregisterNodeBySafe`] function.
        pub fn deregisterNodeBySafe(
            &self,
            nodeAddr: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, deregisterNodeBySafeCall, N> {
            self.call_builder(
                &deregisterNodeBySafeCall {
                    nodeAddr,
                },
            )
        }
        ///Creates a new call builder for the [`domainSeparator`] function.
        pub fn domainSeparator(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, domainSeparatorCall, N> {
            self.call_builder(&domainSeparatorCall)
        }
        ///Creates a new call builder for the [`isNodeSafeRegistered`] function.
        pub fn isNodeSafeRegistered(
            &self,
            safeAddress: alloy::sol_types::private::Address,
            nodeChainKeyAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, isNodeSafeRegisteredCall, N> {
            self.call_builder(
                &isNodeSafeRegisteredCall {
                    safeAddress,
                    nodeChainKeyAddress,
                },
            )
        }
        ///Creates a new call builder for the [`nodeSigNonce`] function.
        pub fn nodeSigNonce(
            &self,
            nodeAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, nodeSigNonceCall, N> {
            self.call_builder(&nodeSigNonceCall { nodeAddress })
        }
        ///Creates a new call builder for the [`nodeToSafe`] function.
        pub fn nodeToSafe(
            &self,
            nodeAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, nodeToSafeCall, N> {
            self.call_builder(&nodeToSafeCall { nodeAddress })
        }
        ///Creates a new call builder for the [`registerSafeByNode`] function.
        pub fn registerSafeByNode(
            &self,
            safeAddr: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, registerSafeByNodeCall, N> {
            self.call_builder(&registerSafeByNodeCall { safeAddr })
        }
        ///Creates a new call builder for the [`registerSafeWithNodeSig`] function.
        pub fn registerSafeWithNodeSig(
            &self,
            safeAddress: alloy::sol_types::private::Address,
            nodeChainKeyAddress: alloy::sol_types::private::Address,
            sig: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, registerSafeWithNodeSigCall, N> {
            self.call_builder(
                &registerSafeWithNodeSigCall {
                    safeAddress,
                    nodeChainKeyAddress,
                    sig,
                },
            )
        }
        ///Creates a new call builder for the [`updateDomainSeparator`] function.
        pub fn updateDomainSeparator(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, updateDomainSeparatorCall, N> {
            self.call_builder(&updateDomainSeparatorCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > HoprNodeSafeRegistryInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`DergisteredNodeSafe`] event.
        pub fn DergisteredNodeSafe_filter(
            &self,
        ) -> alloy_contract::Event<&P, DergisteredNodeSafe, N> {
            self.event_filter::<DergisteredNodeSafe>()
        }
        ///Creates a new event filter for the [`DomainSeparatorUpdated`] event.
        pub fn DomainSeparatorUpdated_filter(
            &self,
        ) -> alloy_contract::Event<&P, DomainSeparatorUpdated, N> {
            self.event_filter::<DomainSeparatorUpdated>()
        }
        ///Creates a new event filter for the [`RegisteredNodeSafe`] event.
        pub fn RegisteredNodeSafe_filter(
            &self,
        ) -> alloy_contract::Event<&P, RegisteredNodeSafe, N> {
            self.event_filter::<RegisteredNodeSafe>()
        }
    }
}
