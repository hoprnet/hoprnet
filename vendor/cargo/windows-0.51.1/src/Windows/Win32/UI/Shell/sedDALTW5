#[cfg(feature = "Win32_UI_Shell_Common")]
pub mod Common;
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
pub mod PropertiesSystem;
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn AssocCreate<T>(clsid: ::windows_core::GUID) -> ::windows_core::Result<T>
where
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn AssocCreate(clsid : ::windows_core::GUID, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    AssocCreate(::core::mem::transmute(clsid), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Registry\"`*"]
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn AssocCreateForClasses<T>(rgclasses: &[ASSOCIATIONELEMENT]) -> ::windows_core::Result<T>
where
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn AssocCreateForClasses(rgclasses : *const ASSOCIATIONELEMENT, cclasses : u32, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    AssocCreateForClasses(::core::mem::transmute(rgclasses.as_ptr()), rgclasses.len() as _, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_Shell_PropertiesSystem\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
#[inline]
pub unsafe fn AssocGetDetailsOfPropKey<P0>(psf: P0, pidl: *const Common::ITEMIDLIST, pkey: *const PropertiesSystem::PROPERTYKEY, pv: *mut super::super::System::Variant::VARIANT, pffoundpropkey: ::core::option::Option<*mut super::super::Foundation::BOOL>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<IShellFolder>,
{
    ::windows_targets::link!("shell32.dll" "system" fn AssocGetDetailsOfPropKey(psf : * mut::core::ffi::c_void, pidl : *const Common:: ITEMIDLIST, pkey : *const PropertiesSystem:: PROPERTYKEY, pv : *mut super::super::System::Variant:: VARIANT, pffoundpropkey : *mut super::super::Foundation:: BOOL) -> ::windows_core::HRESULT);
    AssocGetDetailsOfPropKey(psf.into_param().abi(), pidl, pkey, pv, ::core::mem::transmute(pffoundpropkey.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn AssocGetPerceivedType<P0>(pszext: P0, ptype: *mut Common::PERCEIVED, pflag: *mut u32, ppsztype: ::core::option::Option<*mut ::windows_core::PWSTR>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn AssocGetPerceivedType(pszext : ::windows_core::PCWSTR, ptype : *mut Common:: PERCEIVED, pflag : *mut u32, ppsztype : *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    AssocGetPerceivedType(pszext.into_param().abi(), ptype, pflag, ::core::mem::transmute(ppsztype.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn AssocIsDangerous<P0>(pszassoc: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn AssocIsDangerous(pszassoc : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    AssocIsDangerous(pszassoc.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Registry\"`*"]
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn AssocQueryKeyA<P0, P1>(flags: ASSOCF, key: ASSOCKEY, pszassoc: P0, pszextra: P1) -> ::windows_core::Result<super::super::System::Registry::HKEY>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn AssocQueryKeyA(flags : ASSOCF, key : ASSOCKEY, pszassoc : ::windows_core::PCSTR, pszextra : ::windows_core::PCSTR, phkeyout : *mut super::super::System::Registry:: HKEY) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    AssocQueryKeyA(flags, key, pszassoc.into_param().abi(), pszextra.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Registry\"`*"]
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn AssocQueryKeyW<P0, P1>(flags: ASSOCF, key: ASSOCKEY, pszassoc: P0, pszextra: P1) -> ::windows_core::Result<super::super::System::Registry::HKEY>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn AssocQueryKeyW(flags : ASSOCF, key : ASSOCKEY, pszassoc : ::windows_core::PCWSTR, pszextra : ::windows_core::PCWSTR, phkeyout : *mut super::super::System::Registry:: HKEY) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    AssocQueryKeyW(flags, key, pszassoc.into_param().abi(), pszextra.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn AssocQueryStringA<P0, P1>(flags: ASSOCF, str: ASSOCSTR, pszassoc: P0, pszextra: P1, pszout: ::windows_core::PSTR, pcchout: *mut u32) -> ::windows_core::HRESULT
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn AssocQueryStringA(flags : ASSOCF, str : ASSOCSTR, pszassoc : ::windows_core::PCSTR, pszextra : ::windows_core::PCSTR, pszout : ::windows_core::PSTR, pcchout : *mut u32) -> ::windows_core::HRESULT);
    AssocQueryStringA(flags, str, pszassoc.into_param().abi(), pszextra.into_param().abi(), ::core::mem::transmute(pszout), pcchout)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Registry\"`*"]
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn AssocQueryStringByKeyA<P0, P1>(flags: ASSOCF, str: ASSOCSTR, hkassoc: P0, pszextra: P1, pszout: ::windows_core::PSTR, pcchout: *mut u32) -> ::windows_core::HRESULT
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn AssocQueryStringByKeyA(flags : ASSOCF, str : ASSOCSTR, hkassoc : super::super::System::Registry:: HKEY, pszextra : ::windows_core::PCSTR, pszout : ::windows_core::PSTR, pcchout : *mut u32) -> ::windows_core::HRESULT);
    AssocQueryStringByKeyA(flags, str, hkassoc.into_param().abi(), pszextra.into_param().abi(), ::core::mem::transmute(pszout), pcchout)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Registry\"`*"]
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn AssocQueryStringByKeyW<P0, P1>(flags: ASSOCF, str: ASSOCSTR, hkassoc: P0, pszextra: P1, pszout: ::windows_core::PWSTR, pcchout: *mut u32) -> ::windows_core::HRESULT
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn AssocQueryStringByKeyW(flags : ASSOCF, str : ASSOCSTR, hkassoc : super::super::System::Registry:: HKEY, pszextra : ::windows_core::PCWSTR, pszout : ::windows_core::PWSTR, pcchout : *mut u32) -> ::windows_core::HRESULT);
    AssocQueryStringByKeyW(flags, str, hkassoc.into_param().abi(), pszextra.into_param().abi(), ::core::mem::transmute(pszout), pcchout)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn AssocQueryStringW<P0, P1>(flags: ASSOCF, str: ASSOCSTR, pszassoc: P0, pszextra: P1, pszout: ::windows_core::PWSTR, pcchout: *mut u32) -> ::windows_core::HRESULT
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn AssocQueryStringW(flags : ASSOCF, str : ASSOCSTR, pszassoc : ::windows_core::PCWSTR, pszextra : ::windows_core::PCWSTR, pszout : ::windows_core::PWSTR, pcchout : *mut u32) -> ::windows_core::HRESULT);
    AssocQueryStringW(flags, str, pszassoc.into_param().abi(), pszextra.into_param().abi(), ::core::mem::transmute(pszout), pcchout)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Registry\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn CDefFolderMenu_Create2<P0, P1>(pidlfolder: ::core::option::Option<*const Common::ITEMIDLIST>, hwnd: P0, apidl: ::core::option::Option<&[*const Common::ITEMIDLIST]>, psf: P1, pfn: LPFNDFMCALLBACK, ahkeys: ::core::option::Option<&[super::super::System::Registry::HKEY]>) -> ::windows_core::Result<IContextMenu>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<IShellFolder>,
{
    ::windows_targets::link!("shell32.dll" "system" fn CDefFolderMenu_Create2(pidlfolder : *const Common:: ITEMIDLIST, hwnd : super::super::Foundation:: HWND, cidl : u32, apidl : *const *const Common:: ITEMIDLIST, psf : * mut::core::ffi::c_void, pfn : LPFNDFMCALLBACK, nkeys : u32, ahkeys : *const super::super::System::Registry:: HKEY, ppcm : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    CDefFolderMenu_Create2(::core::mem::transmute(pidlfolder.unwrap_or(::std::ptr::null())), hwnd.into_param().abi(), apidl.as_deref().map_or(0, |slice| slice.len() as _), ::core::mem::transmute(apidl.as_deref().map_or(::core::ptr::null(), |slice| slice.as_ptr())), psf.into_param().abi(), pfn, ahkeys.as_deref().map_or(0, |slice| slice.len() as _), ::core::mem::transmute(ahkeys.as_deref().map_or(::core::ptr::null(), |slice| slice.as_ptr())), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn CIDLData_CreateFromIDArray(pidlfolder: *const Common::ITEMIDLIST, apidl: ::core::option::Option<&[*const Common::ITEMIDLIST]>) -> ::windows_core::Result<super::super::System::Com::IDataObject> {
    ::windows_targets::link!("shell32.dll" "system" fn CIDLData_CreateFromIDArray(pidlfolder : *const Common:: ITEMIDLIST, cidl : u32, apidl : *const *const Common:: ITEMIDLIST, ppdtobj : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    CIDLData_CreateFromIDArray(pidlfolder, apidl.as_deref().map_or(0, |slice| slice.len() as _), ::core::mem::transmute(apidl.as_deref().map_or(::core::ptr::null(), |slice| slice.as_ptr())), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ChrCmpIA(w1: u16, w2: u16) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn ChrCmpIA(w1 : u16, w2 : u16) -> super::super::Foundation:: BOOL);
    ChrCmpIA(w1, w2)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ChrCmpIW(w1: u16, w2: u16) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn ChrCmpIW(w1 : u16, w2 : u16) -> super::super::Foundation:: BOOL);
    ChrCmpIW(w1, w2)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ColorAdjustLuma<P0, P1>(clrrgb: P0, n: i32, fscale: P1) -> super::super::Foundation::COLORREF
where
    P0: ::windows_core::IntoParam<super::super::Foundation::COLORREF>,
    P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn ColorAdjustLuma(clrrgb : super::super::Foundation:: COLORREF, n : i32, fscale : super::super::Foundation:: BOOL) -> super::super::Foundation:: COLORREF);
    ColorAdjustLuma(clrrgb.into_param().abi(), n, fscale.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ColorHLSToRGB(whue: u16, wluminance: u16, wsaturation: u16) -> super::super::Foundation::COLORREF {
    ::windows_targets::link!("shlwapi.dll" "system" fn ColorHLSToRGB(whue : u16, wluminance : u16, wsaturation : u16) -> super::super::Foundation:: COLORREF);
    ColorHLSToRGB(whue, wluminance, wsaturation)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ColorRGBToHLS<P0>(clrrgb: P0, pwhue: *mut u16, pwluminance: *mut u16, pwsaturation: *mut u16)
where
    P0: ::windows_core::IntoParam<super::super::Foundation::COLORREF>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn ColorRGBToHLS(clrrgb : super::super::Foundation:: COLORREF, pwhue : *mut u16, pwluminance : *mut u16, pwsaturation : *mut u16) -> ());
    ColorRGBToHLS(clrrgb.into_param().abi(), pwhue, pwluminance, pwsaturation)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn CommandLineToArgvW<P0>(lpcmdline: P0, pnumargs: *mut i32) -> *mut ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn CommandLineToArgvW(lpcmdline : ::windows_core::PCWSTR, pnumargs : *mut i32) -> *mut ::windows_core::PWSTR);
    CommandLineToArgvW(lpcmdline.into_param().abi(), pnumargs)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
#[inline]
pub unsafe fn ConnectToConnectionPoint<P0, P1, P2>(punk: P0, riidevent: *const ::windows_core::GUID, fconnect: P1, punktarget: P2, pdwcookie: *mut u32, ppcpout: ::core::option::Option<*mut ::core::option::Option<super::super::System::Com::IConnectionPoint>>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    P2: ::windows_core::IntoParam<::windows_core::IUnknown>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn ConnectToConnectionPoint(punk : * mut::core::ffi::c_void, riidevent : *const ::windows_core::GUID, fconnect : super::super::Foundation:: BOOL, punktarget : * mut::core::ffi::c_void, pdwcookie : *mut u32, ppcpout : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    ConnectToConnectionPoint(punk.into_param().abi(), riidevent, fconnect.into_param().abi(), punktarget.into_param().abi(), pdwcookie, ::core::mem::transmute(ppcpout.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn CreateProfile<P0, P1>(pszusersid: P0, pszusername: P1, pszprofilepath: &mut [u16]) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("userenv.dll" "system" fn CreateProfile(pszusersid : ::windows_core::PCWSTR, pszusername : ::windows_core::PCWSTR, pszprofilepath : ::windows_core::PWSTR, cchprofilepath : u32) -> ::windows_core::HRESULT);
    CreateProfile(pszusersid.into_param().abi(), pszusername.into_param().abi(), ::core::mem::transmute(pszprofilepath.as_ptr()), pszprofilepath.len() as _).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn DAD_AutoScroll<P0>(hwnd: P0, pad: *mut AUTO_SCROLL_DATA, pptnow: *const super::super::Foundation::POINT) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
{
    ::windows_targets::link!("shell32.dll" "system" fn DAD_AutoScroll(hwnd : super::super::Foundation:: HWND, pad : *mut AUTO_SCROLL_DATA, pptnow : *const super::super::Foundation:: POINT) -> super::super::Foundation:: BOOL);
    DAD_AutoScroll(hwnd.into_param().abi(), pad, pptnow)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn DAD_DragEnterEx<P0>(hwndtarget: P0, ptstart: super::super::Foundation::POINT) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
{
    ::windows_targets::link!("shell32.dll" "system" fn DAD_DragEnterEx(hwndtarget : super::super::Foundation:: HWND, ptstart : super::super::Foundation:: POINT) -> super::super::Foundation:: BOOL);
    DAD_DragEnterEx(hwndtarget.into_param().abi(), ::core::mem::transmute(ptstart))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
#[inline]
pub unsafe fn DAD_DragEnterEx2<P0, P1>(hwndtarget: P0, ptstart: super::super::Foundation::POINT, pdtobject: P1) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
{
    ::windows_targets::link!("shell32.dll" "system" fn DAD_DragEnterEx2(hwndtarget : super::super::Foundation:: HWND, ptstart : super::super::Foundation:: POINT, pdtobject : * mut::core::ffi::c_void) -> super::super::Foundation:: BOOL);
    DAD_DragEnterEx2(hwndtarget.into_param().abi(), ::core::mem::transmute(ptstart), pdtobject.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn DAD_DragLeave() -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shell32.dll" "system" fn DAD_DragLeave() -> super::super::Foundation:: BOOL);
    DAD_DragLeave()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn DAD_DragMove(pt: super::super::Foundation::POINT) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shell32.dll" "system" fn DAD_DragMove(pt : super::super::Foundation:: POINT) -> super::super::Foundation:: BOOL);
    DAD_DragMove(::core::mem::transmute(pt))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Controls\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls"))]
#[inline]
pub unsafe fn DAD_SetDragImage<P0>(him: P0, pptoffset: *mut super::super::Foundation::POINT) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::Controls::HIMAGELIST>,
{
    ::windows_targets::link!("shell32.dll" "system" fn DAD_SetDragImage(him : super::Controls:: HIMAGELIST, pptoffset : *mut super::super::Foundation:: POINT) -> super::super::Foundation:: BOOL);
    DAD_SetDragImage(him.into_param().abi(), pptoffset)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn DAD_ShowDragImage<P0>(fshow: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shell32.dll" "system" fn DAD_ShowDragImage(fshow : super::super::Foundation:: BOOL) -> super::super::Foundation:: BOOL);
    DAD_ShowDragImage(fshow.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn DefSubclassProc<P0, P1, P2>(hwnd: P0, umsg: u32, wparam: P1, lparam: P2) -> super::super::Foundation::LRESULT
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
    P2: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
{
    ::windows_targets::link!("comctl32.dll" "system" fn DefSubclassProc(hwnd : super::super::Foundation:: HWND, umsg : u32, wparam : super::super::Foundation:: WPARAM, lparam : super::super::Foundation:: LPARAM) -> super::super::Foundation:: LRESULT);
    DefSubclassProc(hwnd.into_param().abi(), umsg, wparam.into_param().abi(), lparam.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn DeleteProfileA<P0, P1, P2>(lpsidstring: P0, lpprofilepath: P1, lpcomputername: P2) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("userenv.dll" "system" fn DeleteProfileA(lpsidstring : ::windows_core::PCSTR, lpprofilepath : ::windows_core::PCSTR, lpcomputername : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    DeleteProfileA(lpsidstring.into_param().abi(), lpprofilepath.into_param().abi(), lpcomputername.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn DeleteProfileW<P0, P1, P2>(lpsidstring: P0, lpprofilepath: P1, lpcomputername: P2) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("userenv.dll" "system" fn DeleteProfileW(lpsidstring : ::windows_core::PCWSTR, lpprofilepath : ::windows_core::PCWSTR, lpcomputername : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    DeleteProfileW(lpsidstring.into_param().abi(), lpprofilepath.into_param().abi(), lpcomputername.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn DoEnvironmentSubstA(pszsrc: &mut [u8]) -> u32 {
    ::windows_targets::link!("shell32.dll" "system" fn DoEnvironmentSubstA(pszsrc : ::windows_core::PSTR, cchsrc : u32) -> u32);
    DoEnvironmentSubstA(::core::mem::transmute(pszsrc.as_ptr()), pszsrc.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn DoEnvironmentSubstW(pszsrc: &mut [u16]) -> u32 {
    ::windows_targets::link!("shell32.dll" "system" fn DoEnvironmentSubstW(pszsrc : ::windows_core::PWSTR, cchsrc : u32) -> u32);
    DoEnvironmentSubstW(::core::mem::transmute(pszsrc.as_ptr()), pszsrc.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn DragAcceptFiles<P0, P1>(hwnd: P0, faccept: P1)
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shell32.dll" "system" fn DragAcceptFiles(hwnd : super::super::Foundation:: HWND, faccept : super::super::Foundation:: BOOL) -> ());
    DragAcceptFiles(hwnd.into_param().abi(), faccept.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn DragFinish<P0>(hdrop: P0)
where
    P0: ::windows_core::IntoParam<HDROP>,
{
    ::windows_targets::link!("shell32.dll" "system" fn DragFinish(hdrop : HDROP) -> ());
    DragFinish(hdrop.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn DragQueryFileA<P0>(hdrop: P0, ifile: u32, lpszfile: ::core::option::Option<&mut [u8]>) -> u32
where
    P0: ::windows_core::IntoParam<HDROP>,
{
    ::windows_targets::link!("shell32.dll" "system" fn DragQueryFileA(hdrop : HDROP, ifile : u32, lpszfile : ::windows_core::PSTR, cch : u32) -> u32);
    DragQueryFileA(hdrop.into_param().abi(), ifile, ::core::mem::transmute(lpszfile.as_deref().map_or(::core::ptr::null(), |slice| slice.as_ptr())), lpszfile.as_deref().map_or(0, |slice| slice.len() as _))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn DragQueryFileW<P0>(hdrop: P0, ifile: u32, lpszfile: ::core::option::Option<&mut [u16]>) -> u32
where
    P0: ::windows_core::IntoParam<HDROP>,
{
    ::windows_targets::link!("shell32.dll" "system" fn DragQueryFileW(hdrop : HDROP, ifile : u32, lpszfile : ::windows_core::PWSTR, cch : u32) -> u32);
    DragQueryFileW(hdrop.into_param().abi(), ifile, ::core::mem::transmute(lpszfile.as_deref().map_or(::core::ptr::null(), |slice| slice.as_ptr())), lpszfile.as_deref().map_or(0, |slice| slice.len() as _))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn DragQueryPoint<P0>(hdrop: P0, ppt: *mut super::super::Foundation::POINT) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<HDROP>,
{
    ::windows_targets::link!("shell32.dll" "system" fn DragQueryPoint(hdrop : HDROP, ppt : *mut super::super::Foundation:: POINT) -> super::super::Foundation:: BOOL);
    DragQueryPoint(hdrop.into_param().abi(), ppt)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn DriveType(idrive: i32) -> i32 {
    ::windows_targets::link!("shell32.dll" "system" fn DriveType(idrive : i32) -> i32);
    DriveType(idrive)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn DuplicateIcon<P0, P1>(hinst: P0, hicon: P1) -> super::WindowsAndMessaging::HICON
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HINSTANCE>,
    P1: ::windows_core::IntoParam<super::WindowsAndMessaging::HICON>,
{
    ::windows_targets::link!("shell32.dll" "system" fn DuplicateIcon(hinst : super::super::Foundation:: HINSTANCE, hicon : super::WindowsAndMessaging:: HICON) -> super::WindowsAndMessaging:: HICON);
    DuplicateIcon(hinst.into_param().abi(), hicon.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn ExtractAssociatedIconA<P0>(hinst: P0, psziconpath: &mut [u8; 128], piicon: *mut u16) -> super::WindowsAndMessaging::HICON
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HINSTANCE>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ExtractAssociatedIconA(hinst : super::super::Foundation:: HINSTANCE, psziconpath : ::windows_core::PSTR, piicon : *mut u16) -> super::WindowsAndMessaging:: HICON);
    ExtractAssociatedIconA(hinst.into_param().abi(), ::core::mem::transmute(psziconpath.as_ptr()), piicon)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn ExtractAssociatedIconExA<P0>(hinst: P0, psziconpath: &mut [u8; 128], piiconindex: *mut u16, piiconid: *mut u16) -> super::WindowsAndMessaging::HICON
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HINSTANCE>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ExtractAssociatedIconExA(hinst : super::super::Foundation:: HINSTANCE, psziconpath : ::windows_core::PSTR, piiconindex : *mut u16, piiconid : *mut u16) -> super::WindowsAndMessaging:: HICON);
    ExtractAssociatedIconExA(hinst.into_param().abi(), ::core::mem::transmute(psziconpath.as_ptr()), piiconindex, piiconid)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn ExtractAssociatedIconExW<P0>(hinst: P0, psziconpath: &mut [u16; 128], piiconindex: *mut u16, piiconid: *mut u16) -> super::WindowsAndMessaging::HICON
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HINSTANCE>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ExtractAssociatedIconExW(hinst : super::super::Foundation:: HINSTANCE, psziconpath : ::windows_core::PWSTR, piiconindex : *mut u16, piiconid : *mut u16) -> super::WindowsAndMessaging:: HICON);
    ExtractAssociatedIconExW(hinst.into_param().abi(), ::core::mem::transmute(psziconpath.as_ptr()), piiconindex, piiconid)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn ExtractAssociatedIconW<P0>(hinst: P0, psziconpath: &mut [u16; 128], piicon: *mut u16) -> super::WindowsAndMessaging::HICON
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HINSTANCE>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ExtractAssociatedIconW(hinst : super::super::Foundation:: HINSTANCE, psziconpath : ::windows_core::PWSTR, piicon : *mut u16) -> super::WindowsAndMessaging:: HICON);
    ExtractAssociatedIconW(hinst.into_param().abi(), ::core::mem::transmute(psziconpath.as_ptr()), piicon)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn ExtractIconA<P0, P1>(hinst: P0, pszexefilename: P1, niconindex: u32) -> super::WindowsAndMessaging::HICON
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HINSTANCE>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ExtractIconA(hinst : super::super::Foundation:: HINSTANCE, pszexefilename : ::windows_core::PCSTR, niconindex : u32) -> super::WindowsAndMessaging:: HICON);
    ExtractIconA(hinst.into_param().abi(), pszexefilename.into_param().abi(), niconindex)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
#[inline]
pub unsafe fn ExtractIconExA<P0>(lpszfile: P0, niconindex: i32, phiconlarge: ::core::option::Option<*mut super::WindowsAndMessaging::HICON>, phiconsmall: ::core::option::Option<*mut super::WindowsAndMessaging::HICON>, nicons: u32) -> u32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ExtractIconExA(lpszfile : ::windows_core::PCSTR, niconindex : i32, phiconlarge : *mut super::WindowsAndMessaging:: HICON, phiconsmall : *mut super::WindowsAndMessaging:: HICON, nicons : u32) -> u32);
    ExtractIconExA(lpszfile.into_param().abi(), niconindex, ::core::mem::transmute(phiconlarge.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(phiconsmall.unwrap_or(::std::ptr::null_mut())), nicons)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
#[inline]
pub unsafe fn ExtractIconExW<P0>(lpszfile: P0, niconindex: i32, phiconlarge: ::core::option::Option<*mut super::WindowsAndMessaging::HICON>, phiconsmall: ::core::option::Option<*mut super::WindowsAndMessaging::HICON>, nicons: u32) -> u32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ExtractIconExW(lpszfile : ::windows_core::PCWSTR, niconindex : i32, phiconlarge : *mut super::WindowsAndMessaging:: HICON, phiconsmall : *mut super::WindowsAndMessaging:: HICON, nicons : u32) -> u32);
    ExtractIconExW(lpszfile.into_param().abi(), niconindex, ::core::mem::transmute(phiconlarge.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(phiconsmall.unwrap_or(::std::ptr::null_mut())), nicons)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn ExtractIconW<P0, P1>(hinst: P0, pszexefilename: P1, niconindex: u32) -> super::WindowsAndMessaging::HICON
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HINSTANCE>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ExtractIconW(hinst : super::super::Foundation:: HINSTANCE, pszexefilename : ::windows_core::PCWSTR, niconindex : u32) -> super::WindowsAndMessaging:: HICON);
    ExtractIconW(hinst.into_param().abi(), pszexefilename.into_param().abi(), niconindex)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn FindExecutableA<P0, P1>(lpfile: P0, lpdirectory: P1, lpresult: &mut [u8; 260]) -> super::super::Foundation::HINSTANCE
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn FindExecutableA(lpfile : ::windows_core::PCSTR, lpdirectory : ::windows_core::PCSTR, lpresult : ::windows_core::PSTR) -> super::super::Foundation:: HINSTANCE);
    FindExecutableA(lpfile.into_param().abi(), lpdirectory.into_param().abi(), ::core::mem::transmute(lpresult.as_ptr()))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn FindExecutableW<P0, P1>(lpfile: P0, lpdirectory: P1, lpresult: &mut [u16; 260]) -> super::super::Foundation::HINSTANCE
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn FindExecutableW(lpfile : ::windows_core::PCWSTR, lpdirectory : ::windows_core::PCWSTR, lpresult : ::windows_core::PWSTR) -> super::super::Foundation:: HINSTANCE);
    FindExecutableW(lpfile.into_param().abi(), lpdirectory.into_param().abi(), ::core::mem::transmute(lpresult.as_ptr()))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn GetAcceptLanguagesA(pszlanguages: ::windows_core::PSTR, pcchlanguages: *mut u32) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn GetAcceptLanguagesA(pszlanguages : ::windows_core::PSTR, pcchlanguages : *mut u32) -> ::windows_core::HRESULT);
    GetAcceptLanguagesA(::core::mem::transmute(pszlanguages), pcchlanguages).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn GetAcceptLanguagesW(pszlanguages: ::windows_core::PWSTR, pcchlanguages: *mut u32) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn GetAcceptLanguagesW(pszlanguages : ::windows_core::PWSTR, pcchlanguages : *mut u32) -> ::windows_core::HRESULT);
    GetAcceptLanguagesW(::core::mem::transmute(pszlanguages), pcchlanguages).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetAllUsersProfileDirectoryA(lpprofiledir: ::windows_core::PSTR, lpcchsize: *mut u32) -> ::windows_core::Result<()> {
    ::windows_targets::link!("userenv.dll" "system" fn GetAllUsersProfileDirectoryA(lpprofiledir : ::windows_core::PSTR, lpcchsize : *mut u32) -> super::super::Foundation:: BOOL);
    GetAllUsersProfileDirectoryA(::core::mem::transmute(lpprofiledir), lpcchsize).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetAllUsersProfileDirectoryW(lpprofiledir: ::windows_core::PWSTR, lpcchsize: *mut u32) -> ::windows_core::Result<()> {
    ::windows_targets::link!("userenv.dll" "system" fn GetAllUsersProfileDirectoryW(lpprofiledir : ::windows_core::PWSTR, lpcchsize : *mut u32) -> super::super::Foundation:: BOOL);
    GetAllUsersProfileDirectoryW(::core::mem::transmute(lpprofiledir), lpcchsize).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn GetCurrentProcessExplicitAppUserModelID() -> ::windows_core::Result<::windows_core::PWSTR> {
    ::windows_targets::link!("shell32.dll" "system" fn GetCurrentProcessExplicitAppUserModelID(appid : *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    GetCurrentProcessExplicitAppUserModelID(&mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetDefaultUserProfileDirectoryA(lpprofiledir: ::windows_core::PSTR, lpcchsize: *mut u32) -> ::windows_core::Result<()> {
    ::windows_targets::link!("userenv.dll" "system" fn GetDefaultUserProfileDirectoryA(lpprofiledir : ::windows_core::PSTR, lpcchsize : *mut u32) -> super::super::Foundation:: BOOL);
    GetDefaultUserProfileDirectoryA(::core::mem::transmute(lpprofiledir), lpcchsize).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetDefaultUserProfileDirectoryW(lpprofiledir: ::windows_core::PWSTR, lpcchsize: *mut u32) -> ::windows_core::Result<()> {
    ::windows_targets::link!("userenv.dll" "system" fn GetDefaultUserProfileDirectoryW(lpprofiledir : ::windows_core::PWSTR, lpcchsize : *mut u32) -> super::super::Foundation:: BOOL);
    GetDefaultUserProfileDirectoryW(::core::mem::transmute(lpprofiledir), lpcchsize).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn GetDpiForShellUIComponent(param0: SHELL_UI_COMPONENT) -> u32 {
    ::windows_targets::link!("api-ms-win-shcore-scaling-l1-1-2.dll" "system" fn GetDpiForShellUIComponent(param0 : SHELL_UI_COMPONENT) -> u32);
    GetDpiForShellUIComponent(param0)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetFileNameFromBrowse<P0, P1, P2, P3, P4>(hwnd: P0, pszfilepath: &mut [u16], pszworkingdir: P1, pszdefext: P2, pszfilters: P3, psztitle: P4) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P3: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P4: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn GetFileNameFromBrowse(hwnd : super::super::Foundation:: HWND, pszfilepath : ::windows_core::PWSTR, cchfilepath : u32, pszworkingdir : ::windows_core::PCWSTR, pszdefext : ::windows_core::PCWSTR, pszfilters : ::windows_core::PCWSTR, psztitle : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    GetFileNameFromBrowse(hwnd.into_param().abi(), ::core::mem::transmute(pszfilepath.as_ptr()), pszfilepath.len() as _, pszworkingdir.into_param().abi(), pszdefext.into_param().abi(), pszfilters.into_param().abi(), psztitle.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
#[inline]
pub unsafe fn GetMenuContextHelpId<P0>(param0: P0) -> u32
where
    P0: ::windows_core::IntoParam<super::WindowsAndMessaging::HMENU>,
{
    ::windows_targets::link!("user32.dll" "system" fn GetMenuContextHelpId(param0 : super::WindowsAndMessaging:: HMENU) -> u32);
    GetMenuContextHelpId(param0.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
#[inline]
pub unsafe fn GetMenuPosFromID<P0>(hmenu: P0, id: u32) -> i32
where
    P0: ::windows_core::IntoParam<super::WindowsAndMessaging::HMENU>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn GetMenuPosFromID(hmenu : super::WindowsAndMessaging:: HMENU, id : u32) -> i32);
    GetMenuPosFromID(hmenu.into_param().abi(), id)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetProfileType(dwflags: *mut u32) -> ::windows_core::Result<()> {
    ::windows_targets::link!("userenv.dll" "system" fn GetProfileType(dwflags : *mut u32) -> super::super::Foundation:: BOOL);
    GetProfileType(dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetProfilesDirectoryA(lpprofiledir: ::windows_core::PSTR, lpcchsize: *mut u32) -> ::windows_core::Result<()> {
    ::windows_targets::link!("userenv.dll" "system" fn GetProfilesDirectoryA(lpprofiledir : ::windows_core::PSTR, lpcchsize : *mut u32) -> super::super::Foundation:: BOOL);
    GetProfilesDirectoryA(::core::mem::transmute(lpprofiledir), lpcchsize).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetProfilesDirectoryW(lpprofiledir: ::windows_core::PWSTR, lpcchsize: *mut u32) -> ::windows_core::Result<()> {
    ::windows_targets::link!("userenv.dll" "system" fn GetProfilesDirectoryW(lpprofiledir : ::windows_core::PWSTR, lpcchsize : *mut u32) -> super::super::Foundation:: BOOL);
    GetProfilesDirectoryW(::core::mem::transmute(lpprofiledir), lpcchsize).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn GetScaleFactorForDevice(devicetype: DISPLAY_DEVICE_TYPE) -> Common::DEVICE_SCALE_FACTOR {
    ::windows_targets::link!("api-ms-win-shcore-scaling-l1-1-0.dll" "system" fn GetScaleFactorForDevice(devicetype : DISPLAY_DEVICE_TYPE) -> Common:: DEVICE_SCALE_FACTOR);
    GetScaleFactorForDevice(devicetype)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Graphics_Gdi", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn GetScaleFactorForMonitor<P0>(hmon: P0) -> ::windows_core::Result<Common::DEVICE_SCALE_FACTOR>
where
    P0: ::windows_core::IntoParam<super::super::Graphics::Gdi::HMONITOR>,
{
    ::windows_targets::link!("api-ms-win-shcore-scaling-l1-1-1.dll" "system" fn GetScaleFactorForMonitor(hmon : super::super::Graphics::Gdi:: HMONITOR, pscale : *mut Common:: DEVICE_SCALE_FACTOR) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    GetScaleFactorForMonitor(hmon.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetUserProfileDirectoryA<P0>(htoken: P0, lpprofiledir: ::windows_core::PSTR, lpcchsize: *mut u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
{
    ::windows_targets::link!("userenv.dll" "system" fn GetUserProfileDirectoryA(htoken : super::super::Foundation:: HANDLE, lpprofiledir : ::windows_core::PSTR, lpcchsize : *mut u32) -> super::super::Foundation:: BOOL);
    GetUserProfileDirectoryA(htoken.into_param().abi(), ::core::mem::transmute(lpprofiledir), lpcchsize).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetUserProfileDirectoryW<P0>(htoken: P0, lpprofiledir: ::windows_core::PWSTR, lpcchsize: *mut u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
{
    ::windows_targets::link!("userenv.dll" "system" fn GetUserProfileDirectoryW(htoken : super::super::Foundation:: HANDLE, lpprofiledir : ::windows_core::PWSTR, lpcchsize : *mut u32) -> super::super::Foundation:: BOOL);
    GetUserProfileDirectoryW(htoken.into_param().abi(), ::core::mem::transmute(lpprofiledir), lpcchsize).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetWindowContextHelpId<P0>(param0: P0) -> u32
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
{
    ::windows_targets::link!("user32.dll" "system" fn GetWindowContextHelpId(param0 : super::super::Foundation:: HWND) -> u32);
    GetWindowContextHelpId(param0.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn GetWindowSubclass<P0>(hwnd: P0, pfnsubclass: SUBCLASSPROC, uidsubclass: usize, pdwrefdata: ::core::option::Option<*mut usize>) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
{
    ::windows_targets::link!("comctl32.dll" "system" fn GetWindowSubclass(hwnd : super::super::Foundation:: HWND, pfnsubclass : SUBCLASSPROC, uidsubclass : usize, pdwrefdata : *mut usize) -> super::super::Foundation:: BOOL);
    GetWindowSubclass(hwnd.into_param().abi(), pfnsubclass, uidsubclass, ::core::mem::transmute(pdwrefdata.unwrap_or(::std::ptr::null_mut())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Graphics_Gdi\"`*"]
#[cfg(feature = "Win32_Graphics_Gdi")]
#[inline]
pub unsafe fn HMONITOR_UserFree(param0: *const u32, param1: *const super::super::Graphics::Gdi::HMONITOR) {
    ::windows_targets::link!("ole32.dll" "system" fn HMONITOR_UserFree(param0 : *const u32, param1 : *const super::super::Graphics::Gdi:: HMONITOR) -> ());
    HMONITOR_UserFree(param0, param1)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Graphics_Gdi\"`*"]
#[cfg(feature = "Win32_Graphics_Gdi")]
#[inline]
pub unsafe fn HMONITOR_UserFree64(param0: *const u32, param1: *const super::super::Graphics::Gdi::HMONITOR) {
    ::windows_targets::link!("ole32.dll" "system" fn HMONITOR_UserFree64(param0 : *const u32, param1 : *const super::super::Graphics::Gdi:: HMONITOR) -> ());
    HMONITOR_UserFree64(param0, param1)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Graphics_Gdi\"`*"]
#[cfg(feature = "Win32_Graphics_Gdi")]
#[inline]
pub unsafe fn HMONITOR_UserMarshal(param0: *const u32, param1: *mut u8, param2: *const super::super::Graphics::Gdi::HMONITOR) -> *mut u8 {
    ::windows_targets::link!("ole32.dll" "system" fn HMONITOR_UserMarshal(param0 : *const u32, param1 : *mut u8, param2 : *const super::super::Graphics::Gdi:: HMONITOR) -> *mut u8);
    HMONITOR_UserMarshal(param0, param1, param2)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Graphics_Gdi\"`*"]
#[cfg(feature = "Win32_Graphics_Gdi")]
#[inline]
pub unsafe fn HMONITOR_UserMarshal64(param0: *const u32, param1: *mut u8, param2: *const super::super::Graphics::Gdi::HMONITOR) -> *mut u8 {
    ::windows_targets::link!("ole32.dll" "system" fn HMONITOR_UserMarshal64(param0 : *const u32, param1 : *mut u8, param2 : *const super::super::Graphics::Gdi:: HMONITOR) -> *mut u8);
    HMONITOR_UserMarshal64(param0, param1, param2)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Graphics_Gdi\"`*"]
#[cfg(feature = "Win32_Graphics_Gdi")]
#[inline]
pub unsafe fn HMONITOR_UserSize(param0: *const u32, param1: u32, param2: *const super::super::Graphics::Gdi::HMONITOR) -> u32 {
    ::windows_targets::link!("ole32.dll" "system" fn HMONITOR_UserSize(param0 : *const u32, param1 : u32, param2 : *const super::super::Graphics::Gdi:: HMONITOR) -> u32);
    HMONITOR_UserSize(param0, param1, param2)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Graphics_Gdi\"`*"]
#[cfg(feature = "Win32_Graphics_Gdi")]
#[inline]
pub unsafe fn HMONITOR_UserSize64(param0: *const u32, param1: u32, param2: *const super::super::Graphics::Gdi::HMONITOR) -> u32 {
    ::windows_targets::link!("ole32.dll" "system" fn HMONITOR_UserSize64(param0 : *const u32, param1 : u32, param2 : *const super::super::Graphics::Gdi:: HMONITOR) -> u32);
    HMONITOR_UserSize64(param0, param1, param2)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Graphics_Gdi\"`*"]
#[cfg(feature = "Win32_Graphics_Gdi")]
#[inline]
pub unsafe fn HMONITOR_UserUnmarshal(param0: *const u32, param1: *const u8, param2: *mut super::super::Graphics::Gdi::HMONITOR) -> *mut u8 {
    ::windows_targets::link!("ole32.dll" "system" fn HMONITOR_UserUnmarshal(param0 : *const u32, param1 : *const u8, param2 : *mut super::super::Graphics::Gdi:: HMONITOR) -> *mut u8);
    HMONITOR_UserUnmarshal(param0, param1, param2)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Graphics_Gdi\"`*"]
#[cfg(feature = "Win32_Graphics_Gdi")]
#[inline]
pub unsafe fn HMONITOR_UserUnmarshal64(param0: *const u32, param1: *const u8, param2: *mut super::super::Graphics::Gdi::HMONITOR) -> *mut u8 {
    ::windows_targets::link!("ole32.dll" "system" fn HMONITOR_UserUnmarshal64(param0 : *const u32, param1 : *const u8, param2 : *mut super::super::Graphics::Gdi:: HMONITOR) -> *mut u8);
    HMONITOR_UserUnmarshal64(param0, param1, param2)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn HashData(pbdata: &[u8], pbhash: &mut [u8]) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn HashData(pbdata : *const u8, cbdata : u32, pbhash : *mut u8, cbhash : u32) -> ::windows_core::HRESULT);
    HashData(::core::mem::transmute(pbdata.as_ptr()), pbdata.len() as _, ::core::mem::transmute(pbhash.as_ptr()), pbhash.len() as _).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn HlinkClone<P0, P1, T>(pihl: P0, pihlsiteforclone: P1, dwsitedata: u32) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<IHlink>,
    P1: ::windows_core::IntoParam<IHlinkSite>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkClone(pihl : * mut::core::ffi::c_void, riid : *const ::windows_core::GUID, pihlsiteforclone : * mut::core::ffi::c_void, dwsitedata : u32, ppvobj : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    HlinkClone(pihl.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, pihlsiteforclone.into_param().abi(), dwsitedata, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn HlinkCreateBrowseContext<P0, T>(piunkouter: P0) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkCreateBrowseContext(piunkouter : * mut::core::ffi::c_void, riid : *const ::windows_core::GUID, ppvobj : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    HlinkCreateBrowseContext(piunkouter.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn HlinkCreateExtensionServices<P0, P1, P2, P3, P4, T>(pwzadditionalheaders: P0, phwnd: P1, pszusername: P2, pszpassword: P3, piunkouter: P4) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P3: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P4: ::windows_core::IntoParam<::windows_core::IUnknown>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkCreateExtensionServices(pwzadditionalheaders : ::windows_core::PCWSTR, phwnd : super::super::Foundation:: HWND, pszusername : ::windows_core::PCWSTR, pszpassword : ::windows_core::PCWSTR, piunkouter : * mut::core::ffi::c_void, riid : *const ::windows_core::GUID, ppvobj : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    HlinkCreateExtensionServices(pwzadditionalheaders.into_param().abi(), phwnd.into_param().abi(), pszusername.into_param().abi(), pszpassword.into_param().abi(), piunkouter.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn HlinkCreateFromData<P0, P1, P2, T>(pidataobj: P0, pihlsite: P1, dwsitedata: u32, piunkouter: P2) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    P1: ::windows_core::IntoParam<IHlinkSite>,
    P2: ::windows_core::IntoParam<::windows_core::IUnknown>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkCreateFromData(pidataobj : * mut::core::ffi::c_void, pihlsite : * mut::core::ffi::c_void, dwsitedata : u32, piunkouter : * mut::core::ffi::c_void, riid : *const ::windows_core::GUID, ppvobj : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    HlinkCreateFromData(pidataobj.into_param().abi(), pihlsite.into_param().abi(), dwsitedata, piunkouter.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn HlinkCreateFromMoniker<P0, P1, P2, P3, P4, T>(pimktrgt: P0, pwzlocation: P1, pwzfriendlyname: P2, pihlsite: P3, dwsitedata: u32, piunkouter: P4) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P3: ::windows_core::IntoParam<IHlinkSite>,
    P4: ::windows_core::IntoParam<::windows_core::IUnknown>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkCreateFromMoniker(pimktrgt : * mut::core::ffi::c_void, pwzlocation : ::windows_core::PCWSTR, pwzfriendlyname : ::windows_core::PCWSTR, pihlsite : * mut::core::ffi::c_void, dwsitedata : u32, piunkouter : * mut::core::ffi::c_void, riid : *const ::windows_core::GUID, ppvobj : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    HlinkCreateFromMoniker(pimktrgt.into_param().abi(), pwzlocation.into_param().abi(), pwzfriendlyname.into_param().abi(), pihlsite.into_param().abi(), dwsitedata, piunkouter.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn HlinkCreateFromString<P0, P1, P2, P3, P4, T>(pwztarget: P0, pwzlocation: P1, pwzfriendlyname: P2, pihlsite: P3, dwsitedata: u32, piunkouter: P4) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P3: ::windows_core::IntoParam<IHlinkSite>,
    P4: ::windows_core::IntoParam<::windows_core::IUnknown>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkCreateFromString(pwztarget : ::windows_core::PCWSTR, pwzlocation : ::windows_core::PCWSTR, pwzfriendlyname : ::windows_core::PCWSTR, pihlsite : * mut::core::ffi::c_void, dwsitedata : u32, piunkouter : * mut::core::ffi::c_void, riid : *const ::windows_core::GUID, ppvobj : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    HlinkCreateFromString(pwztarget.into_param().abi(), pwzlocation.into_param().abi(), pwzfriendlyname.into_param().abi(), pihlsite.into_param().abi(), dwsitedata, piunkouter.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn HlinkCreateShortcut<P0, P1, P2>(grfhlshortcutf: u32, pihl: P0, pwzdir: P1, pwzfilename: P2, ppwzshortcutfile: *mut ::windows_core::PWSTR, dwreserved: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<IHlink>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkCreateShortcut(grfhlshortcutf : u32, pihl : * mut::core::ffi::c_void, pwzdir : ::windows_core::PCWSTR, pwzfilename : ::windows_core::PCWSTR, ppwzshortcutfile : *mut ::windows_core::PWSTR, dwreserved : u32) -> ::windows_core::HRESULT);
    HlinkCreateShortcut(grfhlshortcutf, pihl.into_param().abi(), pwzdir.into_param().abi(), pwzfilename.into_param().abi(), ppwzshortcutfile, dwreserved).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn HlinkCreateShortcutFromMoniker<P0, P1, P2, P3>(grfhlshortcutf: u32, pimktarget: P0, pwzlocation: P1, pwzdir: P2, pwzfilename: P3, ppwzshortcutfile: *mut ::windows_core::PWSTR, dwreserved: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P3: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkCreateShortcutFromMoniker(grfhlshortcutf : u32, pimktarget : * mut::core::ffi::c_void, pwzlocation : ::windows_core::PCWSTR, pwzdir : ::windows_core::PCWSTR, pwzfilename : ::windows_core::PCWSTR, ppwzshortcutfile : *mut ::windows_core::PWSTR, dwreserved : u32) -> ::windows_core::HRESULT);
    HlinkCreateShortcutFromMoniker(grfhlshortcutf, pimktarget.into_param().abi(), pwzlocation.into_param().abi(), pwzdir.into_param().abi(), pwzfilename.into_param().abi(), ppwzshortcutfile, dwreserved).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn HlinkCreateShortcutFromString<P0, P1, P2, P3>(grfhlshortcutf: u32, pwztarget: P0, pwzlocation: P1, pwzdir: P2, pwzfilename: P3, ppwzshortcutfile: *mut ::windows_core::PWSTR, dwreserved: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P3: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkCreateShortcutFromString(grfhlshortcutf : u32, pwztarget : ::windows_core::PCWSTR, pwzlocation : ::windows_core::PCWSTR, pwzdir : ::windows_core::PCWSTR, pwzfilename : ::windows_core::PCWSTR, ppwzshortcutfile : *mut ::windows_core::PWSTR, dwreserved : u32) -> ::windows_core::HRESULT);
    HlinkCreateShortcutFromString(grfhlshortcutf, pwztarget.into_param().abi(), pwzlocation.into_param().abi(), pwzdir.into_param().abi(), pwzfilename.into_param().abi(), ppwzshortcutfile, dwreserved).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn HlinkGetSpecialReference(ureference: u32) -> ::windows_core::Result<::windows_core::PWSTR> {
    ::windows_targets::link!("hlink.dll" "system" fn HlinkGetSpecialReference(ureference : u32, ppwzreference : *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    HlinkGetSpecialReference(ureference, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn HlinkGetValueFromParams<P0, P1>(pwzparams: P0, pwzname: P1) -> ::windows_core::Result<::windows_core::PWSTR>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkGetValueFromParams(pwzparams : ::windows_core::PCWSTR, pwzname : ::windows_core::PCWSTR, ppwzvalue : *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    HlinkGetValueFromParams(pwzparams.into_param().abi(), pwzname.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn HlinkIsShortcut<P0>(pwzfilename: P0) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkIsShortcut(pwzfilename : ::windows_core::PCWSTR) -> ::windows_core::HRESULT);
    HlinkIsShortcut(pwzfilename.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn HlinkNavigate<P0, P1, P2, P3, P4>(pihl: P0, pihlframe: P1, grfhlnf: u32, pbc: P2, pibsc: P3, pihlbc: P4) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<IHlink>,
    P1: ::windows_core::IntoParam<IHlinkFrame>,
    P2: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
    P3: ::windows_core::IntoParam<super::super::System::Com::IBindStatusCallback>,
    P4: ::windows_core::IntoParam<IHlinkBrowseContext>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkNavigate(pihl : * mut::core::ffi::c_void, pihlframe : * mut::core::ffi::c_void, grfhlnf : u32, pbc : * mut::core::ffi::c_void, pibsc : * mut::core::ffi::c_void, pihlbc : * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    HlinkNavigate(pihl.into_param().abi(), pihlframe.into_param().abi(), grfhlnf, pbc.into_param().abi(), pibsc.into_param().abi(), pihlbc.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn HlinkNavigateToStringReference<P0, P1, P2, P3, P4, P5, P6>(pwztarget: P0, pwzlocation: P1, pihlsite: P2, dwsitedata: u32, pihlframe: P3, grfhlnf: u32, pibc: P4, pibsc: P5, pihlbc: P6) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<IHlinkSite>,
    P3: ::windows_core::IntoParam<IHlinkFrame>,
    P4: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
    P5: ::windows_core::IntoParam<super::super::System::Com::IBindStatusCallback>,
    P6: ::windows_core::IntoParam<IHlinkBrowseContext>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkNavigateToStringReference(pwztarget : ::windows_core::PCWSTR, pwzlocation : ::windows_core::PCWSTR, pihlsite : * mut::core::ffi::c_void, dwsitedata : u32, pihlframe : * mut::core::ffi::c_void, grfhlnf : u32, pibc : * mut::core::ffi::c_void, pibsc : * mut::core::ffi::c_void, pihlbc : * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    HlinkNavigateToStringReference(pwztarget.into_param().abi(), pwzlocation.into_param().abi(), pihlsite.into_param().abi(), dwsitedata, pihlframe.into_param().abi(), grfhlnf, pibc.into_param().abi(), pibsc.into_param().abi(), pihlbc.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn HlinkOnNavigate<P0, P1, P2, P3, P4>(pihlframe: P0, pihlbc: P1, grfhlnf: u32, pimktarget: P2, pwzlocation: P3, pwzfriendlyname: P4, puhlid: *mut u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<IHlinkFrame>,
    P1: ::windows_core::IntoParam<IHlinkBrowseContext>,
    P2: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
    P3: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P4: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkOnNavigate(pihlframe : * mut::core::ffi::c_void, pihlbc : * mut::core::ffi::c_void, grfhlnf : u32, pimktarget : * mut::core::ffi::c_void, pwzlocation : ::windows_core::PCWSTR, pwzfriendlyname : ::windows_core::PCWSTR, puhlid : *mut u32) -> ::windows_core::HRESULT);
    HlinkOnNavigate(pihlframe.into_param().abi(), pihlbc.into_param().abi(), grfhlnf, pimktarget.into_param().abi(), pwzlocation.into_param().abi(), pwzfriendlyname.into_param().abi(), puhlid).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn HlinkOnRenameDocument<P0, P1, P2>(dwreserved: u32, pihlbc: P0, pimkold: P1, pimknew: P2) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<IHlinkBrowseContext>,
    P1: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
    P2: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkOnRenameDocument(dwreserved : u32, pihlbc : * mut::core::ffi::c_void, pimkold : * mut::core::ffi::c_void, pimknew : * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    HlinkOnRenameDocument(dwreserved, pihlbc.into_param().abi(), pimkold.into_param().abi(), pimknew.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
#[inline]
pub unsafe fn HlinkParseDisplayName<P0, P1, P2>(pibc: P0, pwzdisplayname: P1, fnoforceabs: P2, pccheaten: *mut u32, ppimk: *mut ::core::option::Option<super::super::System::Com::IMoniker>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkParseDisplayName(pibc : * mut::core::ffi::c_void, pwzdisplayname : ::windows_core::PCWSTR, fnoforceabs : super::super::Foundation:: BOOL, pccheaten : *mut u32, ppimk : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    HlinkParseDisplayName(pibc.into_param().abi(), pwzdisplayname.into_param().abi(), fnoforceabs.into_param().abi(), pccheaten, ::core::mem::transmute(ppimk)).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn HlinkPreprocessMoniker<P0, P1>(pibc: P0, pimkin: P1) -> ::windows_core::Result<super::super::System::Com::IMoniker>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
    P1: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkPreprocessMoniker(pibc : * mut::core::ffi::c_void, pimkin : * mut::core::ffi::c_void, ppimkout : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    HlinkPreprocessMoniker(pibc.into_param().abi(), pimkin.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn HlinkQueryCreateFromData<P0>(pidataobj: P0) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkQueryCreateFromData(pidataobj : * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    HlinkQueryCreateFromData(pidataobj.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn HlinkResolveMonikerForData<P0, P1, P2, P3>(pimkreference: P0, reserved: u32, pibc: P1, cfmtetc: u32, rgfmtetc: *mut super::super::System::Com::FORMATETC, pibsc: P2, pimkbase: P3) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
    P1: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
    P2: ::windows_core::IntoParam<super::super::System::Com::IBindStatusCallback>,
    P3: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkResolveMonikerForData(pimkreference : * mut::core::ffi::c_void, reserved : u32, pibc : * mut::core::ffi::c_void, cfmtetc : u32, rgfmtetc : *mut super::super::System::Com:: FORMATETC, pibsc : * mut::core::ffi::c_void, pimkbase : * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    HlinkResolveMonikerForData(pimkreference.into_param().abi(), reserved, pibc.into_param().abi(), cfmtetc, rgfmtetc, pibsc.into_param().abi(), pimkbase.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn HlinkResolveShortcut<P0, P1, P2>(pwzshortcutfilename: P0, pihlsite: P1, dwsitedata: u32, piunkouter: P2, riid: *const ::windows_core::GUID, ppvobj: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<IHlinkSite>,
    P2: ::windows_core::IntoParam<::windows_core::IUnknown>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkResolveShortcut(pwzshortcutfilename : ::windows_core::PCWSTR, pihlsite : * mut::core::ffi::c_void, dwsitedata : u32, piunkouter : * mut::core::ffi::c_void, riid : *const ::windows_core::GUID, ppvobj : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    HlinkResolveShortcut(pwzshortcutfilename.into_param().abi(), pihlsite.into_param().abi(), dwsitedata, piunkouter.into_param().abi(), riid, ppvobj).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn HlinkResolveShortcutToMoniker<P0>(pwzshortcutfilename: P0, ppimktarget: *mut ::core::option::Option<super::super::System::Com::IMoniker>, ppwzlocation: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkResolveShortcutToMoniker(pwzshortcutfilename : ::windows_core::PCWSTR, ppimktarget : *mut * mut::core::ffi::c_void, ppwzlocation : *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    HlinkResolveShortcutToMoniker(pwzshortcutfilename.into_param().abi(), ::core::mem::transmute(ppimktarget), ppwzlocation).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn HlinkResolveShortcutToString<P0>(pwzshortcutfilename: P0, ppwztarget: *mut ::windows_core::PWSTR, ppwzlocation: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkResolveShortcutToString(pwzshortcutfilename : ::windows_core::PCWSTR, ppwztarget : *mut ::windows_core::PWSTR, ppwzlocation : *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    HlinkResolveShortcutToString(pwzshortcutfilename.into_param().abi(), ppwztarget, ppwzlocation).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn HlinkResolveStringForData<P0, P1, P2, P3>(pwzreference: P0, reserved: u32, pibc: P1, cfmtetc: u32, rgfmtetc: *mut super::super::System::Com::FORMATETC, pibsc: P2, pimkbase: P3) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
    P2: ::windows_core::IntoParam<super::super::System::Com::IBindStatusCallback>,
    P3: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkResolveStringForData(pwzreference : ::windows_core::PCWSTR, reserved : u32, pibc : * mut::core::ffi::c_void, cfmtetc : u32, rgfmtetc : *mut super::super::System::Com:: FORMATETC, pibsc : * mut::core::ffi::c_void, pimkbase : * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    HlinkResolveStringForData(pwzreference.into_param().abi(), reserved, pibc.into_param().abi(), cfmtetc, rgfmtetc, pibsc.into_param().abi(), pimkbase.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn HlinkSetSpecialReference<P0>(ureference: u32, pwzreference: P0) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkSetSpecialReference(ureference : u32, pwzreference : ::windows_core::PCWSTR) -> ::windows_core::HRESULT);
    HlinkSetSpecialReference(ureference, pwzreference.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn HlinkTranslateURL<P0>(pwzurl: P0, grfflags: u32) -> ::windows_core::Result<::windows_core::PWSTR>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkTranslateURL(pwzurl : ::windows_core::PCWSTR, grfflags : u32, ppwztranslatedurl : *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    HlinkTranslateURL(pwzurl.into_param().abi(), grfflags, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn HlinkUpdateStackItem<P0, P1, P2, P3, P4>(pihlframe: P0, pihlbc: P1, uhlid: u32, pimktrgt: P2, pwzlocation: P3, pwzfriendlyname: P4) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<IHlinkFrame>,
    P1: ::windows_core::IntoParam<IHlinkBrowseContext>,
    P2: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
    P3: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P4: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("hlink.dll" "system" fn HlinkUpdateStackItem(pihlframe : * mut::core::ffi::c_void, pihlbc : * mut::core::ffi::c_void, uhlid : u32, pimktrgt : * mut::core::ffi::c_void, pwzlocation : ::windows_core::PCWSTR, pwzfriendlyname : ::windows_core::PCWSTR) -> ::windows_core::HRESULT);
    HlinkUpdateStackItem(pihlframe.into_param().abi(), pihlbc.into_param().abi(), uhlid, pimktrgt.into_param().abi(), pwzlocation.into_param().abi(), pwzfriendlyname.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn ILAppendID<P0>(pidl: ::core::option::Option<*const Common::ITEMIDLIST>, pmkid: *const Common::SHITEMID, fappend: P0) -> *mut Common::ITEMIDLIST
where
    P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ILAppendID(pidl : *const Common:: ITEMIDLIST, pmkid : *const Common:: SHITEMID, fappend : super::super::Foundation:: BOOL) -> *mut Common:: ITEMIDLIST);
    ILAppendID(::core::mem::transmute(pidl.unwrap_or(::std::ptr::null())), pmkid, fappend.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn ILClone(pidl: *const Common::ITEMIDLIST) -> *mut Common::ITEMIDLIST {
    ::windows_targets::link!("shell32.dll" "system" fn ILClone(pidl : *const Common:: ITEMIDLIST) -> *mut Common:: ITEMIDLIST);
    ILClone(pidl)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn ILCloneFirst(pidl: *const Common::ITEMIDLIST) -> *mut Common::ITEMIDLIST {
    ::windows_targets::link!("shell32.dll" "system" fn ILCloneFirst(pidl : *const Common:: ITEMIDLIST) -> *mut Common:: ITEMIDLIST);
    ILCloneFirst(pidl)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn ILCombine(pidl1: ::core::option::Option<*const Common::ITEMIDLIST>, pidl2: ::core::option::Option<*const Common::ITEMIDLIST>) -> *mut Common::ITEMIDLIST {
    ::windows_targets::link!("shell32.dll" "system" fn ILCombine(pidl1 : *const Common:: ITEMIDLIST, pidl2 : *const Common:: ITEMIDLIST) -> *mut Common:: ITEMIDLIST);
    ILCombine(::core::mem::transmute(pidl1.unwrap_or(::std::ptr::null())), ::core::mem::transmute(pidl2.unwrap_or(::std::ptr::null())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn ILCreateFromPathA<P0>(pszpath: P0) -> *mut Common::ITEMIDLIST
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ILCreateFromPathA(pszpath : ::windows_core::PCSTR) -> *mut Common:: ITEMIDLIST);
    ILCreateFromPathA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn ILCreateFromPathW<P0>(pszpath: P0) -> *mut Common::ITEMIDLIST
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ILCreateFromPathW(pszpath : ::windows_core::PCWSTR) -> *mut Common:: ITEMIDLIST);
    ILCreateFromPathW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn ILFindChild(pidlparent: *const Common::ITEMIDLIST, pidlchild: *const Common::ITEMIDLIST) -> *mut Common::ITEMIDLIST {
    ::windows_targets::link!("shell32.dll" "system" fn ILFindChild(pidlparent : *const Common:: ITEMIDLIST, pidlchild : *const Common:: ITEMIDLIST) -> *mut Common:: ITEMIDLIST);
    ILFindChild(pidlparent, pidlchild)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn ILFindLastID(pidl: *const Common::ITEMIDLIST) -> *mut Common::ITEMIDLIST {
    ::windows_targets::link!("shell32.dll" "system" fn ILFindLastID(pidl : *const Common:: ITEMIDLIST) -> *mut Common:: ITEMIDLIST);
    ILFindLastID(pidl)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn ILFree(pidl: ::core::option::Option<*const Common::ITEMIDLIST>) {
    ::windows_targets::link!("shell32.dll" "system" fn ILFree(pidl : *const Common:: ITEMIDLIST) -> ());
    ILFree(::core::mem::transmute(pidl.unwrap_or(::std::ptr::null())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn ILGetNext(pidl: ::core::option::Option<*const Common::ITEMIDLIST>) -> *mut Common::ITEMIDLIST {
    ::windows_targets::link!("shell32.dll" "system" fn ILGetNext(pidl : *const Common:: ITEMIDLIST) -> *mut Common:: ITEMIDLIST);
    ILGetNext(::core::mem::transmute(pidl.unwrap_or(::std::ptr::null())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn ILGetSize(pidl: ::core::option::Option<*const Common::ITEMIDLIST>) -> u32 {
    ::windows_targets::link!("shell32.dll" "system" fn ILGetSize(pidl : *const Common:: ITEMIDLIST) -> u32);
    ILGetSize(::core::mem::transmute(pidl.unwrap_or(::std::ptr::null())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn ILIsEqual(pidl1: *const Common::ITEMIDLIST, pidl2: *const Common::ITEMIDLIST) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shell32.dll" "system" fn ILIsEqual(pidl1 : *const Common:: ITEMIDLIST, pidl2 : *const Common:: ITEMIDLIST) -> super::super::Foundation:: BOOL);
    ILIsEqual(pidl1, pidl2)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn ILIsParent<P0>(pidl1: *const Common::ITEMIDLIST, pidl2: *const Common::ITEMIDLIST, fimmediate: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ILIsParent(pidl1 : *const Common:: ITEMIDLIST, pidl2 : *const Common:: ITEMIDLIST, fimmediate : super::super::Foundation:: BOOL) -> super::super::Foundation:: BOOL);
    ILIsParent(pidl1, pidl2, fimmediate.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn ILLoadFromStreamEx<P0>(pstm: P0) -> ::windows_core::Result<*mut Common::ITEMIDLIST>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ILLoadFromStreamEx(pstm : * mut::core::ffi::c_void, pidl : *mut *mut Common:: ITEMIDLIST) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    ILLoadFromStreamEx(pstm.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn ILRemoveLastID(pidl: ::core::option::Option<*mut Common::ITEMIDLIST>) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shell32.dll" "system" fn ILRemoveLastID(pidl : *mut Common:: ITEMIDLIST) -> super::super::Foundation:: BOOL);
    ILRemoveLastID(::core::mem::transmute(pidl.unwrap_or(::std::ptr::null_mut())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn ILSaveToStream<P0>(pstm: P0, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ILSaveToStream(pstm : * mut::core::ffi::c_void, pidl : *const Common:: ITEMIDLIST) -> ::windows_core::HRESULT);
    ILSaveToStream(pstm.into_param().abi(), pidl).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn IStream_Copy<P0, P1>(pstmfrom: P0, pstmto: P1, cb: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
    P1: ::windows_core::IntoParam<super::super::System::Com::IStream>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn IStream_Copy(pstmfrom : * mut::core::ffi::c_void, pstmto : * mut::core::ffi::c_void, cb : u32) -> ::windows_core::HRESULT);
    IStream_Copy(pstmfrom.into_param().abi(), pstmto.into_param().abi(), cb).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn IStream_Read<P0>(pstm: P0, pv: *mut ::core::ffi::c_void, cb: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn IStream_Read(pstm : * mut::core::ffi::c_void, pv : *mut ::core::ffi::c_void, cb : u32) -> ::windows_core::HRESULT);
    IStream_Read(pstm.into_param().abi(), pv, cb).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn IStream_ReadPidl<P0>(pstm: P0) -> ::windows_core::Result<*mut Common::ITEMIDLIST>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn IStream_ReadPidl(pstm : * mut::core::ffi::c_void, ppidlout : *mut *mut Common:: ITEMIDLIST) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    IStream_ReadPidl(pstm.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn IStream_ReadStr<P0>(pstm: P0) -> ::windows_core::Result<::windows_core::PWSTR>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn IStream_ReadStr(pstm : * mut::core::ffi::c_void, ppsz : *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    IStream_ReadStr(pstm.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn IStream_Reset<P0>(pstm: P0) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn IStream_Reset(pstm : * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    IStream_Reset(pstm.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn IStream_Size<P0>(pstm: P0) -> ::windows_core::Result<u64>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn IStream_Size(pstm : * mut::core::ffi::c_void, pui : *mut u64) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    IStream_Size(pstm.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn IStream_Write<P0>(pstm: P0, pv: *const ::core::ffi::c_void, cb: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn IStream_Write(pstm : * mut::core::ffi::c_void, pv : *const ::core::ffi::c_void, cb : u32) -> ::windows_core::HRESULT);
    IStream_Write(pstm.into_param().abi(), pv, cb).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn IStream_WritePidl<P0>(pstm: P0, pidlwrite: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn IStream_WritePidl(pstm : * mut::core::ffi::c_void, pidlwrite : *const Common:: ITEMIDLIST) -> ::windows_core::HRESULT);
    IStream_WritePidl(pstm.into_param().abi(), pidlwrite).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn IStream_WriteStr<P0, P1>(pstm: P0, psz: P1) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn IStream_WriteStr(pstm : * mut::core::ffi::c_void, psz : ::windows_core::PCWSTR) -> ::windows_core::HRESULT);
    IStream_WriteStr(pstm.into_param().abi(), psz.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn IUnknown_AtomicRelease(ppunk: ::core::option::Option<*mut *mut ::core::ffi::c_void>) {
    ::windows_targets::link!("shlwapi.dll" "system" fn IUnknown_AtomicRelease(ppunk : *mut *mut ::core::ffi::c_void) -> ());
    IUnknown_AtomicRelease(::core::mem::transmute(ppunk.unwrap_or(::std::ptr::null_mut())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn IUnknown_GetSite<P0, T>(punk: P0) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn IUnknown_GetSite(punk : * mut::core::ffi::c_void, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    IUnknown_GetSite(punk.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn IUnknown_GetWindow<P0>(punk: P0) -> ::windows_core::Result<super::super::Foundation::HWND>
where
    P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn IUnknown_GetWindow(punk : * mut::core::ffi::c_void, phwnd : *mut super::super::Foundation:: HWND) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    IUnknown_GetWindow(punk.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn IUnknown_QueryService<P0, T>(punk: P0, guidservice: *const ::windows_core::GUID) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn IUnknown_QueryService(punk : * mut::core::ffi::c_void, guidservice : *const ::windows_core::GUID, riid : *const ::windows_core::GUID, ppvout : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    IUnknown_QueryService(punk.into_param().abi(), guidservice, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn IUnknown_Set<P0>(ppunk: *mut ::core::option::Option<::windows_core::IUnknown>, punk: P0)
where
    P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn IUnknown_Set(ppunk : *mut * mut::core::ffi::c_void, punk : * mut::core::ffi::c_void) -> ());
    IUnknown_Set(::core::mem::transmute(ppunk), punk.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn IUnknown_SetSite<P0, P1>(punk: P0, punksite: P1) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    P1: ::windows_core::IntoParam<::windows_core::IUnknown>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn IUnknown_SetSite(punk : * mut::core::ffi::c_void, punksite : * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    IUnknown_SetSite(punk.into_param().abi(), punksite.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ImportPrivacySettings<P0>(pszfilename: P0, pfparseprivacypreferences: *mut super::super::Foundation::BOOL, pfparsepersiterules: *mut super::super::Foundation::BOOL) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shdocvw.dll" "system" fn ImportPrivacySettings(pszfilename : ::windows_core::PCWSTR, pfparseprivacypreferences : *mut super::super::Foundation:: BOOL, pfparsepersiterules : *mut super::super::Foundation:: BOOL) -> super::super::Foundation:: BOOL);
    ImportPrivacySettings(pszfilename.into_param().abi(), pfparseprivacypreferences, pfparsepersiterules)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn InitNetworkAddressControl() -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shell32.dll" "system" fn InitNetworkAddressControl() -> super::super::Foundation:: BOOL);
    InitNetworkAddressControl()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn InitPropVariantFromStrRet(pstrret: *mut Common::STRRET, pidl: ::core::option::Option<*const Common::ITEMIDLIST>, ppropvar: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()> {
    ::windows_targets::link!("propsys.dll" "system" fn InitPropVariantFromStrRet(pstrret : *mut Common:: STRRET, pidl : *const Common:: ITEMIDLIST, ppropvar : *mut super::super::System::Com::StructuredStorage:: PROPVARIANT) -> ::windows_core::HRESULT);
    InitPropVariantFromStrRet(pstrret, ::core::mem::transmute(pidl.unwrap_or(::std::ptr::null())), ppropvar).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn InitVariantFromStrRet(pstrret: *const Common::STRRET, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<super::super::System::Variant::VARIANT> {
    ::windows_targets::link!("propsys.dll" "system" fn InitVariantFromStrRet(pstrret : *const Common:: STRRET, pidl : *const Common:: ITEMIDLIST, pvar : *mut super::super::System::Variant:: VARIANT) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    InitVariantFromStrRet(pstrret, pidl, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn IntlStrEqWorkerA<P0, P1, P2>(fcasesens: P0, lpstring1: P1, lpstring2: P2, nchar: i32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn IntlStrEqWorkerA(fcasesens : super::super::Foundation:: BOOL, lpstring1 : ::windows_core::PCSTR, lpstring2 : ::windows_core::PCSTR, nchar : i32) -> super::super::Foundation:: BOOL);
    IntlStrEqWorkerA(fcasesens.into_param().abi(), lpstring1.into_param().abi(), lpstring2.into_param().abi(), nchar)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn IntlStrEqWorkerW<P0, P1, P2>(fcasesens: P0, lpstring1: P1, lpstring2: P2, nchar: i32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn IntlStrEqWorkerW(fcasesens : super::super::Foundation:: BOOL, lpstring1 : ::windows_core::PCWSTR, lpstring2 : ::windows_core::PCWSTR, nchar : i32) -> super::super::Foundation:: BOOL);
    IntlStrEqWorkerW(fcasesens.into_param().abi(), lpstring1.into_param().abi(), lpstring2.into_param().abi(), nchar)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn IsCharSpaceA(wch: u8) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn IsCharSpaceA(wch : u8) -> super::super::Foundation:: BOOL);
    IsCharSpaceA(wch)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn IsCharSpaceW(wch: u16) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn IsCharSpaceW(wch : u16) -> super::super::Foundation:: BOOL);
    IsCharSpaceW(wch)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn IsInternetESCEnabled() -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn IsInternetESCEnabled() -> super::super::Foundation:: BOOL);
    IsInternetESCEnabled()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn IsLFNDriveA<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn IsLFNDriveA(pszpath : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    IsLFNDriveA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn IsLFNDriveW<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn IsLFNDriveW(pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    IsLFNDriveW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn IsNetDrive(idrive: i32) -> i32 {
    ::windows_targets::link!("shell32.dll" "system" fn IsNetDrive(idrive : i32) -> i32);
    IsNetDrive(idrive)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn IsOS(dwos: OS) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn IsOS(dwos : OS) -> super::super::Foundation:: BOOL);
    IsOS(dwos)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn IsUserAnAdmin() -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shell32.dll" "system" fn IsUserAnAdmin() -> super::super::Foundation:: BOOL);
    IsUserAnAdmin()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn LoadUserProfileA<P0>(htoken: P0, lpprofileinfo: *mut PROFILEINFOA) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
{
    ::windows_targets::link!("userenv.dll" "system" fn LoadUserProfileA(htoken : super::super::Foundation:: HANDLE, lpprofileinfo : *mut PROFILEINFOA) -> super::super::Foundation:: BOOL);
    LoadUserProfileA(htoken.into_param().abi(), lpprofileinfo).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn LoadUserProfileW<P0>(htoken: P0, lpprofileinfo: *mut PROFILEINFOW) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
{
    ::windows_targets::link!("userenv.dll" "system" fn LoadUserProfileW(htoken : super::super::Foundation:: HANDLE, lpprofileinfo : *mut PROFILEINFOW) -> super::super::Foundation:: BOOL);
    LoadUserProfileW(htoken.into_param().abi(), lpprofileinfo).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
#[inline]
pub unsafe fn OleSaveToStreamEx<P0, P1, P2>(piunk: P0, pistm: P1, fcleardirty: P2) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    P1: ::windows_core::IntoParam<super::super::System::Com::IStream>,
    P2: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("hlink.dll" "system" fn OleSaveToStreamEx(piunk : * mut::core::ffi::c_void, pistm : * mut::core::ffi::c_void, fcleardirty : super::super::Foundation:: BOOL) -> ::windows_core::HRESULT);
    OleSaveToStreamEx(piunk.into_param().abi(), pistm.into_param().abi(), fcleardirty.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn OpenRegStream<P0, P1, P2>(hkey: P0, pszsubkey: P1, pszvalue: P2, grfmode: u32) -> ::core::option::Option<super::super::System::Com::IStream>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn OpenRegStream(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCWSTR, pszvalue : ::windows_core::PCWSTR, grfmode : u32) -> ::core::option::Option < super::super::System::Com:: IStream >);
    OpenRegStream(hkey.into_param().abi(), pszsubkey.into_param().abi(), pszvalue.into_param().abi(), grfmode)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn ParseURLA<P0>(pcszurl: P0, ppu: *mut PARSEDURLA) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn ParseURLA(pcszurl : ::windows_core::PCSTR, ppu : *mut PARSEDURLA) -> ::windows_core::HRESULT);
    ParseURLA(pcszurl.into_param().abi(), ppu).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn ParseURLW<P0>(pcszurl: P0, ppu: *mut PARSEDURLW) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn ParseURLW(pcszurl : ::windows_core::PCWSTR, ppu : *mut PARSEDURLW) -> ::windows_core::HRESULT);
    ParseURLW(pcszurl.into_param().abi(), ppu).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathAddBackslashA(pszpath: &mut [u8; 260]) -> ::windows_core::PSTR {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathAddBackslashA(pszpath : ::windows_core::PSTR) -> ::windows_core::PSTR);
    PathAddBackslashA(::core::mem::transmute(pszpath.as_ptr()))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathAddBackslashW(pszpath: &mut [u16; 260]) -> ::windows_core::PWSTR {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathAddBackslashW(pszpath : ::windows_core::PWSTR) -> ::windows_core::PWSTR);
    PathAddBackslashW(::core::mem::transmute(pszpath.as_ptr()))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathAddExtensionA<P0>(pszpath: &mut [u8; 260], pszext: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathAddExtensionA(pszpath : ::windows_core::PSTR, pszext : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathAddExtensionA(::core::mem::transmute(pszpath.as_ptr()), pszext.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathAddExtensionW<P0>(pszpath: &mut [u16; 260], pszext: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathAddExtensionW(pszpath : ::windows_core::PWSTR, pszext : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathAddExtensionW(::core::mem::transmute(pszpath.as_ptr()), pszext.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathAllocCanonicalize<P0>(pszpathin: P0, dwflags: PATHCCH_OPTIONS) -> ::windows_core::Result<::windows_core::PWSTR>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathAllocCanonicalize(pszpathin : ::windows_core::PCWSTR, dwflags : PATHCCH_OPTIONS, ppszpathout : *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    PathAllocCanonicalize(pszpathin.into_param().abi(), dwflags, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathAllocCombine<P0, P1>(pszpathin: P0, pszmore: P1, dwflags: PATHCCH_OPTIONS) -> ::windows_core::Result<::windows_core::PWSTR>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathAllocCombine(pszpathin : ::windows_core::PCWSTR, pszmore : ::windows_core::PCWSTR, dwflags : PATHCCH_OPTIONS, ppszpathout : *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    PathAllocCombine(pszpathin.into_param().abi(), pszmore.into_param().abi(), dwflags, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathAppendA<P0>(pszpath: &mut [u8; 260], pszmore: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathAppendA(pszpath : ::windows_core::PSTR, pszmore : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathAppendA(::core::mem::transmute(pszpath.as_ptr()), pszmore.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathAppendW<P0>(pszpath: &mut [u16; 260], pszmore: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathAppendW(pszpath : ::windows_core::PWSTR, pszmore : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathAppendW(::core::mem::transmute(pszpath.as_ptr()), pszmore.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathBuildRootA(pszroot: &mut [u8; 4], idrive: i32) -> ::windows_core::PSTR {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathBuildRootA(pszroot : ::windows_core::PSTR, idrive : i32) -> ::windows_core::PSTR);
    PathBuildRootA(::core::mem::transmute(pszroot.as_ptr()), idrive)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathBuildRootW(pszroot: &mut [u16; 4], idrive: i32) -> ::windows_core::PWSTR {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathBuildRootW(pszroot : ::windows_core::PWSTR, idrive : i32) -> ::windows_core::PWSTR);
    PathBuildRootW(::core::mem::transmute(pszroot.as_ptr()), idrive)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathCanonicalizeA<P0>(pszbuf: &mut [u8; 260], pszpath: P0) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathCanonicalizeA(pszbuf : ::windows_core::PSTR, pszpath : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathCanonicalizeA(::core::mem::transmute(pszbuf.as_ptr()), pszpath.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathCanonicalizeW<P0>(pszbuf: &mut [u16; 260], pszpath: P0) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathCanonicalizeW(pszbuf : ::windows_core::PWSTR, pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathCanonicalizeW(::core::mem::transmute(pszbuf.as_ptr()), pszpath.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchAddBackslash(pszpath: &mut [u16]) -> ::windows_core::Result<()> {
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchAddBackslash(pszpath : ::windows_core::PWSTR, cchpath : usize) -> ::windows_core::HRESULT);
    PathCchAddBackslash(::core::mem::transmute(pszpath.as_ptr()), pszpath.len() as _).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchAddBackslashEx(pszpath: &mut [u16], ppszend: ::core::option::Option<*mut ::windows_core::PWSTR>, pcchremaining: ::core::option::Option<*mut usize>) -> ::windows_core::Result<()> {
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchAddBackslashEx(pszpath : ::windows_core::PWSTR, cchpath : usize, ppszend : *mut ::windows_core::PWSTR, pcchremaining : *mut usize) -> ::windows_core::HRESULT);
    PathCchAddBackslashEx(::core::mem::transmute(pszpath.as_ptr()), pszpath.len() as _, ::core::mem::transmute(ppszend.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcchremaining.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchAddExtension<P0>(pszpath: &mut [u16], pszext: P0) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchAddExtension(pszpath : ::windows_core::PWSTR, cchpath : usize, pszext : ::windows_core::PCWSTR) -> ::windows_core::HRESULT);
    PathCchAddExtension(::core::mem::transmute(pszpath.as_ptr()), pszpath.len() as _, pszext.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchAppend<P0>(pszpath: &mut [u16], pszmore: P0) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchAppend(pszpath : ::windows_core::PWSTR, cchpath : usize, pszmore : ::windows_core::PCWSTR) -> ::windows_core::HRESULT);
    PathCchAppend(::core::mem::transmute(pszpath.as_ptr()), pszpath.len() as _, pszmore.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchAppendEx<P0>(pszpath: &mut [u16], pszmore: P0, dwflags: PATHCCH_OPTIONS) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchAppendEx(pszpath : ::windows_core::PWSTR, cchpath : usize, pszmore : ::windows_core::PCWSTR, dwflags : PATHCCH_OPTIONS) -> ::windows_core::HRESULT);
    PathCchAppendEx(::core::mem::transmute(pszpath.as_ptr()), pszpath.len() as _, pszmore.into_param().abi(), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchCanonicalize<P0>(pszpathout: &mut [u16], pszpathin: P0) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchCanonicalize(pszpathout : ::windows_core::PWSTR, cchpathout : usize, pszpathin : ::windows_core::PCWSTR) -> ::windows_core::HRESULT);
    PathCchCanonicalize(::core::mem::transmute(pszpathout.as_ptr()), pszpathout.len() as _, pszpathin.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchCanonicalizeEx<P0>(pszpathout: &mut [u16], pszpathin: P0, dwflags: PATHCCH_OPTIONS) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchCanonicalizeEx(pszpathout : ::windows_core::PWSTR, cchpathout : usize, pszpathin : ::windows_core::PCWSTR, dwflags : PATHCCH_OPTIONS) -> ::windows_core::HRESULT);
    PathCchCanonicalizeEx(::core::mem::transmute(pszpathout.as_ptr()), pszpathout.len() as _, pszpathin.into_param().abi(), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchCombine<P0, P1>(pszpathout: &mut [u16], pszpathin: P0, pszmore: P1) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchCombine(pszpathout : ::windows_core::PWSTR, cchpathout : usize, pszpathin : ::windows_core::PCWSTR, pszmore : ::windows_core::PCWSTR) -> ::windows_core::HRESULT);
    PathCchCombine(::core::mem::transmute(pszpathout.as_ptr()), pszpathout.len() as _, pszpathin.into_param().abi(), pszmore.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchCombineEx<P0, P1>(pszpathout: &mut [u16], pszpathin: P0, pszmore: P1, dwflags: PATHCCH_OPTIONS) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchCombineEx(pszpathout : ::windows_core::PWSTR, cchpathout : usize, pszpathin : ::windows_core::PCWSTR, pszmore : ::windows_core::PCWSTR, dwflags : PATHCCH_OPTIONS) -> ::windows_core::HRESULT);
    PathCchCombineEx(::core::mem::transmute(pszpathout.as_ptr()), pszpathout.len() as _, pszpathin.into_param().abi(), pszmore.into_param().abi(), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchFindExtension<P0>(pszpath: P0, cchpath: usize) -> ::windows_core::Result<::windows_core::PCWSTR>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchFindExtension(pszpath : ::windows_core::PCWSTR, cchpath : usize, ppszext : *mut ::windows_core::PCWSTR) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    PathCchFindExtension(pszpath.into_param().abi(), cchpath, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathCchIsRoot<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchIsRoot(pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathCchIsRoot(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchRemoveBackslash(pszpath: &mut [u16]) -> ::windows_core::Result<()> {
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchRemoveBackslash(pszpath : ::windows_core::PWSTR, cchpath : usize) -> ::windows_core::HRESULT);
    PathCchRemoveBackslash(::core::mem::transmute(pszpath.as_ptr()), pszpath.len() as _).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchRemoveBackslashEx(pszpath: ::windows_core::PWSTR, cchpath: usize, ppszend: ::core::option::Option<*mut ::windows_core::PWSTR>, pcchremaining: ::core::option::Option<*mut usize>) -> ::windows_core::Result<()> {
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchRemoveBackslashEx(pszpath : ::windows_core::PWSTR, cchpath : usize, ppszend : *mut ::windows_core::PWSTR, pcchremaining : *mut usize) -> ::windows_core::HRESULT);
    PathCchRemoveBackslashEx(::core::mem::transmute(pszpath), cchpath, ::core::mem::transmute(ppszend.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcchremaining.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchRemoveExtension(pszpath: ::windows_core::PWSTR, cchpath: usize) -> ::windows_core::Result<()> {
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchRemoveExtension(pszpath : ::windows_core::PWSTR, cchpath : usize) -> ::windows_core::HRESULT);
    PathCchRemoveExtension(::core::mem::transmute(pszpath), cchpath).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchRemoveFileSpec(pszpath: ::windows_core::PWSTR, cchpath: usize) -> ::windows_core::Result<()> {
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchRemoveFileSpec(pszpath : ::windows_core::PWSTR, cchpath : usize) -> ::windows_core::HRESULT);
    PathCchRemoveFileSpec(::core::mem::transmute(pszpath), cchpath).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchRenameExtension<P0>(pszpath: &mut [u16], pszext: P0) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchRenameExtension(pszpath : ::windows_core::PWSTR, cchpath : usize, pszext : ::windows_core::PCWSTR) -> ::windows_core::HRESULT);
    PathCchRenameExtension(::core::mem::transmute(pszpath.as_ptr()), pszpath.len() as _, pszext.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchSkipRoot<P0>(pszpath: P0) -> ::windows_core::Result<::windows_core::PCWSTR>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchSkipRoot(pszpath : ::windows_core::PCWSTR, ppszrootend : *mut ::windows_core::PCWSTR) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    PathCchSkipRoot(pszpath.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchStripPrefix(pszpath: &mut [u16]) -> ::windows_core::Result<()> {
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchStripPrefix(pszpath : ::windows_core::PWSTR, cchpath : usize) -> ::windows_core::HRESULT);
    PathCchStripPrefix(::core::mem::transmute(pszpath.as_ptr()), pszpath.len() as _).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCchStripToRoot(pszpath: ::windows_core::PWSTR, cchpath: usize) -> ::windows_core::Result<()> {
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathCchStripToRoot(pszpath : ::windows_core::PWSTR, cchpath : usize) -> ::windows_core::HRESULT);
    PathCchStripToRoot(::core::mem::transmute(pszpath), cchpath).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCleanupSpec<P0>(pszdir: P0, pszspec: ::windows_core::PWSTR) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn PathCleanupSpec(pszdir : ::windows_core::PCWSTR, pszspec : ::windows_core::PWSTR) -> i32);
    PathCleanupSpec(pszdir.into_param().abi(), ::core::mem::transmute(pszspec))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCombineA<P0, P1>(pszdest: &mut [u8; 260], pszdir: P0, pszfile: P1) -> ::windows_core::PSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathCombineA(pszdest : ::windows_core::PSTR, pszdir : ::windows_core::PCSTR, pszfile : ::windows_core::PCSTR) -> ::windows_core::PSTR);
    PathCombineA(::core::mem::transmute(pszdest.as_ptr()), pszdir.into_param().abi(), pszfile.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCombineW<P0, P1>(pszdest: &mut [u16; 260], pszdir: P0, pszfile: P1) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathCombineW(pszdest : ::windows_core::PWSTR, pszdir : ::windows_core::PCWSTR, pszfile : ::windows_core::PCWSTR) -> ::windows_core::PWSTR);
    PathCombineW(::core::mem::transmute(pszdest.as_ptr()), pszdir.into_param().abi(), pszfile.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCommonPrefixA<P0, P1>(pszfile1: P0, pszfile2: P1, achpath: ::core::option::Option<&mut [u8; 260]>) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathCommonPrefixA(pszfile1 : ::windows_core::PCSTR, pszfile2 : ::windows_core::PCSTR, achpath : ::windows_core::PSTR) -> i32);
    PathCommonPrefixA(pszfile1.into_param().abi(), pszfile2.into_param().abi(), ::core::mem::transmute(achpath.as_deref().map_or(::core::ptr::null(), |slice| slice.as_ptr())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCommonPrefixW<P0, P1>(pszfile1: P0, pszfile2: P1, achpath: ::core::option::Option<&mut [u16; 260]>) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathCommonPrefixW(pszfile1 : ::windows_core::PCWSTR, pszfile2 : ::windows_core::PCWSTR, achpath : ::windows_core::PWSTR) -> i32);
    PathCommonPrefixW(pszfile1.into_param().abi(), pszfile2.into_param().abi(), ::core::mem::transmute(achpath.as_deref().map_or(::core::ptr::null(), |slice| slice.as_ptr())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
#[inline]
pub unsafe fn PathCompactPathA<P0>(hdc: P0, pszpath: &mut [u8; 260], dx: u32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Graphics::Gdi::HDC>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathCompactPathA(hdc : super::super::Graphics::Gdi:: HDC, pszpath : ::windows_core::PSTR, dx : u32) -> super::super::Foundation:: BOOL);
    PathCompactPathA(hdc.into_param().abi(), ::core::mem::transmute(pszpath.as_ptr()), dx)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathCompactPathExA<P0>(pszout: &mut [u8], pszsrc: P0, dwflags: u32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathCompactPathExA(pszout : ::windows_core::PSTR, pszsrc : ::windows_core::PCSTR, cchmax : u32, dwflags : u32) -> super::super::Foundation:: BOOL);
    PathCompactPathExA(::core::mem::transmute(pszout.as_ptr()), pszsrc.into_param().abi(), pszout.len() as _, dwflags)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathCompactPathExW<P0>(pszout: &mut [u16], pszsrc: P0, dwflags: u32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathCompactPathExW(pszout : ::windows_core::PWSTR, pszsrc : ::windows_core::PCWSTR, cchmax : u32, dwflags : u32) -> super::super::Foundation:: BOOL);
    PathCompactPathExW(::core::mem::transmute(pszout.as_ptr()), pszsrc.into_param().abi(), pszout.len() as _, dwflags)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
#[inline]
pub unsafe fn PathCompactPathW<P0>(hdc: P0, pszpath: &mut [u16; 260], dx: u32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Graphics::Gdi::HDC>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathCompactPathW(hdc : super::super::Graphics::Gdi:: HDC, pszpath : ::windows_core::PWSTR, dx : u32) -> super::super::Foundation:: BOOL);
    PathCompactPathW(hdc.into_param().abi(), ::core::mem::transmute(pszpath.as_ptr()), dx)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCreateFromUrlA<P0>(pszurl: P0, pszpath: ::windows_core::PSTR, pcchpath: *mut u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathCreateFromUrlA(pszurl : ::windows_core::PCSTR, pszpath : ::windows_core::PSTR, pcchpath : *mut u32, dwflags : u32) -> ::windows_core::HRESULT);
    PathCreateFromUrlA(pszurl.into_param().abi(), ::core::mem::transmute(pszpath), pcchpath, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCreateFromUrlAlloc<P0>(pszin: P0, ppszout: *mut ::windows_core::PWSTR, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathCreateFromUrlAlloc(pszin : ::windows_core::PCWSTR, ppszout : *mut ::windows_core::PWSTR, dwflags : u32) -> ::windows_core::HRESULT);
    PathCreateFromUrlAlloc(pszin.into_param().abi(), ppszout, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathCreateFromUrlW<P0>(pszurl: P0, pszpath: ::windows_core::PWSTR, pcchpath: *mut u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathCreateFromUrlW(pszurl : ::windows_core::PCWSTR, pszpath : ::windows_core::PWSTR, pcchpath : *mut u32, dwflags : u32) -> ::windows_core::HRESULT);
    PathCreateFromUrlW(pszurl.into_param().abi(), ::core::mem::transmute(pszpath), pcchpath, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathFileExistsA<P0>(pszpath: P0) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathFileExistsA(pszpath : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathFileExistsA(pszpath.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathFileExistsW<P0>(pszpath: P0) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathFileExistsW(pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathFileExistsW(pszpath.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathFindExtensionA<P0>(pszpath: P0) -> ::windows_core::PSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathFindExtensionA(pszpath : ::windows_core::PCSTR) -> ::windows_core::PSTR);
    PathFindExtensionA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathFindExtensionW<P0>(pszpath: P0) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathFindExtensionW(pszpath : ::windows_core::PCWSTR) -> ::windows_core::PWSTR);
    PathFindExtensionW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathFindFileNameA<P0>(pszpath: P0) -> ::windows_core::PSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathFindFileNameA(pszpath : ::windows_core::PCSTR) -> ::windows_core::PSTR);
    PathFindFileNameA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathFindFileNameW<P0>(pszpath: P0) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathFindFileNameW(pszpath : ::windows_core::PCWSTR) -> ::windows_core::PWSTR);
    PathFindFileNameW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathFindNextComponentA<P0>(pszpath: P0) -> ::windows_core::PSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathFindNextComponentA(pszpath : ::windows_core::PCSTR) -> ::windows_core::PSTR);
    PathFindNextComponentA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathFindNextComponentW<P0>(pszpath: P0) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathFindNextComponentW(pszpath : ::windows_core::PCWSTR) -> ::windows_core::PWSTR);
    PathFindNextComponentW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathFindOnPathA(pszpath: &mut [u8; 260], ppszotherdirs: ::core::option::Option<*const *const i8>) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathFindOnPathA(pszpath : ::windows_core::PSTR, ppszotherdirs : *const *const i8) -> super::super::Foundation:: BOOL);
    PathFindOnPathA(::core::mem::transmute(pszpath.as_ptr()), ::core::mem::transmute(ppszotherdirs.unwrap_or(::std::ptr::null())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathFindOnPathW(pszpath: &mut [u16; 260], ppszotherdirs: ::core::option::Option<*const *const u16>) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathFindOnPathW(pszpath : ::windows_core::PWSTR, ppszotherdirs : *const *const u16) -> super::super::Foundation:: BOOL);
    PathFindOnPathW(::core::mem::transmute(pszpath.as_ptr()), ::core::mem::transmute(ppszotherdirs.unwrap_or(::std::ptr::null())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathFindSuffixArrayA<P0>(pszpath: P0, apszsuffix: &[::windows_core::PCSTR]) -> ::windows_core::PCSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathFindSuffixArrayA(pszpath : ::windows_core::PCSTR, apszsuffix : *const ::windows_core::PCSTR, iarraysize : i32) -> ::windows_core::PCSTR);
    PathFindSuffixArrayA(pszpath.into_param().abi(), ::core::mem::transmute(apszsuffix.as_ptr()), apszsuffix.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathFindSuffixArrayW<P0>(pszpath: P0, apszsuffix: &[::windows_core::PCWSTR]) -> ::windows_core::PCWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathFindSuffixArrayW(pszpath : ::windows_core::PCWSTR, apszsuffix : *const ::windows_core::PCWSTR, iarraysize : i32) -> ::windows_core::PCWSTR);
    PathFindSuffixArrayW(pszpath.into_param().abi(), ::core::mem::transmute(apszsuffix.as_ptr()), apszsuffix.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathGetArgsA<P0>(pszpath: P0) -> ::windows_core::PSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathGetArgsA(pszpath : ::windows_core::PCSTR) -> ::windows_core::PSTR);
    PathGetArgsA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathGetArgsW<P0>(pszpath: P0) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathGetArgsW(pszpath : ::windows_core::PCWSTR) -> ::windows_core::PWSTR);
    PathGetArgsW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathGetCharTypeA(ch: u8) -> u32 {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathGetCharTypeA(ch : u8) -> u32);
    PathGetCharTypeA(ch)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathGetCharTypeW(ch: u16) -> u32 {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathGetCharTypeW(ch : u16) -> u32);
    PathGetCharTypeW(ch)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathGetDriveNumberA<P0>(pszpath: P0) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathGetDriveNumberA(pszpath : ::windows_core::PCSTR) -> i32);
    PathGetDriveNumberA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathGetDriveNumberW<P0>(pszpath: P0) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathGetDriveNumberW(pszpath : ::windows_core::PCWSTR) -> i32);
    PathGetDriveNumberW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathGetShortPath(pszlongpath: &mut [u16; 260]) {
    ::windows_targets::link!("shell32.dll" "system" fn PathGetShortPath(pszlongpath : ::windows_core::PWSTR) -> ());
    PathGetShortPath(::core::mem::transmute(pszlongpath.as_ptr()))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsContentTypeA<P0, P1>(pszpath: P0, pszcontenttype: P1) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsContentTypeA(pszpath : ::windows_core::PCSTR, pszcontenttype : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathIsContentTypeA(pszpath.into_param().abi(), pszcontenttype.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsContentTypeW<P0, P1>(pszpath: P0, pszcontenttype: P1) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsContentTypeW(pszpath : ::windows_core::PCWSTR, pszcontenttype : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathIsContentTypeW(pszpath.into_param().abi(), pszcontenttype.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsDirectoryA<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsDirectoryA(pszpath : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathIsDirectoryA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsDirectoryEmptyA<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsDirectoryEmptyA(pszpath : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathIsDirectoryEmptyA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsDirectoryEmptyW<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsDirectoryEmptyW(pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathIsDirectoryEmptyW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsDirectoryW<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsDirectoryW(pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathIsDirectoryW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsExe<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn PathIsExe(pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathIsExe(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsFileSpecA<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsFileSpecA(pszpath : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathIsFileSpecA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsFileSpecW<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsFileSpecW(pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathIsFileSpecW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsLFNFileSpecA<P0>(pszname: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsLFNFileSpecA(pszname : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathIsLFNFileSpecA(pszname.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsLFNFileSpecW<P0>(pszname: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsLFNFileSpecW(pszname : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathIsLFNFileSpecW(pszname.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsNetworkPathA<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsNetworkPathA(pszpath : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathIsNetworkPathA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsNetworkPathW<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsNetworkPathW(pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathIsNetworkPathW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsPrefixA<P0, P1>(pszprefix: P0, pszpath: P1) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsPrefixA(pszprefix : ::windows_core::PCSTR, pszpath : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathIsPrefixA(pszprefix.into_param().abi(), pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsPrefixW<P0, P1>(pszprefix: P0, pszpath: P1) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsPrefixW(pszprefix : ::windows_core::PCWSTR, pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathIsPrefixW(pszprefix.into_param().abi(), pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsRelativeA<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsRelativeA(pszpath : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathIsRelativeA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsRelativeW<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsRelativeW(pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathIsRelativeW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsRootA<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsRootA(pszpath : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathIsRootA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsRootW<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsRootW(pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathIsRootW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsSameRootA<P0, P1>(pszpath1: P0, pszpath2: P1) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsSameRootA(pszpath1 : ::windows_core::PCSTR, pszpath2 : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathIsSameRootA(pszpath1.into_param().abi(), pszpath2.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsSameRootW<P0, P1>(pszpath1: P0, pszpath2: P1) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsSameRootW(pszpath1 : ::windows_core::PCWSTR, pszpath2 : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathIsSameRootW(pszpath1.into_param().abi(), pszpath2.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsSlowA<P0>(pszfile: P0, dwattr: u32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn PathIsSlowA(pszfile : ::windows_core::PCSTR, dwattr : u32) -> super::super::Foundation:: BOOL);
    PathIsSlowA(pszfile.into_param().abi(), dwattr)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsSlowW<P0>(pszfile: P0, dwattr: u32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn PathIsSlowW(pszfile : ::windows_core::PCWSTR, dwattr : u32) -> super::super::Foundation:: BOOL);
    PathIsSlowW(pszfile.into_param().abi(), dwattr)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsSystemFolderA<P0>(pszpath: P0, dwattrb: u32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsSystemFolderA(pszpath : ::windows_core::PCSTR, dwattrb : u32) -> super::super::Foundation:: BOOL);
    PathIsSystemFolderA(pszpath.into_param().abi(), dwattrb)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsSystemFolderW<P0>(pszpath: P0, dwattrb: u32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsSystemFolderW(pszpath : ::windows_core::PCWSTR, dwattrb : u32) -> super::super::Foundation:: BOOL);
    PathIsSystemFolderW(pszpath.into_param().abi(), dwattrb)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsUNCA<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsUNCA(pszpath : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathIsUNCA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsUNCEx<P0>(pszpath: P0, ppszserver: ::core::option::Option<*mut ::windows_core::PCWSTR>) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("api-ms-win-core-path-l1-1-0.dll" "system" fn PathIsUNCEx(pszpath : ::windows_core::PCWSTR, ppszserver : *mut ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathIsUNCEx(pszpath.into_param().abi(), ::core::mem::transmute(ppszserver.unwrap_or(::std::ptr::null_mut())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsUNCServerA<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsUNCServerA(pszpath : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathIsUNCServerA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsUNCServerShareA<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsUNCServerShareA(pszpath : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathIsUNCServerShareA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsUNCServerShareW<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsUNCServerShareW(pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathIsUNCServerShareW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsUNCServerW<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsUNCServerW(pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathIsUNCServerW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsUNCW<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsUNCW(pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathIsUNCW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsURLA<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsURLA(pszpath : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathIsURLA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathIsURLW<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathIsURLW(pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathIsURLW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathMakePrettyA(pszpath: ::windows_core::PSTR) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathMakePrettyA(pszpath : ::windows_core::PSTR) -> super::super::Foundation:: BOOL);
    PathMakePrettyA(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathMakePrettyW(pszpath: ::windows_core::PWSTR) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathMakePrettyW(pszpath : ::windows_core::PWSTR) -> super::super::Foundation:: BOOL);
    PathMakePrettyW(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathMakeSystemFolderA<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathMakeSystemFolderA(pszpath : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathMakeSystemFolderA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathMakeSystemFolderW<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathMakeSystemFolderW(pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathMakeSystemFolderW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathMakeUniqueName<P0, P1, P2>(pszuniquename: &mut [u16], psztemplate: P0, pszlongplate: P1, pszdir: P2) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn PathMakeUniqueName(pszuniquename : ::windows_core::PWSTR, cchmax : u32, psztemplate : ::windows_core::PCWSTR, pszlongplate : ::windows_core::PCWSTR, pszdir : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathMakeUniqueName(::core::mem::transmute(pszuniquename.as_ptr()), pszuniquename.len() as _, psztemplate.into_param().abi(), pszlongplate.into_param().abi(), pszdir.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathMatchSpecA<P0, P1>(pszfile: P0, pszspec: P1) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathMatchSpecA(pszfile : ::windows_core::PCSTR, pszspec : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathMatchSpecA(pszfile.into_param().abi(), pszspec.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathMatchSpecExA<P0, P1>(pszfile: P0, pszspec: P1, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathMatchSpecExA(pszfile : ::windows_core::PCSTR, pszspec : ::windows_core::PCSTR, dwflags : u32) -> ::windows_core::HRESULT);
    PathMatchSpecExA(pszfile.into_param().abi(), pszspec.into_param().abi(), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathMatchSpecExW<P0, P1>(pszfile: P0, pszspec: P1, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathMatchSpecExW(pszfile : ::windows_core::PCWSTR, pszspec : ::windows_core::PCWSTR, dwflags : u32) -> ::windows_core::HRESULT);
    PathMatchSpecExW(pszfile.into_param().abi(), pszspec.into_param().abi(), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathMatchSpecW<P0, P1>(pszfile: P0, pszspec: P1) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathMatchSpecW(pszfile : ::windows_core::PCWSTR, pszspec : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathMatchSpecW(pszfile.into_param().abi(), pszspec.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathParseIconLocationA(psziconfile: ::windows_core::PSTR) -> i32 {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathParseIconLocationA(psziconfile : ::windows_core::PSTR) -> i32);
    PathParseIconLocationA(::core::mem::transmute(psziconfile))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathParseIconLocationW(psziconfile: ::windows_core::PWSTR) -> i32 {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathParseIconLocationW(psziconfile : ::windows_core::PWSTR) -> i32);
    PathParseIconLocationW(::core::mem::transmute(psziconfile))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathQualify(psz: ::windows_core::PWSTR) {
    ::windows_targets::link!("shell32.dll" "system" fn PathQualify(psz : ::windows_core::PWSTR) -> ());
    PathQualify(::core::mem::transmute(psz))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathQuoteSpacesA(lpsz: &mut [u8; 260]) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathQuoteSpacesA(lpsz : ::windows_core::PSTR) -> super::super::Foundation:: BOOL);
    PathQuoteSpacesA(::core::mem::transmute(lpsz.as_ptr()))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathQuoteSpacesW(lpsz: &mut [u16; 260]) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathQuoteSpacesW(lpsz : ::windows_core::PWSTR) -> super::super::Foundation:: BOOL);
    PathQuoteSpacesW(::core::mem::transmute(lpsz.as_ptr()))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathRelativePathToA<P0, P1>(pszpath: &mut [u8; 260], pszfrom: P0, dwattrfrom: u32, pszto: P1, dwattrto: u32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathRelativePathToA(pszpath : ::windows_core::PSTR, pszfrom : ::windows_core::PCSTR, dwattrfrom : u32, pszto : ::windows_core::PCSTR, dwattrto : u32) -> super::super::Foundation:: BOOL);
    PathRelativePathToA(::core::mem::transmute(pszpath.as_ptr()), pszfrom.into_param().abi(), dwattrfrom, pszto.into_param().abi(), dwattrto)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathRelativePathToW<P0, P1>(pszpath: &mut [u16; 260], pszfrom: P0, dwattrfrom: u32, pszto: P1, dwattrto: u32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathRelativePathToW(pszpath : ::windows_core::PWSTR, pszfrom : ::windows_core::PCWSTR, dwattrfrom : u32, pszto : ::windows_core::PCWSTR, dwattrto : u32) -> super::super::Foundation:: BOOL);
    PathRelativePathToW(::core::mem::transmute(pszpath.as_ptr()), pszfrom.into_param().abi(), dwattrfrom, pszto.into_param().abi(), dwattrto)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathRemoveArgsA(pszpath: ::windows_core::PSTR) {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathRemoveArgsA(pszpath : ::windows_core::PSTR) -> ());
    PathRemoveArgsA(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathRemoveArgsW(pszpath: ::windows_core::PWSTR) {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathRemoveArgsW(pszpath : ::windows_core::PWSTR) -> ());
    PathRemoveArgsW(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathRemoveBackslashA(pszpath: ::windows_core::PSTR) -> ::windows_core::PSTR {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathRemoveBackslashA(pszpath : ::windows_core::PSTR) -> ::windows_core::PSTR);
    PathRemoveBackslashA(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathRemoveBackslashW(pszpath: ::windows_core::PWSTR) -> ::windows_core::PWSTR {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathRemoveBackslashW(pszpath : ::windows_core::PWSTR) -> ::windows_core::PWSTR);
    PathRemoveBackslashW(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathRemoveBlanksA(pszpath: ::windows_core::PSTR) {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathRemoveBlanksA(pszpath : ::windows_core::PSTR) -> ());
    PathRemoveBlanksA(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathRemoveBlanksW(pszpath: ::windows_core::PWSTR) {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathRemoveBlanksW(pszpath : ::windows_core::PWSTR) -> ());
    PathRemoveBlanksW(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathRemoveExtensionA(pszpath: ::windows_core::PSTR) {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathRemoveExtensionA(pszpath : ::windows_core::PSTR) -> ());
    PathRemoveExtensionA(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathRemoveExtensionW(pszpath: ::windows_core::PWSTR) {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathRemoveExtensionW(pszpath : ::windows_core::PWSTR) -> ());
    PathRemoveExtensionW(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathRemoveFileSpecA(pszpath: ::windows_core::PSTR) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathRemoveFileSpecA(pszpath : ::windows_core::PSTR) -> super::super::Foundation:: BOOL);
    PathRemoveFileSpecA(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathRemoveFileSpecW(pszpath: ::windows_core::PWSTR) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathRemoveFileSpecW(pszpath : ::windows_core::PWSTR) -> super::super::Foundation:: BOOL);
    PathRemoveFileSpecW(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathRenameExtensionA<P0>(pszpath: &mut [u8; 260], pszext: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathRenameExtensionA(pszpath : ::windows_core::PSTR, pszext : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathRenameExtensionA(::core::mem::transmute(pszpath.as_ptr()), pszext.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathRenameExtensionW<P0>(pszpath: &mut [u16; 260], pszext: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathRenameExtensionW(pszpath : ::windows_core::PWSTR, pszext : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathRenameExtensionW(::core::mem::transmute(pszpath.as_ptr()), pszext.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathResolve(pszpath: &mut [u16; 260], dirs: ::core::option::Option<*const *const u16>, fflags: PRF_FLAGS) -> i32 {
    ::windows_targets::link!("shell32.dll" "system" fn PathResolve(pszpath : ::windows_core::PWSTR, dirs : *const *const u16, fflags : u32) -> i32);
    PathResolve(::core::mem::transmute(pszpath.as_ptr()), ::core::mem::transmute(dirs.unwrap_or(::std::ptr::null())), fflags.0 as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathSearchAndQualifyA<P0>(pszpath: P0, pszbuf: &mut [u8]) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathSearchAndQualifyA(pszpath : ::windows_core::PCSTR, pszbuf : ::windows_core::PSTR, cchbuf : u32) -> super::super::Foundation:: BOOL);
    PathSearchAndQualifyA(pszpath.into_param().abi(), ::core::mem::transmute(pszbuf.as_ptr()), pszbuf.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathSearchAndQualifyW<P0>(pszpath: P0, pszbuf: &mut [u16]) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathSearchAndQualifyW(pszpath : ::windows_core::PCWSTR, pszbuf : ::windows_core::PWSTR, cchbuf : u32) -> super::super::Foundation:: BOOL);
    PathSearchAndQualifyW(pszpath.into_param().abi(), ::core::mem::transmute(pszbuf.as_ptr()), pszbuf.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathSetDlgItemPathA<P0, P1>(hdlg: P0, id: i32, pszpath: P1)
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathSetDlgItemPathA(hdlg : super::super::Foundation:: HWND, id : i32, pszpath : ::windows_core::PCSTR) -> ());
    PathSetDlgItemPathA(hdlg.into_param().abi(), id, pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathSetDlgItemPathW<P0, P1>(hdlg: P0, id: i32, pszpath: P1)
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathSetDlgItemPathW(hdlg : super::super::Foundation:: HWND, id : i32, pszpath : ::windows_core::PCWSTR) -> ());
    PathSetDlgItemPathW(hdlg.into_param().abi(), id, pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathSkipRootA<P0>(pszpath: P0) -> ::windows_core::PSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathSkipRootA(pszpath : ::windows_core::PCSTR) -> ::windows_core::PSTR);
    PathSkipRootA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathSkipRootW<P0>(pszpath: P0) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathSkipRootW(pszpath : ::windows_core::PCWSTR) -> ::windows_core::PWSTR);
    PathSkipRootW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathStripPathA(pszpath: ::windows_core::PSTR) {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathStripPathA(pszpath : ::windows_core::PSTR) -> ());
    PathStripPathA(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathStripPathW(pszpath: ::windows_core::PWSTR) {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathStripPathW(pszpath : ::windows_core::PWSTR) -> ());
    PathStripPathW(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathStripToRootA(pszpath: ::windows_core::PSTR) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathStripToRootA(pszpath : ::windows_core::PSTR) -> super::super::Foundation:: BOOL);
    PathStripToRootA(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathStripToRootW(pszpath: ::windows_core::PWSTR) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathStripToRootW(pszpath : ::windows_core::PWSTR) -> super::super::Foundation:: BOOL);
    PathStripToRootW(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathUnExpandEnvStringsA<P0>(pszpath: P0, pszbuf: &mut [u8]) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathUnExpandEnvStringsA(pszpath : ::windows_core::PCSTR, pszbuf : ::windows_core::PSTR, cchbuf : u32) -> super::super::Foundation:: BOOL);
    PathUnExpandEnvStringsA(pszpath.into_param().abi(), ::core::mem::transmute(pszbuf.as_ptr()), pszbuf.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathUnExpandEnvStringsW<P0>(pszpath: P0, pszbuf: &mut [u16]) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathUnExpandEnvStringsW(pszpath : ::windows_core::PCWSTR, pszbuf : ::windows_core::PWSTR, cchbuf : u32) -> super::super::Foundation:: BOOL);
    PathUnExpandEnvStringsW(pszpath.into_param().abi(), ::core::mem::transmute(pszbuf.as_ptr()), pszbuf.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathUndecorateA(pszpath: ::windows_core::PSTR) {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathUndecorateA(pszpath : ::windows_core::PSTR) -> ());
    PathUndecorateA(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn PathUndecorateW(pszpath: ::windows_core::PWSTR) {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathUndecorateW(pszpath : ::windows_core::PWSTR) -> ());
    PathUndecorateW(::core::mem::transmute(pszpath))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathUnmakeSystemFolderA<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathUnmakeSystemFolderA(pszpath : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    PathUnmakeSystemFolderA(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathUnmakeSystemFolderW<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn PathUnmakeSystemFolderW(pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathUnmakeSystemFolderW(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathUnquoteSpacesA(lpsz: ::windows_core::PSTR) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathUnquoteSpacesA(lpsz : ::windows_core::PSTR) -> super::super::Foundation:: BOOL);
    PathUnquoteSpacesA(::core::mem::transmute(lpsz))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathUnquoteSpacesW(lpsz: ::windows_core::PWSTR) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn PathUnquoteSpacesW(lpsz : ::windows_core::PWSTR) -> super::super::Foundation:: BOOL);
    PathUnquoteSpacesW(::core::mem::transmute(lpsz))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PathYetAnotherMakeUniqueName<P0, P1, P2>(pszuniquename: &mut [u16; 260], pszpath: P0, pszshort: P1, pszfilespec: P2) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn PathYetAnotherMakeUniqueName(pszuniquename : ::windows_core::PWSTR, pszpath : ::windows_core::PCWSTR, pszshort : ::windows_core::PCWSTR, pszfilespec : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    PathYetAnotherMakeUniqueName(::core::mem::transmute(pszuniquename.as_ptr()), pszpath.into_param().abi(), pszshort.into_param().abi(), pszfilespec.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn PickIconDlg<P0>(hwnd: P0, psziconpath: &mut [u16], piiconindex: ::core::option::Option<*mut i32>) -> i32
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
{
    ::windows_targets::link!("shell32.dll" "system" fn PickIconDlg(hwnd : super::super::Foundation:: HWND, psziconpath : ::windows_core::PWSTR, cchiconpath : u32, piiconindex : *mut i32) -> i32);
    PickIconDlg(hwnd.into_param().abi(), ::core::mem::transmute(psziconpath.as_ptr()), psziconpath.len() as _, ::core::mem::transmute(piiconindex.unwrap_or(::std::ptr::null_mut())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn PropVariantToStrRet(propvar: *const super::super::System::Com::StructuredStorage::PROPVARIANT, pstrret: *mut Common::STRRET) -> ::windows_core::Result<()> {
    ::windows_targets::link!("propsys.dll" "system" fn PropVariantToStrRet(propvar : *const super::super::System::Com::StructuredStorage:: PROPVARIANT, pstrret : *mut Common:: STRRET) -> ::windows_core::HRESULT);
    PropVariantToStrRet(propvar, pstrret).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn QISearch<T>(that: *mut ::core::ffi::c_void, pqit: *const QITAB) -> ::windows_core::Result<T>
where
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn QISearch(that : *mut ::core::ffi::c_void, pqit : *const QITAB, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    QISearch(that, pqit, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn ReadCabinetState(pcs: *mut CABINETSTATE, clength: i32) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shell32.dll" "system" fn ReadCabinetState(pcs : *mut CABINETSTATE, clength : i32) -> super::super::Foundation:: BOOL);
    ReadCabinetState(pcs, clength)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn RealDriveType<P0>(idrive: i32, foktohitnet: P0) -> i32
where
    P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shell32.dll" "system" fn RealDriveType(idrive : i32, foktohitnet : super::super::Foundation:: BOOL) -> i32);
    RealDriveType(idrive, foktohitnet.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn RegisterAppConstrainedChangeNotification(routine: PAPPCONSTRAIN_CHANGE_ROUTINE, context: ::core::option::Option<*const ::core::ffi::c_void>, registration: *mut PAPPCONSTRAIN_REGISTRATION) -> u32 {
    ::windows_targets::link!("api-ms-win-core-psm-appnotify-l1-1-1.dll" "system" fn RegisterAppConstrainedChangeNotification(routine : PAPPCONSTRAIN_CHANGE_ROUTINE, context : *const ::core::ffi::c_void, registration : *mut PAPPCONSTRAIN_REGISTRATION) -> u32);
    RegisterAppConstrainedChangeNotification(routine, ::core::mem::transmute(context.unwrap_or(::std::ptr::null())), registration)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn RegisterAppStateChangeNotification(routine: PAPPSTATE_CHANGE_ROUTINE, context: ::core::option::Option<*const ::core::ffi::c_void>, registration: *mut PAPPSTATE_REGISTRATION) -> u32 {
    ::windows_targets::link!("api-ms-win-core-psm-appnotify-l1-1-0.dll" "system" fn RegisterAppStateChangeNotification(routine : PAPPSTATE_CHANGE_ROUTINE, context : *const ::core::ffi::c_void, registration : *mut PAPPSTATE_REGISTRATION) -> u32);
    RegisterAppStateChangeNotification(routine, ::core::mem::transmute(context.unwrap_or(::std::ptr::null())), registration)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn RegisterScaleChangeEvent<P0>(hevent: P0) -> ::windows_core::Result<usize>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
{
    ::windows_targets::link!("api-ms-win-shcore-scaling-l1-1-1.dll" "system" fn RegisterScaleChangeEvent(hevent : super::super::Foundation:: HANDLE, pdwcookie : *mut usize) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    RegisterScaleChangeEvent(hevent.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn RegisterScaleChangeNotifications<P0>(displaydevice: DISPLAY_DEVICE_TYPE, hwndnotify: P0, umsgnotify: u32) -> ::windows_core::Result<u32>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
{
    ::windows_targets::link!("api-ms-win-shcore-scaling-l1-1-0.dll" "system" fn RegisterScaleChangeNotifications(displaydevice : DISPLAY_DEVICE_TYPE, hwndnotify : super::super::Foundation:: HWND, umsgnotify : u32, pdwcookie : *mut u32) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    RegisterScaleChangeNotifications(displaydevice, hwndnotify.into_param().abi(), umsgnotify, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn RemoveWindowSubclass<P0>(hwnd: P0, pfnsubclass: SUBCLASSPROC, uidsubclass: usize) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
{
    ::windows_targets::link!("comctl32.dll" "system" fn RemoveWindowSubclass(hwnd : super::super::Foundation:: HWND, pfnsubclass : SUBCLASSPROC, uidsubclass : usize) -> super::super::Foundation:: BOOL);
    RemoveWindowSubclass(hwnd.into_param().abi(), pfnsubclass, uidsubclass)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn RestartDialog<P0, P1>(hwnd: P0, pszprompt: P1, dwreturn: u32) -> i32
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn RestartDialog(hwnd : super::super::Foundation:: HWND, pszprompt : ::windows_core::PCWSTR, dwreturn : u32) -> i32);
    RestartDialog(hwnd.into_param().abi(), pszprompt.into_param().abi(), dwreturn)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn RestartDialogEx<P0, P1>(hwnd: P0, pszprompt: P1, dwreturn: u32, dwreasoncode: u32) -> i32
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn RestartDialogEx(hwnd : super::super::Foundation:: HWND, pszprompt : ::windows_core::PCWSTR, dwreturn : u32, dwreasoncode : u32) -> i32);
    RestartDialogEx(hwnd.into_param().abi(), pszprompt.into_param().abi(), dwreturn, dwreasoncode)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn RevokeScaleChangeNotifications(displaydevice: DISPLAY_DEVICE_TYPE, dwcookie: u32) -> ::windows_core::Result<()> {
    ::windows_targets::link!("api-ms-win-shcore-scaling-l1-1-0.dll" "system" fn RevokeScaleChangeNotifications(displaydevice : DISPLAY_DEVICE_TYPE, dwcookie : u32) -> ::windows_core::HRESULT);
    RevokeScaleChangeNotifications(displaydevice, dwcookie).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Controls\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls"))]
#[inline]
pub unsafe fn SHAddFromPropSheetExtArray<P0, P1>(hpsxa: P0, lpfnaddpage: super::Controls::LPFNSVADDPROPSHEETPAGE, lparam: P1) -> u32
where
    P0: ::windows_core::IntoParam<HPSXA>,
    P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHAddFromPropSheetExtArray(hpsxa : HPSXA, lpfnaddpage : super::Controls:: LPFNSVADDPROPSHEETPAGE, lparam : super::super::Foundation:: LPARAM) -> u32);
    SHAddFromPropSheetExtArray(hpsxa.into_param().abi(), lpfnaddpage, lparam.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHAddToRecentDocs(uflags: u32, pv: ::core::option::Option<*const ::core::ffi::c_void>) {
    ::windows_targets::link!("shell32.dll" "system" fn SHAddToRecentDocs(uflags : u32, pv : *const ::core::ffi::c_void) -> ());
    SHAddToRecentDocs(uflags, ::core::mem::transmute(pv.unwrap_or(::std::ptr::null())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHAlloc(cb: usize) -> *mut ::core::ffi::c_void {
    ::windows_targets::link!("shell32.dll" "system" fn SHAlloc(cb : usize) -> *mut ::core::ffi::c_void);
    SHAlloc(cb)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHAllocShared(pvdata: ::core::option::Option<*const ::core::ffi::c_void>, dwsize: u32, dwprocessid: u32) -> super::super::Foundation::HANDLE {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHAllocShared(pvdata : *const ::core::ffi::c_void, dwsize : u32, dwprocessid : u32) -> super::super::Foundation:: HANDLE);
    SHAllocShared(::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null())), dwsize, dwprocessid)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHAnsiToAnsi<P0>(pszsrc: P0, pszdst: &mut [u8]) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHAnsiToAnsi(pszsrc : ::windows_core::PCSTR, pszdst : ::windows_core::PSTR, cchbuf : i32) -> i32);
    SHAnsiToAnsi(pszsrc.into_param().abi(), ::core::mem::transmute(pszdst.as_ptr()), pszdst.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHAnsiToUnicode<P0>(pszsrc: P0, pwszdst: &mut [u16]) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHAnsiToUnicode(pszsrc : ::windows_core::PCSTR, pwszdst : ::windows_core::PWSTR, cwchbuf : i32) -> i32);
    SHAnsiToUnicode(pszsrc.into_param().abi(), ::core::mem::transmute(pwszdst.as_ptr()), pwszdst.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHAppBarMessage(dwmessage: u32, pdata: *mut APPBARDATA) -> usize {
    ::windows_targets::link!("shell32.dll" "system" fn SHAppBarMessage(dwmessage : u32, pdata : *mut APPBARDATA) -> usize);
    SHAppBarMessage(dwmessage, pdata)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHAssocEnumHandlers<P0>(pszextra: P0, affilter: ASSOC_FILTER) -> ::windows_core::Result<IEnumAssocHandlers>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHAssocEnumHandlers(pszextra : ::windows_core::PCWSTR, affilter : ASSOC_FILTER, ppenumhandler : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHAssocEnumHandlers(pszextra.into_param().abi(), affilter, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHAssocEnumHandlersForProtocolByApplication<P0, T>(protocol: P0) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHAssocEnumHandlersForProtocolByApplication(protocol : ::windows_core::PCWSTR, riid : *const ::windows_core::GUID, enumhandlers : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHAssocEnumHandlersForProtocolByApplication(protocol.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHAutoComplete<P0>(hwndedit: P0, dwflags: SHELL_AUTOCOMPLETE_FLAGS) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHAutoComplete(hwndedit : super::super::Foundation:: HWND, dwflags : SHELL_AUTOCOMPLETE_FLAGS) -> ::windows_core::HRESULT);
    SHAutoComplete(hwndedit.into_param().abi(), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHBindToFolderIDListParent<P0, T>(psfroot: P0, pidl: *const Common::ITEMIDLIST, ppidllast: ::core::option::Option<*mut *mut Common::ITEMIDLIST>) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<IShellFolder>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHBindToFolderIDListParent(psfroot : * mut::core::ffi::c_void, pidl : *const Common:: ITEMIDLIST, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void, ppidllast : *mut *mut Common:: ITEMIDLIST) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHBindToFolderIDListParent(psfroot.into_param().abi(), pidl, &<T as ::windows_core::ComInterface>::IID, &mut result__, ::core::mem::transmute(ppidllast.unwrap_or(::std::ptr::null_mut()))).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHBindToFolderIDListParentEx<P0, P1, T>(psfroot: P0, pidl: *const Common::ITEMIDLIST, ppbc: P1, ppidllast: ::core::option::Option<*mut *mut Common::ITEMIDLIST>) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<IShellFolder>,
    P1: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHBindToFolderIDListParentEx(psfroot : * mut::core::ffi::c_void, pidl : *const Common:: ITEMIDLIST, ppbc : * mut::core::ffi::c_void, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void, ppidllast : *mut *mut Common:: ITEMIDLIST) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHBindToFolderIDListParentEx(psfroot.into_param().abi(), pidl, ppbc.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__, ::core::mem::transmute(ppidllast.unwrap_or(::std::ptr::null_mut()))).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHBindToObject<P0, P1, T>(psf: P0, pidl: *const Common::ITEMIDLIST, pbc: P1) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<IShellFolder>,
    P1: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHBindToObject(psf : * mut::core::ffi::c_void, pidl : *const Common:: ITEMIDLIST, pbc : * mut::core::ffi::c_void, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHBindToObject(psf.into_param().abi(), pidl, pbc.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHBindToParent<T>(pidl: *const Common::ITEMIDLIST, ppidllast: ::core::option::Option<*mut *mut Common::ITEMIDLIST>) -> ::windows_core::Result<T>
where
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHBindToParent(pidl : *const Common:: ITEMIDLIST, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void, ppidllast : *mut *mut Common:: ITEMIDLIST) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHBindToParent(pidl, &<T as ::windows_core::ComInterface>::IID, &mut result__, ::core::mem::transmute(ppidllast.unwrap_or(::std::ptr::null_mut()))).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHBrowseForFolderA(lpbi: *const BROWSEINFOA) -> *mut Common::ITEMIDLIST {
    ::windows_targets::link!("shell32.dll" "system" fn SHBrowseForFolderA(lpbi : *const BROWSEINFOA) -> *mut Common:: ITEMIDLIST);
    SHBrowseForFolderA(lpbi)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHBrowseForFolderW(lpbi: *const BROWSEINFOW) -> *mut Common::ITEMIDLIST {
    ::windows_targets::link!("shell32.dll" "system" fn SHBrowseForFolderW(lpbi : *const BROWSEINFOW) -> *mut Common:: ITEMIDLIST);
    SHBrowseForFolderW(lpbi)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHCLSIDFromString<P0>(psz: P0) -> ::windows_core::Result<::windows_core::GUID>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCLSIDFromString(psz : ::windows_core::PCWSTR, pclsid : *mut ::windows_core::GUID) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHCLSIDFromString(psz.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHChangeNotification_Lock<P0>(hchange: P0, dwprocid: u32, pppidl: ::core::option::Option<*mut *mut *mut Common::ITEMIDLIST>, plevent: ::core::option::Option<*mut i32>) -> super::super::Foundation::HANDLE
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHChangeNotification_Lock(hchange : super::super::Foundation:: HANDLE, dwprocid : u32, pppidl : *mut *mut *mut Common:: ITEMIDLIST, plevent : *mut i32) -> super::super::Foundation:: HANDLE);
    SHChangeNotification_Lock(hchange.into_param().abi(), dwprocid, ::core::mem::transmute(pppidl.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(plevent.unwrap_or(::std::ptr::null_mut())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHChangeNotification_Unlock<P0>(hlock: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHChangeNotification_Unlock(hlock : super::super::Foundation:: HANDLE) -> super::super::Foundation:: BOOL);
    SHChangeNotification_Unlock(hlock.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHChangeNotify(weventid: SHCNE_ID, uflags: SHCNF_FLAGS, dwitem1: ::core::option::Option<*const ::core::ffi::c_void>, dwitem2: ::core::option::Option<*const ::core::ffi::c_void>) {
    ::windows_targets::link!("shell32.dll" "system" fn SHChangeNotify(weventid : i32, uflags : SHCNF_FLAGS, dwitem1 : *const ::core::ffi::c_void, dwitem2 : *const ::core::ffi::c_void) -> ());
    SHChangeNotify(weventid.0 as _, uflags, ::core::mem::transmute(dwitem1.unwrap_or(::std::ptr::null())), ::core::mem::transmute(dwitem2.unwrap_or(::std::ptr::null())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHChangeNotifyDeregister(ulid: u32) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shell32.dll" "system" fn SHChangeNotifyDeregister(ulid : u32) -> super::super::Foundation:: BOOL);
    SHChangeNotifyDeregister(ulid)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHChangeNotifyRegister<P0>(hwnd: P0, fsources: SHCNRF_SOURCE, fevents: i32, wmsg: u32, centries: i32, pshcne: *const SHChangeNotifyEntry) -> u32
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHChangeNotifyRegister(hwnd : super::super::Foundation:: HWND, fsources : SHCNRF_SOURCE, fevents : i32, wmsg : u32, centries : i32, pshcne : *const SHChangeNotifyEntry) -> u32);
    SHChangeNotifyRegister(hwnd.into_param().abi(), fsources, fevents, wmsg, centries, pshcne)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHChangeNotifyRegisterThread(status: SCNRT_STATUS) {
    ::windows_targets::link!("shell32.dll" "system" fn SHChangeNotifyRegisterThread(status : SCNRT_STATUS) -> ());
    SHChangeNotifyRegisterThread(status)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHCloneSpecialIDList<P0, P1>(hwnd: P0, csidl: i32, fcreate: P1) -> *mut Common::ITEMIDLIST
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCloneSpecialIDList(hwnd : super::super::Foundation:: HWND, csidl : i32, fcreate : super::super::Foundation:: BOOL) -> *mut Common:: ITEMIDLIST);
    SHCloneSpecialIDList(hwnd.into_param().abi(), csidl, fcreate.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHCoCreateInstance<P0, P1, T>(pszclsid: P0, pclsid: ::core::option::Option<*const ::windows_core::GUID>, punkouter: P1) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::IUnknown>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCoCreateInstance(pszclsid : ::windows_core::PCWSTR, pclsid : *const ::windows_core::GUID, punkouter : * mut::core::ffi::c_void, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHCoCreateInstance(pszclsid.into_param().abi(), ::core::mem::transmute(pclsid.unwrap_or(::std::ptr::null())), punkouter.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHCopyKeyA<P0, P1, P2>(hkeysrc: P0, pszsrcsubkey: P1, hkeydest: P2, freserved: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHCopyKeyA(hkeysrc : super::super::System::Registry:: HKEY, pszsrcsubkey : ::windows_core::PCSTR, hkeydest : super::super::System::Registry:: HKEY, freserved : u32) -> super::super::Foundation:: WIN32_ERROR);
    SHCopyKeyA(hkeysrc.into_param().abi(), pszsrcsubkey.into_param().abi(), hkeydest.into_param().abi(), freserved).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHCopyKeyW<P0, P1, P2>(hkeysrc: P0, pszsrcsubkey: P1, hkeydest: P2, freserved: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHCopyKeyW(hkeysrc : super::super::System::Registry:: HKEY, pszsrcsubkey : ::windows_core::PCWSTR, hkeydest : super::super::System::Registry:: HKEY, freserved : u32) -> super::super::Foundation:: WIN32_ERROR);
    SHCopyKeyW(hkeysrc.into_param().abi(), pszsrcsubkey.into_param().abi(), hkeydest.into_param().abi(), freserved).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHCreateAssociationRegistration<T>() -> ::windows_core::Result<T>
where
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateAssociationRegistration(riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHCreateAssociationRegistration(&<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHCreateDataObject<P0, T>(pidlfolder: ::core::option::Option<*const Common::ITEMIDLIST>, apidl: ::core::option::Option<&[*const Common::ITEMIDLIST]>, pdtinner: P0) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateDataObject(pidlfolder : *const Common:: ITEMIDLIST, cidl : u32, apidl : *const *const Common:: ITEMIDLIST, pdtinner : * mut::core::ffi::c_void, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHCreateDataObject(::core::mem::transmute(pidlfolder.unwrap_or(::std::ptr::null())), apidl.as_deref().map_or(0, |slice| slice.len() as _), ::core::mem::transmute(apidl.as_deref().map_or(::core::ptr::null(), |slice| slice.as_ptr())), pdtinner.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHCreateDefaultContextMenu<T>(pdcm: *const DEFCONTEXTMENU) -> ::windows_core::Result<T>
where
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateDefaultContextMenu(pdcm : *const DEFCONTEXTMENU, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHCreateDefaultContextMenu(pdcm, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHCreateDefaultExtractIcon<T>() -> ::windows_core::Result<T>
where
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateDefaultExtractIcon(riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHCreateDefaultExtractIcon(&<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHCreateDefaultPropertiesOp<P0>(psi: P0) -> ::windows_core::Result<IFileOperation>
where
    P0: ::windows_core::IntoParam<IShellItem>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateDefaultPropertiesOp(psi : * mut::core::ffi::c_void, ppfileop : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHCreateDefaultPropertiesOp(psi.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHCreateDirectory<P0, P1>(hwnd: P0, pszpath: P1) -> i32
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateDirectory(hwnd : super::super::Foundation:: HWND, pszpath : ::windows_core::PCWSTR) -> i32);
    SHCreateDirectory(hwnd.into_param().abi(), pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_Security\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Security"))]
#[inline]
pub unsafe fn SHCreateDirectoryExA<P0, P1>(hwnd: P0, pszpath: P1, psa: ::core::option::Option<*const super::super::Security::SECURITY_ATTRIBUTES>) -> i32
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateDirectoryExA(hwnd : super::super::Foundation:: HWND, pszpath : ::windows_core::PCSTR, psa : *const super::super::Security:: SECURITY_ATTRIBUTES) -> i32);
    SHCreateDirectoryExA(hwnd.into_param().abi(), pszpath.into_param().abi(), ::core::mem::transmute(psa.unwrap_or(::std::ptr::null())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_Security\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Security"))]
#[inline]
pub unsafe fn SHCreateDirectoryExW<P0, P1>(hwnd: P0, pszpath: P1, psa: ::core::option::Option<*const super::super::Security::SECURITY_ATTRIBUTES>) -> i32
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateDirectoryExW(hwnd : super::super::Foundation:: HWND, pszpath : ::windows_core::PCWSTR, psa : *const super::super::Security:: SECURITY_ATTRIBUTES) -> i32);
    SHCreateDirectoryExW(hwnd.into_param().abi(), pszpath.into_param().abi(), ::core::mem::transmute(psa.unwrap_or(::std::ptr::null())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHCreateFileExtractIconW<P0, T>(pszfile: P0, dwfileattributes: u32) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateFileExtractIconW(pszfile : ::windows_core::PCWSTR, dwfileattributes : u32, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHCreateFileExtractIconW(pszfile.into_param().abi(), dwfileattributes, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHCreateItemFromIDList<T>(pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<T>
where
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateItemFromIDList(pidl : *const Common:: ITEMIDLIST, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHCreateItemFromIDList(pidl, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn SHCreateItemFromParsingName<P0, P1, T>(pszpath: P0, pbc: P1) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateItemFromParsingName(pszpath : ::windows_core::PCWSTR, pbc : * mut::core::ffi::c_void, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHCreateItemFromParsingName(pszpath.into_param().abi(), pbc.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn SHCreateItemFromRelativeName<P0, P1, P2, T>(psiparent: P0, pszname: P1, pbc: P2) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<IShellItem>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateItemFromRelativeName(psiparent : * mut::core::ffi::c_void, pszname : ::windows_core::PCWSTR, pbc : * mut::core::ffi::c_void, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHCreateItemFromRelativeName(psiparent.into_param().abi(), pszname.into_param().abi(), pbc.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHCreateItemInKnownFolder<P0, T>(kfid: *const ::windows_core::GUID, dwkfflags: u32, pszitem: P0) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateItemInKnownFolder(kfid : *const ::windows_core::GUID, dwkfflags : u32, pszitem : ::windows_core::PCWSTR, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHCreateItemInKnownFolder(kfid, dwkfflags, pszitem.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHCreateItemWithParent<P0, T>(pidlparent: ::core::option::Option<*const Common::ITEMIDLIST>, psfparent: P0, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<IShellFolder>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateItemWithParent(pidlparent : *const Common:: ITEMIDLIST, psfparent : * mut::core::ffi::c_void, pidl : *const Common:: ITEMIDLIST, riid : *const ::windows_core::GUID, ppvitem : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHCreateItemWithParent(::core::mem::transmute(pidlparent.unwrap_or(::std::ptr::null())), psfparent.into_param().abi(), pidl, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn SHCreateMemStream(pinit: ::core::option::Option<&[u8]>) -> ::core::option::Option<super::super::System::Com::IStream> {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHCreateMemStream(pinit : *const u8, cbinit : u32) -> ::core::option::Option < super::super::System::Com:: IStream >);
    SHCreateMemStream(::core::mem::transmute(pinit.as_deref().map_or(::core::ptr::null(), |slice| slice.as_ptr())), pinit.as_deref().map_or(0, |slice| slice.len() as _))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_Security\"`, `\"Win32_System_Threading\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Security", feature = "Win32_System_Threading"))]
#[inline]
pub unsafe fn SHCreateProcessAsUserW(pscpi: *mut SHCREATEPROCESSINFOW) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateProcessAsUserW(pscpi : *mut SHCREATEPROCESSINFOW) -> super::super::Foundation:: BOOL);
    SHCreateProcessAsUserW(pscpi).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Registry\"`*"]
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn SHCreatePropSheetExtArray<P0, P1>(hkey: P0, pszsubkey: P1, max_iface: u32) -> HPSXA
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreatePropSheetExtArray(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCWSTR, max_iface : u32) -> HPSXA);
    SHCreatePropSheetExtArray(hkey.into_param().abi(), pszsubkey.into_param().abi(), max_iface)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn SHCreateQueryCancelAutoPlayMoniker() -> ::windows_core::Result<super::super::System::Com::IMoniker> {
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateQueryCancelAutoPlayMoniker(ppmoniker : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHCreateQueryCancelAutoPlayMoniker(&mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Ole\"`*"]
#[cfg(feature = "Win32_System_Ole")]
#[inline]
pub unsafe fn SHCreateShellFolderView(pcsfv: *const SFV_CREATE) -> ::windows_core::Result<IShellView> {
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateShellFolderView(pcsfv : *const SFV_CREATE, ppsv : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHCreateShellFolderView(pcsfv, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHCreateShellFolderViewEx(pcsfv: *const CSFV) -> ::windows_core::Result<IShellView> {
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateShellFolderViewEx(pcsfv : *const CSFV, ppsv : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHCreateShellFolderViewEx(pcsfv, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHCreateShellItem<P0>(pidlparent: ::core::option::Option<*const Common::ITEMIDLIST>, psfparent: P0, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<IShellItem>
where
    P0: ::windows_core::IntoParam<IShellFolder>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateShellItem(pidlparent : *const Common:: ITEMIDLIST, psfparent : * mut::core::ffi::c_void, pidl : *const Common:: ITEMIDLIST, ppsi : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHCreateShellItem(::core::mem::transmute(pidlparent.unwrap_or(::std::ptr::null())), psfparent.into_param().abi(), pidl, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHCreateShellItemArray<P0>(pidlparent: ::core::option::Option<*const Common::ITEMIDLIST>, psf: P0, ppidl: ::core::option::Option<&[*const Common::ITEMIDLIST]>) -> ::windows_core::Result<IShellItemArray>
where
    P0: ::windows_core::IntoParam<IShellFolder>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateShellItemArray(pidlparent : *const Common:: ITEMIDLIST, psf : * mut::core::ffi::c_void, cidl : u32, ppidl : *const *const Common:: ITEMIDLIST, ppsiitemarray : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHCreateShellItemArray(::core::mem::transmute(pidlparent.unwrap_or(::std::ptr::null())), psf.into_param().abi(), ppidl.as_deref().map_or(0, |slice| slice.len() as _), ::core::mem::transmute(ppidl.as_deref().map_or(::core::ptr::null(), |slice| slice.as_ptr())), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn SHCreateShellItemArrayFromDataObject<P0, T>(pdo: P0) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateShellItemArrayFromDataObject(pdo : * mut::core::ffi::c_void, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHCreateShellItemArrayFromDataObject(pdo.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHCreateShellItemArrayFromIDLists(rgpidl: &[*const Common::ITEMIDLIST]) -> ::windows_core::Result<IShellItemArray> {
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateShellItemArrayFromIDLists(cidl : u32, rgpidl : *const *const Common:: ITEMIDLIST, ppsiitemarray : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHCreateShellItemArrayFromIDLists(rgpidl.len() as _, ::core::mem::transmute(rgpidl.as_ptr()), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHCreateShellItemArrayFromShellItem<P0, T>(psi: P0) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<IShellItem>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateShellItemArrayFromShellItem(psi : * mut::core::ffi::c_void, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHCreateShellItemArrayFromShellItem(psi.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Graphics_Gdi\"`*"]
#[cfg(feature = "Win32_Graphics_Gdi")]
#[inline]
pub unsafe fn SHCreateShellPalette<P0>(hdc: P0) -> super::super::Graphics::Gdi::HPALETTE
where
    P0: ::windows_core::IntoParam<super::super::Graphics::Gdi::HDC>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHCreateShellPalette(hdc : super::super::Graphics::Gdi:: HDC) -> super::super::Graphics::Gdi:: HPALETTE);
    SHCreateShellPalette(hdc.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn SHCreateStdEnumFmtEtc(afmt: &[super::super::System::Com::FORMATETC]) -> ::windows_core::Result<super::super::System::Com::IEnumFORMATETC> {
    ::windows_targets::link!("shell32.dll" "system" fn SHCreateStdEnumFmtEtc(cfmt : u32, afmt : *const super::super::System::Com:: FORMATETC, ppenumformatetc : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHCreateStdEnumFmtEtc(afmt.len() as _, ::core::mem::transmute(afmt.as_ptr()), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn SHCreateStreamOnFileA<P0>(pszfile: P0, grfmode: u32) -> ::windows_core::Result<super::super::System::Com::IStream>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHCreateStreamOnFileA(pszfile : ::windows_core::PCSTR, grfmode : u32, ppstm : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHCreateStreamOnFileA(pszfile.into_param().abi(), grfmode, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
#[inline]
pub unsafe fn SHCreateStreamOnFileEx<P0, P1, P2>(pszfile: P0, grfmode: u32, dwattributes: u32, fcreate: P1, pstmtemplate: P2) -> ::windows_core::Result<super::super::System::Com::IStream>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    P2: ::windows_core::IntoParam<super::super::System::Com::IStream>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHCreateStreamOnFileEx(pszfile : ::windows_core::PCWSTR, grfmode : u32, dwattributes : u32, fcreate : super::super::Foundation:: BOOL, pstmtemplate : * mut::core::ffi::c_void, ppstm : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHCreateStreamOnFileEx(pszfile.into_param().abi(), grfmode, dwattributes, fcreate.into_param().abi(), pstmtemplate.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn SHCreateStreamOnFileW<P0>(pszfile: P0, grfmode: u32) -> ::windows_core::Result<super::super::System::Com::IStream>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHCreateStreamOnFileW(pszfile : ::windows_core::PCWSTR, grfmode : u32, ppstm : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHCreateStreamOnFileW(pszfile.into_param().abi(), grfmode, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Threading\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Threading"))]
#[inline]
pub unsafe fn SHCreateThread(pfnthreadproc: super::super::System::Threading::LPTHREAD_START_ROUTINE, pdata: ::core::option::Option<*const ::core::ffi::c_void>, flags: u32, pfncallback: super::super::System::Threading::LPTHREAD_START_ROUTINE) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHCreateThread(pfnthreadproc : super::super::System::Threading:: LPTHREAD_START_ROUTINE, pdata : *const ::core::ffi::c_void, flags : u32, pfncallback : super::super::System::Threading:: LPTHREAD_START_ROUTINE) -> super::super::Foundation:: BOOL);
    SHCreateThread(pfnthreadproc, ::core::mem::transmute(pdata.unwrap_or(::std::ptr::null())), flags, pfncallback).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHCreateThreadRef(pcref: *mut i32, ppunk: *mut ::core::option::Option<::windows_core::IUnknown>) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHCreateThreadRef(pcref : *mut i32, ppunk : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    SHCreateThreadRef(pcref, ::core::mem::transmute(ppunk)).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Threading\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Threading"))]
#[inline]
pub unsafe fn SHCreateThreadWithHandle(pfnthreadproc: super::super::System::Threading::LPTHREAD_START_ROUTINE, pdata: ::core::option::Option<*const ::core::ffi::c_void>, flags: u32, pfncallback: super::super::System::Threading::LPTHREAD_START_ROUTINE, phandle: ::core::option::Option<*mut super::super::Foundation::HANDLE>) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHCreateThreadWithHandle(pfnthreadproc : super::super::System::Threading:: LPTHREAD_START_ROUTINE, pdata : *const ::core::ffi::c_void, flags : u32, pfncallback : super::super::System::Threading:: LPTHREAD_START_ROUTINE, phandle : *mut super::super::Foundation:: HANDLE) -> super::super::Foundation:: BOOL);
    SHCreateThreadWithHandle(pfnthreadproc, ::core::mem::transmute(pdata.unwrap_or(::std::ptr::null())), flags, pfncallback, ::core::mem::transmute(phandle.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
#[inline]
pub unsafe fn SHDefExtractIconA<P0>(psziconfile: P0, iindex: i32, uflags: u32, phiconlarge: ::core::option::Option<*mut super::WindowsAndMessaging::HICON>, phiconsmall: ::core::option::Option<*mut super::WindowsAndMessaging::HICON>, niconsize: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHDefExtractIconA(psziconfile : ::windows_core::PCSTR, iindex : i32, uflags : u32, phiconlarge : *mut super::WindowsAndMessaging:: HICON, phiconsmall : *mut super::WindowsAndMessaging:: HICON, niconsize : u32) -> ::windows_core::HRESULT);
    SHDefExtractIconA(psziconfile.into_param().abi(), iindex, uflags, ::core::mem::transmute(phiconlarge.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(phiconsmall.unwrap_or(::std::ptr::null_mut())), niconsize).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
#[inline]
pub unsafe fn SHDefExtractIconW<P0>(psziconfile: P0, iindex: i32, uflags: u32, phiconlarge: ::core::option::Option<*mut super::WindowsAndMessaging::HICON>, phiconsmall: ::core::option::Option<*mut super::WindowsAndMessaging::HICON>, niconsize: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHDefExtractIconW(psziconfile : ::windows_core::PCWSTR, iindex : i32, uflags : u32, phiconlarge : *mut super::WindowsAndMessaging:: HICON, phiconsmall : *mut super::WindowsAndMessaging:: HICON, niconsize : u32) -> ::windows_core::HRESULT);
    SHDefExtractIconW(psziconfile.into_param().abi(), iindex, uflags, ::core::mem::transmute(phiconlarge.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(phiconsmall.unwrap_or(::std::ptr::null_mut())), niconsize).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHDeleteEmptyKeyA<P0, P1>(hkey: P0, pszsubkey: P1) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHDeleteEmptyKeyA(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCSTR) -> super::super::Foundation:: WIN32_ERROR);
    SHDeleteEmptyKeyA(hkey.into_param().abi(), pszsubkey.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHDeleteEmptyKeyW<P0, P1>(hkey: P0, pszsubkey: P1) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHDeleteEmptyKeyW(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCWSTR) -> super::super::Foundation:: WIN32_ERROR);
    SHDeleteEmptyKeyW(hkey.into_param().abi(), pszsubkey.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHDeleteKeyA<P0, P1>(hkey: P0, pszsubkey: P1) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHDeleteKeyA(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCSTR) -> super::super::Foundation:: WIN32_ERROR);
    SHDeleteKeyA(hkey.into_param().abi(), pszsubkey.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHDeleteKeyW<P0, P1>(hkey: P0, pszsubkey: P1) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHDeleteKeyW(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCWSTR) -> super::super::Foundation:: WIN32_ERROR);
    SHDeleteKeyW(hkey.into_param().abi(), pszsubkey.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHDeleteValueA<P0, P1, P2>(hkey: P0, pszsubkey: P1, pszvalue: P2) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHDeleteValueA(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCSTR, pszvalue : ::windows_core::PCSTR) -> super::super::Foundation:: WIN32_ERROR);
    SHDeleteValueA(hkey.into_param().abi(), pszsubkey.into_param().abi(), pszvalue.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHDeleteValueW<P0, P1, P2>(hkey: P0, pszsubkey: P1, pszvalue: P2) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHDeleteValueW(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCWSTR, pszvalue : ::windows_core::PCWSTR) -> super::super::Foundation:: WIN32_ERROR);
    SHDeleteValueW(hkey.into_param().abi(), pszsubkey.into_param().abi(), pszvalue.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHDestroyPropSheetExtArray<P0>(hpsxa: P0)
where
    P0: ::windows_core::IntoParam<HPSXA>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHDestroyPropSheetExtArray(hpsxa : HPSXA) -> ());
    SHDestroyPropSheetExtArray(hpsxa.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
#[inline]
pub unsafe fn SHDoDragDrop<P0, P1, P2>(hwnd: P0, pdata: P1, pdsrc: P2, dweffect: super::super::System::Ole::DROPEFFECT) -> ::windows_core::Result<super::super::System::Ole::DROPEFFECT>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    P2: ::windows_core::IntoParam<super::super::System::Ole::IDropSource>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHDoDragDrop(hwnd : super::super::Foundation:: HWND, pdata : * mut::core::ffi::c_void, pdsrc : * mut::core::ffi::c_void, dweffect : super::super::System::Ole:: DROPEFFECT, pdweffect : *mut super::super::System::Ole:: DROPEFFECT) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHDoDragDrop(hwnd.into_param().abi(), pdata.into_param().abi(), pdsrc.into_param().abi(), dweffect, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHEmptyRecycleBinA<P0, P1>(hwnd: P0, pszrootpath: P1, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHEmptyRecycleBinA(hwnd : super::super::Foundation:: HWND, pszrootpath : ::windows_core::PCSTR, dwflags : u32) -> ::windows_core::HRESULT);
    SHEmptyRecycleBinA(hwnd.into_param().abi(), pszrootpath.into_param().abi(), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHEmptyRecycleBinW<P0, P1>(hwnd: P0, pszrootpath: P1, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHEmptyRecycleBinW(hwnd : super::super::Foundation:: HWND, pszrootpath : ::windows_core::PCWSTR, dwflags : u32) -> ::windows_core::HRESULT);
    SHEmptyRecycleBinW(hwnd.into_param().abi(), pszrootpath.into_param().abi(), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHEnumKeyExA<P0>(hkey: P0, dwindex: u32, pszname: ::windows_core::PSTR, pcchname: *mut u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHEnumKeyExA(hkey : super::super::System::Registry:: HKEY, dwindex : u32, pszname : ::windows_core::PSTR, pcchname : *mut u32) -> super::super::Foundation:: WIN32_ERROR);
    SHEnumKeyExA(hkey.into_param().abi(), dwindex, ::core::mem::transmute(pszname), pcchname).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHEnumKeyExW<P0>(hkey: P0, dwindex: u32, pszname: ::windows_core::PWSTR, pcchname: *mut u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHEnumKeyExW(hkey : super::super::System::Registry:: HKEY, dwindex : u32, pszname : ::windows_core::PWSTR, pcchname : *mut u32) -> super::super::Foundation:: WIN32_ERROR);
    SHEnumKeyExW(hkey.into_param().abi(), dwindex, ::core::mem::transmute(pszname), pcchname).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHEnumValueA<P0>(hkey: P0, dwindex: u32, pszvaluename: ::windows_core::PSTR, pcchvaluename: ::core::option::Option<*mut u32>, pdwtype: ::core::option::Option<*mut u32>, pvdata: ::core::option::Option<*mut ::core::ffi::c_void>, pcbdata: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHEnumValueA(hkey : super::super::System::Registry:: HKEY, dwindex : u32, pszvaluename : ::windows_core::PSTR, pcchvaluename : *mut u32, pdwtype : *mut u32, pvdata : *mut ::core::ffi::c_void, pcbdata : *mut u32) -> super::super::Foundation:: WIN32_ERROR);
    SHEnumValueA(hkey.into_param().abi(), dwindex, ::core::mem::transmute(pszvaluename), ::core::mem::transmute(pcchvaluename.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pdwtype.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcbdata.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHEnumValueW<P0>(hkey: P0, dwindex: u32, pszvaluename: ::windows_core::PWSTR, pcchvaluename: ::core::option::Option<*mut u32>, pdwtype: ::core::option::Option<*mut u32>, pvdata: ::core::option::Option<*mut ::core::ffi::c_void>, pcbdata: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHEnumValueW(hkey : super::super::System::Registry:: HKEY, dwindex : u32, pszvaluename : ::windows_core::PWSTR, pcchvaluename : *mut u32, pdwtype : *mut u32, pvdata : *mut ::core::ffi::c_void, pcbdata : *mut u32) -> super::super::Foundation:: WIN32_ERROR);
    SHEnumValueW(hkey.into_param().abi(), dwindex, ::core::mem::transmute(pszvaluename), ::core::mem::transmute(pcchvaluename.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pdwtype.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcbdata.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Registry\"`*"]
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn SHEnumerateUnreadMailAccountsW<P0>(hkeyuser: P0, dwindex: u32, pszmailaddress: &mut [u16]) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHEnumerateUnreadMailAccountsW(hkeyuser : super::super::System::Registry:: HKEY, dwindex : u32, pszmailaddress : ::windows_core::PWSTR, cchmailaddress : i32) -> ::windows_core::HRESULT);
    SHEnumerateUnreadMailAccountsW(hkeyuser.into_param().abi(), dwindex, ::core::mem::transmute(pszmailaddress.as_ptr()), pszmailaddress.len() as _).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHEvaluateSystemCommandTemplate<P0>(pszcmdtemplate: P0, ppszapplication: *mut ::windows_core::PWSTR, ppszcommandline: ::core::option::Option<*mut ::windows_core::PWSTR>, ppszparameters: ::core::option::Option<*mut ::windows_core::PWSTR>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHEvaluateSystemCommandTemplate(pszcmdtemplate : ::windows_core::PCWSTR, ppszapplication : *mut ::windows_core::PWSTR, ppszcommandline : *mut ::windows_core::PWSTR, ppszparameters : *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    SHEvaluateSystemCommandTemplate(pszcmdtemplate.into_param().abi(), ppszapplication, ::core::mem::transmute(ppszcommandline.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppszparameters.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHFileOperationA(lpfileop: *mut SHFILEOPSTRUCTA) -> i32 {
    ::windows_targets::link!("shell32.dll" "system" fn SHFileOperationA(lpfileop : *mut SHFILEOPSTRUCTA) -> i32);
    SHFileOperationA(lpfileop)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHFileOperationW(lpfileop: *mut SHFILEOPSTRUCTW) -> i32 {
    ::windows_targets::link!("shell32.dll" "system" fn SHFileOperationW(lpfileop : *mut SHFILEOPSTRUCTW) -> i32);
    SHFileOperationW(lpfileop)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHFindFiles(pidlfolder: ::core::option::Option<*const Common::ITEMIDLIST>, pidlsavefile: ::core::option::Option<*const Common::ITEMIDLIST>) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shell32.dll" "system" fn SHFindFiles(pidlfolder : *const Common:: ITEMIDLIST, pidlsavefile : *const Common:: ITEMIDLIST) -> super::super::Foundation:: BOOL);
    SHFindFiles(::core::mem::transmute(pidlfolder.unwrap_or(::std::ptr::null())), ::core::mem::transmute(pidlsavefile.unwrap_or(::std::ptr::null())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn SHFind_InitMenuPopup<P0, P1>(hmenu: P0, hwndowner: P1, idcmdfirst: u32, idcmdlast: u32) -> ::core::option::Option<IContextMenu>
where
    P0: ::windows_core::IntoParam<super::WindowsAndMessaging::HMENU>,
    P1: ::windows_core::IntoParam<super::super::Foundation::HWND>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHFind_InitMenuPopup(hmenu : super::WindowsAndMessaging:: HMENU, hwndowner : super::super::Foundation:: HWND, idcmdfirst : u32, idcmdlast : u32) -> ::core::option::Option < IContextMenu >);
    SHFind_InitMenuPopup(hmenu.into_param().abi(), hwndowner.into_param().abi(), idcmdfirst, idcmdlast)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHFlushSFCache() {
    ::windows_targets::link!("shell32.dll" "system" fn SHFlushSFCache() -> ());
    SHFlushSFCache()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHFormatDateTimeA(pft: *const super::super::Foundation::FILETIME, pdwflags: ::core::option::Option<*mut u32>, pszbuf: &mut [u8]) -> i32 {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHFormatDateTimeA(pft : *const super::super::Foundation:: FILETIME, pdwflags : *mut u32, pszbuf : ::windows_core::PSTR, cchbuf : u32) -> i32);
    SHFormatDateTimeA(pft, ::core::mem::transmute(pdwflags.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pszbuf.as_ptr()), pszbuf.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHFormatDateTimeW(pft: *const super::super::Foundation::FILETIME, pdwflags: ::core::option::Option<*mut u32>, pszbuf: &mut [u16]) -> i32 {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHFormatDateTimeW(pft : *const super::super::Foundation:: FILETIME, pdwflags : *mut u32, pszbuf : ::windows_core::PWSTR, cchbuf : u32) -> i32);
    SHFormatDateTimeW(pft, ::core::mem::transmute(pdwflags.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pszbuf.as_ptr()), pszbuf.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHFormatDrive<P0>(hwnd: P0, drive: u32, fmtid: SHFMT_ID, options: SHFMT_OPT) -> u32
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHFormatDrive(hwnd : super::super::Foundation:: HWND, drive : u32, fmtid : SHFMT_ID, options : u32) -> u32);
    SHFormatDrive(hwnd.into_param().abi(), drive, fmtid, options.0 as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHFree(pv: ::core::option::Option<*const ::core::ffi::c_void>) {
    ::windows_targets::link!("shell32.dll" "system" fn SHFree(pv : *const ::core::ffi::c_void) -> ());
    SHFree(::core::mem::transmute(pv.unwrap_or(::std::ptr::null())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHFreeNameMappings<P0>(hnamemappings: P0)
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHFreeNameMappings(hnamemappings : super::super::Foundation:: HANDLE) -> ());
    SHFreeNameMappings(hnamemappings.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHFreeShared<P0>(hdata: P0, dwprocessid: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHFreeShared(hdata : super::super::Foundation:: HANDLE, dwprocessid : u32) -> super::super::Foundation:: BOOL);
    SHFreeShared(hdata.into_param().abi(), dwprocessid).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn SHGetAttributesFromDataObject<P0>(pdo: P0, dwattributemask: u32, pdwattributes: ::core::option::Option<*mut u32>, pcitems: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetAttributesFromDataObject(pdo : * mut::core::ffi::c_void, dwattributemask : u32, pdwattributes : *mut u32, pcitems : *mut u32) -> ::windows_core::HRESULT);
    SHGetAttributesFromDataObject(pdo.into_param().abi(), dwattributemask, ::core::mem::transmute(pdwattributes.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcitems.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHGetDataFromIDListA<P0>(psf: P0, pidl: *const Common::ITEMIDLIST, nformat: SHGDFIL_FORMAT, pv: *mut ::core::ffi::c_void, cb: i32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<IShellFolder>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetDataFromIDListA(psf : * mut::core::ffi::c_void, pidl : *const Common:: ITEMIDLIST, nformat : SHGDFIL_FORMAT, pv : *mut ::core::ffi::c_void, cb : i32) -> ::windows_core::HRESULT);
    SHGetDataFromIDListA(psf.into_param().abi(), pidl, nformat, pv, cb).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHGetDataFromIDListW<P0>(psf: P0, pidl: *const Common::ITEMIDLIST, nformat: SHGDFIL_FORMAT, pv: *mut ::core::ffi::c_void, cb: i32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<IShellFolder>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetDataFromIDListW(psf : * mut::core::ffi::c_void, pidl : *const Common:: ITEMIDLIST, nformat : SHGDFIL_FORMAT, pv : *mut ::core::ffi::c_void, cb : i32) -> ::windows_core::HRESULT);
    SHGetDataFromIDListW(psf.into_param().abi(), pidl, nformat, pv, cb).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHGetDesktopFolder() -> ::windows_core::Result<IShellFolder> {
    ::windows_targets::link!("shell32.dll" "system" fn SHGetDesktopFolder(ppshf : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHGetDesktopFolder(&mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHGetDiskFreeSpaceExA<P0>(pszdirectoryname: P0, pulfreebytesavailabletocaller: ::core::option::Option<*mut u64>, pultotalnumberofbytes: ::core::option::Option<*mut u64>, pultotalnumberoffreebytes: ::core::option::Option<*mut u64>) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetDiskFreeSpaceExA(pszdirectoryname : ::windows_core::PCSTR, pulfreebytesavailabletocaller : *mut u64, pultotalnumberofbytes : *mut u64, pultotalnumberoffreebytes : *mut u64) -> super::super::Foundation:: BOOL);
    SHGetDiskFreeSpaceExA(pszdirectoryname.into_param().abi(), ::core::mem::transmute(pulfreebytesavailabletocaller.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pultotalnumberofbytes.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pultotalnumberoffreebytes.unwrap_or(::std::ptr::null_mut())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHGetDiskFreeSpaceExW<P0>(pszdirectoryname: P0, pulfreebytesavailabletocaller: ::core::option::Option<*mut u64>, pultotalnumberofbytes: ::core::option::Option<*mut u64>, pultotalnumberoffreebytes: ::core::option::Option<*mut u64>) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetDiskFreeSpaceExW(pszdirectoryname : ::windows_core::PCWSTR, pulfreebytesavailabletocaller : *mut u64, pultotalnumberofbytes : *mut u64, pultotalnumberoffreebytes : *mut u64) -> super::super::Foundation:: BOOL);
    SHGetDiskFreeSpaceExW(pszdirectoryname.into_param().abi(), ::core::mem::transmute(pulfreebytesavailabletocaller.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pultotalnumberofbytes.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pultotalnumberoffreebytes.unwrap_or(::std::ptr::null_mut())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHGetDriveMedia<P0>(pszdrive: P0) -> ::windows_core::Result<u32>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetDriveMedia(pszdrive : ::windows_core::PCWSTR, pdwmediacontent : *mut u32) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHGetDriveMedia(pszdrive.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Storage_FileSystem\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Storage_FileSystem", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn SHGetFileInfoA<P0>(pszpath: P0, dwfileattributes: super::super::Storage::FileSystem::FILE_FLAGS_AND_ATTRIBUTES, psfi: ::core::option::Option<*mut SHFILEINFOA>, cbfileinfo: u32, uflags: SHGFI_FLAGS) -> usize
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetFileInfoA(pszpath : ::windows_core::PCSTR, dwfileattributes : super::super::Storage::FileSystem:: FILE_FLAGS_AND_ATTRIBUTES, psfi : *mut SHFILEINFOA, cbfileinfo : u32, uflags : SHGFI_FLAGS) -> usize);
    SHGetFileInfoA(pszpath.into_param().abi(), dwfileattributes, ::core::mem::transmute(psfi.unwrap_or(::std::ptr::null_mut())), cbfileinfo, uflags)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Storage_FileSystem\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Storage_FileSystem", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn SHGetFileInfoW<P0>(pszpath: P0, dwfileattributes: super::super::Storage::FileSystem::FILE_FLAGS_AND_ATTRIBUTES, psfi: ::core::option::Option<*mut SHFILEINFOW>, cbfileinfo: u32, uflags: SHGFI_FLAGS) -> usize
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetFileInfoW(pszpath : ::windows_core::PCWSTR, dwfileattributes : super::super::Storage::FileSystem:: FILE_FLAGS_AND_ATTRIBUTES, psfi : *mut SHFILEINFOW, cbfileinfo : u32, uflags : SHGFI_FLAGS) -> usize);
    SHGetFileInfoW(pszpath.into_param().abi(), dwfileattributes, ::core::mem::transmute(psfi.unwrap_or(::std::ptr::null_mut())), cbfileinfo, uflags)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHGetFolderLocation<P0, P1>(hwnd: P0, csidl: i32, htoken: P1, dwflags: u32) -> ::windows_core::Result<*mut Common::ITEMIDLIST>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetFolderLocation(hwnd : super::super::Foundation:: HWND, csidl : i32, htoken : super::super::Foundation:: HANDLE, dwflags : u32, ppidl : *mut *mut Common:: ITEMIDLIST) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHGetFolderLocation(hwnd.into_param().abi(), csidl, htoken.into_param().abi(), dwflags, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHGetFolderPathA<P0, P1>(hwnd: P0, csidl: i32, htoken: P1, dwflags: u32, pszpath: &mut [u8; 260]) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetFolderPathA(hwnd : super::super::Foundation:: HWND, csidl : i32, htoken : super::super::Foundation:: HANDLE, dwflags : u32, pszpath : ::windows_core::PSTR) -> ::windows_core::HRESULT);
    SHGetFolderPathA(hwnd.into_param().abi(), csidl, htoken.into_param().abi(), dwflags, ::core::mem::transmute(pszpath.as_ptr())).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHGetFolderPathAndSubDirA<P0, P1, P2>(hwnd: P0, csidl: i32, htoken: P1, dwflags: u32, pszsubdir: P2, pszpath: &mut [u8; 260]) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetFolderPathAndSubDirA(hwnd : super::super::Foundation:: HWND, csidl : i32, htoken : super::super::Foundation:: HANDLE, dwflags : u32, pszsubdir : ::windows_core::PCSTR, pszpath : ::windows_core::PSTR) -> ::windows_core::HRESULT);
    SHGetFolderPathAndSubDirA(hwnd.into_param().abi(), csidl, htoken.into_param().abi(), dwflags, pszsubdir.into_param().abi(), ::core::mem::transmute(pszpath.as_ptr())).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHGetFolderPathAndSubDirW<P0, P1, P2>(hwnd: P0, csidl: i32, htoken: P1, dwflags: u32, pszsubdir: P2, pszpath: &mut [u16; 260]) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetFolderPathAndSubDirW(hwnd : super::super::Foundation:: HWND, csidl : i32, htoken : super::super::Foundation:: HANDLE, dwflags : u32, pszsubdir : ::windows_core::PCWSTR, pszpath : ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    SHGetFolderPathAndSubDirW(hwnd.into_param().abi(), csidl, htoken.into_param().abi(), dwflags, pszsubdir.into_param().abi(), ::core::mem::transmute(pszpath.as_ptr())).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHGetFolderPathW<P0, P1>(hwnd: P0, csidl: i32, htoken: P1, dwflags: u32, pszpath: &mut [u16; 260]) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetFolderPathW(hwnd : super::super::Foundation:: HWND, csidl : i32, htoken : super::super::Foundation:: HANDLE, dwflags : u32, pszpath : ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    SHGetFolderPathW(hwnd.into_param().abi(), csidl, htoken.into_param().abi(), dwflags, ::core::mem::transmute(pszpath.as_ptr())).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHGetIDListFromObject<P0>(punk: P0) -> ::windows_core::Result<*mut Common::ITEMIDLIST>
where
    P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetIDListFromObject(punk : * mut::core::ffi::c_void, ppidl : *mut *mut Common:: ITEMIDLIST) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHGetIDListFromObject(punk.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHGetIconOverlayIndexA<P0>(psziconpath: P0, iiconindex: i32) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetIconOverlayIndexA(psziconpath : ::windows_core::PCSTR, iiconindex : i32) -> i32);
    SHGetIconOverlayIndexA(psziconpath.into_param().abi(), iiconindex)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHGetIconOverlayIndexW<P0>(psziconpath: P0, iiconindex: i32) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetIconOverlayIndexW(psziconpath : ::windows_core::PCWSTR, iiconindex : i32) -> i32);
    SHGetIconOverlayIndexW(psziconpath.into_param().abi(), iiconindex)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHGetImageList<T>(iimagelist: i32) -> ::windows_core::Result<T>
where
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetImageList(iimagelist : i32, riid : *const ::windows_core::GUID, ppvobj : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHGetImageList(iimagelist, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHGetInstanceExplorer() -> ::windows_core::Result<::windows_core::IUnknown> {
    ::windows_targets::link!("shell32.dll" "system" fn SHGetInstanceExplorer(ppunk : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHGetInstanceExplorer(&mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHGetInverseCMAP(pbmap: &mut [u8]) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHGetInverseCMAP(pbmap : *mut u8, cbmap : u32) -> ::windows_core::HRESULT);
    SHGetInverseCMAP(::core::mem::transmute(pbmap.as_ptr()), pbmap.len() as _).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn SHGetItemFromDataObject<P0, T>(pdtobj: P0, dwflags: DATAOBJ_GET_ITEM_FLAGS) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetItemFromDataObject(pdtobj : * mut::core::ffi::c_void, dwflags : DATAOBJ_GET_ITEM_FLAGS, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHGetItemFromDataObject(pdtobj.into_param().abi(), dwflags, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHGetItemFromObject<P0, T>(punk: P0) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetItemFromObject(punk : * mut::core::ffi::c_void, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHGetItemFromObject(punk.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHGetKnownFolderIDList<P0>(rfid: *const ::windows_core::GUID, dwflags: u32, htoken: P0) -> ::windows_core::Result<*mut Common::ITEMIDLIST>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetKnownFolderIDList(rfid : *const ::windows_core::GUID, dwflags : u32, htoken : super::super::Foundation:: HANDLE, ppidl : *mut *mut Common:: ITEMIDLIST) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHGetKnownFolderIDList(rfid, dwflags, htoken.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHGetKnownFolderItem<P0, T>(rfid: *const ::windows_core::GUID, flags: KNOWN_FOLDER_FLAG, htoken: P0) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetKnownFolderItem(rfid : *const ::windows_core::GUID, flags : KNOWN_FOLDER_FLAG, htoken : super::super::Foundation:: HANDLE, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHGetKnownFolderItem(rfid, flags, htoken.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHGetKnownFolderPath<P0>(rfid: *const ::windows_core::GUID, dwflags: KNOWN_FOLDER_FLAG, htoken: P0) -> ::windows_core::Result<::windows_core::PWSTR>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetKnownFolderPath(rfid : *const ::windows_core::GUID, dwflags : u32, htoken : super::super::Foundation:: HANDLE, ppszpath : *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHGetKnownFolderPath(rfid, dwflags.0 as _, htoken.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHGetLocalizedName<P0>(pszpath: P0, pszresmodule: &mut [u16], pidsres: *mut i32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetLocalizedName(pszpath : ::windows_core::PCWSTR, pszresmodule : ::windows_core::PWSTR, cch : u32, pidsres : *mut i32) -> ::windows_core::HRESULT);
    SHGetLocalizedName(pszpath.into_param().abi(), ::core::mem::transmute(pszresmodule.as_ptr()), pszresmodule.len() as _, pidsres).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn SHGetMalloc() -> ::windows_core::Result<super::super::System::Com::IMalloc> {
    ::windows_targets::link!("shell32.dll" "system" fn SHGetMalloc(ppmalloc : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHGetMalloc(&mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHGetNameFromIDList(pidl: *const Common::ITEMIDLIST, sigdnname: SIGDN) -> ::windows_core::Result<::windows_core::PWSTR> {
    ::windows_targets::link!("shell32.dll" "system" fn SHGetNameFromIDList(pidl : *const Common:: ITEMIDLIST, sigdnname : SIGDN, ppszname : *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHGetNameFromIDList(pidl, sigdnname, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHGetNewLinkInfoA<P0, P1>(pszlinkto: P0, pszdir: P1, pszname: &mut [u8; 260], pfmustcopy: *mut super::super::Foundation::BOOL, uflags: u32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetNewLinkInfoA(pszlinkto : ::windows_core::PCSTR, pszdir : ::windows_core::PCSTR, pszname : ::windows_core::PSTR, pfmustcopy : *mut super::super::Foundation:: BOOL, uflags : u32) -> super::super::Foundation:: BOOL);
    SHGetNewLinkInfoA(pszlinkto.into_param().abi(), pszdir.into_param().abi(), ::core::mem::transmute(pszname.as_ptr()), pfmustcopy, uflags)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHGetNewLinkInfoW<P0, P1>(pszlinkto: P0, pszdir: P1, pszname: &mut [u16; 260], pfmustcopy: *mut super::super::Foundation::BOOL, uflags: u32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetNewLinkInfoW(pszlinkto : ::windows_core::PCWSTR, pszdir : ::windows_core::PCWSTR, pszname : ::windows_core::PWSTR, pfmustcopy : *mut super::super::Foundation:: BOOL, uflags : u32) -> super::super::Foundation:: BOOL);
    SHGetNewLinkInfoW(pszlinkto.into_param().abi(), pszdir.into_param().abi(), ::core::mem::transmute(pszname.as_ptr()), pfmustcopy, uflags)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHGetPathFromIDListA(pidl: *const Common::ITEMIDLIST, pszpath: &mut [u8; 260]) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shell32.dll" "system" fn SHGetPathFromIDListA(pidl : *const Common:: ITEMIDLIST, pszpath : ::windows_core::PSTR) -> super::super::Foundation:: BOOL);
    SHGetPathFromIDListA(pidl, ::core::mem::transmute(pszpath.as_ptr()))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHGetPathFromIDListEx(pidl: *const Common::ITEMIDLIST, pszpath: &mut [u16], uopts: GPFIDL_FLAGS) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shell32.dll" "system" fn SHGetPathFromIDListEx(pidl : *const Common:: ITEMIDLIST, pszpath : ::windows_core::PWSTR, cchpath : u32, uopts : GPFIDL_FLAGS) -> super::super::Foundation:: BOOL);
    SHGetPathFromIDListEx(pidl, ::core::mem::transmute(pszpath.as_ptr()), pszpath.len() as _, uopts)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHGetPathFromIDListW(pidl: *const Common::ITEMIDLIST, pszpath: &mut [u16; 260]) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shell32.dll" "system" fn SHGetPathFromIDListW(pidl : *const Common:: ITEMIDLIST, pszpath : ::windows_core::PWSTR) -> super::super::Foundation:: BOOL);
    SHGetPathFromIDListW(pidl, ::core::mem::transmute(pszpath.as_ptr()))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHGetRealIDL<P0>(psf: P0, pidlsimple: *const Common::ITEMIDLIST) -> ::windows_core::Result<*mut Common::ITEMIDLIST>
where
    P0: ::windows_core::IntoParam<IShellFolder>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetRealIDL(psf : * mut::core::ffi::c_void, pidlsimple : *const Common:: ITEMIDLIST, ppidlreal : *mut *mut Common:: ITEMIDLIST) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHGetRealIDL(psf.into_param().abi(), pidlsimple, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHGetSetFolderCustomSettings<P0>(pfcs: *mut SHFOLDERCUSTOMSETTINGS, pszpath: P0, dwreadwrite: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetSetFolderCustomSettings(pfcs : *mut SHFOLDERCUSTOMSETTINGS, pszpath : ::windows_core::PCWSTR, dwreadwrite : u32) -> ::windows_core::HRESULT);
    SHGetSetFolderCustomSettings(pfcs, pszpath.into_param().abi(), dwreadwrite).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHGetSetSettings<P0>(lpss: ::core::option::Option<*mut SHELLSTATEA>, dwmask: SSF_MASK, bset: P0)
where
    P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetSetSettings(lpss : *mut SHELLSTATEA, dwmask : SSF_MASK, bset : super::super::Foundation:: BOOL) -> ());
    SHGetSetSettings(::core::mem::transmute(lpss.unwrap_or(::std::ptr::null_mut())), dwmask, bset.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHGetSettings(psfs: *mut SHELLFLAGSTATE, dwmask: u32) {
    ::windows_targets::link!("shell32.dll" "system" fn SHGetSettings(psfs : *mut SHELLFLAGSTATE, dwmask : u32) -> ());
    SHGetSettings(psfs, dwmask)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHGetSpecialFolderLocation<P0>(hwnd: P0, csidl: i32) -> ::windows_core::Result<*mut Common::ITEMIDLIST>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetSpecialFolderLocation(hwnd : super::super::Foundation:: HWND, csidl : i32, ppidl : *mut *mut Common:: ITEMIDLIST) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHGetSpecialFolderLocation(hwnd.into_param().abi(), csidl, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHGetSpecialFolderPathA<P0, P1>(hwnd: P0, pszpath: &mut [u8; 260], csidl: i32, fcreate: P1) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetSpecialFolderPathA(hwnd : super::super::Foundation:: HWND, pszpath : ::windows_core::PSTR, csidl : i32, fcreate : super::super::Foundation:: BOOL) -> super::super::Foundation:: BOOL);
    SHGetSpecialFolderPathA(hwnd.into_param().abi(), ::core::mem::transmute(pszpath.as_ptr()), csidl, fcreate.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHGetSpecialFolderPathW<P0, P1>(hwnd: P0, pszpath: &mut [u16; 260], csidl: i32, fcreate: P1) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetSpecialFolderPathW(hwnd : super::super::Foundation:: HWND, pszpath : ::windows_core::PWSTR, csidl : i32, fcreate : super::super::Foundation:: BOOL) -> super::super::Foundation:: BOOL);
    SHGetSpecialFolderPathW(hwnd.into_param().abi(), ::core::mem::transmute(pszpath.as_ptr()), csidl, fcreate.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
#[inline]
pub unsafe fn SHGetStockIconInfo(siid: SHSTOCKICONID, uflags: SHGSI_FLAGS, psii: *mut SHSTOCKICONINFO) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shell32.dll" "system" fn SHGetStockIconInfo(siid : SHSTOCKICONID, uflags : SHGSI_FLAGS, psii : *mut SHSTOCKICONINFO) -> ::windows_core::HRESULT);
    SHGetStockIconInfo(siid, uflags, psii).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_PropertiesSystem\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
#[inline]
pub unsafe fn SHGetTemporaryPropertyForItem<P0>(psi: P0, propkey: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>
where
    P0: ::windows_core::IntoParam<IShellItem>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetTemporaryPropertyForItem(psi : * mut::core::ffi::c_void, propkey : *const PropertiesSystem:: PROPERTYKEY, ppropvar : *mut super::super::System::Com::StructuredStorage:: PROPVARIANT) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHGetTemporaryPropertyForItem(psi.into_param().abi(), propkey, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHGetThreadRef() -> ::windows_core::Result<::windows_core::IUnknown> {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHGetThreadRef(ppunk : *mut * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHGetThreadRef(&mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHGetUnreadMailCountW<P0, P1>(hkeyuser: P0, pszmailaddress: P1, pdwcount: ::core::option::Option<*mut u32>, pfiletime: ::core::option::Option<*mut super::super::Foundation::FILETIME>, pszshellexecutecommand: ::core::option::Option<&mut [u16]>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHGetUnreadMailCountW(hkeyuser : super::super::System::Registry:: HKEY, pszmailaddress : ::windows_core::PCWSTR, pdwcount : *mut u32, pfiletime : *mut super::super::Foundation:: FILETIME, pszshellexecutecommand : ::windows_core::PWSTR, cchshellexecutecommand : i32) -> ::windows_core::HRESULT);
    SHGetUnreadMailCountW(hkeyuser.into_param().abi(), pszmailaddress.into_param().abi(), ::core::mem::transmute(pdwcount.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pfiletime.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pszshellexecutecommand.as_deref().map_or(::core::ptr::null(), |slice| slice.as_ptr())), pszshellexecutecommand.as_deref().map_or(0, |slice| slice.len() as _)).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHGetValueA<P0, P1, P2>(hkey: P0, pszsubkey: P1, pszvalue: P2, pdwtype: ::core::option::Option<*mut u32>, pvdata: ::core::option::Option<*mut ::core::ffi::c_void>, pcbdata: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHGetValueA(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCSTR, pszvalue : ::windows_core::PCSTR, pdwtype : *mut u32, pvdata : *mut ::core::ffi::c_void, pcbdata : *mut u32) -> super::super::Foundation:: WIN32_ERROR);
    SHGetValueA(hkey.into_param().abi(), pszsubkey.into_param().abi(), pszvalue.into_param().abi(), ::core::mem::transmute(pdwtype.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcbdata.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHGetValueW<P0, P1, P2>(hkey: P0, pszsubkey: P1, pszvalue: P2, pdwtype: ::core::option::Option<*mut u32>, pvdata: ::core::option::Option<*mut ::core::ffi::c_void>, pcbdata: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHGetValueW(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCWSTR, pszvalue : ::windows_core::PCWSTR, pdwtype : *mut u32, pvdata : *mut ::core::ffi::c_void, pcbdata : *mut u32) -> super::super::Foundation:: WIN32_ERROR);
    SHGetValueW(hkey.into_param().abi(), pszsubkey.into_param().abi(), pszvalue.into_param().abi(), ::core::mem::transmute(pdwtype.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcbdata.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHGetViewStatePropertyBag<P0, T>(pidl: ::core::option::Option<*const Common::ITEMIDLIST>, pszbagname: P0, dwflags: u32) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHGetViewStatePropertyBag(pidl : *const Common:: ITEMIDLIST, pszbagname : ::windows_core::PCWSTR, dwflags : u32, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    SHGetViewStatePropertyBag(::core::mem::transmute(pidl.unwrap_or(::std::ptr::null())), pszbagname.into_param().abi(), dwflags, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHGlobalCounterDecrement(id: SHGLOBALCOUNTER) -> i32 {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHGlobalCounterDecrement(id : SHGLOBALCOUNTER) -> i32);
    SHGlobalCounterDecrement(id)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHGlobalCounterGetValue(id: SHGLOBALCOUNTER) -> i32 {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHGlobalCounterGetValue(id : SHGLOBALCOUNTER) -> i32);
    SHGlobalCounterGetValue(id)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHGlobalCounterIncrement(id: SHGLOBALCOUNTER) -> i32 {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHGlobalCounterIncrement(id : SHGLOBALCOUNTER) -> i32);
    SHGlobalCounterIncrement(id)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHHandleUpdateImage(pidlextra: *const Common::ITEMIDLIST) -> i32 {
    ::windows_targets::link!("shell32.dll" "system" fn SHHandleUpdateImage(pidlextra : *const Common:: ITEMIDLIST) -> i32);
    SHHandleUpdateImage(pidlextra)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHILCreateFromPath<P0>(pszpath: P0, ppidl: *mut *mut Common::ITEMIDLIST, rgfinout: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHILCreateFromPath(pszpath : ::windows_core::PCWSTR, ppidl : *mut *mut Common:: ITEMIDLIST, rgfinout : *mut u32) -> ::windows_core::HRESULT);
    SHILCreateFromPath(pszpath.into_param().abi(), ppidl, ::core::mem::transmute(rgfinout.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHInvokePrinterCommandA<P0, P1, P2, P3>(hwnd: P0, uaction: u32, lpbuf1: P1, lpbuf2: P2, fmodal: P3) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P3: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHInvokePrinterCommandA(hwnd : super::super::Foundation:: HWND, uaction : u32, lpbuf1 : ::windows_core::PCSTR, lpbuf2 : ::windows_core::PCSTR, fmodal : super::super::Foundation:: BOOL) -> super::super::Foundation:: BOOL);
    SHInvokePrinterCommandA(hwnd.into_param().abi(), uaction, lpbuf1.into_param().abi(), lpbuf2.into_param().abi(), fmodal.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHInvokePrinterCommandW<P0, P1, P2, P3>(hwnd: P0, uaction: u32, lpbuf1: P1, lpbuf2: P2, fmodal: P3) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P3: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHInvokePrinterCommandW(hwnd : super::super::Foundation:: HWND, uaction : u32, lpbuf1 : ::windows_core::PCWSTR, lpbuf2 : ::windows_core::PCWSTR, fmodal : super::super::Foundation:: BOOL) -> super::super::Foundation:: BOOL);
    SHInvokePrinterCommandW(hwnd.into_param().abi(), uaction, lpbuf1.into_param().abi(), lpbuf2.into_param().abi(), fmodal.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHIsFileAvailableOffline<P0>(pwszpath: P0, pdwstatus: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHIsFileAvailableOffline(pwszpath : ::windows_core::PCWSTR, pdwstatus : *mut u32) -> ::windows_core::HRESULT);
    SHIsFileAvailableOffline(pwszpath.into_param().abi(), ::core::mem::transmute(pdwstatus.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHIsLowMemoryMachine(dwtype: u32) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHIsLowMemoryMachine(dwtype : u32) -> super::super::Foundation:: BOOL);
    SHIsLowMemoryMachine(dwtype)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHLimitInputEdit<P0, P1>(hwndedit: P0, psf: P1) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<IShellFolder>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHLimitInputEdit(hwndedit : super::super::Foundation:: HWND, psf : * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    SHLimitInputEdit(hwndedit.into_param().abi(), psf.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHLoadInProc(rclsid: *const ::windows_core::GUID) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shell32.dll" "system" fn SHLoadInProc(rclsid : *const ::windows_core::GUID) -> ::windows_core::HRESULT);
    SHLoadInProc(rclsid).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHLoadIndirectString<P0>(pszsource: P0, pszoutbuf: &mut [u16], ppvreserved: ::core::option::Option<*const *const ::core::ffi::c_void>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHLoadIndirectString(pszsource : ::windows_core::PCWSTR, pszoutbuf : ::windows_core::PWSTR, cchoutbuf : u32, ppvreserved : *const *const ::core::ffi::c_void) -> ::windows_core::HRESULT);
    SHLoadIndirectString(pszsource.into_param().abi(), ::core::mem::transmute(pszoutbuf.as_ptr()), pszoutbuf.len() as _, ::core::mem::transmute(ppvreserved.unwrap_or(::std::ptr::null()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHLoadNonloadedIconOverlayIdentifiers() -> ::windows_core::Result<()> {
    ::windows_targets::link!("shell32.dll" "system" fn SHLoadNonloadedIconOverlayIdentifiers() -> ::windows_core::HRESULT);
    SHLoadNonloadedIconOverlayIdentifiers().ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHLockShared<P0>(hdata: P0, dwprocessid: u32) -> *mut ::core::ffi::c_void
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHLockShared(hdata : super::super::Foundation:: HANDLE, dwprocessid : u32) -> *mut ::core::ffi::c_void);
    SHLockShared(hdata.into_param().abi(), dwprocessid)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHMapPIDLToSystemImageListIndex<P0>(pshf: P0, pidl: *const Common::ITEMIDLIST, piindexsel: ::core::option::Option<*mut i32>) -> i32
where
    P0: ::windows_core::IntoParam<IShellFolder>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHMapPIDLToSystemImageListIndex(pshf : * mut::core::ffi::c_void, pidl : *const Common:: ITEMIDLIST, piindexsel : *mut i32) -> i32);
    SHMapPIDLToSystemImageListIndex(pshf.into_param().abi(), pidl, ::core::mem::transmute(piindexsel.unwrap_or(::std::ptr::null_mut())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHMessageBoxCheckA<P0, P1, P2, P3>(hwnd: P0, psztext: P1, pszcaption: P2, utype: u32, idefault: i32, pszregval: P3) -> i32
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P3: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHMessageBoxCheckA(hwnd : super::super::Foundation:: HWND, psztext : ::windows_core::PCSTR, pszcaption : ::windows_core::PCSTR, utype : u32, idefault : i32, pszregval : ::windows_core::PCSTR) -> i32);
    SHMessageBoxCheckA(hwnd.into_param().abi(), psztext.into_param().abi(), pszcaption.into_param().abi(), utype, idefault, pszregval.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHMessageBoxCheckW<P0, P1, P2, P3>(hwnd: P0, psztext: P1, pszcaption: P2, utype: u32, idefault: i32, pszregval: P3) -> i32
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P3: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHMessageBoxCheckW(hwnd : super::super::Foundation:: HWND, psztext : ::windows_core::PCWSTR, pszcaption : ::windows_core::PCWSTR, utype : u32, idefault : i32, pszregval : ::windows_core::PCWSTR) -> i32);
    SHMessageBoxCheckW(hwnd.into_param().abi(), psztext.into_param().abi(), pszcaption.into_param().abi(), utype, idefault, pszregval.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[inline]
pub unsafe fn SHMultiFileProperties<P0>(pdtobj: P0, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHMultiFileProperties(pdtobj : * mut::core::ffi::c_void, dwflags : u32) -> ::windows_core::HRESULT);
    SHMultiFileProperties(pdtobj.into_param().abi(), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHObjectProperties<P0, P1, P2>(hwnd: P0, shopobjecttype: SHOP_TYPE, pszobjectname: P1, pszpropertypage: P2) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHObjectProperties(hwnd : super::super::Foundation:: HWND, shopobjecttype : u32, pszobjectname : ::windows_core::PCWSTR, pszpropertypage : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    SHObjectProperties(hwnd.into_param().abi(), shopobjecttype.0 as _, pszobjectname.into_param().abi(), pszpropertypage.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHOpenFolderAndSelectItems(pidlfolder: *const Common::ITEMIDLIST, apidl: ::core::option::Option<&[*const Common::ITEMIDLIST]>, dwflags: u32) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shell32.dll" "system" fn SHOpenFolderAndSelectItems(pidlfolder : *const Common:: ITEMIDLIST, cidl : u32, apidl : *const *const Common:: ITEMIDLIST, dwflags : u32) -> ::windows_core::HRESULT);
    SHOpenFolderAndSelectItems(pidlfolder, apidl.as_deref().map_or(0, |slice| slice.len() as _), ::core::mem::transmute(apidl.as_deref().map_or(::core::ptr::null(), |slice| slice.as_ptr())), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHOpenPropSheetW<P0, P1, P2, P3>(pszcaption: P0, ahkeys: ::core::option::Option<&[super::super::System::Registry::HKEY]>, pclsiddefault: ::core::option::Option<*const ::windows_core::GUID>, pdtobj: P1, psb: P2, pstartpage: P3) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    P2: ::windows_core::IntoParam<IShellBrowser>,
    P3: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHOpenPropSheetW(pszcaption : ::windows_core::PCWSTR, ahkeys : *const super::super::System::Registry:: HKEY, ckeys : u32, pclsiddefault : *const ::windows_core::GUID, pdtobj : * mut::core::ffi::c_void, psb : * mut::core::ffi::c_void, pstartpage : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    SHOpenPropSheetW(pszcaption.into_param().abi(), ::core::mem::transmute(ahkeys.as_deref().map_or(::core::ptr::null(), |slice| slice.as_ptr())), ahkeys.as_deref().map_or(0, |slice| slice.len() as _), ::core::mem::transmute(pclsiddefault.unwrap_or(::std::ptr::null())), pdtobj.into_param().abi(), psb.into_param().abi(), pstartpage.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHOpenRegStream2A<P0, P1, P2>(hkey: P0, pszsubkey: P1, pszvalue: P2, grfmode: u32) -> ::core::option::Option<super::super::System::Com::IStream>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHOpenRegStream2A(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCSTR, pszvalue : ::windows_core::PCSTR, grfmode : u32) -> ::core::option::Option < super::super::System::Com:: IStream >);
    SHOpenRegStream2A(hkey.into_param().abi(), pszsubkey.into_param().abi(), pszvalue.into_param().abi(), grfmode)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHOpenRegStream2W<P0, P1, P2>(hkey: P0, pszsubkey: P1, pszvalue: P2, grfmode: u32) -> ::core::option::Option<super::super::System::Com::IStream>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHOpenRegStream2W(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCWSTR, pszvalue : ::windows_core::PCWSTR, grfmode : u32) -> ::core::option::Option < super::super::System::Com:: IStream >);
    SHOpenRegStream2W(hkey.into_param().abi(), pszsubkey.into_param().abi(), pszvalue.into_param().abi(), grfmode)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHOpenRegStreamA<P0, P1, P2>(hkey: P0, pszsubkey: P1, pszvalue: P2, grfmode: u32) -> ::core::option::Option<super::super::System::Com::IStream>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHOpenRegStreamA(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCSTR, pszvalue : ::windows_core::PCSTR, grfmode : u32) -> ::core::option::Option < super::super::System::Com:: IStream >);
    SHOpenRegStreamA(hkey.into_param().abi(), pszsubkey.into_param().abi(), pszvalue.into_param().abi(), grfmode)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHOpenRegStreamW<P0, P1, P2>(hkey: P0, pszsubkey: P1, pszvalue: P2, grfmode: u32) -> ::core::option::Option<super::super::System::Com::IStream>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHOpenRegStreamW(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCWSTR, pszvalue : ::windows_core::PCWSTR, grfmode : u32) -> ::core::option::Option < super::super::System::Com:: IStream >);
    SHOpenRegStreamW(hkey.into_param().abi(), pszsubkey.into_param().abi(), pszvalue.into_param().abi(), grfmode)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHOpenWithDialog<P0>(hwndparent: P0, poainfo: *const OPENASINFO) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHOpenWithDialog(hwndparent : super::super::Foundation:: HWND, poainfo : *const OPENASINFO) -> ::windows_core::HRESULT);
    SHOpenWithDialog(hwndparent.into_param().abi(), poainfo).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SHParseDisplayName<P0, P1>(pszname: P0, pbc: P1, ppidl: *mut *mut Common::ITEMIDLIST, sfgaoin: u32, psfgaoout: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHParseDisplayName(pszname : ::windows_core::PCWSTR, pbc : * mut::core::ffi::c_void, ppidl : *mut *mut Common:: ITEMIDLIST, sfgaoin : u32, psfgaoout : *mut u32) -> ::windows_core::HRESULT);
    SHParseDisplayName(pszname.into_param().abi(), pbc.into_param().abi(), ppidl, sfgaoin, ::core::mem::transmute(psfgaoout.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHPathPrepareForWriteA<P0, P1, P2>(hwnd: P0, punkenablemodless: P1, pszpath: P2, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::IUnknown>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHPathPrepareForWriteA(hwnd : super::super::Foundation:: HWND, punkenablemodless : * mut::core::ffi::c_void, pszpath : ::windows_core::PCSTR, dwflags : u32) -> ::windows_core::HRESULT);
    SHPathPrepareForWriteA(hwnd.into_param().abi(), punkenablemodless.into_param().abi(), pszpath.into_param().abi(), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHPathPrepareForWriteW<P0, P1, P2>(hwnd: P0, punkenablemodless: P1, pszpath: P2, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::IUnknown>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHPathPrepareForWriteW(hwnd : super::super::Foundation:: HWND, punkenablemodless : * mut::core::ffi::c_void, pszpath : ::windows_core::PCWSTR, dwflags : u32) -> ::windows_core::HRESULT);
    SHPathPrepareForWriteW(hwnd.into_param().abi(), punkenablemodless.into_param().abi(), pszpath.into_param().abi(), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHQueryInfoKeyA<P0>(hkey: P0, pcsubkeys: ::core::option::Option<*mut u32>, pcchmaxsubkeylen: ::core::option::Option<*mut u32>, pcvalues: ::core::option::Option<*mut u32>, pcchmaxvaluenamelen: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHQueryInfoKeyA(hkey : super::super::System::Registry:: HKEY, pcsubkeys : *mut u32, pcchmaxsubkeylen : *mut u32, pcvalues : *mut u32, pcchmaxvaluenamelen : *mut u32) -> super::super::Foundation:: WIN32_ERROR);
    SHQueryInfoKeyA(hkey.into_param().abi(), ::core::mem::transmute(pcsubkeys.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcchmaxsubkeylen.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcvalues.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcchmaxvaluenamelen.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHQueryInfoKeyW<P0>(hkey: P0, pcsubkeys: ::core::option::Option<*mut u32>, pcchmaxsubkeylen: ::core::option::Option<*mut u32>, pcvalues: ::core::option::Option<*mut u32>, pcchmaxvaluenamelen: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHQueryInfoKeyW(hkey : super::super::System::Registry:: HKEY, pcsubkeys : *mut u32, pcchmaxsubkeylen : *mut u32, pcvalues : *mut u32, pcchmaxvaluenamelen : *mut u32) -> super::super::Foundation:: WIN32_ERROR);
    SHQueryInfoKeyW(hkey.into_param().abi(), ::core::mem::transmute(pcsubkeys.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcchmaxsubkeylen.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcvalues.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcchmaxvaluenamelen.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHQueryRecycleBinA<P0>(pszrootpath: P0, pshqueryrbinfo: *mut SHQUERYRBINFO) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHQueryRecycleBinA(pszrootpath : ::windows_core::PCSTR, pshqueryrbinfo : *mut SHQUERYRBINFO) -> ::windows_core::HRESULT);
    SHQueryRecycleBinA(pszrootpath.into_param().abi(), pshqueryrbinfo).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHQueryRecycleBinW<P0>(pszrootpath: P0, pshqueryrbinfo: *mut SHQUERYRBINFO) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHQueryRecycleBinW(pszrootpath : ::windows_core::PCWSTR, pshqueryrbinfo : *mut SHQUERYRBINFO) -> ::windows_core::HRESULT);
    SHQueryRecycleBinW(pszrootpath.into_param().abi(), pshqueryrbinfo).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHQueryUserNotificationState() -> ::windows_core::Result<QUERY_USER_NOTIFICATION_STATE> {
    ::windows_targets::link!("shell32.dll" "system" fn SHQueryUserNotificationState(pquns : *mut QUERY_USER_NOTIFICATION_STATE) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHQueryUserNotificationState(&mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHQueryValueExA<P0, P1>(hkey: P0, pszvalue: P1, pdwreserved: ::core::option::Option<*const u32>, pdwtype: ::core::option::Option<*mut u32>, pvdata: ::core::option::Option<*mut ::core::ffi::c_void>, pcbdata: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHQueryValueExA(hkey : super::super::System::Registry:: HKEY, pszvalue : ::windows_core::PCSTR, pdwreserved : *const u32, pdwtype : *mut u32, pvdata : *mut ::core::ffi::c_void, pcbdata : *mut u32) -> super::super::Foundation:: WIN32_ERROR);
    SHQueryValueExA(hkey.into_param().abi(), pszvalue.into_param().abi(), ::core::mem::transmute(pdwreserved.unwrap_or(::std::ptr::null())), ::core::mem::transmute(pdwtype.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcbdata.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHQueryValueExW<P0, P1>(hkey: P0, pszvalue: P1, pdwreserved: ::core::option::Option<*const u32>, pdwtype: ::core::option::Option<*mut u32>, pvdata: ::core::option::Option<*mut ::core::ffi::c_void>, pcbdata: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHQueryValueExW(hkey : super::super::System::Registry:: HKEY, pszvalue : ::windows_core::PCWSTR, pdwreserved : *const u32, pdwtype : *mut u32, pvdata : *mut ::core::ffi::c_void, pcbdata : *mut u32) -> super::super::Foundation:: WIN32_ERROR);
    SHQueryValueExW(hkey.into_param().abi(), pszvalue.into_param().abi(), ::core::mem::transmute(pdwreserved.unwrap_or(::std::ptr::null())), ::core::mem::transmute(pdwtype.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcbdata.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegCloseUSKey(huskey: isize) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegCloseUSKey(huskey : isize) -> super::super::Foundation:: WIN32_ERROR);
    SHRegCloseUSKey(huskey).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegCreateUSKeyA<P0>(pszpath: P0, samdesired: u32, hrelativeuskey: isize, phnewuskey: *mut isize, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegCreateUSKeyA(pszpath : ::windows_core::PCSTR, samdesired : u32, hrelativeuskey : isize, phnewuskey : *mut isize, dwflags : u32) -> super::super::Foundation:: WIN32_ERROR);
    SHRegCreateUSKeyA(pszpath.into_param().abi(), samdesired, hrelativeuskey, phnewuskey, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegCreateUSKeyW<P0>(pwzpath: P0, samdesired: u32, hrelativeuskey: isize, phnewuskey: *mut isize, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegCreateUSKeyW(pwzpath : ::windows_core::PCWSTR, samdesired : u32, hrelativeuskey : isize, phnewuskey : *mut isize, dwflags : u32) -> super::super::Foundation:: WIN32_ERROR);
    SHRegCreateUSKeyW(pwzpath.into_param().abi(), samdesired, hrelativeuskey, phnewuskey, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegDeleteEmptyUSKeyA<P0>(huskey: isize, pszsubkey: P0, delregflags: SHREGDEL_FLAGS) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegDeleteEmptyUSKeyA(huskey : isize, pszsubkey : ::windows_core::PCSTR, delregflags : SHREGDEL_FLAGS) -> super::super::Foundation:: WIN32_ERROR);
    SHRegDeleteEmptyUSKeyA(huskey, pszsubkey.into_param().abi(), delregflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegDeleteEmptyUSKeyW<P0>(huskey: isize, pwzsubkey: P0, delregflags: SHREGDEL_FLAGS) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegDeleteEmptyUSKeyW(huskey : isize, pwzsubkey : ::windows_core::PCWSTR, delregflags : SHREGDEL_FLAGS) -> super::super::Foundation:: WIN32_ERROR);
    SHRegDeleteEmptyUSKeyW(huskey, pwzsubkey.into_param().abi(), delregflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegDeleteUSValueA<P0>(huskey: isize, pszvalue: P0, delregflags: SHREGDEL_FLAGS) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegDeleteUSValueA(huskey : isize, pszvalue : ::windows_core::PCSTR, delregflags : SHREGDEL_FLAGS) -> super::super::Foundation:: WIN32_ERROR);
    SHRegDeleteUSValueA(huskey, pszvalue.into_param().abi(), delregflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegDeleteUSValueW<P0>(huskey: isize, pwzvalue: P0, delregflags: SHREGDEL_FLAGS) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegDeleteUSValueW(huskey : isize, pwzvalue : ::windows_core::PCWSTR, delregflags : SHREGDEL_FLAGS) -> super::super::Foundation:: WIN32_ERROR);
    SHRegDeleteUSValueW(huskey, pwzvalue.into_param().abi(), delregflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Registry\"`*"]
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn SHRegDuplicateHKey<P0>(hkey: P0) -> super::super::System::Registry::HKEY
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegDuplicateHKey(hkey : super::super::System::Registry:: HKEY) -> super::super::System::Registry:: HKEY);
    SHRegDuplicateHKey(hkey.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegEnumUSKeyA(huskey: isize, dwindex: u32, pszname: ::windows_core::PSTR, pcchname: *mut u32, enumregflags: SHREGENUM_FLAGS) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegEnumUSKeyA(huskey : isize, dwindex : u32, pszname : ::windows_core::PSTR, pcchname : *mut u32, enumregflags : SHREGENUM_FLAGS) -> super::super::Foundation:: WIN32_ERROR);
    SHRegEnumUSKeyA(huskey, dwindex, ::core::mem::transmute(pszname), pcchname, enumregflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegEnumUSKeyW(huskey: isize, dwindex: u32, pwzname: ::windows_core::PWSTR, pcchname: *mut u32, enumregflags: SHREGENUM_FLAGS) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegEnumUSKeyW(huskey : isize, dwindex : u32, pwzname : ::windows_core::PWSTR, pcchname : *mut u32, enumregflags : SHREGENUM_FLAGS) -> super::super::Foundation:: WIN32_ERROR);
    SHRegEnumUSKeyW(huskey, dwindex, ::core::mem::transmute(pwzname), pcchname, enumregflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegEnumUSValueA(huskey: isize, dwindex: u32, pszvaluename: ::windows_core::PSTR, pcchvaluename: *mut u32, pdwtype: ::core::option::Option<*mut u32>, pvdata: ::core::option::Option<*mut ::core::ffi::c_void>, pcbdata: ::core::option::Option<*mut u32>, enumregflags: SHREGENUM_FLAGS) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegEnumUSValueA(huskey : isize, dwindex : u32, pszvaluename : ::windows_core::PSTR, pcchvaluename : *mut u32, pdwtype : *mut u32, pvdata : *mut ::core::ffi::c_void, pcbdata : *mut u32, enumregflags : SHREGENUM_FLAGS) -> super::super::Foundation:: WIN32_ERROR);
    SHRegEnumUSValueA(huskey, dwindex, ::core::mem::transmute(pszvaluename), pcchvaluename, ::core::mem::transmute(pdwtype.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcbdata.unwrap_or(::std::ptr::null_mut())), enumregflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegEnumUSValueW(huskey: isize, dwindex: u32, pszvaluename: ::windows_core::PWSTR, pcchvaluename: *mut u32, pdwtype: ::core::option::Option<*mut u32>, pvdata: ::core::option::Option<*mut ::core::ffi::c_void>, pcbdata: ::core::option::Option<*mut u32>, enumregflags: SHREGENUM_FLAGS) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegEnumUSValueW(huskey : isize, dwindex : u32, pszvaluename : ::windows_core::PWSTR, pcchvaluename : *mut u32, pdwtype : *mut u32, pvdata : *mut ::core::ffi::c_void, pcbdata : *mut u32, enumregflags : SHREGENUM_FLAGS) -> super::super::Foundation:: WIN32_ERROR);
    SHRegEnumUSValueW(huskey, dwindex, ::core::mem::transmute(pszvaluename), pcchvaluename, ::core::mem::transmute(pdwtype.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcbdata.unwrap_or(::std::ptr::null_mut())), enumregflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegGetBoolUSValueA<P0, P1, P2, P3>(pszsubkey: P0, pszvalue: P1, fignorehkcu: P2, fdefault: P3) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    P3: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegGetBoolUSValueA(pszsubkey : ::windows_core::PCSTR, pszvalue : ::windows_core::PCSTR, fignorehkcu : super::super::Foundation:: BOOL, fdefault : super::super::Foundation:: BOOL) -> super::super::Foundation:: BOOL);
    SHRegGetBoolUSValueA(pszsubkey.into_param().abi(), pszvalue.into_param().abi(), fignorehkcu.into_param().abi(), fdefault.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegGetBoolUSValueW<P0, P1, P2, P3>(pszsubkey: P0, pszvalue: P1, fignorehkcu: P2, fdefault: P3) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    P3: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegGetBoolUSValueW(pszsubkey : ::windows_core::PCWSTR, pszvalue : ::windows_core::PCWSTR, fignorehkcu : super::super::Foundation:: BOOL, fdefault : super::super::Foundation:: BOOL) -> super::super::Foundation:: BOOL);
    SHRegGetBoolUSValueW(pszsubkey.into_param().abi(), pszvalue.into_param().abi(), fignorehkcu.into_param().abi(), fdefault.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Registry\"`*"]
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn SHRegGetIntW<P0, P1>(hk: P0, pwzkey: P1, idefault: i32) -> i32
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegGetIntW(hk : super::super::System::Registry:: HKEY, pwzkey : ::windows_core::PCWSTR, idefault : i32) -> i32);
    SHRegGetIntW(hk.into_param().abi(), pwzkey.into_param().abi(), idefault)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHRegGetPathA<P0, P1, P2>(hkey: P0, pcszsubkey: P1, pcszvalue: P2, pszpath: &mut [u8; 260], dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegGetPathA(hkey : super::super::System::Registry:: HKEY, pcszsubkey : ::windows_core::PCSTR, pcszvalue : ::windows_core::PCSTR, pszpath : ::windows_core::PSTR, dwflags : u32) -> super::super::Foundation:: WIN32_ERROR);
    SHRegGetPathA(hkey.into_param().abi(), pcszsubkey.into_param().abi(), pcszvalue.into_param().abi(), ::core::mem::transmute(pszpath.as_ptr()), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHRegGetPathW<P0, P1, P2>(hkey: P0, pcszsubkey: P1, pcszvalue: P2, pszpath: &mut [u16; 260], dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegGetPathW(hkey : super::super::System::Registry:: HKEY, pcszsubkey : ::windows_core::PCWSTR, pcszvalue : ::windows_core::PCWSTR, pszpath : ::windows_core::PWSTR, dwflags : u32) -> super::super::Foundation:: WIN32_ERROR);
    SHRegGetPathW(hkey.into_param().abi(), pcszsubkey.into_param().abi(), pcszvalue.into_param().abi(), ::core::mem::transmute(pszpath.as_ptr()), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegGetUSValueA<P0, P1, P2>(pszsubkey: P0, pszvalue: P1, pdwtype: ::core::option::Option<*mut u32>, pvdata: ::core::option::Option<*mut ::core::ffi::c_void>, pcbdata: ::core::option::Option<*mut u32>, fignorehkcu: P2, pvdefaultdata: ::core::option::Option<*const ::core::ffi::c_void>, dwdefaultdatasize: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegGetUSValueA(pszsubkey : ::windows_core::PCSTR, pszvalue : ::windows_core::PCSTR, pdwtype : *mut u32, pvdata : *mut ::core::ffi::c_void, pcbdata : *mut u32, fignorehkcu : super::super::Foundation:: BOOL, pvdefaultdata : *const ::core::ffi::c_void, dwdefaultdatasize : u32) -> super::super::Foundation:: WIN32_ERROR);
    SHRegGetUSValueA(pszsubkey.into_param().abi(), pszvalue.into_param().abi(), ::core::mem::transmute(pdwtype.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcbdata.unwrap_or(::std::ptr::null_mut())), fignorehkcu.into_param().abi(), ::core::mem::transmute(pvdefaultdata.unwrap_or(::std::ptr::null())), dwdefaultdatasize).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegGetUSValueW<P0, P1, P2>(pszsubkey: P0, pszvalue: P1, pdwtype: ::core::option::Option<*mut u32>, pvdata: ::core::option::Option<*mut ::core::ffi::c_void>, pcbdata: ::core::option::Option<*mut u32>, fignorehkcu: P2, pvdefaultdata: ::core::option::Option<*const ::core::ffi::c_void>, dwdefaultdatasize: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegGetUSValueW(pszsubkey : ::windows_core::PCWSTR, pszvalue : ::windows_core::PCWSTR, pdwtype : *mut u32, pvdata : *mut ::core::ffi::c_void, pcbdata : *mut u32, fignorehkcu : super::super::Foundation:: BOOL, pvdefaultdata : *const ::core::ffi::c_void, dwdefaultdatasize : u32) -> super::super::Foundation:: WIN32_ERROR);
    SHRegGetUSValueW(pszsubkey.into_param().abi(), pszvalue.into_param().abi(), ::core::mem::transmute(pdwtype.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcbdata.unwrap_or(::std::ptr::null_mut())), fignorehkcu.into_param().abi(), ::core::mem::transmute(pvdefaultdata.unwrap_or(::std::ptr::null())), dwdefaultdatasize).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHRegGetValueA<P0, P1, P2>(hkey: P0, pszsubkey: P1, pszvalue: P2, srrfflags: i32, pdwtype: ::core::option::Option<*mut u32>, pvdata: ::core::option::Option<*mut ::core::ffi::c_void>, pcbdata: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegGetValueA(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCSTR, pszvalue : ::windows_core::PCSTR, srrfflags : i32, pdwtype : *mut u32, pvdata : *mut ::core::ffi::c_void, pcbdata : *mut u32) -> super::super::Foundation:: WIN32_ERROR);
    SHRegGetValueA(hkey.into_param().abi(), pszsubkey.into_param().abi(), pszvalue.into_param().abi(), srrfflags, ::core::mem::transmute(pdwtype.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcbdata.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegGetValueFromHKCUHKLM<P0, P1>(pwszkey: P0, pwszvalue: P1, srrfflags: i32, pdwtype: ::core::option::Option<*mut u32>, pvdata: ::core::option::Option<*mut ::core::ffi::c_void>, pcbdata: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegGetValueFromHKCUHKLM(pwszkey : ::windows_core::PCWSTR, pwszvalue : ::windows_core::PCWSTR, srrfflags : i32, pdwtype : *mut u32, pvdata : *mut ::core::ffi::c_void, pcbdata : *mut u32) -> super::super::Foundation:: WIN32_ERROR);
    SHRegGetValueFromHKCUHKLM(pwszkey.into_param().abi(), pwszvalue.into_param().abi(), srrfflags, ::core::mem::transmute(pdwtype.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcbdata.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHRegGetValueW<P0, P1, P2>(hkey: P0, pszsubkey: P1, pszvalue: P2, srrfflags: i32, pdwtype: ::core::option::Option<*mut u32>, pvdata: ::core::option::Option<*mut ::core::ffi::c_void>, pcbdata: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegGetValueW(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCWSTR, pszvalue : ::windows_core::PCWSTR, srrfflags : i32, pdwtype : *mut u32, pvdata : *mut ::core::ffi::c_void, pcbdata : *mut u32) -> super::super::Foundation:: WIN32_ERROR);
    SHRegGetValueW(hkey.into_param().abi(), pszsubkey.into_param().abi(), pszvalue.into_param().abi(), srrfflags, ::core::mem::transmute(pdwtype.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcbdata.unwrap_or(::std::ptr::null_mut()))).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegOpenUSKeyA<P0, P1>(pszpath: P0, samdesired: u32, hrelativeuskey: isize, phnewuskey: *mut isize, fignorehkcu: P1) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegOpenUSKeyA(pszpath : ::windows_core::PCSTR, samdesired : u32, hrelativeuskey : isize, phnewuskey : *mut isize, fignorehkcu : super::super::Foundation:: BOOL) -> super::super::Foundation:: WIN32_ERROR);
    SHRegOpenUSKeyA(pszpath.into_param().abi(), samdesired, hrelativeuskey, phnewuskey, fignorehkcu.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegOpenUSKeyW<P0, P1>(pwzpath: P0, samdesired: u32, hrelativeuskey: isize, phnewuskey: *mut isize, fignorehkcu: P1) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegOpenUSKeyW(pwzpath : ::windows_core::PCWSTR, samdesired : u32, hrelativeuskey : isize, phnewuskey : *mut isize, fignorehkcu : super::super::Foundation:: BOOL) -> super::super::Foundation:: WIN32_ERROR);
    SHRegOpenUSKeyW(pwzpath.into_param().abi(), samdesired, hrelativeuskey, phnewuskey, fignorehkcu.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegQueryInfoUSKeyA(huskey: isize, pcsubkeys: ::core::option::Option<*mut u32>, pcchmaxsubkeylen: ::core::option::Option<*mut u32>, pcvalues: ::core::option::Option<*mut u32>, pcchmaxvaluenamelen: ::core::option::Option<*mut u32>, enumregflags: SHREGENUM_FLAGS) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegQueryInfoUSKeyA(huskey : isize, pcsubkeys : *mut u32, pcchmaxsubkeylen : *mut u32, pcvalues : *mut u32, pcchmaxvaluenamelen : *mut u32, enumregflags : SHREGENUM_FLAGS) -> super::super::Foundation:: WIN32_ERROR);
    SHRegQueryInfoUSKeyA(huskey, ::core::mem::transmute(pcsubkeys.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcchmaxsubkeylen.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcvalues.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcchmaxvaluenamelen.unwrap_or(::std::ptr::null_mut())), enumregflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegQueryInfoUSKeyW(huskey: isize, pcsubkeys: ::core::option::Option<*mut u32>, pcchmaxsubkeylen: ::core::option::Option<*mut u32>, pcvalues: ::core::option::Option<*mut u32>, pcchmaxvaluenamelen: ::core::option::Option<*mut u32>, enumregflags: SHREGENUM_FLAGS) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegQueryInfoUSKeyW(huskey : isize, pcsubkeys : *mut u32, pcchmaxsubkeylen : *mut u32, pcvalues : *mut u32, pcchmaxvaluenamelen : *mut u32, enumregflags : SHREGENUM_FLAGS) -> super::super::Foundation:: WIN32_ERROR);
    SHRegQueryInfoUSKeyW(huskey, ::core::mem::transmute(pcsubkeys.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcchmaxsubkeylen.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcvalues.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcchmaxvaluenamelen.unwrap_or(::std::ptr::null_mut())), enumregflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegQueryUSValueA<P0, P1>(huskey: isize, pszvalue: P0, pdwtype: ::core::option::Option<*mut u32>, pvdata: ::core::option::Option<*mut ::core::ffi::c_void>, pcbdata: ::core::option::Option<*mut u32>, fignorehkcu: P1, pvdefaultdata: ::core::option::Option<*const ::core::ffi::c_void>, dwdefaultdatasize: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegQueryUSValueA(huskey : isize, pszvalue : ::windows_core::PCSTR, pdwtype : *mut u32, pvdata : *mut ::core::ffi::c_void, pcbdata : *mut u32, fignorehkcu : super::super::Foundation:: BOOL, pvdefaultdata : *const ::core::ffi::c_void, dwdefaultdatasize : u32) -> super::super::Foundation:: WIN32_ERROR);
    SHRegQueryUSValueA(huskey, pszvalue.into_param().abi(), ::core::mem::transmute(pdwtype.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcbdata.unwrap_or(::std::ptr::null_mut())), fignorehkcu.into_param().abi(), ::core::mem::transmute(pvdefaultdata.unwrap_or(::std::ptr::null())), dwdefaultdatasize).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegQueryUSValueW<P0, P1>(huskey: isize, pszvalue: P0, pdwtype: ::core::option::Option<*mut u32>, pvdata: ::core::option::Option<*mut ::core::ffi::c_void>, pcbdata: ::core::option::Option<*mut u32>, fignorehkcu: P1, pvdefaultdata: ::core::option::Option<*const ::core::ffi::c_void>, dwdefaultdatasize: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegQueryUSValueW(huskey : isize, pszvalue : ::windows_core::PCWSTR, pdwtype : *mut u32, pvdata : *mut ::core::ffi::c_void, pcbdata : *mut u32, fignorehkcu : super::super::Foundation:: BOOL, pvdefaultdata : *const ::core::ffi::c_void, dwdefaultdatasize : u32) -> super::super::Foundation:: WIN32_ERROR);
    SHRegQueryUSValueW(huskey, pszvalue.into_param().abi(), ::core::mem::transmute(pdwtype.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcbdata.unwrap_or(::std::ptr::null_mut())), fignorehkcu.into_param().abi(), ::core::mem::transmute(pvdefaultdata.unwrap_or(::std::ptr::null())), dwdefaultdatasize).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHRegSetPathA<P0, P1, P2, P3>(hkey: P0, pcszsubkey: P1, pcszvalue: P2, pcszpath: P3, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P3: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegSetPathA(hkey : super::super::System::Registry:: HKEY, pcszsubkey : ::windows_core::PCSTR, pcszvalue : ::windows_core::PCSTR, pcszpath : ::windows_core::PCSTR, dwflags : u32) -> super::super::Foundation:: WIN32_ERROR);
    SHRegSetPathA(hkey.into_param().abi(), pcszsubkey.into_param().abi(), pcszvalue.into_param().abi(), pcszpath.into_param().abi(), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn SHRegSetPathW<P0, P1, P2, P3>(hkey: P0, pcszsubkey: P1, pcszvalue: P2, pcszpath: P3, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P3: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegSetPathW(hkey : super::super::System::Registry:: HKEY, pcszsubkey : ::windows_core::PCWSTR, pcszvalue : ::windows_core::PCWSTR, pcszpath : ::windows_core::PCWSTR, dwflags : u32) -> super::super::Foundation:: WIN32_ERROR);
    SHRegSetPathW(hkey.into_param().abi(), pcszsubkey.into_param().abi(), pcszvalue.into_param().abi(), pcszpath.into_param().abi(), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegSetUSValueA<P0, P1>(pszsubkey: P0, pszvalue: P1, dwtype: u32, pvdata: ::core::option::Option<*const ::core::ffi::c_void>, cbdata: u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegSetUSValueA(pszsubkey : ::windows_core::PCSTR, pszvalue : ::windows_core::PCSTR, dwtype : u32, pvdata : *const ::core::ffi::c_void, cbdata : u32, dwflags : u32) -> super::super::Foundation:: WIN32_ERROR);
    SHRegSetUSValueA(pszsubkey.into_param().abi(), pszvalue.into_param().abi(), dwtype, ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null())), cbdata, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegSetUSValueW<P0, P1>(pwzsubkey: P0, pwzvalue: P1, dwtype: u32, pvdata: ::core::option::Option<*const ::core::ffi::c_void>, cbdata: u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegSetUSValueW(pwzsubkey : ::windows_core::PCWSTR, pwzvalue : ::windows_core::PCWSTR, dwtype : u32, pvdata : *const ::core::ffi::c_void, cbdata : u32, dwflags : u32) -> super::super::Foundation:: WIN32_ERROR);
    SHRegSetUSValueW(pwzsubkey.into_param().abi(), pwzvalue.into_param().abi(), dwtype, ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null())), cbdata, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegWriteUSValueA<P0>(huskey: isize, pszvalue: P0, dwtype: u32, pvdata: *const ::core::ffi::c_void, cbdata: u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegWriteUSValueA(huskey : isize, pszvalue : ::windows_core::PCSTR, dwtype : u32, pvdata : *const ::core::ffi::c_void, cbdata : u32, dwflags : u32) -> super::super::Foundation:: WIN32_ERROR);
    SHRegWriteUSValueA(huskey, pszvalue.into_param().abi(), dwtype, pvdata, cbdata, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHRegWriteUSValueW<P0>(huskey: isize, pwzvalue: P0, dwtype: u32, pvdata: *const ::core::ffi::c_void, cbdata: u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHRegWriteUSValueW(huskey : isize, pwzvalue : ::windows_core::PCWSTR, dwtype : u32, pvdata : *const ::core::ffi::c_void, cbdata : u32, dwflags : u32) -> super::super::Foundation:: WIN32_ERROR);
    SHRegWriteUSValueW(huskey, pwzvalue.into_param().abi(), dwtype, pvdata, cbdata, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHReleaseThreadRef() -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHReleaseThreadRef() -> ::windows_core::HRESULT);
    SHReleaseThreadRef().ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHRemoveLocalizedName<P0>(pszpath: P0) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHRemoveLocalizedName(pszpath : ::windows_core::PCWSTR) -> ::windows_core::HRESULT);
    SHRemoveLocalizedName(pszpath.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Controls\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls"))]
#[inline]
pub unsafe fn SHReplaceFromPropSheetExtArray<P0, P1>(hpsxa: P0, upageid: u32, lpfnreplacewith: super::Controls::LPFNSVADDPROPSHEETPAGE, lparam: P1) -> u32
where
    P0: ::windows_core::IntoParam<HPSXA>,
    P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHReplaceFromPropSheetExtArray(hpsxa : HPSXA, upageid : u32, lpfnreplacewith : super::Controls:: LPFNSVADDPROPSHEETPAGE, lparam : super::super::Foundation:: LPARAM) -> u32);
    SHReplaceFromPropSheetExtArray(hpsxa.into_param().abi(), upageid, lpfnreplacewith, lparam.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHResolveLibrary<P0>(psilibrary: P0) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<IShellItem>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHResolveLibrary(psilibrary : * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    SHResolveLibrary(psilibrary.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHRestricted(rest: RESTRICTIONS) -> u32 {
    ::windows_targets::link!("shell32.dll" "system" fn SHRestricted(rest : RESTRICTIONS) -> u32);
    SHRestricted(rest)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHSendMessageBroadcastA<P0, P1>(umsg: u32, wparam: P0, lparam: P1) -> super::super::Foundation::LRESULT
where
    P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
    P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHSendMessageBroadcastA(umsg : u32, wparam : super::super::Foundation:: WPARAM, lparam : super::super::Foundation:: LPARAM) -> super::super::Foundation:: LRESULT);
    SHSendMessageBroadcastA(umsg, wparam.into_param().abi(), lparam.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHSendMessageBroadcastW<P0, P1>(umsg: u32, wparam: P0, lparam: P1) -> super::super::Foundation::LRESULT
where
    P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
    P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHSendMessageBroadcastW(umsg : u32, wparam : super::super::Foundation:: WPARAM, lparam : super::super::Foundation:: LPARAM) -> super::super::Foundation:: LRESULT);
    SHSendMessageBroadcastW(umsg, wparam.into_param().abi(), lparam.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHSetDefaultProperties<P0, P1, P2>(hwnd: P0, psi: P1, dwfileopflags: u32, pfops: P2) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<IShellItem>,
    P2: ::windows_core::IntoParam<IFileOperationProgressSink>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHSetDefaultProperties(hwnd : super::super::Foundation:: HWND, psi : * mut::core::ffi::c_void, dwfileopflags : u32, pfops : * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    SHSetDefaultProperties(hwnd.into_param().abi(), psi.into_param().abi(), dwfileopflags, pfops.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHSetFolderPathA<P0, P1>(csidl: i32, htoken: P0, dwflags: u32, pszpath: P1) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHSetFolderPathA(csidl : i32, htoken : super::super::Foundation:: HANDLE, dwflags : u32, pszpath : ::windows_core::PCSTR) -> ::windows_core::HRESULT);
    SHSetFolderPathA(csidl, htoken.into_param().abi(), dwflags, pszpath.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHSetFolderPathW<P0, P1>(csidl: i32, htoken: P0, dwflags: u32, pszpath: P1) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHSetFolderPathW(csidl : i32, htoken : super::super::Foundation:: HANDLE, dwflags : u32, pszpath : ::windows_core::PCWSTR) -> ::windows_core::HRESULT);
    SHSetFolderPathW(csidl, htoken.into_param().abi(), dwflags, pszpath.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHSetInstanceExplorer<P0>(punk: P0)
where
    P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHSetInstanceExplorer(punk : * mut::core::ffi::c_void) -> ());
    SHSetInstanceExplorer(punk.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHSetKnownFolderPath<P0, P1>(rfid: *const ::windows_core::GUID, dwflags: u32, htoken: P0, pszpath: P1) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHSetKnownFolderPath(rfid : *const ::windows_core::GUID, dwflags : u32, htoken : super::super::Foundation:: HANDLE, pszpath : ::windows_core::PCWSTR) -> ::windows_core::HRESULT);
    SHSetKnownFolderPath(rfid, dwflags, htoken.into_param().abi(), pszpath.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHSetLocalizedName<P0, P1>(pszpath: P0, pszresmodule: P1, idsres: i32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHSetLocalizedName(pszpath : ::windows_core::PCWSTR, pszresmodule : ::windows_core::PCWSTR, idsres : i32) -> ::windows_core::HRESULT);
    SHSetLocalizedName(pszpath.into_param().abi(), pszresmodule.into_param().abi(), idsres).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_PropertiesSystem\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
#[inline]
pub unsafe fn SHSetTemporaryPropertyForItem<P0>(psi: P0, propkey: *const PropertiesSystem::PROPERTYKEY, propvar: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<IShellItem>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHSetTemporaryPropertyForItem(psi : * mut::core::ffi::c_void, propkey : *const PropertiesSystem:: PROPERTYKEY, propvar : *const super::super::System::Com::StructuredStorage:: PROPVARIANT) -> ::windows_core::HRESULT);
    SHSetTemporaryPropertyForItem(psi.into_param().abi(), propkey, propvar).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHSetThreadRef<P0>(punk: P0) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHSetThreadRef(punk : * mut::core::ffi::c_void) -> ::windows_core::HRESULT);
    SHSetThreadRef(punk.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHSetUnreadMailCountW<P0, P1>(pszmailaddress: P0, dwcount: u32, pszshellexecutecommand: P1) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHSetUnreadMailCountW(pszmailaddress : ::windows_core::PCWSTR, dwcount : u32, pszshellexecutecommand : ::windows_core::PCWSTR) -> ::windows_core::HRESULT);
    SHSetUnreadMailCountW(pszmailaddress.into_param().abi(), dwcount, pszshellexecutecommand.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Registry\"`*"]
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn SHSetValueA<P0, P1, P2>(hkey: P0, pszsubkey: P1, pszvalue: P2, dwtype: u32, pvdata: ::core::option::Option<*const ::core::ffi::c_void>, cbdata: u32) -> i32
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHSetValueA(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCSTR, pszvalue : ::windows_core::PCSTR, dwtype : u32, pvdata : *const ::core::ffi::c_void, cbdata : u32) -> i32);
    SHSetValueA(hkey.into_param().abi(), pszsubkey.into_param().abi(), pszvalue.into_param().abi(), dwtype, ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null())), cbdata)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Registry\"`*"]
#[cfg(feature = "Win32_System_Registry")]
#[inline]
pub unsafe fn SHSetValueW<P0, P1, P2>(hkey: P0, pszsubkey: P1, pszvalue: P2, dwtype: u32, pvdata: ::core::option::Option<*const ::core::ffi::c_void>, cbdata: u32) -> i32
where
    P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHSetValueW(hkey : super::super::System::Registry:: HKEY, pszsubkey : ::windows_core::PCWSTR, pszvalue : ::windows_core::PCWSTR, dwtype : u32, pvdata : *const ::core::ffi::c_void, cbdata : u32) -> i32);
    SHSetValueW(hkey.into_param().abi(), pszsubkey.into_param().abi(), pszvalue.into_param().abi(), dwtype, ::core::mem::transmute(pvdata.unwrap_or(::std::ptr::null())), cbdata)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHShellFolderView_Message<P0, P1>(hwndmain: P0, umsg: u32, lparam: P1) -> super::super::Foundation::LRESULT
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHShellFolderView_Message(hwndmain : super::super::Foundation:: HWND, umsg : u32, lparam : super::super::Foundation:: LPARAM) -> super::super::Foundation:: LRESULT);
    SHShellFolderView_Message(hwndmain.into_param().abi(), umsg, lparam.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHShowManageLibraryUI<P0, P1, P2, P3>(psilibrary: P0, hwndowner: P1, psztitle: P2, pszinstruction: P3, lmdoptions: LIBRARYMANAGEDIALOGOPTIONS) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<IShellItem>,
    P1: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P3: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHShowManageLibraryUI(psilibrary : * mut::core::ffi::c_void, hwndowner : super::super::Foundation:: HWND, psztitle : ::windows_core::PCWSTR, pszinstruction : ::windows_core::PCWSTR, lmdoptions : LIBRARYMANAGEDIALOGOPTIONS) -> ::windows_core::HRESULT);
    SHShowManageLibraryUI(psilibrary.into_param().abi(), hwndowner.into_param().abi(), psztitle.into_param().abi(), pszinstruction.into_param().abi(), lmdoptions).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn SHSimpleIDListFromPath<P0>(pszpath: P0) -> *mut Common::ITEMIDLIST
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHSimpleIDListFromPath(pszpath : ::windows_core::PCWSTR) -> *mut Common:: ITEMIDLIST);
    SHSimpleIDListFromPath(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
#[inline]
pub unsafe fn SHSkipJunction<P0>(pbc: P0, pclsid: *const ::windows_core::GUID) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHSkipJunction(pbc : * mut::core::ffi::c_void, pclsid : *const ::windows_core::GUID) -> super::super::Foundation:: BOOL);
    SHSkipJunction(pbc.into_param().abi(), pclsid)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHStartNetConnectionDialogW<P0, P1>(hwnd: P0, pszremotename: P1, dwtype: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHStartNetConnectionDialogW(hwnd : super::super::Foundation:: HWND, pszremotename : ::windows_core::PCWSTR, dwtype : u32) -> ::windows_core::HRESULT);
    SHStartNetConnectionDialogW(hwnd.into_param().abi(), pszremotename.into_param().abi(), dwtype).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHStrDupA<P0>(psz: P0) -> ::windows_core::Result<::windows_core::PWSTR>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHStrDupA(psz : ::windows_core::PCSTR, ppwsz : *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHStrDupA(psz.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHStrDupW<P0>(psz: P0) -> ::windows_core::Result<::windows_core::PWSTR>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHStrDupW(psz : ::windows_core::PCWSTR, ppwsz : *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    SHStrDupW(psz.into_param().abi(), &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHStripMneumonicA(pszmenu: ::windows_core::PSTR) -> u8 {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHStripMneumonicA(pszmenu : ::windows_core::PSTR) -> u8);
    SHStripMneumonicA(::core::mem::transmute(pszmenu))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHStripMneumonicW(pszmenu: ::windows_core::PWSTR) -> u16 {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHStripMneumonicW(pszmenu : ::windows_core::PWSTR) -> u16);
    SHStripMneumonicW(::core::mem::transmute(pszmenu))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHTestTokenMembership<P0>(htoken: P0, ulrid: u32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHTestTokenMembership(htoken : super::super::Foundation:: HANDLE, ulrid : u32) -> super::super::Foundation:: BOOL);
    SHTestTokenMembership(htoken.into_param().abi(), ulrid)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHUnicodeToAnsi<P0>(pwszsrc: P0, pszdst: &mut [u8]) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHUnicodeToAnsi(pwszsrc : ::windows_core::PCWSTR, pszdst : ::windows_core::PSTR, cchbuf : i32) -> i32);
    SHUnicodeToAnsi(pwszsrc.into_param().abi(), ::core::mem::transmute(pszdst.as_ptr()), pszdst.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHUnicodeToUnicode<P0>(pwzsrc: P0, pwzdst: &mut [u16]) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn SHUnicodeToUnicode(pwzsrc : ::windows_core::PCWSTR, pwzdst : ::windows_core::PWSTR, cwchbuf : i32) -> i32);
    SHUnicodeToUnicode(pwzsrc.into_param().abi(), ::core::mem::transmute(pwzdst.as_ptr()), pwzdst.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHUnlockShared(pvdata: *const ::core::ffi::c_void) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn SHUnlockShared(pvdata : *const ::core::ffi::c_void) -> super::super::Foundation:: BOOL);
    SHUnlockShared(pvdata).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHUpdateImageA<P0>(pszhashitem: P0, iindex: i32, uflags: u32, iimageindex: i32)
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHUpdateImageA(pszhashitem : ::windows_core::PCSTR, iindex : i32, uflags : u32, iimageindex : i32) -> ());
    SHUpdateImageA(pszhashitem.into_param().abi(), iindex, uflags, iimageindex)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SHUpdateImageW<P0>(pszhashitem: P0, iindex: i32, uflags: u32, iimageindex: i32)
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHUpdateImageW(pszhashitem : ::windows_core::PCWSTR, iindex : i32, uflags : u32, iimageindex : i32) -> ());
    SHUpdateImageW(pszhashitem.into_param().abi(), iindex, uflags, iimageindex)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SHValidateUNC<P0>(hwndowner: P0, pszfile: ::windows_core::PWSTR, fconnect: VALIDATEUNC_OPTION) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SHValidateUNC(hwndowner : super::super::Foundation:: HWND, pszfile : ::windows_core::PWSTR, fconnect : u32) -> super::super::Foundation:: BOOL);
    SHValidateUNC(hwndowner.into_param().abi(), ::core::mem::transmute(pszfile), fconnect.0 as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn SetCurrentProcessExplicitAppUserModelID<P0>(appid: P0) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn SetCurrentProcessExplicitAppUserModelID(appid : ::windows_core::PCWSTR) -> ::windows_core::HRESULT);
    SetCurrentProcessExplicitAppUserModelID(appid.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn SetMenuContextHelpId<P0>(param0: P0, param1: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::WindowsAndMessaging::HMENU>,
{
    ::windows_targets::link!("user32.dll" "system" fn SetMenuContextHelpId(param0 : super::WindowsAndMessaging:: HMENU, param1 : u32) -> super::super::Foundation:: BOOL);
    SetMenuContextHelpId(param0.into_param().abi(), param1).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SetWindowContextHelpId<P0>(param0: P0, param1: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
{
    ::windows_targets::link!("user32.dll" "system" fn SetWindowContextHelpId(param0 : super::super::Foundation:: HWND, param1 : u32) -> super::super::Foundation:: BOOL);
    SetWindowContextHelpId(param0.into_param().abi(), param1).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn SetWindowSubclass<P0>(hwnd: P0, pfnsubclass: SUBCLASSPROC, uidsubclass: usize, dwrefdata: usize) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
{
    ::windows_targets::link!("comctl32.dll" "system" fn SetWindowSubclass(hwnd : super::super::Foundation:: HWND, pfnsubclass : SUBCLASSPROC, uidsubclass : usize, dwrefdata : usize) -> super::super::Foundation:: BOOL);
    SetWindowSubclass(hwnd.into_param().abi(), pfnsubclass, uidsubclass, dwrefdata)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn ShellAboutA<P0, P1, P2, P3>(hwnd: P0, szapp: P1, szotherstuff: P2, hicon: P3) -> i32
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P3: ::windows_core::IntoParam<super::WindowsAndMessaging::HICON>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ShellAboutA(hwnd : super::super::Foundation:: HWND, szapp : ::windows_core::PCSTR, szotherstuff : ::windows_core::PCSTR, hicon : super::WindowsAndMessaging:: HICON) -> i32);
    ShellAboutA(hwnd.into_param().abi(), szapp.into_param().abi(), szotherstuff.into_param().abi(), hicon.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn ShellAboutW<P0, P1, P2, P3>(hwnd: P0, szapp: P1, szotherstuff: P2, hicon: P3) -> i32
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P3: ::windows_core::IntoParam<super::WindowsAndMessaging::HICON>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ShellAboutW(hwnd : super::super::Foundation:: HWND, szapp : ::windows_core::PCWSTR, szotherstuff : ::windows_core::PCWSTR, hicon : super::WindowsAndMessaging:: HICON) -> i32);
    ShellAboutW(hwnd.into_param().abi(), szapp.into_param().abi(), szotherstuff.into_param().abi(), hicon.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn ShellExecuteA<P0, P1, P2, P3, P4>(hwnd: P0, lpoperation: P1, lpfile: P2, lpparameters: P3, lpdirectory: P4, nshowcmd: super::WindowsAndMessaging::SHOW_WINDOW_CMD) -> super::super::Foundation::HINSTANCE
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P3: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P4: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ShellExecuteA(hwnd : super::super::Foundation:: HWND, lpoperation : ::windows_core::PCSTR, lpfile : ::windows_core::PCSTR, lpparameters : ::windows_core::PCSTR, lpdirectory : ::windows_core::PCSTR, nshowcmd : super::WindowsAndMessaging:: SHOW_WINDOW_CMD) -> super::super::Foundation:: HINSTANCE);
    ShellExecuteA(hwnd.into_param().abi(), lpoperation.into_param().abi(), lpfile.into_param().abi(), lpparameters.into_param().abi(), lpdirectory.into_param().abi(), nshowcmd)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ShellExecuteExA(pexecinfo: *mut SHELLEXECUTEINFOA) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shell32.dll" "system" fn ShellExecuteExA(pexecinfo : *mut SHELLEXECUTEINFOA) -> super::super::Foundation:: BOOL);
    ShellExecuteExA(pexecinfo).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
#[inline]
pub unsafe fn ShellExecuteExW(pexecinfo: *mut SHELLEXECUTEINFOW) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shell32.dll" "system" fn ShellExecuteExW(pexecinfo : *mut SHELLEXECUTEINFOW) -> super::super::Foundation:: BOOL);
    ShellExecuteExW(pexecinfo).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn ShellExecuteW<P0, P1, P2, P3, P4>(hwnd: P0, lpoperation: P1, lpfile: P2, lpparameters: P3, lpdirectory: P4, nshowcmd: super::WindowsAndMessaging::SHOW_WINDOW_CMD) -> super::super::Foundation::HINSTANCE
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P3: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P4: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn ShellExecuteW(hwnd : super::super::Foundation:: HWND, lpoperation : ::windows_core::PCWSTR, lpfile : ::windows_core::PCWSTR, lpparameters : ::windows_core::PCWSTR, lpdirectory : ::windows_core::PCWSTR, nshowcmd : super::WindowsAndMessaging:: SHOW_WINDOW_CMD) -> super::super::Foundation:: HINSTANCE);
    ShellExecuteW(hwnd.into_param().abi(), lpoperation.into_param().abi(), lpfile.into_param().abi(), lpparameters.into_param().abi(), lpdirectory.into_param().abi(), nshowcmd)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn ShellMessageBoxA<P0, P1, P2, P3>(happinst: P0, hwnd: P1, lpctext: P2, lpctitle: P3, fustyle: super::WindowsAndMessaging::MESSAGEBOX_STYLE) -> i32
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HINSTANCE>,
    P1: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P3: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "cdecl" fn ShellMessageBoxA(happinst : super::super::Foundation:: HINSTANCE, hwnd : super::super::Foundation:: HWND, lpctext : ::windows_core::PCSTR, lpctitle : ::windows_core::PCSTR, fustyle : super::WindowsAndMessaging:: MESSAGEBOX_STYLE) -> i32);
    ShellMessageBoxA(happinst.into_param().abi(), hwnd.into_param().abi(), lpctext.into_param().abi(), lpctitle.into_param().abi(), fustyle)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn ShellMessageBoxW<P0, P1, P2, P3>(happinst: P0, hwnd: P1, lpctext: P2, lpctitle: P3, fustyle: super::WindowsAndMessaging::MESSAGEBOX_STYLE) -> i32
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HINSTANCE>,
    P1: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P3: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "cdecl" fn ShellMessageBoxW(happinst : super::super::Foundation:: HINSTANCE, hwnd : super::super::Foundation:: HWND, lpctext : ::windows_core::PCWSTR, lpctitle : ::windows_core::PCWSTR, fustyle : super::WindowsAndMessaging:: MESSAGEBOX_STYLE) -> i32);
    ShellMessageBoxW(happinst.into_param().abi(), hwnd.into_param().abi(), lpctext.into_param().abi(), lpctitle.into_param().abi(), fustyle)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn Shell_GetCachedImageIndex<P0>(pwsziconpath: P0, iiconindex: i32, uiconflags: u32) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn Shell_GetCachedImageIndex(pwsziconpath : ::windows_core::PCWSTR, iiconindex : i32, uiconflags : u32) -> i32);
    Shell_GetCachedImageIndex(pwsziconpath.into_param().abi(), iiconindex, uiconflags)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn Shell_GetCachedImageIndexA<P0>(psziconpath: P0, iiconindex: i32, uiconflags: u32) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn Shell_GetCachedImageIndexA(psziconpath : ::windows_core::PCSTR, iiconindex : i32, uiconflags : u32) -> i32);
    Shell_GetCachedImageIndexA(psziconpath.into_param().abi(), iiconindex, uiconflags)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn Shell_GetCachedImageIndexW<P0>(psziconpath: P0, iiconindex: i32, uiconflags: u32) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn Shell_GetCachedImageIndexW(psziconpath : ::windows_core::PCWSTR, iiconindex : i32, uiconflags : u32) -> i32);
    Shell_GetCachedImageIndexW(psziconpath.into_param().abi(), iiconindex, uiconflags)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Controls\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls"))]
#[inline]
pub unsafe fn Shell_GetImageLists(phiml: ::core::option::Option<*mut super::Controls::HIMAGELIST>, phimlsmall: ::core::option::Option<*mut super::Controls::HIMAGELIST>) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shell32.dll" "system" fn Shell_GetImageLists(phiml : *mut super::Controls:: HIMAGELIST, phimlsmall : *mut super::Controls:: HIMAGELIST) -> super::super::Foundation:: BOOL);
    Shell_GetImageLists(::core::mem::transmute(phiml.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(phimlsmall.unwrap_or(::std::ptr::null_mut())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
#[inline]
pub unsafe fn Shell_MergeMenus<P0, P1>(hmdst: P0, hmsrc: P1, uinsert: u32, uidadjust: u32, uidadjustmax: u32, uflags: MM_FLAGS) -> u32
where
    P0: ::windows_core::IntoParam<super::WindowsAndMessaging::HMENU>,
    P1: ::windows_core::IntoParam<super::WindowsAndMessaging::HMENU>,
{
    ::windows_targets::link!("shell32.dll" "system" fn Shell_MergeMenus(hmdst : super::WindowsAndMessaging:: HMENU, hmsrc : super::WindowsAndMessaging:: HMENU, uinsert : u32, uidadjust : u32, uidadjustmax : u32, uflags : MM_FLAGS) -> u32);
    Shell_MergeMenus(hmdst.into_param().abi(), hmsrc.into_param().abi(), uinsert, uidadjust, uidadjustmax, uflags)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn Shell_NotifyIconA(dwmessage: NOTIFY_ICON_MESSAGE, lpdata: *const NOTIFYICONDATAA) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shell32.dll" "system" fn Shell_NotifyIconA(dwmessage : NOTIFY_ICON_MESSAGE, lpdata : *const NOTIFYICONDATAA) -> super::super::Foundation:: BOOL);
    Shell_NotifyIconA(dwmessage, lpdata)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn Shell_NotifyIconGetRect(identifier: *const NOTIFYICONIDENTIFIER) -> ::windows_core::Result<super::super::Foundation::RECT> {
    ::windows_targets::link!("shell32.dll" "system" fn Shell_NotifyIconGetRect(identifier : *const NOTIFYICONIDENTIFIER, iconlocation : *mut super::super::Foundation:: RECT) -> ::windows_core::HRESULT);
    let mut result__ = ::std::mem::zeroed();
    Shell_NotifyIconGetRect(identifier, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
#[inline]
pub unsafe fn Shell_NotifyIconW(dwmessage: NOTIFY_ICON_MESSAGE, lpdata: *const NOTIFYICONDATAW) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shell32.dll" "system" fn Shell_NotifyIconW(dwmessage : NOTIFY_ICON_MESSAGE, lpdata : *const NOTIFYICONDATAW) -> super::super::Foundation:: BOOL);
    Shell_NotifyIconW(dwmessage, lpdata)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn SignalFileOpen(pidl: *const Common::ITEMIDLIST) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shell32.dll" "system" fn SignalFileOpen(pidl : *const Common:: ITEMIDLIST) -> super::super::Foundation:: BOOL);
    SignalFileOpen(pidl)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com_Urlmon\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_Urlmon"))]
#[inline]
pub unsafe fn SoftwareUpdateMessageBox<P0, P1>(hwnd: P0, pszdistunit: P1, dwflags: u32, psdi: ::core::option::Option<*mut super::super::System::Com::Urlmon::SOFTDISTINFO>) -> u32
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shdocvw.dll" "system" fn SoftwareUpdateMessageBox(hwnd : super::super::Foundation:: HWND, pszdistunit : ::windows_core::PCWSTR, dwflags : u32, psdi : *mut super::super::System::Com::Urlmon:: SOFTDISTINFO) -> u32);
    SoftwareUpdateMessageBox(hwnd.into_param().abi(), pszdistunit.into_param().abi(), dwflags, ::core::mem::transmute(psdi.unwrap_or(::std::ptr::null_mut())))
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com_StructuredStorage\"`*"]
#[cfg(feature = "Win32_System_Com_StructuredStorage")]
#[inline]
pub unsafe fn StgMakeUniqueName<P0, P1, T>(pstgparent: P0, pszfilespec: P1, grfmode: u32) -> ::windows_core::Result<T>
where
    P0: ::windows_core::IntoParam<super::super::System::Com::StructuredStorage::IStorage>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    T: ::windows_core::ComInterface,
{
    ::windows_targets::link!("shell32.dll" "system" fn StgMakeUniqueName(pstgparent : * mut::core::ffi::c_void, pszfilespec : ::windows_core::PCWSTR, grfmode : u32, riid : *const ::windows_core::GUID, ppv : *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT);
    let mut result__ = ::std::ptr::null_mut();
    StgMakeUniqueName(pstgparent.into_param().abi(), pszfilespec.into_param().abi(), grfmode, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCSpnA<P0, P1>(pszstr: P0, pszset: P1) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCSpnA(pszstr : ::windows_core::PCSTR, pszset : ::windows_core::PCSTR) -> i32);
    StrCSpnA(pszstr.into_param().abi(), pszset.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCSpnIA<P0, P1>(pszstr: P0, pszset: P1) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCSpnIA(pszstr : ::windows_core::PCSTR, pszset : ::windows_core::PCSTR) -> i32);
    StrCSpnIA(pszstr.into_param().abi(), pszset.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCSpnIW<P0, P1>(pszstr: P0, pszset: P1) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCSpnIW(pszstr : ::windows_core::PCWSTR, pszset : ::windows_core::PCWSTR) -> i32);
    StrCSpnIW(pszstr.into_param().abi(), pszset.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCSpnW<P0, P1>(pszstr: P0, pszset: P1) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCSpnW(pszstr : ::windows_core::PCWSTR, pszset : ::windows_core::PCWSTR) -> i32);
    StrCSpnW(pszstr.into_param().abi(), pszset.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCatBuffA<P0>(pszdest: &mut [u8], pszsrc: P0) -> ::windows_core::PSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCatBuffA(pszdest : ::windows_core::PSTR, pszsrc : ::windows_core::PCSTR, cchdestbuffsize : i32) -> ::windows_core::PSTR);
    StrCatBuffA(::core::mem::transmute(pszdest.as_ptr()), pszsrc.into_param().abi(), pszdest.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCatBuffW<P0>(pszdest: &mut [u16], pszsrc: P0) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCatBuffW(pszdest : ::windows_core::PWSTR, pszsrc : ::windows_core::PCWSTR, cchdestbuffsize : i32) -> ::windows_core::PWSTR);
    StrCatBuffW(::core::mem::transmute(pszdest.as_ptr()), pszsrc.into_param().abi(), pszdest.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCatChainW<P0>(pszdst: &mut [u16], ichat: u32, pszsrc: P0) -> u32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCatChainW(pszdst : ::windows_core::PWSTR, cchdst : u32, ichat : u32, pszsrc : ::windows_core::PCWSTR) -> u32);
    StrCatChainW(::core::mem::transmute(pszdst.as_ptr()), pszdst.len() as _, ichat, pszsrc.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCatW<P0>(psz1: ::windows_core::PWSTR, psz2: P0) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCatW(psz1 : ::windows_core::PWSTR, psz2 : ::windows_core::PCWSTR) -> ::windows_core::PWSTR);
    StrCatW(::core::mem::transmute(psz1), psz2.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrChrA<P0>(pszstart: P0, wmatch: u16) -> ::windows_core::PSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrChrA(pszstart : ::windows_core::PCSTR, wmatch : u16) -> ::windows_core::PSTR);
    StrChrA(pszstart.into_param().abi(), wmatch)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrChrIA<P0>(pszstart: P0, wmatch: u16) -> ::windows_core::PSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrChrIA(pszstart : ::windows_core::PCSTR, wmatch : u16) -> ::windows_core::PSTR);
    StrChrIA(pszstart.into_param().abi(), wmatch)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrChrIW<P0>(pszstart: P0, wmatch: u16) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrChrIW(pszstart : ::windows_core::PCWSTR, wmatch : u16) -> ::windows_core::PWSTR);
    StrChrIW(pszstart.into_param().abi(), wmatch)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrChrNIW<P0>(pszstart: P0, wmatch: u16, cchmax: u32) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrChrNIW(pszstart : ::windows_core::PCWSTR, wmatch : u16, cchmax : u32) -> ::windows_core::PWSTR);
    StrChrNIW(pszstart.into_param().abi(), wmatch, cchmax)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrChrNW<P0>(pszstart: P0, wmatch: u16, cchmax: u32) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrChrNW(pszstart : ::windows_core::PCWSTR, wmatch : u16, cchmax : u32) -> ::windows_core::PWSTR);
    StrChrNW(pszstart.into_param().abi(), wmatch, cchmax)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrChrW<P0>(pszstart: P0, wmatch: u16) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrChrW(pszstart : ::windows_core::PCWSTR, wmatch : u16) -> ::windows_core::PWSTR);
    StrChrW(pszstart.into_param().abi(), wmatch)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCmpCA<P0, P1>(pszstr1: P0, pszstr2: P1) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCmpCA(pszstr1 : ::windows_core::PCSTR, pszstr2 : ::windows_core::PCSTR) -> i32);
    StrCmpCA(pszstr1.into_param().abi(), pszstr2.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCmpCW<P0, P1>(pszstr1: P0, pszstr2: P1) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCmpCW(pszstr1 : ::windows_core::PCWSTR, pszstr2 : ::windows_core::PCWSTR) -> i32);
    StrCmpCW(pszstr1.into_param().abi(), pszstr2.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCmpICA<P0, P1>(pszstr1: P0, pszstr2: P1) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCmpICA(pszstr1 : ::windows_core::PCSTR, pszstr2 : ::windows_core::PCSTR) -> i32);
    StrCmpICA(pszstr1.into_param().abi(), pszstr2.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCmpICW<P0, P1>(pszstr1: P0, pszstr2: P1) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCmpICW(pszstr1 : ::windows_core::PCWSTR, pszstr2 : ::windows_core::PCWSTR) -> i32);
    StrCmpICW(pszstr1.into_param().abi(), pszstr2.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCmpIW<P0, P1>(psz1: P0, psz2: P1) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCmpIW(psz1 : ::windows_core::PCWSTR, psz2 : ::windows_core::PCWSTR) -> i32);
    StrCmpIW(psz1.into_param().abi(), psz2.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCmpLogicalW<P0, P1>(psz1: P0, psz2: P1) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCmpLogicalW(psz1 : ::windows_core::PCWSTR, psz2 : ::windows_core::PCWSTR) -> i32);
    StrCmpLogicalW(psz1.into_param().abi(), psz2.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCmpNA<P0, P1>(psz1: P0, psz2: P1, nchar: i32) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCmpNA(psz1 : ::windows_core::PCSTR, psz2 : ::windows_core::PCSTR, nchar : i32) -> i32);
    StrCmpNA(psz1.into_param().abi(), psz2.into_param().abi(), nchar)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCmpNCA<P0, P1>(pszstr1: P0, pszstr2: P1, nchar: i32) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCmpNCA(pszstr1 : ::windows_core::PCSTR, pszstr2 : ::windows_core::PCSTR, nchar : i32) -> i32);
    StrCmpNCA(pszstr1.into_param().abi(), pszstr2.into_param().abi(), nchar)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCmpNCW<P0, P1>(pszstr1: P0, pszstr2: P1, nchar: i32) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCmpNCW(pszstr1 : ::windows_core::PCWSTR, pszstr2 : ::windows_core::PCWSTR, nchar : i32) -> i32);
    StrCmpNCW(pszstr1.into_param().abi(), pszstr2.into_param().abi(), nchar)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCmpNIA<P0, P1>(psz1: P0, psz2: P1, nchar: i32) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCmpNIA(psz1 : ::windows_core::PCSTR, psz2 : ::windows_core::PCSTR, nchar : i32) -> i32);
    StrCmpNIA(psz1.into_param().abi(), psz2.into_param().abi(), nchar)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCmpNICA<P0, P1>(pszstr1: P0, pszstr2: P1, nchar: i32) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCmpNICA(pszstr1 : ::windows_core::PCSTR, pszstr2 : ::windows_core::PCSTR, nchar : i32) -> i32);
    StrCmpNICA(pszstr1.into_param().abi(), pszstr2.into_param().abi(), nchar)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCmpNICW<P0, P1>(pszstr1: P0, pszstr2: P1, nchar: i32) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCmpNICW(pszstr1 : ::windows_core::PCWSTR, pszstr2 : ::windows_core::PCWSTR, nchar : i32) -> i32);
    StrCmpNICW(pszstr1.into_param().abi(), pszstr2.into_param().abi(), nchar)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCmpNIW<P0, P1>(psz1: P0, psz2: P1, nchar: i32) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCmpNIW(psz1 : ::windows_core::PCWSTR, psz2 : ::windows_core::PCWSTR, nchar : i32) -> i32);
    StrCmpNIW(psz1.into_param().abi(), psz2.into_param().abi(), nchar)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCmpNW<P0, P1>(psz1: P0, psz2: P1, nchar: i32) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCmpNW(psz1 : ::windows_core::PCWSTR, psz2 : ::windows_core::PCWSTR, nchar : i32) -> i32);
    StrCmpNW(psz1.into_param().abi(), psz2.into_param().abi(), nchar)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCmpW<P0, P1>(psz1: P0, psz2: P1) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCmpW(psz1 : ::windows_core::PCWSTR, psz2 : ::windows_core::PCWSTR) -> i32);
    StrCmpW(psz1.into_param().abi(), psz2.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCpyNW<P0>(pszdst: &mut [u16], pszsrc: P0) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCpyNW(pszdst : ::windows_core::PWSTR, pszsrc : ::windows_core::PCWSTR, cchmax : i32) -> ::windows_core::PWSTR);
    StrCpyNW(::core::mem::transmute(pszdst.as_ptr()), pszsrc.into_param().abi(), pszdst.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrCpyW<P0>(psz1: ::windows_core::PWSTR, psz2: P0) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrCpyW(psz1 : ::windows_core::PWSTR, psz2 : ::windows_core::PCWSTR) -> ::windows_core::PWSTR);
    StrCpyW(::core::mem::transmute(psz1), psz2.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrDupA<P0>(pszsrch: P0) -> ::windows_core::PSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrDupA(pszsrch : ::windows_core::PCSTR) -> ::windows_core::PSTR);
    StrDupA(pszsrch.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrDupW<P0>(pszsrch: P0) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrDupW(pszsrch : ::windows_core::PCWSTR) -> ::windows_core::PWSTR);
    StrDupW(pszsrch.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrFormatByteSize64A(qdw: i64, pszbuf: &mut [u8]) -> ::windows_core::PSTR {
    ::windows_targets::link!("shlwapi.dll" "system" fn StrFormatByteSize64A(qdw : i64, pszbuf : ::windows_core::PSTR, cchbuf : u32) -> ::windows_core::PSTR);
    StrFormatByteSize64A(qdw, ::core::mem::transmute(pszbuf.as_ptr()), pszbuf.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrFormatByteSizeA(dw: u32, pszbuf: &mut [u8]) -> ::windows_core::PSTR {
    ::windows_targets::link!("shlwapi.dll" "system" fn StrFormatByteSizeA(dw : u32, pszbuf : ::windows_core::PSTR, cchbuf : u32) -> ::windows_core::PSTR);
    StrFormatByteSizeA(dw, ::core::mem::transmute(pszbuf.as_ptr()), pszbuf.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrFormatByteSizeEx(ull: u64, flags: SFBS_FLAGS, pszbuf: &mut [u16]) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn StrFormatByteSizeEx(ull : u64, flags : SFBS_FLAGS, pszbuf : ::windows_core::PWSTR, cchbuf : u32) -> ::windows_core::HRESULT);
    StrFormatByteSizeEx(ull, flags, ::core::mem::transmute(pszbuf.as_ptr()), pszbuf.len() as _).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrFormatByteSizeW(qdw: i64, pszbuf: &mut [u16]) -> ::windows_core::PWSTR {
    ::windows_targets::link!("shlwapi.dll" "system" fn StrFormatByteSizeW(qdw : i64, pszbuf : ::windows_core::PWSTR, cchbuf : u32) -> ::windows_core::PWSTR);
    StrFormatByteSizeW(qdw, ::core::mem::transmute(pszbuf.as_ptr()), pszbuf.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrFormatKBSizeA(qdw: i64, pszbuf: &mut [u8]) -> ::windows_core::PSTR {
    ::windows_targets::link!("shlwapi.dll" "system" fn StrFormatKBSizeA(qdw : i64, pszbuf : ::windows_core::PSTR, cchbuf : u32) -> ::windows_core::PSTR);
    StrFormatKBSizeA(qdw, ::core::mem::transmute(pszbuf.as_ptr()), pszbuf.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrFormatKBSizeW(qdw: i64, pszbuf: &mut [u16]) -> ::windows_core::PWSTR {
    ::windows_targets::link!("shlwapi.dll" "system" fn StrFormatKBSizeW(qdw : i64, pszbuf : ::windows_core::PWSTR, cchbuf : u32) -> ::windows_core::PWSTR);
    StrFormatKBSizeW(qdw, ::core::mem::transmute(pszbuf.as_ptr()), pszbuf.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrFromTimeIntervalA(pszout: &mut [u8], dwtimems: u32, digits: i32) -> i32 {
    ::windows_targets::link!("shlwapi.dll" "system" fn StrFromTimeIntervalA(pszout : ::windows_core::PSTR, cchmax : u32, dwtimems : u32, digits : i32) -> i32);
    StrFromTimeIntervalA(::core::mem::transmute(pszout.as_ptr()), pszout.len() as _, dwtimems, digits)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrFromTimeIntervalW(pszout: &mut [u16], dwtimems: u32, digits: i32) -> i32 {
    ::windows_targets::link!("shlwapi.dll" "system" fn StrFromTimeIntervalW(pszout : ::windows_core::PWSTR, cchmax : u32, dwtimems : u32, digits : i32) -> i32);
    StrFromTimeIntervalW(::core::mem::transmute(pszout.as_ptr()), pszout.len() as _, dwtimems, digits)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn StrIsIntlEqualA<P0, P1, P2>(fcasesens: P0, pszstring1: P1, pszstring2: P2, nchar: i32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrIsIntlEqualA(fcasesens : super::super::Foundation:: BOOL, pszstring1 : ::windows_core::PCSTR, pszstring2 : ::windows_core::PCSTR, nchar : i32) -> super::super::Foundation:: BOOL);
    StrIsIntlEqualA(fcasesens.into_param().abi(), pszstring1.into_param().abi(), pszstring2.into_param().abi(), nchar)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn StrIsIntlEqualW<P0, P1, P2>(fcasesens: P0, pszstring1: P1, pszstring2: P2, nchar: i32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrIsIntlEqualW(fcasesens : super::super::Foundation:: BOOL, pszstring1 : ::windows_core::PCWSTR, pszstring2 : ::windows_core::PCWSTR, nchar : i32) -> super::super::Foundation:: BOOL);
    StrIsIntlEqualW(fcasesens.into_param().abi(), pszstring1.into_param().abi(), pszstring2.into_param().abi(), nchar)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrNCatA<P0>(psz1: &mut [u8], psz2: P0) -> ::windows_core::PSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrNCatA(psz1 : ::windows_core::PSTR, psz2 : ::windows_core::PCSTR, cchmax : i32) -> ::windows_core::PSTR);
    StrNCatA(::core::mem::transmute(psz1.as_ptr()), psz2.into_param().abi(), psz1.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrNCatW<P0>(psz1: &mut [u16], psz2: P0) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrNCatW(psz1 : ::windows_core::PWSTR, psz2 : ::windows_core::PCWSTR, cchmax : i32) -> ::windows_core::PWSTR);
    StrNCatW(::core::mem::transmute(psz1.as_ptr()), psz2.into_param().abi(), psz1.len() as _)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrPBrkA<P0, P1>(psz: P0, pszset: P1) -> ::windows_core::PSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrPBrkA(psz : ::windows_core::PCSTR, pszset : ::windows_core::PCSTR) -> ::windows_core::PSTR);
    StrPBrkA(psz.into_param().abi(), pszset.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrPBrkW<P0, P1>(psz: P0, pszset: P1) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrPBrkW(psz : ::windows_core::PCWSTR, pszset : ::windows_core::PCWSTR) -> ::windows_core::PWSTR);
    StrPBrkW(psz.into_param().abi(), pszset.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrRChrA<P0, P1>(pszstart: P0, pszend: P1, wmatch: u16) -> ::windows_core::PSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrRChrA(pszstart : ::windows_core::PCSTR, pszend : ::windows_core::PCSTR, wmatch : u16) -> ::windows_core::PSTR);
    StrRChrA(pszstart.into_param().abi(), pszend.into_param().abi(), wmatch)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrRChrIA<P0, P1>(pszstart: P0, pszend: P1, wmatch: u16) -> ::windows_core::PSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrRChrIA(pszstart : ::windows_core::PCSTR, pszend : ::windows_core::PCSTR, wmatch : u16) -> ::windows_core::PSTR);
    StrRChrIA(pszstart.into_param().abi(), pszend.into_param().abi(), wmatch)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrRChrIW<P0, P1>(pszstart: P0, pszend: P1, wmatch: u16) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrRChrIW(pszstart : ::windows_core::PCWSTR, pszend : ::windows_core::PCWSTR, wmatch : u16) -> ::windows_core::PWSTR);
    StrRChrIW(pszstart.into_param().abi(), pszend.into_param().abi(), wmatch)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrRChrW<P0, P1>(pszstart: P0, pszend: P1, wmatch: u16) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrRChrW(pszstart : ::windows_core::PCWSTR, pszend : ::windows_core::PCWSTR, wmatch : u16) -> ::windows_core::PWSTR);
    StrRChrW(pszstart.into_param().abi(), pszend.into_param().abi(), wmatch)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrRStrIA<P0, P1, P2>(pszsource: P0, pszlast: P1, pszsrch: P2) -> ::windows_core::PSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrRStrIA(pszsource : ::windows_core::PCSTR, pszlast : ::windows_core::PCSTR, pszsrch : ::windows_core::PCSTR) -> ::windows_core::PSTR);
    StrRStrIA(pszsource.into_param().abi(), pszlast.into_param().abi(), pszsrch.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrRStrIW<P0, P1, P2>(pszsource: P0, pszlast: P1, pszsrch: P2) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrRStrIW(pszsource : ::windows_core::PCWSTR, pszlast : ::windows_core::PCWSTR, pszsrch : ::windows_core::PCWSTR) -> ::windows_core::PWSTR);
    StrRStrIW(pszsource.into_param().abi(), pszlast.into_param().abi(), pszsrch.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn StrRetToBSTR(pstr: *mut Common::STRRET, pidl: ::core::option::Option<*const Common::ITEMIDLIST>, pbstr: *mut ::windows_core::BSTR) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn StrRetToBSTR(pstr : *mut Common:: STRRET, pidl : *const Common:: ITEMIDLIST, pbstr : *mut ::std::mem::MaybeUninit <::windows_core::BSTR >) -> ::windows_core::HRESULT);
    StrRetToBSTR(pstr, ::core::mem::transmute(pidl.unwrap_or(::std::ptr::null())), ::core::mem::transmute(pbstr)).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn StrRetToBufA(pstr: *mut Common::STRRET, pidl: ::core::option::Option<*const Common::ITEMIDLIST>, pszbuf: &mut [u8]) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn StrRetToBufA(pstr : *mut Common:: STRRET, pidl : *const Common:: ITEMIDLIST, pszbuf : ::windows_core::PSTR, cchbuf : u32) -> ::windows_core::HRESULT);
    StrRetToBufA(pstr, ::core::mem::transmute(pidl.unwrap_or(::std::ptr::null())), ::core::mem::transmute(pszbuf.as_ptr()), pszbuf.len() as _).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn StrRetToBufW(pstr: *mut Common::STRRET, pidl: ::core::option::Option<*const Common::ITEMIDLIST>, pszbuf: &mut [u16]) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn StrRetToBufW(pstr : *mut Common:: STRRET, pidl : *const Common:: ITEMIDLIST, pszbuf : ::windows_core::PWSTR, cchbuf : u32) -> ::windows_core::HRESULT);
    StrRetToBufW(pstr, ::core::mem::transmute(pidl.unwrap_or(::std::ptr::null())), ::core::mem::transmute(pszbuf.as_ptr()), pszbuf.len() as _).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn StrRetToStrA(pstr: *mut Common::STRRET, pidl: ::core::option::Option<*const Common::ITEMIDLIST>, ppsz: *mut ::windows_core::PSTR) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn StrRetToStrA(pstr : *mut Common:: STRRET, pidl : *const Common:: ITEMIDLIST, ppsz : *mut ::windows_core::PSTR) -> ::windows_core::HRESULT);
    StrRetToStrA(pstr, ::core::mem::transmute(pidl.unwrap_or(::std::ptr::null())), ppsz).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(feature = "Win32_UI_Shell_Common")]
#[inline]
pub unsafe fn StrRetToStrW(pstr: *mut Common::STRRET, pidl: ::core::option::Option<*const Common::ITEMIDLIST>, ppsz: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn StrRetToStrW(pstr : *mut Common:: STRRET, pidl : *const Common:: ITEMIDLIST, ppsz : *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT);
    StrRetToStrW(pstr, ::core::mem::transmute(pidl.unwrap_or(::std::ptr::null())), ppsz).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrSpnA<P0, P1>(psz: P0, pszset: P1) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrSpnA(psz : ::windows_core::PCSTR, pszset : ::windows_core::PCSTR) -> i32);
    StrSpnA(psz.into_param().abi(), pszset.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrSpnW<P0, P1>(psz: P0, pszset: P1) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrSpnW(psz : ::windows_core::PCWSTR, pszset : ::windows_core::PCWSTR) -> i32);
    StrSpnW(psz.into_param().abi(), pszset.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrStrA<P0, P1>(pszfirst: P0, pszsrch: P1) -> ::windows_core::PSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrStrA(pszfirst : ::windows_core::PCSTR, pszsrch : ::windows_core::PCSTR) -> ::windows_core::PSTR);
    StrStrA(pszfirst.into_param().abi(), pszsrch.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrStrIA<P0, P1>(pszfirst: P0, pszsrch: P1) -> ::windows_core::PSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrStrIA(pszfirst : ::windows_core::PCSTR, pszsrch : ::windows_core::PCSTR) -> ::windows_core::PSTR);
    StrStrIA(pszfirst.into_param().abi(), pszsrch.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrStrIW<P0, P1>(pszfirst: P0, pszsrch: P1) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrStrIW(pszfirst : ::windows_core::PCWSTR, pszsrch : ::windows_core::PCWSTR) -> ::windows_core::PWSTR);
    StrStrIW(pszfirst.into_param().abi(), pszsrch.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrStrNIW<P0, P1>(pszfirst: P0, pszsrch: P1, cchmax: u32) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrStrNIW(pszfirst : ::windows_core::PCWSTR, pszsrch : ::windows_core::PCWSTR, cchmax : u32) -> ::windows_core::PWSTR);
    StrStrNIW(pszfirst.into_param().abi(), pszsrch.into_param().abi(), cchmax)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrStrNW<P0, P1>(pszfirst: P0, pszsrch: P1, cchmax: u32) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrStrNW(pszfirst : ::windows_core::PCWSTR, pszsrch : ::windows_core::PCWSTR, cchmax : u32) -> ::windows_core::PWSTR);
    StrStrNW(pszfirst.into_param().abi(), pszsrch.into_param().abi(), cchmax)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrStrW<P0, P1>(pszfirst: P0, pszsrch: P1) -> ::windows_core::PWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrStrW(pszfirst : ::windows_core::PCWSTR, pszsrch : ::windows_core::PCWSTR) -> ::windows_core::PWSTR);
    StrStrW(pszfirst.into_param().abi(), pszsrch.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn StrToInt64ExA<P0>(pszstring: P0, dwflags: i32, pllret: *mut i64) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrToInt64ExA(pszstring : ::windows_core::PCSTR, dwflags : i32, pllret : *mut i64) -> super::super::Foundation:: BOOL);
    StrToInt64ExA(pszstring.into_param().abi(), dwflags, pllret)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn StrToInt64ExW<P0>(pszstring: P0, dwflags: i32, pllret: *mut i64) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrToInt64ExW(pszstring : ::windows_core::PCWSTR, dwflags : i32, pllret : *mut i64) -> super::super::Foundation:: BOOL);
    StrToInt64ExW(pszstring.into_param().abi(), dwflags, pllret)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrToIntA<P0>(pszsrc: P0) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrToIntA(pszsrc : ::windows_core::PCSTR) -> i32);
    StrToIntA(pszsrc.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn StrToIntExA<P0>(pszstring: P0, dwflags: i32, piret: *mut i32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrToIntExA(pszstring : ::windows_core::PCSTR, dwflags : i32, piret : *mut i32) -> super::super::Foundation:: BOOL);
    StrToIntExA(pszstring.into_param().abi(), dwflags, piret)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn StrToIntExW<P0>(pszstring: P0, dwflags: i32, piret: *mut i32) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrToIntExW(pszstring : ::windows_core::PCWSTR, dwflags : i32, piret : *mut i32) -> super::super::Foundation:: BOOL);
    StrToIntExW(pszstring.into_param().abi(), dwflags, piret)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn StrToIntW<P0>(pszsrc: P0) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrToIntW(pszsrc : ::windows_core::PCWSTR) -> i32);
    StrToIntW(pszsrc.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn StrTrimA<P0>(psz: ::windows_core::PSTR, psztrimchars: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrTrimA(psz : ::windows_core::PSTR, psztrimchars : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    StrTrimA(::core::mem::transmute(psz), psztrimchars.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn StrTrimW<P0>(psz: ::windows_core::PWSTR, psztrimchars: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn StrTrimW(psz : ::windows_core::PWSTR, psztrimchars : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    StrTrimW(::core::mem::transmute(psz), psztrimchars.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn UnloadUserProfile<P0, P1>(htoken: P0, hprofile: P1) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
    P1: ::windows_core::IntoParam<super::super::Foundation::HANDLE>,
{
    ::windows_targets::link!("userenv.dll" "system" fn UnloadUserProfile(htoken : super::super::Foundation:: HANDLE, hprofile : super::super::Foundation:: HANDLE) -> super::super::Foundation:: BOOL);
    UnloadUserProfile(htoken.into_param().abi(), hprofile.into_param().abi()).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UnregisterAppConstrainedChangeNotification<P0>(registration: P0)
where
    P0: ::windows_core::IntoParam<PAPPCONSTRAIN_REGISTRATION>,
{
    ::windows_targets::link!("api-ms-win-core-psm-appnotify-l1-1-1.dll" "system" fn UnregisterAppConstrainedChangeNotification(registration : PAPPCONSTRAIN_REGISTRATION) -> ());
    UnregisterAppConstrainedChangeNotification(registration.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UnregisterAppStateChangeNotification<P0>(registration: P0)
where
    P0: ::windows_core::IntoParam<PAPPSTATE_REGISTRATION>,
{
    ::windows_targets::link!("api-ms-win-core-psm-appnotify-l1-1-0.dll" "system" fn UnregisterAppStateChangeNotification(registration : PAPPSTATE_REGISTRATION) -> ());
    UnregisterAppStateChangeNotification(registration.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UnregisterScaleChangeEvent(dwcookie: usize) -> ::windows_core::Result<()> {
    ::windows_targets::link!("api-ms-win-shcore-scaling-l1-1-1.dll" "system" fn UnregisterScaleChangeEvent(dwcookie : usize) -> ::windows_core::HRESULT);
    UnregisterScaleChangeEvent(dwcookie).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlApplySchemeA<P0>(pszin: P0, pszout: ::windows_core::PSTR, pcchout: *mut u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlApplySchemeA(pszin : ::windows_core::PCSTR, pszout : ::windows_core::PSTR, pcchout : *mut u32, dwflags : u32) -> ::windows_core::HRESULT);
    UrlApplySchemeA(pszin.into_param().abi(), ::core::mem::transmute(pszout), pcchout, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlApplySchemeW<P0>(pszin: P0, pszout: ::windows_core::PWSTR, pcchout: *mut u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlApplySchemeW(pszin : ::windows_core::PCWSTR, pszout : ::windows_core::PWSTR, pcchout : *mut u32, dwflags : u32) -> ::windows_core::HRESULT);
    UrlApplySchemeW(pszin.into_param().abi(), ::core::mem::transmute(pszout), pcchout, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlCanonicalizeA<P0>(pszurl: P0, pszcanonicalized: ::windows_core::PSTR, pcchcanonicalized: *mut u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlCanonicalizeA(pszurl : ::windows_core::PCSTR, pszcanonicalized : ::windows_core::PSTR, pcchcanonicalized : *mut u32, dwflags : u32) -> ::windows_core::HRESULT);
    UrlCanonicalizeA(pszurl.into_param().abi(), ::core::mem::transmute(pszcanonicalized), pcchcanonicalized, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlCanonicalizeW<P0>(pszurl: P0, pszcanonicalized: ::windows_core::PWSTR, pcchcanonicalized: *mut u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlCanonicalizeW(pszurl : ::windows_core::PCWSTR, pszcanonicalized : ::windows_core::PWSTR, pcchcanonicalized : *mut u32, dwflags : u32) -> ::windows_core::HRESULT);
    UrlCanonicalizeW(pszurl.into_param().abi(), ::core::mem::transmute(pszcanonicalized), pcchcanonicalized, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlCombineA<P0, P1>(pszbase: P0, pszrelative: P1, pszcombined: ::windows_core::PSTR, pcchcombined: *mut u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlCombineA(pszbase : ::windows_core::PCSTR, pszrelative : ::windows_core::PCSTR, pszcombined : ::windows_core::PSTR, pcchcombined : *mut u32, dwflags : u32) -> ::windows_core::HRESULT);
    UrlCombineA(pszbase.into_param().abi(), pszrelative.into_param().abi(), ::core::mem::transmute(pszcombined), pcchcombined, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlCombineW<P0, P1>(pszbase: P0, pszrelative: P1, pszcombined: ::windows_core::PWSTR, pcchcombined: *mut u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlCombineW(pszbase : ::windows_core::PCWSTR, pszrelative : ::windows_core::PCWSTR, pszcombined : ::windows_core::PWSTR, pcchcombined : *mut u32, dwflags : u32) -> ::windows_core::HRESULT);
    UrlCombineW(pszbase.into_param().abi(), pszrelative.into_param().abi(), ::core::mem::transmute(pszcombined), pcchcombined, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn UrlCompareA<P0, P1, P2>(psz1: P0, psz2: P1, fignoreslash: P2) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
    P2: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlCompareA(psz1 : ::windows_core::PCSTR, psz2 : ::windows_core::PCSTR, fignoreslash : super::super::Foundation:: BOOL) -> i32);
    UrlCompareA(psz1.into_param().abi(), psz2.into_param().abi(), fignoreslash.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn UrlCompareW<P0, P1, P2>(psz1: P0, psz2: P1, fignoreslash: P2) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    P2: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlCompareW(psz1 : ::windows_core::PCWSTR, psz2 : ::windows_core::PCWSTR, fignoreslash : super::super::Foundation:: BOOL) -> i32);
    UrlCompareW(psz1.into_param().abi(), psz2.into_param().abi(), fignoreslash.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlCreateFromPathA<P0>(pszpath: P0, pszurl: ::windows_core::PSTR, pcchurl: *mut u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlCreateFromPathA(pszpath : ::windows_core::PCSTR, pszurl : ::windows_core::PSTR, pcchurl : *mut u32, dwflags : u32) -> ::windows_core::HRESULT);
    UrlCreateFromPathA(pszpath.into_param().abi(), ::core::mem::transmute(pszurl), pcchurl, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlCreateFromPathW<P0>(pszpath: P0, pszurl: ::windows_core::PWSTR, pcchurl: *mut u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlCreateFromPathW(pszpath : ::windows_core::PCWSTR, pszurl : ::windows_core::PWSTR, pcchurl : *mut u32, dwflags : u32) -> ::windows_core::HRESULT);
    UrlCreateFromPathW(pszpath.into_param().abi(), ::core::mem::transmute(pszurl), pcchurl, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlEscapeA<P0>(pszurl: P0, pszescaped: ::windows_core::PSTR, pcchescaped: *mut u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlEscapeA(pszurl : ::windows_core::PCSTR, pszescaped : ::windows_core::PSTR, pcchescaped : *mut u32, dwflags : u32) -> ::windows_core::HRESULT);
    UrlEscapeA(pszurl.into_param().abi(), ::core::mem::transmute(pszescaped), pcchescaped, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlEscapeW<P0>(pszurl: P0, pszescaped: ::windows_core::PWSTR, pcchescaped: *mut u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlEscapeW(pszurl : ::windows_core::PCWSTR, pszescaped : ::windows_core::PWSTR, pcchescaped : *mut u32, dwflags : u32) -> ::windows_core::HRESULT);
    UrlEscapeW(pszurl.into_param().abi(), ::core::mem::transmute(pszescaped), pcchescaped, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlFixupW<P0>(pcszurl: P0, psztranslatedurl: &mut [u16]) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlFixupW(pcszurl : ::windows_core::PCWSTR, psztranslatedurl : ::windows_core::PWSTR, cchmax : u32) -> ::windows_core::HRESULT);
    UrlFixupW(pcszurl.into_param().abi(), ::core::mem::transmute(psztranslatedurl.as_ptr()), psztranslatedurl.len() as _).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlGetLocationA<P0>(pszurl: P0) -> ::windows_core::PCSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlGetLocationA(pszurl : ::windows_core::PCSTR) -> ::windows_core::PCSTR);
    UrlGetLocationA(pszurl.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlGetLocationW<P0>(pszurl: P0) -> ::windows_core::PCWSTR
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlGetLocationW(pszurl : ::windows_core::PCWSTR) -> ::windows_core::PCWSTR);
    UrlGetLocationW(pszurl.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlGetPartA<P0>(pszin: P0, pszout: ::windows_core::PSTR, pcchout: *mut u32, dwpart: u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlGetPartA(pszin : ::windows_core::PCSTR, pszout : ::windows_core::PSTR, pcchout : *mut u32, dwpart : u32, dwflags : u32) -> ::windows_core::HRESULT);
    UrlGetPartA(pszin.into_param().abi(), ::core::mem::transmute(pszout), pcchout, dwpart, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlGetPartW<P0>(pszin: P0, pszout: ::windows_core::PWSTR, pcchout: *mut u32, dwpart: u32, dwflags: u32) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlGetPartW(pszin : ::windows_core::PCWSTR, pszout : ::windows_core::PWSTR, pcchout : *mut u32, dwpart : u32, dwflags : u32) -> ::windows_core::HRESULT);
    UrlGetPartW(pszin.into_param().abi(), ::core::mem::transmute(pszout), pcchout, dwpart, dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlHashA<P0>(pszurl: P0, pbhash: &mut [u8]) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlHashA(pszurl : ::windows_core::PCSTR, pbhash : *mut u8, cbhash : u32) -> ::windows_core::HRESULT);
    UrlHashA(pszurl.into_param().abi(), ::core::mem::transmute(pbhash.as_ptr()), pbhash.len() as _).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlHashW<P0>(pszurl: P0, pbhash: &mut [u8]) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlHashW(pszurl : ::windows_core::PCWSTR, pbhash : *mut u8, cbhash : u32) -> ::windows_core::HRESULT);
    UrlHashW(pszurl.into_param().abi(), ::core::mem::transmute(pbhash.as_ptr()), pbhash.len() as _).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn UrlIsA<P0>(pszurl: P0, urlis: URLIS) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlIsA(pszurl : ::windows_core::PCSTR, urlis : URLIS) -> super::super::Foundation:: BOOL);
    UrlIsA(pszurl.into_param().abi(), urlis)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn UrlIsNoHistoryA<P0>(pszurl: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlIsNoHistoryA(pszurl : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    UrlIsNoHistoryA(pszurl.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn UrlIsNoHistoryW<P0>(pszurl: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlIsNoHistoryW(pszurl : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    UrlIsNoHistoryW(pszurl.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn UrlIsOpaqueA<P0>(pszurl: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlIsOpaqueA(pszurl : ::windows_core::PCSTR) -> super::super::Foundation:: BOOL);
    UrlIsOpaqueA(pszurl.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn UrlIsOpaqueW<P0>(pszurl: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlIsOpaqueW(pszurl : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    UrlIsOpaqueW(pszurl.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn UrlIsW<P0>(pszurl: P0, urlis: URLIS) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlIsW(pszurl : ::windows_core::PCWSTR, urlis : URLIS) -> super::super::Foundation:: BOOL);
    UrlIsW(pszurl.into_param().abi(), urlis)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlUnescapeA(pszurl: ::windows_core::PSTR, pszunescaped: ::windows_core::PSTR, pcchunescaped: ::core::option::Option<*mut u32>, dwflags: u32) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlUnescapeA(pszurl : ::windows_core::PSTR, pszunescaped : ::windows_core::PSTR, pcchunescaped : *mut u32, dwflags : u32) -> ::windows_core::HRESULT);
    UrlUnescapeA(::core::mem::transmute(pszurl), ::core::mem::transmute(pszunescaped), ::core::mem::transmute(pcchunescaped.unwrap_or(::std::ptr::null_mut())), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn UrlUnescapeW(pszurl: ::windows_core::PWSTR, pszunescaped: ::windows_core::PWSTR, pcchunescaped: ::core::option::Option<*mut u32>, dwflags: u32) -> ::windows_core::Result<()> {
    ::windows_targets::link!("shlwapi.dll" "system" fn UrlUnescapeW(pszurl : ::windows_core::PWSTR, pszunescaped : ::windows_core::PWSTR, pcchunescaped : *mut u32, dwflags : u32) -> ::windows_core::HRESULT);
    UrlUnescapeW(::core::mem::transmute(pszurl), ::core::mem::transmute(pszunescaped), ::core::mem::transmute(pcchunescaped.unwrap_or(::std::ptr::null_mut())), dwflags).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_Common\"`*"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common"))]
#[inline]
pub unsafe fn VariantToStrRet(varin: *const super::super::System::Variant::VARIANT, pstrret: *mut Common::STRRET) -> ::windows_core::Result<()> {
    ::windows_targets::link!("propsys.dll" "system" fn VariantToStrRet(varin : *const super::super::System::Variant:: VARIANT, pstrret : *mut Common:: STRRET) -> ::windows_core::HRESULT);
    VariantToStrRet(varin, pstrret).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn WhichPlatform() -> u32 {
    ::windows_targets::link!("shlwapi.dll" "system" fn WhichPlatform() -> u32);
    WhichPlatform()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn Win32DeleteFile<P0>(pszpath: P0) -> super::super::Foundation::BOOL
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shell32.dll" "system" fn Win32DeleteFile(pszpath : ::windows_core::PCWSTR) -> super::super::Foundation:: BOOL);
    Win32DeleteFile(pszpath.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn WinHelpA<P0, P1>(hwndmain: P0, lpszhelp: P1, ucommand: u32, dwdata: usize) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("user32.dll" "system" fn WinHelpA(hwndmain : super::super::Foundation:: HWND, lpszhelp : ::windows_core::PCSTR, ucommand : u32, dwdata : usize) -> super::super::Foundation:: BOOL);
    WinHelpA(hwndmain.into_param().abi(), lpszhelp.into_param().abi(), ucommand, dwdata).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn WinHelpW<P0, P1>(hwndmain: P0, lpszhelp: P1, ucommand: u32, dwdata: usize) -> ::windows_core::Result<()>
where
    P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("user32.dll" "system" fn WinHelpW(hwndmain : super::super::Foundation:: HWND, lpszhelp : ::windows_core::PCWSTR, ucommand : u32, dwdata : usize) -> super::super::Foundation:: BOOL);
    WinHelpW(hwndmain.into_param().abi(), lpszhelp.into_param().abi(), ucommand, dwdata).ok()
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_Foundation\"`*"]
#[cfg(feature = "Win32_Foundation")]
#[inline]
pub unsafe fn WriteCabinetState(pcs: *const CABINETSTATE) -> super::super::Foundation::BOOL {
    ::windows_targets::link!("shell32.dll" "system" fn WriteCabinetState(pcs : *const CABINETSTATE) -> super::super::Foundation:: BOOL);
    WriteCabinetState(pcs)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn wnsprintfA<P0>(pszdest: &mut [u8], pszfmt: P0) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "cdecl" fn wnsprintfA(pszdest : ::windows_core::PSTR, cchdest : i32, pszfmt : ::windows_core::PCSTR) -> i32);
    wnsprintfA(::core::mem::transmute(pszdest.as_ptr()), pszdest.len() as _, pszfmt.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn wnsprintfW<P0>(pszdest: &mut [u16], pszfmt: P0) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "cdecl" fn wnsprintfW(pszdest : ::windows_core::PWSTR, cchdest : i32, pszfmt : ::windows_core::PCWSTR) -> i32);
    wnsprintfW(::core::mem::transmute(pszdest.as_ptr()), pszdest.len() as _, pszfmt.into_param().abi())
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn wvnsprintfA<P0>(pszdest: &mut [u8], pszfmt: P0, arglist: *const i8) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn wvnsprintfA(pszdest : ::windows_core::PSTR, cchdest : i32, pszfmt : ::windows_core::PCSTR, arglist : *const i8) -> i32);
    wvnsprintfA(::core::mem::transmute(pszdest.as_ptr()), pszdest.len() as _, pszfmt.into_param().abi(), arglist)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[inline]
pub unsafe fn wvnsprintfW<P0>(pszdest: &mut [u16], pszfmt: P0, arglist: *const i8) -> i32
where
    P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
{
    ::windows_targets::link!("shlwapi.dll" "system" fn wvnsprintfW(pszdest : ::windows_core::PWSTR, cchdest : i32, pszfmt : ::windows_core::PCWSTR, arglist : *const i8) -> i32);
    wvnsprintfW(::core::mem::transmute(pszdest.as_ptr()), pszdest.len() as _, pszfmt.into_param().abi(), arglist)
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct CIE4ConnectionPoint(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl CIE4ConnectionPoint {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetConnectionInterface(&self) -> ::windows_core::Result<::windows_core::GUID> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetConnectionInterface)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetConnectionPointContainer(&self) -> ::windows_core::Result<super::super::System::Com::IConnectionPointContainer> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetConnectionPointContainer)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Advise<P0>(&self, punksink: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Advise)(::windows_core::Interface::as_raw(self), punksink.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Unadvise(&self, dwcookie: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Unadvise)(::windows_core::Interface::as_raw(self), dwcookie).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumConnections(&self) -> ::windows_core::Result<super::super::System::Com::IEnumConnections> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.EnumConnections)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn DoInvokeIE4(&self, pf: *mut super::super::Foundation::BOOL, ppv: *mut *mut ::core::ffi::c_void, dispid: i32, pdispparams: *mut super::super::System::Com::DISPPARAMS) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).DoInvokeIE4)(::windows_core::Interface::as_raw(self), pf, ppv, dispid, pdispparams).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn DoInvokePIDLIE4<P0>(&self, dispid: i32, pidl: *mut Common::ITEMIDLIST, fcancancel: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).DoInvokePIDLIE4)(::windows_core::Interface::as_raw(self), dispid, pidl, fcancancel.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(CIE4ConnectionPoint, ::windows_core::IUnknown, super::super::System::Com::IConnectionPoint);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for CIE4ConnectionPoint {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for CIE4ConnectionPoint {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for CIE4ConnectionPoint {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CIE4ConnectionPoint").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for CIE4ConnectionPoint {
    type Vtable = CIE4ConnectionPoint_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for CIE4ConnectionPoint {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for CIE4ConnectionPoint {
    const IID: ::windows_core::GUID = ::windows_core::GUID::zeroed();
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct CIE4ConnectionPoint_Vtbl {
    pub base__: super::super::System::Com::IConnectionPoint_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub DoInvokeIE4: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pf: *mut super::super::Foundation::BOOL, ppv: *mut *mut ::core::ffi::c_void, dispid: i32, pdispparams: *mut super::super::System::Com::DISPPARAMS) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    DoInvokeIE4: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub DoInvokePIDLIE4: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dispid: i32, pidl: *mut Common::ITEMIDLIST, fcancancel: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common")))]
    DoInvokePIDLIE4: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct DFConstraint(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl DFConstraint {
    pub unsafe fn Name(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Name)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Value(&self) -> ::windows_core::Result<super::super::System::Variant::VARIANT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Value)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(DFConstraint, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for DFConstraint {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for DFConstraint {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for DFConstraint {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DFConstraint").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for DFConstraint {
    type Vtable = DFConstraint_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for DFConstraint {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for DFConstraint {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x4a3df050_23bd_11d2_939f_00a0c91eedba);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct DFConstraint_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
    pub Name: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub Value: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pv: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    Value: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct DShellFolderViewEvents(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl DShellFolderViewEvents {}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(DShellFolderViewEvents, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for DShellFolderViewEvents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for DShellFolderViewEvents {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for DShellFolderViewEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DShellFolderViewEvents").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for DShellFolderViewEvents {
    type Vtable = DShellFolderViewEvents_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for DShellFolderViewEvents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for DShellFolderViewEvents {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x62112aa2_ebe4_11cf_a5fb_0020afe7292d);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct DShellFolderViewEvents_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct DShellNameSpaceEvents(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl DShellNameSpaceEvents {}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(DShellNameSpaceEvents, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for DShellNameSpaceEvents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for DShellNameSpaceEvents {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for DShellNameSpaceEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DShellNameSpaceEvents").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for DShellNameSpaceEvents {
    type Vtable = DShellNameSpaceEvents_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for DShellNameSpaceEvents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for DShellNameSpaceEvents {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x55136806_b2de_11d1_b9f2_00a0c98bc547);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct DShellNameSpaceEvents_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct DShellWindowsEvents(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl DShellWindowsEvents {}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(DShellWindowsEvents, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for DShellWindowsEvents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for DShellWindowsEvents {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for DShellWindowsEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DShellWindowsEvents").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for DShellWindowsEvents {
    type Vtable = DShellWindowsEvents_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for DShellWindowsEvents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for DShellWindowsEvents {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xfe4106e0_399a_11d0_a48c_00a0c90a8f39);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct DShellWindowsEvents_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct DWebBrowserEvents(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl DWebBrowserEvents {}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(DWebBrowserEvents, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for DWebBrowserEvents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for DWebBrowserEvents {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for DWebBrowserEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DWebBrowserEvents").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for DWebBrowserEvents {
    type Vtable = DWebBrowserEvents_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for DWebBrowserEvents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for DWebBrowserEvents {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xeab22ac2_30c1_11cf_a7eb_0000c05bae0b);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct DWebBrowserEvents_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct DWebBrowserEvents2(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl DWebBrowserEvents2 {}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(DWebBrowserEvents2, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for DWebBrowserEvents2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for DWebBrowserEvents2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for DWebBrowserEvents2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DWebBrowserEvents2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for DWebBrowserEvents2 {
    type Vtable = DWebBrowserEvents2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for DWebBrowserEvents2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for DWebBrowserEvents2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x34a715a0_6587_11d0_924a_0020afc7ac4d);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct DWebBrowserEvents2_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct Folder(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl Folder {
    pub unsafe fn Title(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Title)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn ParentFolder(&self) -> ::windows_core::Result<Folder> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ParentFolder)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Items(&self) -> ::windows_core::Result<FolderItems> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Items)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn ParseName<P0>(&self, bname: P0) -> ::windows_core::Result<FolderItem>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ParseName)(::windows_core::Interface::as_raw(self), bname.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NewFolder<P0>(&self, bname: P0, voptions: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).NewFolder)(::windows_core::Interface::as_raw(self), bname.into_param().abi(), ::core::mem::transmute(voptions)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn MoveHere(&self, vitem: super::super::System::Variant::VARIANT, voptions: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).MoveHere)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vitem), ::core::mem::transmute(voptions)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn CopyHere(&self, vitem: super::super::System::Variant::VARIANT, voptions: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).CopyHere)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vitem), ::core::mem::transmute(voptions)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn GetDetailsOf(&self, vitem: super::super::System::Variant::VARIANT, icolumn: i32) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetDetailsOf)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vitem), icolumn, &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(Folder, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for Folder {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for Folder {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for Folder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Folder").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for Folder {
    type Vtable = Folder_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for Folder {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for Folder {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xbbcbde60_c3ff_11ce_8350_444553540000);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct Folder_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
    pub Title: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub Application: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Application: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Parent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Parent: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub ParentFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppsf: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    ParentFolder: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Items: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Items: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub ParseName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bname: ::std::mem::MaybeUninit<::windows_core::BSTR>, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    ParseName: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub NewFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bname: ::std::mem::MaybeUninit<::windows_core::BSTR>, voptions: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    NewFolder: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub MoveHere: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, vitem: super::super::System::Variant::VARIANT, voptions: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    MoveHere: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub CopyHere: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, vitem: super::super::System::Variant::VARIANT, voptions: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    CopyHere: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub GetDetailsOf: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, vitem: super::super::System::Variant::VARIANT, icolumn: i32, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    GetDetailsOf: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct Folder2(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl Folder2 {
    pub unsafe fn Title(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Title)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn ParentFolder(&self) -> ::windows_core::Result<Folder> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.ParentFolder)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Items(&self) -> ::windows_core::Result<FolderItems> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Items)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn ParseName<P0>(&self, bname: P0) -> ::windows_core::Result<FolderItem>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.ParseName)(::windows_core::Interface::as_raw(self), bname.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NewFolder<P0>(&self, bname: P0, voptions: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.NewFolder)(::windows_core::Interface::as_raw(self), bname.into_param().abi(), ::core::mem::transmute(voptions)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn MoveHere(&self, vitem: super::super::System::Variant::VARIANT, voptions: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.MoveHere)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vitem), ::core::mem::transmute(voptions)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn CopyHere(&self, vitem: super::super::System::Variant::VARIANT, voptions: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.CopyHere)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vitem), ::core::mem::transmute(voptions)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn GetDetailsOf(&self, vitem: super::super::System::Variant::VARIANT, icolumn: i32) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetDetailsOf)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vitem), icolumn, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Self_(&self) -> ::windows_core::Result<FolderItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Self_)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn OfflineStatus(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).OfflineStatus)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Synchronize(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Synchronize)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn HaveToShowWebViewBarricade(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).HaveToShowWebViewBarricade)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DismissedWebViewBarricade(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).DismissedWebViewBarricade)(::windows_core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(Folder2, ::windows_core::IUnknown, super::super::System::Com::IDispatch, Folder);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for Folder2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for Folder2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for Folder2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Folder2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for Folder2 {
    type Vtable = Folder2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for Folder2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for Folder2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xf0d2d8ef_3890_11d2_bf8b_00c04fb93661);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct Folder2_Vtbl {
    pub base__: Folder_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Self_: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppfi: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Self_: usize,
    pub OfflineStatus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pul: *mut i32) -> ::windows_core::HRESULT,
    pub Synchronize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub HaveToShowWebViewBarricade: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbhavetoshowwebviewbarricade: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    HaveToShowWebViewBarricade: usize,
    pub DismissedWebViewBarricade: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct Folder3(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl Folder3 {
    pub unsafe fn Title(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.Title)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn ParentFolder(&self) -> ::windows_core::Result<Folder> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.ParentFolder)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Items(&self) -> ::windows_core::Result<FolderItems> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.Items)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn ParseName<P0>(&self, bname: P0) -> ::windows_core::Result<FolderItem>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.ParseName)(::windows_core::Interface::as_raw(self), bname.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NewFolder<P0>(&self, bname: P0, voptions: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.NewFolder)(::windows_core::Interface::as_raw(self), bname.into_param().abi(), ::core::mem::transmute(voptions)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn MoveHere(&self, vitem: super::super::System::Variant::VARIANT, voptions: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.MoveHere)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vitem), ::core::mem::transmute(voptions)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn CopyHere(&self, vitem: super::super::System::Variant::VARIANT, voptions: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.CopyHere)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vitem), ::core::mem::transmute(voptions)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn GetDetailsOf(&self, vitem: super::super::System::Variant::VARIANT, icolumn: i32) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetDetailsOf)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vitem), icolumn, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Self_(&self) -> ::windows_core::Result<FolderItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Self_)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn OfflineStatus(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.OfflineStatus)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Synchronize(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Synchronize)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn HaveToShowWebViewBarricade(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.HaveToShowWebViewBarricade)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DismissedWebViewBarricade(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.DismissedWebViewBarricade)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ShowWebViewBarricade(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ShowWebViewBarricade)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetShowWebViewBarricade<P0>(&self, bshowwebviewbarricade: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetShowWebViewBarricade)(::windows_core::Interface::as_raw(self), bshowwebviewbarricade.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(Folder3, ::windows_core::IUnknown, super::super::System::Com::IDispatch, Folder, Folder2);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for Folder3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for Folder3 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for Folder3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Folder3").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for Folder3 {
    type Vtable = Folder3_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for Folder3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for Folder3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xa7ae5f64_c4d7_4d7f_9307_4d24ee54b841);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct Folder3_Vtbl {
    pub base__: Folder2_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub ShowWebViewBarricade: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbshowwebviewbarricade: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ShowWebViewBarricade: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetShowWebViewBarricade: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bshowwebviewbarricade: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetShowWebViewBarricade: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct FolderItem(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl FolderItem {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Name(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Name)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetName<P0>(&self, bs: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).SetName)(::windows_core::Interface::as_raw(self), bs.into_param().abi()).ok()
    }
    pub unsafe fn Path(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Path)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetLink(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetLink)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetFolder(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFolder)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsLink(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IsLink)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsFolder(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IsFolder)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsFileSystem(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IsFileSystem)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsBrowsable(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IsBrowsable)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ModifyDate(&self) -> ::windows_core::Result<f64> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ModifyDate)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetModifyDate(&self, dt: f64) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetModifyDate)(::windows_core::Interface::as_raw(self), dt).ok()
    }
    pub unsafe fn Size(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Size)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Type(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Type)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Verbs(&self) -> ::windows_core::Result<FolderItemVerbs> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Verbs)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn InvokeVerb(&self, vverb: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).InvokeVerb)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vverb)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(FolderItem, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for FolderItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for FolderItem {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for FolderItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FolderItem").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for FolderItem {
    type Vtable = FolderItem_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for FolderItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for FolderItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xfac32c80_cbe4_11ce_8350_444553540000);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct FolderItem_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Application: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Application: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Parent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Parent: usize,
    pub Name: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub SetName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bs: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub Path: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub GetLink: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetLink: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub GetFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetFolder: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub IsLink: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pb: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    IsLink: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub IsFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pb: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    IsFolder: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub IsFileSystem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pb: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    IsFileSystem: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub IsBrowsable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pb: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    IsBrowsable: usize,
    pub ModifyDate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdt: *mut f64) -> ::windows_core::HRESULT,
    pub SetModifyDate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dt: f64) -> ::windows_core::HRESULT,
    pub Size: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pul: *mut i32) -> ::windows_core::HRESULT,
    pub Type: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub Verbs: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppfic: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Verbs: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub InvokeVerb: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, vverb: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    InvokeVerb: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct FolderItem2(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl FolderItem2 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Name(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Name)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetName<P0>(&self, bs: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetName)(::windows_core::Interface::as_raw(self), bs.into_param().abi()).ok()
    }
    pub unsafe fn Path(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Path)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetLink(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetLink)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetFolder(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetFolder)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsLink(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.IsLink)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsFolder(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.IsFolder)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsFileSystem(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.IsFileSystem)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsBrowsable(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.IsBrowsable)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ModifyDate(&self) -> ::windows_core::Result<f64> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.ModifyDate)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetModifyDate(&self, dt: f64) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetModifyDate)(::windows_core::Interface::as_raw(self), dt).ok()
    }
    pub unsafe fn Size(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Size)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Type(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Type)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Verbs(&self) -> ::windows_core::Result<FolderItemVerbs> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Verbs)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn InvokeVerb(&self, vverb: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.InvokeVerb)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vverb)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn InvokeVerbEx(&self, vverb: super::super::System::Variant::VARIANT, vargs: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).InvokeVerbEx)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vverb), ::core::mem::transmute(vargs)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ExtendedProperty<P0>(&self, bstrpropname: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ExtendedProperty)(::windows_core::Interface::as_raw(self), bstrpropname.into_param().abi(), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(FolderItem2, ::windows_core::IUnknown, super::super::System::Com::IDispatch, FolderItem);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for FolderItem2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for FolderItem2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for FolderItem2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FolderItem2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for FolderItem2 {
    type Vtable = FolderItem2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for FolderItem2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for FolderItem2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xedc817aa_92b8_11d1_b075_00c04fc33aa5);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct FolderItem2_Vtbl {
    pub base__: FolderItem_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub InvokeVerbEx: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, vverb: super::super::System::Variant::VARIANT, vargs: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    InvokeVerbEx: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub ExtendedProperty: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrpropname: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvret: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    ExtendedProperty: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct FolderItemVerb(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl FolderItemVerb {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Name(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Name)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DoIt(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).DoIt)(::windows_core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(FolderItemVerb, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for FolderItemVerb {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for FolderItemVerb {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for FolderItemVerb {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FolderItemVerb").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for FolderItemVerb {
    type Vtable = FolderItemVerb_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for FolderItemVerb {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for FolderItemVerb {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x08ec3e00_50b0_11cf_960c_0080c7f4ee85);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct FolderItemVerb_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Application: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Application: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Parent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Parent: usize,
    pub Name: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub DoIt: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct FolderItemVerbs(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl FolderItemVerbs {
    pub unsafe fn Count(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Count)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Item(&self, index: super::super::System::Variant::VARIANT) -> ::windows_core::Result<FolderItemVerb> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Item)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(index), &mut result__).from_abi(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows_core::Result<::windows_core::IUnknown> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self)._NewEnum)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(FolderItemVerbs, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for FolderItemVerbs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for FolderItemVerbs {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for FolderItemVerbs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FolderItemVerbs").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for FolderItemVerbs {
    type Vtable = FolderItemVerbs_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for FolderItemVerbs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for FolderItemVerbs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x1f8352c0_50b0_11cf_960c_0080c7f4ee85);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct FolderItemVerbs_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
    pub Count: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plcount: *mut i32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub Application: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Application: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Parent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Parent: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub Item: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, index: super::super::System::Variant::VARIANT, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    Item: usize,
    pub _NewEnum: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct FolderItems(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl FolderItems {
    pub unsafe fn Count(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Count)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Item(&self, index: super::super::System::Variant::VARIANT) -> ::windows_core::Result<FolderItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Item)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(index), &mut result__).from_abi(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows_core::Result<::windows_core::IUnknown> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self)._NewEnum)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(FolderItems, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for FolderItems {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for FolderItems {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for FolderItems {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FolderItems").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for FolderItems {
    type Vtable = FolderItems_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for FolderItems {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for FolderItems {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x744129e0_cbe5_11ce_8350_444553540000);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct FolderItems_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
    pub Count: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plcount: *mut i32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub Application: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Application: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Parent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Parent: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub Item: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, index: super::super::System::Variant::VARIANT, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    Item: usize,
    pub _NewEnum: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct FolderItems2(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl FolderItems2 {
    pub unsafe fn Count(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Count)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Item(&self, index: super::super::System::Variant::VARIANT) -> ::windows_core::Result<FolderItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Item)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(index), &mut result__).from_abi(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows_core::Result<::windows_core::IUnknown> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__._NewEnum)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn InvokeVerbEx(&self, vverb: super::super::System::Variant::VARIANT, vargs: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).InvokeVerbEx)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vverb), ::core::mem::transmute(vargs)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(FolderItems2, ::windows_core::IUnknown, super::super::System::Com::IDispatch, FolderItems);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for FolderItems2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for FolderItems2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for FolderItems2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FolderItems2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for FolderItems2 {
    type Vtable = FolderItems2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for FolderItems2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for FolderItems2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xc94f0ad0_f363_11d2_a327_00c04f8eec7f);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct FolderItems2_Vtbl {
    pub base__: FolderItems_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub InvokeVerbEx: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, vverb: super::super::System::Variant::VARIANT, vargs: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    InvokeVerbEx: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct FolderItems3(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl FolderItems3 {
    pub unsafe fn Count(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.Count)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Item(&self, index: super::super::System::Variant::VARIANT) -> ::windows_core::Result<FolderItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.Item)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(index), &mut result__).from_abi(result__)
    }
    pub unsafe fn _NewEnum(&self) -> ::windows_core::Result<::windows_core::IUnknown> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__._NewEnum)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn InvokeVerbEx(&self, vverb: super::super::System::Variant::VARIANT, vargs: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.InvokeVerbEx)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vverb), ::core::mem::transmute(vargs)).ok()
    }
    pub unsafe fn Filter<P0>(&self, grfflags: i32, bstrfilespec: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).Filter)(::windows_core::Interface::as_raw(self), grfflags, bstrfilespec.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Verbs(&self) -> ::windows_core::Result<FolderItemVerbs> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Verbs)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(FolderItems3, ::windows_core::IUnknown, super::super::System::Com::IDispatch, FolderItems, FolderItems2);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for FolderItems3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for FolderItems3 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for FolderItems3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("FolderItems3").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for FolderItems3 {
    type Vtable = FolderItems3_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for FolderItems3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for FolderItems3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xeaa7c309_bbec_49d5_821d_64d966cb667f);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct FolderItems3_Vtbl {
    pub base__: FolderItems2_Vtbl,
    pub Filter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, grfflags: i32, bstrfilespec: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub Verbs: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppfic: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Verbs: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IACList(::windows_core::IUnknown);
impl IACList {
    pub unsafe fn Expand<P0>(&self, pszexpand: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).Expand)(::windows_core::Interface::as_raw(self), pszexpand.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IACList, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IACList {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IACList {}
impl ::core::fmt::Debug for IACList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IACList").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IACList {
    type Vtable = IACList_Vtbl;
}
impl ::core::clone::Clone for IACList {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IACList {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x77a130b0_94fd_11d0_a544_00c04fd7d062);
}
#[repr(C)]
#[doc(hidden)]
pub struct IACList_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Expand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszexpand: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IACList2(::windows_core::IUnknown);
impl IACList2 {
    pub unsafe fn Expand<P0>(&self, pszexpand: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.Expand)(::windows_core::Interface::as_raw(self), pszexpand.into_param().abi()).ok()
    }
    pub unsafe fn SetOptions(&self, dwflag: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetOptions)(::windows_core::Interface::as_raw(self), dwflag).ok()
    }
    pub unsafe fn GetOptions(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetOptions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IACList2, ::windows_core::IUnknown, IACList);
impl ::core::cmp::PartialEq for IACList2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IACList2 {}
impl ::core::fmt::Debug for IACList2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IACList2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IACList2 {
    type Vtable = IACList2_Vtbl;
}
impl ::core::clone::Clone for IACList2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IACList2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x470141a0_5186_11d2_bbb6_0060977b464c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IACList2_Vtbl {
    pub base__: IACList_Vtbl,
    pub SetOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflag: u32) -> ::windows_core::HRESULT,
    pub GetOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwflag: *mut u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IAccessibilityDockingService(::windows_core::IUnknown);
impl IAccessibilityDockingService {
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetAvailableSize<P0>(&self, hmonitor: P0, pcxfixed: *mut u32, pcymax: *mut u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Graphics::Gdi::HMONITOR>,
    {
        (::windows_core::Interface::vtable(self).GetAvailableSize)(::windows_core::Interface::as_raw(self), hmonitor.into_param().abi(), pcxfixed, pcymax).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn DockWindow<P0, P1, P2>(&self, hwnd: P0, hmonitor: P1, cyrequested: u32, pcallback: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<super::super::Graphics::Gdi::HMONITOR>,
        P2: ::windows_core::IntoParam<IAccessibilityDockingServiceCallback>,
    {
        (::windows_core::Interface::vtable(self).DockWindow)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), hmonitor.into_param().abi(), cyrequested, pcallback.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn UndockWindow<P0>(&self, hwnd: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).UndockWindow)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IAccessibilityDockingService, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IAccessibilityDockingService {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAccessibilityDockingService {}
impl ::core::fmt::Debug for IAccessibilityDockingService {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAccessibilityDockingService").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IAccessibilityDockingService {
    type Vtable = IAccessibilityDockingService_Vtbl;
}
impl ::core::clone::Clone for IAccessibilityDockingService {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAccessibilityDockingService {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x8849dc22_cedf_4c95_998d_051419dd3f76);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAccessibilityDockingService_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub GetAvailableSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hmonitor: super::super::Graphics::Gdi::HMONITOR, pcxfixed: *mut u32, pcymax: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))]
    GetAvailableSize: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub DockWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, hmonitor: super::super::Graphics::Gdi::HMONITOR, cyrequested: u32, pcallback: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi")))]
    DockWindow: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub UndockWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    UndockWindow: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IAccessibilityDockingServiceCallback(::windows_core::IUnknown);
impl IAccessibilityDockingServiceCallback {
    pub unsafe fn Undocked(&self, undockreason: UNDOCK_REASON) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Undocked)(::windows_core::Interface::as_raw(self), undockreason).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IAccessibilityDockingServiceCallback, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IAccessibilityDockingServiceCallback {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAccessibilityDockingServiceCallback {}
impl ::core::fmt::Debug for IAccessibilityDockingServiceCallback {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAccessibilityDockingServiceCallback").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IAccessibilityDockingServiceCallback {
    type Vtable = IAccessibilityDockingServiceCallback_Vtbl;
}
impl ::core::clone::Clone for IAccessibilityDockingServiceCallback {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAccessibilityDockingServiceCallback {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x157733fd_a592_42e5_b594_248468c5a81b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAccessibilityDockingServiceCallback_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Undocked: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, undockreason: UNDOCK_REASON) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IAccessibleObject(::windows_core::IUnknown);
impl IAccessibleObject {
    pub unsafe fn SetAccessibleName<P0>(&self, pszname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetAccessibleName)(::windows_core::Interface::as_raw(self), pszname.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IAccessibleObject, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IAccessibleObject {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAccessibleObject {}
impl ::core::fmt::Debug for IAccessibleObject {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAccessibleObject").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IAccessibleObject {
    type Vtable = IAccessibleObject_Vtbl;
}
impl ::core::clone::Clone for IAccessibleObject {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAccessibleObject {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x95a391c5_9ed4_4c28_8401_ab9e06719e11);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAccessibleObject_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetAccessibleName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IActionProgress(::windows_core::IUnknown);
impl IActionProgress {
    pub unsafe fn Begin(&self, action: SPACTION, flags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Begin)(::windows_core::Interface::as_raw(self), action, flags).ok()
    }
    pub unsafe fn UpdateProgress(&self, ulcompleted: u64, ultotal: u64) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).UpdateProgress)(::windows_core::Interface::as_raw(self), ulcompleted, ultotal).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn UpdateText<P0, P1>(&self, sptext: SPTEXT, psztext: P0, fmaycompact: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).UpdateText)(::windows_core::Interface::as_raw(self), sptext, psztext.into_param().abi(), fmaycompact.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn QueryCancel(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).QueryCancel)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ResetCancel(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ResetCancel)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn End(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).End)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IActionProgress, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IActionProgress {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IActionProgress {}
impl ::core::fmt::Debug for IActionProgress {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IActionProgress").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IActionProgress {
    type Vtable = IActionProgress_Vtbl;
}
impl ::core::clone::Clone for IActionProgress {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IActionProgress {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x49ff1173_eadc_446d_9285_156453a6431c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActionProgress_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Begin: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, action: SPACTION, flags: u32) -> ::windows_core::HRESULT,
    pub UpdateProgress: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ulcompleted: u64, ultotal: u64) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub UpdateText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, sptext: SPTEXT, psztext: ::windows_core::PCWSTR, fmaycompact: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    UpdateText: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub QueryCancel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfcancelled: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    QueryCancel: usize,
    pub ResetCancel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub End: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IActionProgressDialog(::windows_core::IUnknown);
impl IActionProgressDialog {
    pub unsafe fn Initialize<P0, P1>(&self, flags: u32, psztitle: P0, pszcancel: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), flags, psztitle.into_param().abi(), pszcancel.into_param().abi()).ok()
    }
    pub unsafe fn Stop(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Stop)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IActionProgressDialog, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IActionProgressDialog {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IActionProgressDialog {}
impl ::core::fmt::Debug for IActionProgressDialog {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IActionProgressDialog").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IActionProgressDialog {
    type Vtable = IActionProgressDialog_Vtbl;
}
impl ::core::clone::Clone for IActionProgressDialog {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IActionProgressDialog {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x49ff1172_eadc_446d_9285_156453a6431c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IActionProgressDialog_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, flags: u32, psztitle: ::windows_core::PCWSTR, pszcancel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub Stop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IAppActivationUIInfo(::windows_core::IUnknown);
impl IAppActivationUIInfo {
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetMonitor(&self) -> ::windows_core::Result<super::super::Graphics::Gdi::HMONITOR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetMonitor)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetInvokePoint(&self) -> ::windows_core::Result<super::super::Foundation::POINT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetInvokePoint)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetShowCommand(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetShowCommand)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetShowUI(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetShowUI)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetKeyState(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetKeyState)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IAppActivationUIInfo, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IAppActivationUIInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAppActivationUIInfo {}
impl ::core::fmt::Debug for IAppActivationUIInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAppActivationUIInfo").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IAppActivationUIInfo {
    type Vtable = IAppActivationUIInfo_Vtbl;
}
impl ::core::clone::Clone for IAppActivationUIInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppActivationUIInfo {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xabad189d_9fa3_4278_b3ca_8ca448a88dcb);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppActivationUIInfo_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub GetMonitor: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, value: *mut super::super::Graphics::Gdi::HMONITOR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))]
    GetMonitor: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetInvokePoint: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, value: *mut super::super::Foundation::POINT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetInvokePoint: usize,
    pub GetShowCommand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, value: *mut i32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetShowUI: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, value: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetShowUI: usize,
    pub GetKeyState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, value: *mut u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IAppPublisher(::windows_core::IUnknown);
impl IAppPublisher {
    pub unsafe fn GetNumberOfCategories(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetNumberOfCategories)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCategories(&self) -> ::windows_core::Result<APPCATEGORYINFOLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCategories)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetNumberOfApps(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetNumberOfApps)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn EnumApps(&self, pappcategoryid: *const ::windows_core::GUID) -> ::windows_core::Result<IEnumPublishedApps> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).EnumApps)(::windows_core::Interface::as_raw(self), pappcategoryid, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IAppPublisher, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IAppPublisher {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAppPublisher {}
impl ::core::fmt::Debug for IAppPublisher {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAppPublisher").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IAppPublisher {
    type Vtable = IAppPublisher_Vtbl;
}
impl ::core::clone::Clone for IAppPublisher {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppPublisher {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x07250a10_9cf9_11d1_9076_006008059382);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppPublisher_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetNumberOfCategories: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwcat: *mut u32) -> ::windows_core::HRESULT,
    pub GetCategories: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pappcategorylist: *mut APPCATEGORYINFOLIST) -> ::windows_core::HRESULT,
    pub GetNumberOfApps: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwapps: *mut u32) -> ::windows_core::HRESULT,
    pub EnumApps: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pappcategoryid: *const ::windows_core::GUID, ppepa: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IAppVisibility(::windows_core::IUnknown);
impl IAppVisibility {
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetAppVisibilityOnMonitor<P0>(&self, hmonitor: P0) -> ::windows_core::Result<MONITOR_APP_VISIBILITY>
    where
        P0: ::windows_core::IntoParam<super::super::Graphics::Gdi::HMONITOR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetAppVisibilityOnMonitor)(::windows_core::Interface::as_raw(self), hmonitor.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsLauncherVisible(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IsLauncherVisible)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Advise<P0>(&self, pcallback: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<IAppVisibilityEvents>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Advise)(::windows_core::Interface::as_raw(self), pcallback.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Unadvise(&self, dwcookie: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Unadvise)(::windows_core::Interface::as_raw(self), dwcookie).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IAppVisibility, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IAppVisibility {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAppVisibility {}
impl ::core::fmt::Debug for IAppVisibility {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAppVisibility").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IAppVisibility {
    type Vtable = IAppVisibility_Vtbl;
}
impl ::core::clone::Clone for IAppVisibility {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppVisibility {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x2246ea2d_caea_4444_a3c4_6de827e44313);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppVisibility_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub GetAppVisibilityOnMonitor: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hmonitor: super::super::Graphics::Gdi::HMONITOR, pmode: *mut MONITOR_APP_VISIBILITY) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))]
    GetAppVisibilityOnMonitor: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub IsLauncherVisible: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfvisible: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    IsLauncherVisible: usize,
    pub Advise: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT,
    pub Unadvise: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IAppVisibilityEvents(::windows_core::IUnknown);
impl IAppVisibilityEvents {
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn AppVisibilityOnMonitorChanged<P0>(&self, hmonitor: P0, previousmode: MONITOR_APP_VISIBILITY, currentmode: MONITOR_APP_VISIBILITY) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Graphics::Gdi::HMONITOR>,
    {
        (::windows_core::Interface::vtable(self).AppVisibilityOnMonitorChanged)(::windows_core::Interface::as_raw(self), hmonitor.into_param().abi(), previousmode, currentmode).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn LauncherVisibilityChange<P0>(&self, currentvisiblestate: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).LauncherVisibilityChange)(::windows_core::Interface::as_raw(self), currentvisiblestate.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IAppVisibilityEvents, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IAppVisibilityEvents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAppVisibilityEvents {}
impl ::core::fmt::Debug for IAppVisibilityEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAppVisibilityEvents").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IAppVisibilityEvents {
    type Vtable = IAppVisibilityEvents_Vtbl;
}
impl ::core::clone::Clone for IAppVisibilityEvents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAppVisibilityEvents {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x6584ce6b_7d82_49c2_89c9_c6bc02ba8c38);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAppVisibilityEvents_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub AppVisibilityOnMonitorChanged: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hmonitor: super::super::Graphics::Gdi::HMONITOR, previousmode: MONITOR_APP_VISIBILITY, currentmode: MONITOR_APP_VISIBILITY) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))]
    AppVisibilityOnMonitorChanged: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub LauncherVisibilityChange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, currentvisiblestate: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    LauncherVisibilityChange: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IApplicationActivationManager(::windows_core::IUnknown);
impl IApplicationActivationManager {
    pub unsafe fn ActivateApplication<P0, P1>(&self, appusermodelid: P0, arguments: P1, options: ACTIVATEOPTIONS) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ActivateApplication)(::windows_core::Interface::as_raw(self), appusermodelid.into_param().abi(), arguments.into_param().abi(), options, &mut result__).from_abi(result__)
    }
    pub unsafe fn ActivateForFile<P0, P1, P2>(&self, appusermodelid: P0, itemarray: P1, verb: P2) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<IShellItemArray>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ActivateForFile)(::windows_core::Interface::as_raw(self), appusermodelid.into_param().abi(), itemarray.into_param().abi(), verb.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn ActivateForProtocol<P0, P1>(&self, appusermodelid: P0, itemarray: P1) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<IShellItemArray>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ActivateForProtocol)(::windows_core::Interface::as_raw(self), appusermodelid.into_param().abi(), itemarray.into_param().abi(), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IApplicationActivationManager, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IApplicationActivationManager {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IApplicationActivationManager {}
impl ::core::fmt::Debug for IApplicationActivationManager {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IApplicationActivationManager").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IApplicationActivationManager {
    type Vtable = IApplicationActivationManager_Vtbl;
}
impl ::core::clone::Clone for IApplicationActivationManager {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IApplicationActivationManager {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x2e941141_7f97_4756_ba1d_9decde894a3d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IApplicationActivationManager_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub ActivateApplication: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, appusermodelid: ::windows_core::PCWSTR, arguments: ::windows_core::PCWSTR, options: ACTIVATEOPTIONS, processid: *mut u32) -> ::windows_core::HRESULT,
    pub ActivateForFile: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, appusermodelid: ::windows_core::PCWSTR, itemarray: *mut ::core::ffi::c_void, verb: ::windows_core::PCWSTR, processid: *mut u32) -> ::windows_core::HRESULT,
    pub ActivateForProtocol: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, appusermodelid: ::windows_core::PCWSTR, itemarray: *mut ::core::ffi::c_void, processid: *mut u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IApplicationAssociationRegistration(::windows_core::IUnknown);
impl IApplicationAssociationRegistration {
    pub unsafe fn QueryCurrentDefault<P0>(&self, pszquery: P0, atquerytype: ASSOCIATIONTYPE, alquerylevel: ASSOCIATIONLEVEL) -> ::windows_core::Result<::windows_core::PWSTR>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).QueryCurrentDefault)(::windows_core::Interface::as_raw(self), pszquery.into_param().abi(), atquerytype, alquerylevel, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn QueryAppIsDefault<P0, P1>(&self, pszquery: P0, atquerytype: ASSOCIATIONTYPE, alquerylevel: ASSOCIATIONLEVEL, pszappregistryname: P1) -> ::windows_core::Result<super::super::Foundation::BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).QueryAppIsDefault)(::windows_core::Interface::as_raw(self), pszquery.into_param().abi(), atquerytype, alquerylevel, pszappregistryname.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn QueryAppIsDefaultAll<P0>(&self, alquerylevel: ASSOCIATIONLEVEL, pszappregistryname: P0) -> ::windows_core::Result<super::super::Foundation::BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).QueryAppIsDefaultAll)(::windows_core::Interface::as_raw(self), alquerylevel, pszappregistryname.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetAppAsDefault<P0, P1>(&self, pszappregistryname: P0, pszset: P1, atsettype: ASSOCIATIONTYPE) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetAppAsDefault)(::windows_core::Interface::as_raw(self), pszappregistryname.into_param().abi(), pszset.into_param().abi(), atsettype).ok()
    }
    pub unsafe fn SetAppAsDefaultAll<P0>(&self, pszappregistryname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetAppAsDefaultAll)(::windows_core::Interface::as_raw(self), pszappregistryname.into_param().abi()).ok()
    }
    pub unsafe fn ClearUserAssociations(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ClearUserAssociations)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IApplicationAssociationRegistration, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IApplicationAssociationRegistration {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IApplicationAssociationRegistration {}
impl ::core::fmt::Debug for IApplicationAssociationRegistration {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IApplicationAssociationRegistration").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IApplicationAssociationRegistration {
    type Vtable = IApplicationAssociationRegistration_Vtbl;
}
impl ::core::clone::Clone for IApplicationAssociationRegistration {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IApplicationAssociationRegistration {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x4e530b0a_e611_4c77_a3ac_9031d022281b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IApplicationAssociationRegistration_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub QueryCurrentDefault: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszquery: ::windows_core::PCWSTR, atquerytype: ASSOCIATIONTYPE, alquerylevel: ASSOCIATIONLEVEL, ppszassociation: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub QueryAppIsDefault: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszquery: ::windows_core::PCWSTR, atquerytype: ASSOCIATIONTYPE, alquerylevel: ASSOCIATIONLEVEL, pszappregistryname: ::windows_core::PCWSTR, pfdefault: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    QueryAppIsDefault: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub QueryAppIsDefaultAll: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, alquerylevel: ASSOCIATIONLEVEL, pszappregistryname: ::windows_core::PCWSTR, pfdefault: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    QueryAppIsDefaultAll: usize,
    pub SetAppAsDefault: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszappregistryname: ::windows_core::PCWSTR, pszset: ::windows_core::PCWSTR, atsettype: ASSOCIATIONTYPE) -> ::windows_core::HRESULT,
    pub SetAppAsDefaultAll: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszappregistryname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub ClearUserAssociations: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IApplicationAssociationRegistrationUI(::windows_core::IUnknown);
impl IApplicationAssociationRegistrationUI {
    pub unsafe fn LaunchAdvancedAssociationUI<P0>(&self, pszappregistryname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).LaunchAdvancedAssociationUI)(::windows_core::Interface::as_raw(self), pszappregistryname.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IApplicationAssociationRegistrationUI, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IApplicationAssociationRegistrationUI {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IApplicationAssociationRegistrationUI {}
impl ::core::fmt::Debug for IApplicationAssociationRegistrationUI {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IApplicationAssociationRegistrationUI").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IApplicationAssociationRegistrationUI {
    type Vtable = IApplicationAssociationRegistrationUI_Vtbl;
}
impl ::core::clone::Clone for IApplicationAssociationRegistrationUI {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IApplicationAssociationRegistrationUI {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x1f76a169_f994_40ac_8fc8_0959e8874710);
}
#[repr(C)]
#[doc(hidden)]
pub struct IApplicationAssociationRegistrationUI_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub LaunchAdvancedAssociationUI: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszappregistryname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IApplicationDesignModeSettings(::windows_core::IUnknown);
impl IApplicationDesignModeSettings {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetNativeDisplaySize(&self, nativedisplaysizepixels: super::super::Foundation::SIZE) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetNativeDisplaySize)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(nativedisplaysizepixels)).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn SetScaleFactor(&self, scalefactor: Common::DEVICE_SCALE_FACTOR) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetScaleFactor)(::windows_core::Interface::as_raw(self), scalefactor).ok()
    }
    pub unsafe fn SetApplicationViewState(&self, viewstate: APPLICATION_VIEW_STATE) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetApplicationViewState)(::windows_core::Interface::as_raw(self), viewstate).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ComputeApplicationSize(&self) -> ::windows_core::Result<super::super::Foundation::SIZE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ComputeApplicationSize)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn IsApplicationViewStateSupported(&self, viewstate: APPLICATION_VIEW_STATE, nativedisplaysizepixels: super::super::Foundation::SIZE, scalefactor: Common::DEVICE_SCALE_FACTOR) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IsApplicationViewStateSupported)(::windows_core::Interface::as_raw(self), viewstate, ::core::mem::transmute(nativedisplaysizepixels), scalefactor, &mut result__).from_abi(result__)
    }
    pub unsafe fn TriggerEdgeGesture(&self, edgegesturekind: EDGE_GESTURE_KIND) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).TriggerEdgeGesture)(::windows_core::Interface::as_raw(self), edgegesturekind).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IApplicationDesignModeSettings, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IApplicationDesignModeSettings {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IApplicationDesignModeSettings {}
impl ::core::fmt::Debug for IApplicationDesignModeSettings {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IApplicationDesignModeSettings").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IApplicationDesignModeSettings {
    type Vtable = IApplicationDesignModeSettings_Vtbl;
}
impl ::core::clone::Clone for IApplicationDesignModeSettings {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IApplicationDesignModeSettings {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x2a3dee9a_e31d_46d6_8508_bcc597db3557);
}
#[repr(C)]
#[doc(hidden)]
pub struct IApplicationDesignModeSettings_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub SetNativeDisplaySize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, nativedisplaysizepixels: super::super::Foundation::SIZE) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetNativeDisplaySize: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub SetScaleFactor: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, scalefactor: Common::DEVICE_SCALE_FACTOR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    SetScaleFactor: usize,
    pub SetApplicationViewState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, viewstate: APPLICATION_VIEW_STATE) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub ComputeApplicationSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, applicationsizepixels: *mut super::super::Foundation::SIZE) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ComputeApplicationSize: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub IsApplicationViewStateSupported: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, viewstate: APPLICATION_VIEW_STATE, nativedisplaysizepixels: super::super::Foundation::SIZE, scalefactor: Common::DEVICE_SCALE_FACTOR, supported: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common")))]
    IsApplicationViewStateSupported: usize,
    pub TriggerEdgeGesture: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, edgegesturekind: EDGE_GESTURE_KIND) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IApplicationDesignModeSettings2(::windows_core::IUnknown);
impl IApplicationDesignModeSettings2 {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetNativeDisplaySize(&self, nativedisplaysizepixels: super::super::Foundation::SIZE) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetNativeDisplaySize)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(nativedisplaysizepixels)).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn SetScaleFactor(&self, scalefactor: Common::DEVICE_SCALE_FACTOR) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetScaleFactor)(::windows_core::Interface::as_raw(self), scalefactor).ok()
    }
    pub unsafe fn SetApplicationViewState(&self, viewstate: APPLICATION_VIEW_STATE) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetApplicationViewState)(::windows_core::Interface::as_raw(self), viewstate).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ComputeApplicationSize(&self) -> ::windows_core::Result<super::super::Foundation::SIZE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.ComputeApplicationSize)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn IsApplicationViewStateSupported(&self, viewstate: APPLICATION_VIEW_STATE, nativedisplaysizepixels: super::super::Foundation::SIZE, scalefactor: Common::DEVICE_SCALE_FACTOR) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.IsApplicationViewStateSupported)(::windows_core::Interface::as_raw(self), viewstate, ::core::mem::transmute(nativedisplaysizepixels), scalefactor, &mut result__).from_abi(result__)
    }
    pub unsafe fn TriggerEdgeGesture(&self, edgegesturekind: EDGE_GESTURE_KIND) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.TriggerEdgeGesture)(::windows_core::Interface::as_raw(self), edgegesturekind).ok()
    }
    pub unsafe fn SetNativeDisplayOrientation(&self, nativedisplayorientation: NATIVE_DISPLAY_ORIENTATION) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetNativeDisplayOrientation)(::windows_core::Interface::as_raw(self), nativedisplayorientation).ok()
    }
    pub unsafe fn SetApplicationViewOrientation(&self, vieworientation: APPLICATION_VIEW_ORIENTATION) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetApplicationViewOrientation)(::windows_core::Interface::as_raw(self), vieworientation).ok()
    }
    pub unsafe fn SetAdjacentDisplayEdges(&self, adjacentdisplayedges: ADJACENT_DISPLAY_EDGES) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetAdjacentDisplayEdges)(::windows_core::Interface::as_raw(self), adjacentdisplayedges).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetIsOnLockScreen<P0>(&self, isonlockscreen: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetIsOnLockScreen)(::windows_core::Interface::as_raw(self), isonlockscreen.into_param().abi()).ok()
    }
    pub unsafe fn SetApplicationViewMinWidth(&self, viewminwidth: APPLICATION_VIEW_MIN_WIDTH) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetApplicationViewMinWidth)(::windows_core::Interface::as_raw(self), viewminwidth).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetApplicationSizeBounds(&self, minapplicationsizepixels: *mut super::super::Foundation::SIZE, maxapplicationsizepixels: *mut super::super::Foundation::SIZE) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetApplicationSizeBounds)(::windows_core::Interface::as_raw(self), minapplicationsizepixels, maxapplicationsizepixels).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetApplicationViewOrientation(&self, applicationsizepixels: super::super::Foundation::SIZE) -> ::windows_core::Result<APPLICATION_VIEW_ORIENTATION> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetApplicationViewOrientation)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(applicationsizepixels), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IApplicationDesignModeSettings2, ::windows_core::IUnknown, IApplicationDesignModeSettings);
impl ::core::cmp::PartialEq for IApplicationDesignModeSettings2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IApplicationDesignModeSettings2 {}
impl ::core::fmt::Debug for IApplicationDesignModeSettings2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IApplicationDesignModeSettings2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IApplicationDesignModeSettings2 {
    type Vtable = IApplicationDesignModeSettings2_Vtbl;
}
impl ::core::clone::Clone for IApplicationDesignModeSettings2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IApplicationDesignModeSettings2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x490514e1_675a_4d6e_a58d_e54901b4ca2f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IApplicationDesignModeSettings2_Vtbl {
    pub base__: IApplicationDesignModeSettings_Vtbl,
    pub SetNativeDisplayOrientation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, nativedisplayorientation: NATIVE_DISPLAY_ORIENTATION) -> ::windows_core::HRESULT,
    pub SetApplicationViewOrientation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, vieworientation: APPLICATION_VIEW_ORIENTATION) -> ::windows_core::HRESULT,
    pub SetAdjacentDisplayEdges: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, adjacentdisplayedges: ADJACENT_DISPLAY_EDGES) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetIsOnLockScreen: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, isonlockscreen: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetIsOnLockScreen: usize,
    pub SetApplicationViewMinWidth: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, viewminwidth: APPLICATION_VIEW_MIN_WIDTH) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetApplicationSizeBounds: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, minapplicationsizepixels: *mut super::super::Foundation::SIZE, maxapplicationsizepixels: *mut super::super::Foundation::SIZE) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetApplicationSizeBounds: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetApplicationViewOrientation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, applicationsizepixels: super::super::Foundation::SIZE, vieworientation: *mut APPLICATION_VIEW_ORIENTATION) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetApplicationViewOrientation: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IApplicationDestinations(::windows_core::IUnknown);
impl IApplicationDestinations {
    pub unsafe fn SetAppID<P0>(&self, pszappid: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetAppID)(::windows_core::Interface::as_raw(self), pszappid.into_param().abi()).ok()
    }
    pub unsafe fn RemoveDestination<P0>(&self, punk: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).RemoveDestination)(::windows_core::Interface::as_raw(self), punk.into_param().abi()).ok()
    }
    pub unsafe fn RemoveAllDestinations(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RemoveAllDestinations)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IApplicationDestinations, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IApplicationDestinations {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IApplicationDestinations {}
impl ::core::fmt::Debug for IApplicationDestinations {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IApplicationDestinations").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IApplicationDestinations {
    type Vtable = IApplicationDestinations_Vtbl;
}
impl ::core::clone::Clone for IApplicationDestinations {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IApplicationDestinations {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x12337d35_94c6_48a0_bce7_6a9c69d4d600);
}
#[repr(C)]
#[doc(hidden)]
pub struct IApplicationDestinations_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetAppID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszappid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub RemoveDestination: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub RemoveAllDestinations: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IApplicationDocumentLists(::windows_core::IUnknown);
impl IApplicationDocumentLists {
    pub unsafe fn SetAppID<P0>(&self, pszappid: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetAppID)(::windows_core::Interface::as_raw(self), pszappid.into_param().abi()).ok()
    }
    pub unsafe fn GetList<T>(&self, listtype: APPDOCLISTTYPE, citemsdesired: u32) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetList)(::windows_core::Interface::as_raw(self), listtype, citemsdesired, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IApplicationDocumentLists, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IApplicationDocumentLists {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IApplicationDocumentLists {}
impl ::core::fmt::Debug for IApplicationDocumentLists {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IApplicationDocumentLists").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IApplicationDocumentLists {
    type Vtable = IApplicationDocumentLists_Vtbl;
}
impl ::core::clone::Clone for IApplicationDocumentLists {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IApplicationDocumentLists {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x3c594f9f_9f30_47a1_979a_c9e83d3d0a06);
}
#[repr(C)]
#[doc(hidden)]
pub struct IApplicationDocumentLists_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetAppID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszappid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub GetList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, listtype: APPDOCLISTTYPE, citemsdesired: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IAssocHandler(::windows_core::IUnknown);
impl IAssocHandler {
    pub unsafe fn GetName(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetName)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetUIName(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetUIName)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetIconLocation(&self, ppszpath: *mut ::windows_core::PWSTR, pindex: *mut i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetIconLocation)(::windows_core::Interface::as_raw(self), ppszpath, pindex).ok()
    }
    pub unsafe fn IsRecommended(&self) -> ::windows_core::HRESULT {
        (::windows_core::Interface::vtable(self).IsRecommended)(::windows_core::Interface::as_raw(self))
    }
    pub unsafe fn MakeDefault<P0>(&self, pszdescription: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).MakeDefault)(::windows_core::Interface::as_raw(self), pszdescription.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Invoke<P0>(&self, pdo: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    {
        (::windows_core::Interface::vtable(self).Invoke)(::windows_core::Interface::as_raw(self), pdo.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateInvoker<P0>(&self, pdo: P0) -> ::windows_core::Result<IAssocHandlerInvoker>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).CreateInvoker)(::windows_core::Interface::as_raw(self), pdo.into_param().abi(), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IAssocHandler, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IAssocHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAssocHandler {}
impl ::core::fmt::Debug for IAssocHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAssocHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IAssocHandler {
    type Vtable = IAssocHandler_Vtbl;
}
impl ::core::clone::Clone for IAssocHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAssocHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xf04061ac_1659_4a3f_a954_775aa57fc083);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAssocHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppsz: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub GetUIName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppsz: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub GetIconLocation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppszpath: *mut ::windows_core::PWSTR, pindex: *mut i32) -> ::windows_core::HRESULT,
    pub IsRecommended: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub MakeDefault: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszdescription: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub Invoke: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdo: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Invoke: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub CreateInvoker: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdo: *mut ::core::ffi::c_void, ppinvoker: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    CreateInvoker: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IAssocHandlerInvoker(::windows_core::IUnknown);
impl IAssocHandlerInvoker {
    pub unsafe fn SupportsSelection(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SupportsSelection)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Invoke(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Invoke)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IAssocHandlerInvoker, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IAssocHandlerInvoker {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAssocHandlerInvoker {}
impl ::core::fmt::Debug for IAssocHandlerInvoker {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAssocHandlerInvoker").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IAssocHandlerInvoker {
    type Vtable = IAssocHandlerInvoker_Vtbl;
}
impl ::core::clone::Clone for IAssocHandlerInvoker {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAssocHandlerInvoker {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x92218cab_ecaa_4335_8133_807fd234c2ee);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAssocHandlerInvoker_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SupportsSelection: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Invoke: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IAttachmentExecute(::windows_core::IUnknown);
impl IAttachmentExecute {
    pub unsafe fn SetClientTitle<P0>(&self, psztitle: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetClientTitle)(::windows_core::Interface::as_raw(self), psztitle.into_param().abi()).ok()
    }
    pub unsafe fn SetClientGuid(&self, guid: *const ::windows_core::GUID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetClientGuid)(::windows_core::Interface::as_raw(self), guid).ok()
    }
    pub unsafe fn SetLocalPath<P0>(&self, pszlocalpath: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetLocalPath)(::windows_core::Interface::as_raw(self), pszlocalpath.into_param().abi()).ok()
    }
    pub unsafe fn SetFileName<P0>(&self, pszfilename: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetFileName)(::windows_core::Interface::as_raw(self), pszfilename.into_param().abi()).ok()
    }
    pub unsafe fn SetSource<P0>(&self, pszsource: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetSource)(::windows_core::Interface::as_raw(self), pszsource.into_param().abi()).ok()
    }
    pub unsafe fn SetReferrer<P0>(&self, pszreferrer: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetReferrer)(::windows_core::Interface::as_raw(self), pszreferrer.into_param().abi()).ok()
    }
    pub unsafe fn CheckPolicy(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).CheckPolicy)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Prompt<P0>(&self, hwnd: P0, prompt: ATTACHMENT_PROMPT) -> ::windows_core::Result<ATTACHMENT_ACTION>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Prompt)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), prompt, &mut result__).from_abi(result__)
    }
    pub unsafe fn Save(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Save)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Execute<P0, P1>(&self, hwnd: P0, pszverb: P1, phprocess: ::core::option::Option<*mut super::super::Foundation::HANDLE>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).Execute)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), pszverb.into_param().abi(), ::core::mem::transmute(phprocess.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SaveWithUI<P0>(&self, hwnd: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).SaveWithUI)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi()).ok()
    }
    pub unsafe fn ClearClientState(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ClearClientState)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IAttachmentExecute, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IAttachmentExecute {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAttachmentExecute {}
impl ::core::fmt::Debug for IAttachmentExecute {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAttachmentExecute").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IAttachmentExecute {
    type Vtable = IAttachmentExecute_Vtbl;
}
impl ::core::clone::Clone for IAttachmentExecute {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAttachmentExecute {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x73db1241_1e85_4581_8e4f_a81e1d0f8c57);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAttachmentExecute_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetClientTitle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psztitle: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub SetClientGuid: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, guid: *const ::windows_core::GUID) -> ::windows_core::HRESULT,
    pub SetLocalPath: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszlocalpath: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub SetFileName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszfilename: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub SetSource: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszsource: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub SetReferrer: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszreferrer: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub CheckPolicy: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub Prompt: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, prompt: ATTACHMENT_PROMPT, paction: *mut ATTACHMENT_ACTION) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Prompt: usize,
    pub Save: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub Execute: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pszverb: ::windows_core::PCWSTR, phprocess: *mut super::super::Foundation::HANDLE) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Execute: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SaveWithUI: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SaveWithUI: usize,
    pub ClearClientState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IAutoComplete(::windows_core::IUnknown);
impl IAutoComplete {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Init<P0, P1, P2, P3>(&self, hwndedit: P0, punkacl: P1, pwszregkeypath: P2, pwszquickcomplete: P3) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P3: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).Init)(::windows_core::Interface::as_raw(self), hwndedit.into_param().abi(), punkacl.into_param().abi(), pwszregkeypath.into_param().abi(), pwszquickcomplete.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Enable<P0>(&self, fenable: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).Enable)(::windows_core::Interface::as_raw(self), fenable.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IAutoComplete, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IAutoComplete {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAutoComplete {}
impl ::core::fmt::Debug for IAutoComplete {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAutoComplete").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IAutoComplete {
    type Vtable = IAutoComplete_Vtbl;
}
impl ::core::clone::Clone for IAutoComplete {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAutoComplete {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x00bb2762_6a77_11d0_a535_00c04fd7d062);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutoComplete_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub Init: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwndedit: super::super::Foundation::HWND, punkacl: *mut ::core::ffi::c_void, pwszregkeypath: ::windows_core::PCWSTR, pwszquickcomplete: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Init: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub Enable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Enable: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IAutoComplete2(::windows_core::IUnknown);
impl IAutoComplete2 {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Init<P0, P1, P2, P3>(&self, hwndedit: P0, punkacl: P1, pwszregkeypath: P2, pwszquickcomplete: P3) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P3: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.Init)(::windows_core::Interface::as_raw(self), hwndedit.into_param().abi(), punkacl.into_param().abi(), pwszregkeypath.into_param().abi(), pwszquickcomplete.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Enable<P0>(&self, fenable: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.Enable)(::windows_core::Interface::as_raw(self), fenable.into_param().abi()).ok()
    }
    pub unsafe fn SetOptions(&self, dwflag: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetOptions)(::windows_core::Interface::as_raw(self), dwflag).ok()
    }
    pub unsafe fn GetOptions(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetOptions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IAutoComplete2, ::windows_core::IUnknown, IAutoComplete);
impl ::core::cmp::PartialEq for IAutoComplete2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAutoComplete2 {}
impl ::core::fmt::Debug for IAutoComplete2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAutoComplete2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IAutoComplete2 {
    type Vtable = IAutoComplete2_Vtbl;
}
impl ::core::clone::Clone for IAutoComplete2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAutoComplete2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xeac04bc0_3791_11d2_bb95_0060977b464c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutoComplete2_Vtbl {
    pub base__: IAutoComplete_Vtbl,
    pub SetOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflag: u32) -> ::windows_core::HRESULT,
    pub GetOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwflag: *mut u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IAutoCompleteDropDown(::windows_core::IUnknown);
impl IAutoCompleteDropDown {
    pub unsafe fn GetDropDownStatus(&self, pdwflags: *mut u32, ppwszstring: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetDropDownStatus)(::windows_core::Interface::as_raw(self), pdwflags, ppwszstring).ok()
    }
    pub unsafe fn ResetEnumerator(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ResetEnumerator)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IAutoCompleteDropDown, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IAutoCompleteDropDown {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IAutoCompleteDropDown {}
impl ::core::fmt::Debug for IAutoCompleteDropDown {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IAutoCompleteDropDown").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IAutoCompleteDropDown {
    type Vtable = IAutoCompleteDropDown_Vtbl;
}
impl ::core::clone::Clone for IAutoCompleteDropDown {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IAutoCompleteDropDown {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x3cd141f4_3c6a_11d2_bcaa_00c04fd929db);
}
#[repr(C)]
#[doc(hidden)]
pub struct IAutoCompleteDropDown_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetDropDownStatus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwflags: *mut u32, ppwszstring: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub ResetEnumerator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IBandHost(::windows_core::IUnknown);
impl IBandHost {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CreateBand<P0, P1, T>(&self, rclsidband: *const ::windows_core::GUID, favailable: P0, fvisible: P1) -> ::windows_core::Result<T>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).CreateBand)(::windows_core::Interface::as_raw(self), rclsidband, favailable.into_param().abi(), fvisible.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetBandAvailability<P0>(&self, rclsidband: *const ::windows_core::GUID, favailable: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetBandAvailability)(::windows_core::Interface::as_raw(self), rclsidband, favailable.into_param().abi()).ok()
    }
    pub unsafe fn DestroyBand(&self, rclsidband: *const ::windows_core::GUID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).DestroyBand)(::windows_core::Interface::as_raw(self), rclsidband).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IBandHost, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IBandHost {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IBandHost {}
impl ::core::fmt::Debug for IBandHost {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IBandHost").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IBandHost {
    type Vtable = IBandHost_Vtbl;
}
impl ::core::clone::Clone for IBandHost {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBandHost {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xb9075c7c_d48e_403f_ab99_d6c77a1084ac);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBandHost_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub CreateBand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rclsidband: *const ::windows_core::GUID, favailable: super::super::Foundation::BOOL, fvisible: super::super::Foundation::BOOL, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    CreateBand: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetBandAvailability: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rclsidband: *const ::windows_core::GUID, favailable: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetBandAvailability: usize,
    pub DestroyBand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rclsidband: *const ::windows_core::GUID) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IBandSite(::windows_core::IUnknown);
impl IBandSite {
    pub unsafe fn AddBand<P0>(&self, punk: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).AddBand)(::windows_core::Interface::as_raw(self), punk.into_param().abi()).ok()
    }
    pub unsafe fn EnumBands(&self, uband: u32) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).EnumBands)(::windows_core::Interface::as_raw(self), uband, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn QueryBand(&self, dwbandid: u32, ppstb: ::core::option::Option<*mut ::core::option::Option<IDeskBand>>, pdwstate: ::core::option::Option<*mut u32>, pszname: ::core::option::Option<&mut [u16]>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).QueryBand)(::windows_core::Interface::as_raw(self), dwbandid, ::core::mem::transmute(ppstb.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pdwstate.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pszname.as_deref().map_or(::core::ptr::null(), |slice| slice.as_ptr())), pszname.as_deref().map_or(0, |slice| slice.len() as _)).ok()
    }
    pub unsafe fn SetBandState(&self, dwbandid: u32, dwmask: u32, dwstate: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetBandState)(::windows_core::Interface::as_raw(self), dwbandid, dwmask, dwstate).ok()
    }
    pub unsafe fn RemoveBand(&self, dwbandid: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RemoveBand)(::windows_core::Interface::as_raw(self), dwbandid).ok()
    }
    pub unsafe fn GetBandObject<T>(&self, dwbandid: u32) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetBandObject)(::windows_core::Interface::as_raw(self), dwbandid, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    pub unsafe fn SetBandSiteInfo(&self, pbsinfo: *const BANDSITEINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetBandSiteInfo)(::windows_core::Interface::as_raw(self), pbsinfo).ok()
    }
    pub unsafe fn GetBandSiteInfo(&self, pbsinfo: *mut BANDSITEINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetBandSiteInfo)(::windows_core::Interface::as_raw(self), pbsinfo).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IBandSite, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IBandSite {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IBandSite {}
impl ::core::fmt::Debug for IBandSite {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IBandSite").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IBandSite {
    type Vtable = IBandSite_Vtbl;
}
impl ::core::clone::Clone for IBandSite {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBandSite {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x4cf504b0_de96_11d0_8b3f_00a0c911e8e5);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBandSite_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub AddBand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub EnumBands: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, uband: u32, pdwbandid: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Ole")]
    pub QueryBand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwbandid: u32, ppstb: *mut *mut ::core::ffi::c_void, pdwstate: *mut u32, pszname: ::windows_core::PWSTR, cchname: i32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    QueryBand: usize,
    pub SetBandState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwbandid: u32, dwmask: u32, dwstate: u32) -> ::windows_core::HRESULT,
    pub RemoveBand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwbandid: u32) -> ::windows_core::HRESULT,
    pub GetBandObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwbandid: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SetBandSiteInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbsinfo: *const BANDSITEINFO) -> ::windows_core::HRESULT,
    pub GetBandSiteInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbsinfo: *mut BANDSITEINFO) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IBannerNotificationHandler(::windows_core::IUnknown);
impl IBannerNotificationHandler {
    pub unsafe fn OnBannerEvent(&self, notification: *const BANNER_NOTIFICATION) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).OnBannerEvent)(::windows_core::Interface::as_raw(self), notification).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IBannerNotificationHandler, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IBannerNotificationHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IBannerNotificationHandler {}
impl ::core::fmt::Debug for IBannerNotificationHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IBannerNotificationHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IBannerNotificationHandler {
    type Vtable = IBannerNotificationHandler_Vtbl;
}
impl ::core::clone::Clone for IBannerNotificationHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBannerNotificationHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x8d7b2ba7_db05_46a8_823c_d2b6de08ee91);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBannerNotificationHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub OnBannerEvent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, notification: *const BANNER_NOTIFICATION) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IBanneredBar(::windows_core::IUnknown);
impl IBanneredBar {
    pub unsafe fn SetIconSize(&self, iicon: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetIconSize)(::windows_core::Interface::as_raw(self), iicon).ok()
    }
    pub unsafe fn GetIconSize(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetIconSize)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn SetBitmap<P0>(&self, hbitmap: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Graphics::Gdi::HBITMAP>,
    {
        (::windows_core::Interface::vtable(self).SetBitmap)(::windows_core::Interface::as_raw(self), hbitmap.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetBitmap(&self) -> ::windows_core::Result<super::super::Graphics::Gdi::HBITMAP> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetBitmap)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IBanneredBar, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IBanneredBar {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IBanneredBar {}
impl ::core::fmt::Debug for IBanneredBar {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IBanneredBar").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IBanneredBar {
    type Vtable = IBanneredBar_Vtbl;
}
impl ::core::clone::Clone for IBanneredBar {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBanneredBar {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x596a9a94_013e_11d1_8d34_00a0c90f2719);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBanneredBar_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetIconSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, iicon: u32) -> ::windows_core::HRESULT,
    pub GetIconSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, piicon: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub SetBitmap: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hbitmap: super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))]
    SetBitmap: usize,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub GetBitmap: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phbitmap: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))]
    GetBitmap: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IBrowserFrameOptions(::windows_core::IUnknown);
impl IBrowserFrameOptions {
    pub unsafe fn GetFrameOptions(&self, dwmask: u32) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFrameOptions)(::windows_core::Interface::as_raw(self), dwmask, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IBrowserFrameOptions, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IBrowserFrameOptions {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IBrowserFrameOptions {}
impl ::core::fmt::Debug for IBrowserFrameOptions {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IBrowserFrameOptions").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IBrowserFrameOptions {
    type Vtable = IBrowserFrameOptions_Vtbl;
}
impl ::core::clone::Clone for IBrowserFrameOptions {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBrowserFrameOptions {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x10df43c8_1dbe_11d3_8b34_006097df5bd4);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBrowserFrameOptions_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetFrameOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwmask: u32, pdwoptions: *mut u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IBrowserService(::windows_core::IUnknown);
impl IBrowserService {
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn GetParentSite(&self) -> ::windows_core::Result<super::super::System::Ole::IOleInPlaceSite> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetParentSite)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn SetTitle<P0, P1>(&self, psv: P0, pszname: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetTitle)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), pszname.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn GetTitle<P0>(&self, psv: P0, pszname: &mut [u16]) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).GetTitle)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), ::core::mem::transmute(pszname.as_ptr()), pszname.len() as _).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn GetOleObject(&self) -> ::windows_core::Result<super::super::System::Ole::IOleObject> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetOleObject)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTravelLog(&self) -> ::windows_core::Result<ITravelLog> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetTravelLog)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ShowControlWindow<P0>(&self, id: u32, fshow: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).ShowControlWindow)(::windows_core::Interface::as_raw(self), id, fshow.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsControlWindowShown(&self, id: u32) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IsControlWindowShown)(::windows_core::Interface::as_raw(self), id, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn IEGetDisplayName(&self, pidl: *const Common::ITEMIDLIST, pwszname: ::windows_core::PWSTR, uflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).IEGetDisplayName)(::windows_core::Interface::as_raw(self), pidl, ::core::mem::transmute(pwszname), uflags).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn IEParseDisplayName<P0>(&self, uicp: u32, pwszpath: P0) -> ::windows_core::Result<*mut Common::ITEMIDLIST>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IEParseDisplayName)(::windows_core::Interface::as_raw(self), uicp, pwszpath.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn DisplayParseError<P0>(&self, hres: ::windows_core::HRESULT, pwszpath: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).DisplayParseError)(::windows_core::Interface::as_raw(self), hres, pwszpath.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn NavigateToPidl(&self, pidl: *const Common::ITEMIDLIST, grfhlnf: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).NavigateToPidl)(::windows_core::Interface::as_raw(self), pidl, grfhlnf).ok()
    }
    pub unsafe fn SetNavigateState(&self, bnstate: BNSTATE) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetNavigateState)(::windows_core::Interface::as_raw(self), bnstate).ok()
    }
    pub unsafe fn GetNavigateState(&self) -> ::windows_core::Result<BNSTATE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetNavigateState)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn NotifyRedirect<P0>(&self, psv: P0, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<super::super::Foundation::BOOL>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).NotifyRedirect)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), pidl, &mut result__).from_abi(result__)
    }
    pub unsafe fn UpdateWindowList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).UpdateWindowList)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn UpdateBackForwardState(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).UpdateBackForwardState)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetFlags(&self, dwflags: u32, dwflagmask: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFlags)(::windows_core::Interface::as_raw(self), dwflags, dwflagmask).ok()
    }
    pub unsafe fn GetFlags(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFlags)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CanNavigateNow(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).CanNavigateNow)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetPidl(&self) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetPidl)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn SetReferrer(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetReferrer)(::windows_core::Interface::as_raw(self), pidl).ok()
    }
    pub unsafe fn GetBrowserIndex(&self) -> u32 {
        (::windows_core::Interface::vtable(self).GetBrowserIndex)(::windows_core::Interface::as_raw(self))
    }
    pub unsafe fn GetBrowserByIndex(&self, dwid: u32) -> ::windows_core::Result<::windows_core::IUnknown> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetBrowserByIndex)(::windows_core::Interface::as_raw(self), dwid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn GetHistoryObject(&self, ppole: *mut ::core::option::Option<super::super::System::Ole::IOleObject>, pstm: *mut ::core::option::Option<super::super::System::Com::IStream>, ppbc: *mut ::core::option::Option<super::super::System::Com::IBindCtx>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetHistoryObject)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(ppole), ::core::mem::transmute(pstm), ::core::mem::transmute(ppbc)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn SetHistoryObject<P0, P1>(&self, pole: P0, fislocalanchor: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Ole::IOleObject>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetHistoryObject)(::windows_core::Interface::as_raw(self), pole.into_param().abi(), fislocalanchor.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn CacheOLEServer<P0>(&self, pole: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Ole::IOleObject>,
    {
        (::windows_core::Interface::vtable(self).CacheOLEServer)(::windows_core::Interface::as_raw(self), pole.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn GetSetCodePage(&self, pvarin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSetCodePage)(::windows_core::Interface::as_raw(self), pvarin, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn OnHttpEquiv<P0, P1>(&self, psv: P0, fdone: P1, pvarargin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<IShellView>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).OnHttpEquiv)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), fdone.into_param().abi(), pvarargin, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetPalette(&self) -> ::windows_core::Result<super::super::Graphics::Gdi::HPALETTE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetPalette)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterWindow<P0>(&self, fforceregister: P0, swc: ShellWindowTypeConstants) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).RegisterWindow)(::windows_core::Interface::as_raw(self), fforceregister.into_param().abi(), swc).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IBrowserService, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IBrowserService {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IBrowserService {}
impl ::core::fmt::Debug for IBrowserService {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IBrowserService").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IBrowserService {
    type Vtable = IBrowserService_Vtbl;
}
impl ::core::clone::Clone for IBrowserService {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBrowserService {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x02ba3b52_0547_11d1_b833_00c04fc9b31f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBrowserService_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Ole")]
    pub GetParentSite: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppipsite: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    GetParentSite: usize,
    #[cfg(feature = "Win32_System_Ole")]
    pub SetTitle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psv: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    SetTitle: usize,
    #[cfg(feature = "Win32_System_Ole")]
    pub GetTitle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psv: *mut ::core::ffi::c_void, pszname: ::windows_core::PWSTR, cchname: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    GetTitle: usize,
    #[cfg(feature = "Win32_System_Ole")]
    pub GetOleObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppobjv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    GetOleObject: usize,
    pub GetTravelLog: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pptl: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub ShowControlWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, id: u32, fshow: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ShowControlWindow: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub IsControlWindowShown: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, id: u32, pfshown: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    IsControlWindowShown: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub IEGetDisplayName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pwszname: ::windows_core::PWSTR, uflags: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    IEGetDisplayName: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub IEParseDisplayName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, uicp: u32, pwszpath: ::windows_core::PCWSTR, ppidlout: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    IEParseDisplayName: usize,
    pub DisplayParseError: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hres: ::windows_core::HRESULT, pwszpath: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub NavigateToPidl: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, grfhlnf: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    NavigateToPidl: usize,
    pub SetNavigateState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bnstate: BNSTATE) -> ::windows_core::HRESULT,
    pub GetNavigateState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbnstate: *mut BNSTATE) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub NotifyRedirect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psv: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pfdidbrowse: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common")))]
    NotifyRedirect: usize,
    pub UpdateWindowList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub UpdateBackForwardState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SetFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, dwflagmask: u32) -> ::windows_core::HRESULT,
    pub GetFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT,
    pub CanNavigateNow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetPidl: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetPidl: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub SetReferrer: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    SetReferrer: usize,
    pub GetBrowserIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> u32,
    pub GetBrowserByIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwid: u32, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub GetHistoryObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppole: *mut *mut ::core::ffi::c_void, pstm: *mut *mut ::core::ffi::c_void, ppbc: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    GetHistoryObject: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub SetHistoryObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pole: *mut ::core::ffi::c_void, fislocalanchor: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole")))]
    SetHistoryObject: usize,
    #[cfg(feature = "Win32_System_Ole")]
    pub CacheOLEServer: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pole: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    CacheOLEServer: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub GetSetCodePage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pvarin: *const super::super::System::Variant::VARIANT, pvarout: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    GetSetCodePage: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub OnHttpEquiv: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psv: *mut ::core::ffi::c_void, fdone: super::super::Foundation::BOOL, pvarargin: *const super::super::System::Variant::VARIANT, pvarargout: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    OnHttpEquiv: usize,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub GetPalette: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hpal: *mut super::super::Graphics::Gdi::HPALETTE) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))]
    GetPalette: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub RegisterWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fforceregister: super::super::Foundation::BOOL, swc: ShellWindowTypeConstants) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RegisterWindow: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IBrowserService2(::windows_core::IUnknown);
impl IBrowserService2 {
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn GetParentSite(&self) -> ::windows_core::Result<super::super::System::Ole::IOleInPlaceSite> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetParentSite)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn SetTitle<P0, P1>(&self, psv: P0, pszname: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetTitle)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), pszname.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn GetTitle<P0>(&self, psv: P0, pszname: &mut [u16]) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).base__.GetTitle)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), ::core::mem::transmute(pszname.as_ptr()), pszname.len() as _).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn GetOleObject(&self) -> ::windows_core::Result<super::super::System::Ole::IOleObject> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetOleObject)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTravelLog(&self) -> ::windows_core::Result<ITravelLog> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetTravelLog)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ShowControlWindow<P0>(&self, id: u32, fshow: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.ShowControlWindow)(::windows_core::Interface::as_raw(self), id, fshow.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsControlWindowShown(&self, id: u32) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.IsControlWindowShown)(::windows_core::Interface::as_raw(self), id, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn IEGetDisplayName(&self, pidl: *const Common::ITEMIDLIST, pwszname: ::windows_core::PWSTR, uflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.IEGetDisplayName)(::windows_core::Interface::as_raw(self), pidl, ::core::mem::transmute(pwszname), uflags).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn IEParseDisplayName<P0>(&self, uicp: u32, pwszpath: P0) -> ::windows_core::Result<*mut Common::ITEMIDLIST>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.IEParseDisplayName)(::windows_core::Interface::as_raw(self), uicp, pwszpath.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn DisplayParseError<P0>(&self, hres: ::windows_core::HRESULT, pwszpath: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.DisplayParseError)(::windows_core::Interface::as_raw(self), hres, pwszpath.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn NavigateToPidl(&self, pidl: *const Common::ITEMIDLIST, grfhlnf: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.NavigateToPidl)(::windows_core::Interface::as_raw(self), pidl, grfhlnf).ok()
    }
    pub unsafe fn SetNavigateState(&self, bnstate: BNSTATE) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetNavigateState)(::windows_core::Interface::as_raw(self), bnstate).ok()
    }
    pub unsafe fn GetNavigateState(&self) -> ::windows_core::Result<BNSTATE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetNavigateState)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn NotifyRedirect<P0>(&self, psv: P0, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<super::super::Foundation::BOOL>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.NotifyRedirect)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), pidl, &mut result__).from_abi(result__)
    }
    pub unsafe fn UpdateWindowList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.UpdateWindowList)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn UpdateBackForwardState(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.UpdateBackForwardState)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetFlags(&self, dwflags: u32, dwflagmask: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetFlags)(::windows_core::Interface::as_raw(self), dwflags, dwflagmask).ok()
    }
    pub unsafe fn GetFlags(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetFlags)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CanNavigateNow(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.CanNavigateNow)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetPidl(&self) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetPidl)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn SetReferrer(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetReferrer)(::windows_core::Interface::as_raw(self), pidl).ok()
    }
    pub unsafe fn GetBrowserIndex(&self) -> u32 {
        (::windows_core::Interface::vtable(self).base__.GetBrowserIndex)(::windows_core::Interface::as_raw(self))
    }
    pub unsafe fn GetBrowserByIndex(&self, dwid: u32) -> ::windows_core::Result<::windows_core::IUnknown> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetBrowserByIndex)(::windows_core::Interface::as_raw(self), dwid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn GetHistoryObject(&self, ppole: *mut ::core::option::Option<super::super::System::Ole::IOleObject>, pstm: *mut ::core::option::Option<super::super::System::Com::IStream>, ppbc: *mut ::core::option::Option<super::super::System::Com::IBindCtx>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetHistoryObject)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(ppole), ::core::mem::transmute(pstm), ::core::mem::transmute(ppbc)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn SetHistoryObject<P0, P1>(&self, pole: P0, fislocalanchor: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Ole::IOleObject>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.SetHistoryObject)(::windows_core::Interface::as_raw(self), pole.into_param().abi(), fislocalanchor.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn CacheOLEServer<P0>(&self, pole: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Ole::IOleObject>,
    {
        (::windows_core::Interface::vtable(self).base__.CacheOLEServer)(::windows_core::Interface::as_raw(self), pole.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn GetSetCodePage(&self, pvarin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetSetCodePage)(::windows_core::Interface::as_raw(self), pvarin, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn OnHttpEquiv<P0, P1>(&self, psv: P0, fdone: P1, pvarargin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<IShellView>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.OnHttpEquiv)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), fdone.into_param().abi(), pvarargin, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetPalette(&self) -> ::windows_core::Result<super::super::Graphics::Gdi::HPALETTE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetPalette)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterWindow<P0>(&self, fforceregister: P0, swc: ShellWindowTypeConstants) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.RegisterWindow)(::windows_core::Interface::as_raw(self), fforceregister.into_param().abi(), swc).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn WndProcBS<P0, P1, P2>(&self, hwnd: P0, umsg: u32, wparam: P1, lparam: P2) -> super::super::Foundation::LRESULT
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P2: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).WndProcBS)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), umsg, wparam.into_param().abi(), lparam.into_param().abi())
    }
    pub unsafe fn SetAsDefFolderSettings(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetAsDefFolderSettings)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetViewRect(&self) -> ::windows_core::Result<super::super::Foundation::RECT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetViewRect)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnSize<P0>(&self, wparam: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
    {
        (::windows_core::Interface::vtable(self).OnSize)(::windows_core::Interface::as_raw(self), wparam.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn OnCreate(&self, pcs: *const super::WindowsAndMessaging::CREATESTRUCTW) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).OnCreate)(::windows_core::Interface::as_raw(self), pcs).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnCommand<P0, P1>(&self, wparam: P0, lparam: P1) -> super::super::Foundation::LRESULT
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).OnCommand)(::windows_core::Interface::as_raw(self), wparam.into_param().abi(), lparam.into_param().abi())
    }
    pub unsafe fn OnDestroy(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).OnDestroy)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Controls\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls"))]
    pub unsafe fn OnNotify(&self, pnm: *const super::Controls::NMHDR) -> super::super::Foundation::LRESULT {
        (::windows_core::Interface::vtable(self).OnNotify)(::windows_core::Interface::as_raw(self), pnm)
    }
    pub unsafe fn OnSetFocus(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).OnSetFocus)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnFrameWindowActivateBS<P0>(&self, factive: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).OnFrameWindowActivateBS)(::windows_core::Interface::as_raw(self), factive.into_param().abi()).ok()
    }
    pub unsafe fn ReleaseShellView(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ReleaseShellView)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ActivatePendingView(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ActivatePendingView)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn CreateViewWindow<P0, P1>(&self, psvnew: P0, psvold: P1, prcview: *const super::super::Foundation::RECT) -> ::windows_core::Result<super::super::Foundation::HWND>
    where
        P0: ::windows_core::IntoParam<IShellView>,
        P1: ::windows_core::IntoParam<IShellView>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).CreateViewWindow)(::windows_core::Interface::as_raw(self), psvnew.into_param().abi(), psvold.into_param().abi(), prcview, &mut result__).from_abi(result__)
    }
    pub unsafe fn CreateBrowserPropSheetExt(&self, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).CreateBrowserPropSheetExt)(::windows_core::Interface::as_raw(self), riid, ppv).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetViewWindow(&self) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetViewWindow)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn GetBaseBrowserData(&self) -> ::windows_core::Result<*mut BASEBROWSERDATALH> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetBaseBrowserData)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn PutBaseBrowserData(&self) -> *mut BASEBROWSERDATALH {
        (::windows_core::Interface::vtable(self).PutBaseBrowserData)(::windows_core::Interface::as_raw(self))
    }
    pub unsafe fn InitializeTravelLog<P0>(&self, ptl: P0, dw: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ITravelLog>,
    {
        (::windows_core::Interface::vtable(self).InitializeTravelLog)(::windows_core::Interface::as_raw(self), ptl.into_param().abi(), dw).ok()
    }
    pub unsafe fn SetTopBrowser(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetTopBrowser)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Offline(&self, icmd: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Offline)(::windows_core::Interface::as_raw(self), icmd).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AllowViewResize<P0>(&self, f: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).AllowViewResize)(::windows_core::Interface::as_raw(self), f.into_param().abi()).ok()
    }
    pub unsafe fn SetActivateState(&self, u: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetActivateState)(::windows_core::Interface::as_raw(self), u).ok()
    }
    pub unsafe fn UpdateSecureLockIcon(&self, esecurelock: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).UpdateSecureLockIcon)(::windows_core::Interface::as_raw(self), esecurelock).ok()
    }
    pub unsafe fn InitializeDownloadManager(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).InitializeDownloadManager)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn InitializeTransitionSite(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).InitializeTransitionSite)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _Initialize<P0, P1>(&self, hwnd: P0, pauto: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self)._Initialize)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), pauto.into_param().abi()).ok()
    }
    pub unsafe fn _CancelPendingNavigationAsync(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self)._CancelPendingNavigationAsync)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn _CancelPendingView(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self)._CancelPendingView)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn _MaySaveChanges(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self)._MaySaveChanges)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _PauseOrResumeView<P0>(&self, fpaused: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self)._PauseOrResumeView)(::windows_core::Interface::as_raw(self), fpaused.into_param().abi()).ok()
    }
    pub unsafe fn _DisableModeless(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self)._DisableModeless)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn _NavigateToPidl2(&self, pidl: *const Common::ITEMIDLIST, grfhlnf: u32, dwflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self)._NavigateToPidl2)(::windows_core::Interface::as_raw(self), pidl, grfhlnf, dwflags).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn _TryShell2Rename<P0>(&self, psv: P0, pidlnew: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self)._TryShell2Rename)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), pidlnew).ok()
    }
    pub unsafe fn _SwitchActivationNow(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self)._SwitchActivationNow)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn _ExecChildren<P0, P1>(&self, punkbar: P0, fbroadcast: P1, pguidcmdgroup: ::core::option::Option<*const ::windows_core::GUID>, ncmdid: u32, ncmdexecopt: u32, pvarargin: ::core::option::Option<*const super::super::System::Variant::VARIANT>, pvarargout: ::core::option::Option<*mut super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self)._ExecChildren)(::windows_core::Interface::as_raw(self), punkbar.into_param().abi(), fbroadcast.into_param().abi(), ::core::mem::transmute(pguidcmdgroup.unwrap_or(::std::ptr::null())), ncmdid, ncmdexecopt, ::core::mem::transmute(pvarargin.unwrap_or(::std::ptr::null())), ::core::mem::transmute(pvarargout.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _SendChildren<P0, P1, P2, P3>(&self, hwndbar: P0, fbroadcast: P1, umsg: u32, wparam: P2, lparam: P3) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
        P2: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P3: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self)._SendChildren)(::windows_core::Interface::as_raw(self), hwndbar.into_param().abi(), fbroadcast.into_param().abi(), umsg, wparam.into_param().abi(), lparam.into_param().abi()).ok()
    }
    pub unsafe fn GetFolderSetData(&self, pfsd: *mut FOLDERSETDATA) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetFolderSetData)(::windows_core::Interface::as_raw(self), pfsd).ok()
    }
    pub unsafe fn _OnFocusChange(&self, itb: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self)._OnFocusChange)(::windows_core::Interface::as_raw(self), itb).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn v_ShowHideChildWindows<P0>(&self, fchildonly: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).v_ShowHideChildWindows)(::windows_core::Interface::as_raw(self), fchildonly.into_param().abi()).ok()
    }
    pub unsafe fn _get_itbLastFocus(&self) -> u32 {
        (::windows_core::Interface::vtable(self)._get_itbLastFocus)(::windows_core::Interface::as_raw(self))
    }
    pub unsafe fn _put_itbLastFocus(&self, itblastfocus: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self)._put_itbLastFocus)(::windows_core::Interface::as_raw(self), itblastfocus).ok()
    }
    pub unsafe fn _UIActivateView(&self, ustate: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self)._UIActivateView)(::windows_core::Interface::as_raw(self), ustate).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _GetViewBorderRect(&self, prc: *mut super::super::Foundation::RECT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self)._GetViewBorderRect)(::windows_core::Interface::as_raw(self), prc).ok()
    }
    pub unsafe fn _UpdateViewRectSize(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self)._UpdateViewRectSize)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn _ResizeNextBorder(&self, itb: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self)._ResizeNextBorder)(::windows_core::Interface::as_raw(self), itb).ok()
    }
    pub unsafe fn _ResizeView(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self)._ResizeView)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn _GetEffectiveClientArea<P0>(&self, lprectborder: *mut super::super::Foundation::RECT, hmon: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Graphics::Gdi::HMONITOR>,
    {
        (::windows_core::Interface::vtable(self)._GetEffectiveClientArea)(::windows_core::Interface::as_raw(self), lprectborder, hmon.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn v_GetViewStream<P0>(&self, pidl: *mut Common::ITEMIDLIST, grfmode: u32, pwszname: P0) -> ::core::option::Option<super::super::System::Com::IStream>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).v_GetViewStream)(::windows_core::Interface::as_raw(self), pidl, grfmode, pwszname.into_param().abi())
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ForwardViewMsg<P0, P1>(&self, umsg: u32, wparam: P0, lparam: P1) -> super::super::Foundation::LRESULT
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).ForwardViewMsg)(::windows_core::Interface::as_raw(self), umsg, wparam.into_param().abi(), lparam.into_param().abi())
    }
    #[doc = "*Required features: `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn SetAcceleratorMenu<P0>(&self, hacc: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::WindowsAndMessaging::HACCEL>,
    {
        (::windows_core::Interface::vtable(self).SetAcceleratorMenu)(::windows_core::Interface::as_raw(self), hacc.into_param().abi()).ok()
    }
    pub unsafe fn _GetToolbarCount(&self) -> i32 {
        (::windows_core::Interface::vtable(self)._GetToolbarCount)(::windows_core::Interface::as_raw(self))
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Ole"))]
    pub unsafe fn _GetToolbarItem(&self, itb: i32) -> *mut TOOLBARITEM {
        (::windows_core::Interface::vtable(self)._GetToolbarItem)(::windows_core::Interface::as_raw(self), itb)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn _SaveToolbars<P0>(&self, pstm: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
    {
        (::windows_core::Interface::vtable(self)._SaveToolbars)(::windows_core::Interface::as_raw(self), pstm.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn _LoadToolbars<P0>(&self, pstm: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
    {
        (::windows_core::Interface::vtable(self)._LoadToolbars)(::windows_core::Interface::as_raw(self), pstm.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _CloseAndReleaseToolbars<P0>(&self, fclose: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self)._CloseAndReleaseToolbars)(::windows_core::Interface::as_raw(self), fclose.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Ole", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn v_MayGetNextToolbarFocus(&self, lpmsg: *const super::WindowsAndMessaging::MSG, itbnext: u32, citb: i32, pptbi: *mut *mut TOOLBARITEM, phwnd: *mut super::super::Foundation::HWND) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).v_MayGetNextToolbarFocus)(::windows_core::Interface::as_raw(self), lpmsg, itbnext, citb, pptbi, phwnd).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _ResizeNextBorderHelper<P0>(&self, itb: u32, busehmonitor: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self)._ResizeNextBorderHelper)(::windows_core::Interface::as_raw(self), itb, busehmonitor.into_param().abi()).ok()
    }
    pub unsafe fn _FindTBar<P0>(&self, punksrc: P0) -> u32
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self)._FindTBar)(::windows_core::Interface::as_raw(self), punksrc.into_param().abi())
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Ole", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn _SetFocus<P0>(&self, ptbi: *const TOOLBARITEM, hwnd: P0, lpmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self)._SetFocus)(::windows_core::Interface::as_raw(self), ptbi, hwnd.into_param().abi(), lpmsg).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn v_MayTranslateAccelerator(&self, pmsg: *mut super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).v_MayTranslateAccelerator)(::windows_core::Interface::as_raw(self), pmsg).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _GetBorderDWHelper<P0, P1>(&self, punksrc: P0, lprectborder: *mut super::super::Foundation::RECT, busehmonitor: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self)._GetBorderDWHelper)(::windows_core::Interface::as_raw(self), punksrc.into_param().abi(), lprectborder, busehmonitor.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn v_CheckZoneCrossing(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).v_CheckZoneCrossing)(::windows_core::Interface::as_raw(self), pidl).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IBrowserService2, ::windows_core::IUnknown, IBrowserService);
impl ::core::cmp::PartialEq for IBrowserService2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IBrowserService2 {}
impl ::core::fmt::Debug for IBrowserService2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IBrowserService2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IBrowserService2 {
    type Vtable = IBrowserService2_Vtbl;
}
impl ::core::clone::Clone for IBrowserService2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBrowserService2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x68bd21cc_438b_11d2_a560_00a0c92dbfe8);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBrowserService2_Vtbl {
    pub base__: IBrowserService_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub WndProcBS: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> super::super::Foundation::LRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    WndProcBS: usize,
    pub SetAsDefFolderSettings: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetViewRect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prc: *mut super::super::Foundation::RECT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetViewRect: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub OnSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, wparam: super::super::Foundation::WPARAM) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    OnSize: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub OnCreate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcs: *const super::WindowsAndMessaging::CREATESTRUCTW) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))]
    OnCreate: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub OnCommand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> super::super::Foundation::LRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    OnCommand: usize,
    pub OnDestroy: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls"))]
    pub OnNotify: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pnm: *const super::Controls::NMHDR) -> super::super::Foundation::LRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls")))]
    OnNotify: usize,
    pub OnSetFocus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub OnFrameWindowActivateBS: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, factive: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    OnFrameWindowActivateBS: usize,
    pub ReleaseShellView: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub ActivatePendingView: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub CreateViewWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psvnew: *mut ::core::ffi::c_void, psvold: *mut ::core::ffi::c_void, prcview: *const super::super::Foundation::RECT, phwnd: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole")))]
    CreateViewWindow: usize,
    pub CreateBrowserPropSheetExt: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetViewWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phwndview: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetViewWindow: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub GetBaseBrowserData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbbd: *mut *mut BASEBROWSERDATALH) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common")))]
    GetBaseBrowserData: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub PutBaseBrowserData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> *mut BASEBROWSERDATALH,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common")))]
    PutBaseBrowserData: usize,
    pub InitializeTravelLog: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ptl: *mut ::core::ffi::c_void, dw: u32) -> ::windows_core::HRESULT,
    pub SetTopBrowser: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Offline: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, icmd: i32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub AllowViewResize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, f: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    AllowViewResize: usize,
    pub SetActivateState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, u: u32) -> ::windows_core::HRESULT,
    pub UpdateSecureLockIcon: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, esecurelock: i32) -> ::windows_core::HRESULT,
    pub InitializeDownloadManager: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub InitializeTransitionSite: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub _Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pauto: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    _Initialize: usize,
    pub _CancelPendingNavigationAsync: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub _CancelPendingView: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub _MaySaveChanges: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub _PauseOrResumeView: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fpaused: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    _PauseOrResumeView: usize,
    pub _DisableModeless: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub _NavigateToPidl2: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, grfhlnf: u32, dwflags: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    _NavigateToPidl2: usize,
    #[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub _TryShell2Rename: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psv: *mut ::core::ffi::c_void, pidlnew: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common")))]
    _TryShell2Rename: usize,
    pub _SwitchActivationNow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub _ExecChildren: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punkbar: *mut ::core::ffi::c_void, fbroadcast: super::super::Foundation::BOOL, pguidcmdgroup: *const ::windows_core::GUID, ncmdid: u32, ncmdexecopt: u32, pvarargin: *const super::super::System::Variant::VARIANT, pvarargout: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    _ExecChildren: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub _SendChildren: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwndbar: super::super::Foundation::HWND, fbroadcast: super::super::Foundation::BOOL, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    _SendChildren: usize,
    pub GetFolderSetData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfsd: *mut FOLDERSETDATA) -> ::windows_core::HRESULT,
    pub _OnFocusChange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, itb: u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub v_ShowHideChildWindows: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fchildonly: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    v_ShowHideChildWindows: usize,
    pub _get_itbLastFocus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> u32,
    pub _put_itbLastFocus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, itblastfocus: u32) -> ::windows_core::HRESULT,
    pub _UIActivateView: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ustate: u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub _GetViewBorderRect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prc: *mut super::super::Foundation::RECT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    _GetViewBorderRect: usize,
    pub _UpdateViewRectSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub _ResizeNextBorder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, itb: u32) -> ::windows_core::HRESULT,
    pub _ResizeView: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub _GetEffectiveClientArea: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lprectborder: *mut super::super::Foundation::RECT, hmon: super::super::Graphics::Gdi::HMONITOR) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi")))]
    _GetEffectiveClientArea: usize,
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
    pub v_GetViewStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *mut Common::ITEMIDLIST, grfmode: u32, pwszname: ::windows_core::PCWSTR) -> ::core::option::Option<super::super::System::Com::IStream>,
    #[cfg(not(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common")))]
    v_GetViewStream: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub ForwardViewMsg: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> super::super::Foundation::LRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ForwardViewMsg: usize,
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub SetAcceleratorMenu: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hacc: super::WindowsAndMessaging::HACCEL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_WindowsAndMessaging"))]
    SetAcceleratorMenu: usize,
    pub _GetToolbarCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> i32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Ole"))]
    pub _GetToolbarItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, itb: i32) -> *mut TOOLBARITEM,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Ole")))]
    _GetToolbarItem: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub _SaveToolbars: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pstm: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    _SaveToolbars: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub _LoadToolbars: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pstm: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    _LoadToolbars: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub _CloseAndReleaseToolbars: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fclose: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    _CloseAndReleaseToolbars: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Ole", feature = "Win32_UI_WindowsAndMessaging"))]
    pub v_MayGetNextToolbarFocus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lpmsg: *const super::WindowsAndMessaging::MSG, itbnext: u32, citb: i32, pptbi: *mut *mut TOOLBARITEM, phwnd: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Ole", feature = "Win32_UI_WindowsAndMessaging")))]
    v_MayGetNextToolbarFocus: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub _ResizeNextBorderHelper: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, itb: u32, busehmonitor: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    _ResizeNextBorderHelper: usize,
    pub _FindTBar: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punksrc: *mut ::core::ffi::c_void) -> u32,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Ole", feature = "Win32_UI_WindowsAndMessaging"))]
    pub _SetFocus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ptbi: *const TOOLBARITEM, hwnd: super::super::Foundation::HWND, lpmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Ole", feature = "Win32_UI_WindowsAndMessaging")))]
    _SetFocus: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub v_MayTranslateAccelerator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmsg: *mut super::WindowsAndMessaging::MSG) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))]
    v_MayTranslateAccelerator: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub _GetBorderDWHelper: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punksrc: *mut ::core::ffi::c_void, lprectborder: *mut super::super::Foundation::RECT, busehmonitor: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    _GetBorderDWHelper: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub v_CheckZoneCrossing: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    v_CheckZoneCrossing: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IBrowserService3(::windows_core::IUnknown);
impl IBrowserService3 {
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn GetParentSite(&self) -> ::windows_core::Result<super::super::System::Ole::IOleInPlaceSite> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetParentSite)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn SetTitle<P0, P1>(&self, psv: P0, pszname: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.SetTitle)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), pszname.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn GetTitle<P0>(&self, psv: P0, pszname: &mut [u16]) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.GetTitle)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), ::core::mem::transmute(pszname.as_ptr()), pszname.len() as _).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn GetOleObject(&self) -> ::windows_core::Result<super::super::System::Ole::IOleObject> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetOleObject)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTravelLog(&self) -> ::windows_core::Result<ITravelLog> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetTravelLog)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ShowControlWindow<P0>(&self, id: u32, fshow: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.ShowControlWindow)(::windows_core::Interface::as_raw(self), id, fshow.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsControlWindowShown(&self, id: u32) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.IsControlWindowShown)(::windows_core::Interface::as_raw(self), id, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn IEGetDisplayName(&self, pidl: *const Common::ITEMIDLIST, pwszname: ::windows_core::PWSTR, uflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.IEGetDisplayName)(::windows_core::Interface::as_raw(self), pidl, ::core::mem::transmute(pwszname), uflags).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn IEParseDisplayName<P0>(&self, uicp: u32, pwszpath: P0) -> ::windows_core::Result<*mut Common::ITEMIDLIST>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.IEParseDisplayName)(::windows_core::Interface::as_raw(self), uicp, pwszpath.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn DisplayParseError<P0>(&self, hres: ::windows_core::HRESULT, pwszpath: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.DisplayParseError)(::windows_core::Interface::as_raw(self), hres, pwszpath.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn NavigateToPidl(&self, pidl: *const Common::ITEMIDLIST, grfhlnf: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.NavigateToPidl)(::windows_core::Interface::as_raw(self), pidl, grfhlnf).ok()
    }
    pub unsafe fn SetNavigateState(&self, bnstate: BNSTATE) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.SetNavigateState)(::windows_core::Interface::as_raw(self), bnstate).ok()
    }
    pub unsafe fn GetNavigateState(&self) -> ::windows_core::Result<BNSTATE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetNavigateState)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn NotifyRedirect<P0>(&self, psv: P0, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<super::super::Foundation::BOOL>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.NotifyRedirect)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), pidl, &mut result__).from_abi(result__)
    }
    pub unsafe fn UpdateWindowList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.UpdateWindowList)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn UpdateBackForwardState(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.UpdateBackForwardState)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetFlags(&self, dwflags: u32, dwflagmask: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.SetFlags)(::windows_core::Interface::as_raw(self), dwflags, dwflagmask).ok()
    }
    pub unsafe fn GetFlags(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetFlags)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CanNavigateNow(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.CanNavigateNow)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetPidl(&self) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetPidl)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn SetReferrer(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.SetReferrer)(::windows_core::Interface::as_raw(self), pidl).ok()
    }
    pub unsafe fn GetBrowserIndex(&self) -> u32 {
        (::windows_core::Interface::vtable(self).base__.base__.GetBrowserIndex)(::windows_core::Interface::as_raw(self))
    }
    pub unsafe fn GetBrowserByIndex(&self, dwid: u32) -> ::windows_core::Result<::windows_core::IUnknown> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetBrowserByIndex)(::windows_core::Interface::as_raw(self), dwid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn GetHistoryObject(&self, ppole: *mut ::core::option::Option<super::super::System::Ole::IOleObject>, pstm: *mut ::core::option::Option<super::super::System::Com::IStream>, ppbc: *mut ::core::option::Option<super::super::System::Com::IBindCtx>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.GetHistoryObject)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(ppole), ::core::mem::transmute(pstm), ::core::mem::transmute(ppbc)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn SetHistoryObject<P0, P1>(&self, pole: P0, fislocalanchor: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Ole::IOleObject>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.SetHistoryObject)(::windows_core::Interface::as_raw(self), pole.into_param().abi(), fislocalanchor.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn CacheOLEServer<P0>(&self, pole: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Ole::IOleObject>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.CacheOLEServer)(::windows_core::Interface::as_raw(self), pole.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn GetSetCodePage(&self, pvarin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetSetCodePage)(::windows_core::Interface::as_raw(self), pvarin, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn OnHttpEquiv<P0, P1>(&self, psv: P0, fdone: P1, pvarargin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<IShellView>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.OnHttpEquiv)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), fdone.into_param().abi(), pvarargin, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetPalette(&self) -> ::windows_core::Result<super::super::Graphics::Gdi::HPALETTE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetPalette)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterWindow<P0>(&self, fforceregister: P0, swc: ShellWindowTypeConstants) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.RegisterWindow)(::windows_core::Interface::as_raw(self), fforceregister.into_param().abi(), swc).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn WndProcBS<P0, P1, P2>(&self, hwnd: P0, umsg: u32, wparam: P1, lparam: P2) -> super::super::Foundation::LRESULT
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P2: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).base__.WndProcBS)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), umsg, wparam.into_param().abi(), lparam.into_param().abi())
    }
    pub unsafe fn SetAsDefFolderSettings(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetAsDefFolderSettings)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetViewRect(&self) -> ::windows_core::Result<super::super::Foundation::RECT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetViewRect)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnSize<P0>(&self, wparam: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
    {
        (::windows_core::Interface::vtable(self).base__.OnSize)(::windows_core::Interface::as_raw(self), wparam.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn OnCreate(&self, pcs: *const super::WindowsAndMessaging::CREATESTRUCTW) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.OnCreate)(::windows_core::Interface::as_raw(self), pcs).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnCommand<P0, P1>(&self, wparam: P0, lparam: P1) -> super::super::Foundation::LRESULT
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).base__.OnCommand)(::windows_core::Interface::as_raw(self), wparam.into_param().abi(), lparam.into_param().abi())
    }
    pub unsafe fn OnDestroy(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.OnDestroy)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Controls\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls"))]
    pub unsafe fn OnNotify(&self, pnm: *const super::Controls::NMHDR) -> super::super::Foundation::LRESULT {
        (::windows_core::Interface::vtable(self).base__.OnNotify)(::windows_core::Interface::as_raw(self), pnm)
    }
    pub unsafe fn OnSetFocus(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.OnSetFocus)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnFrameWindowActivateBS<P0>(&self, factive: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.OnFrameWindowActivateBS)(::windows_core::Interface::as_raw(self), factive.into_param().abi()).ok()
    }
    pub unsafe fn ReleaseShellView(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.ReleaseShellView)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ActivatePendingView(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.ActivatePendingView)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn CreateViewWindow<P0, P1>(&self, psvnew: P0, psvold: P1, prcview: *const super::super::Foundation::RECT) -> ::windows_core::Result<super::super::Foundation::HWND>
    where
        P0: ::windows_core::IntoParam<IShellView>,
        P1: ::windows_core::IntoParam<IShellView>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.CreateViewWindow)(::windows_core::Interface::as_raw(self), psvnew.into_param().abi(), psvold.into_param().abi(), prcview, &mut result__).from_abi(result__)
    }
    pub unsafe fn CreateBrowserPropSheetExt(&self, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.CreateBrowserPropSheetExt)(::windows_core::Interface::as_raw(self), riid, ppv).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetViewWindow(&self) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetViewWindow)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn GetBaseBrowserData(&self) -> ::windows_core::Result<*mut BASEBROWSERDATALH> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetBaseBrowserData)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn PutBaseBrowserData(&self) -> *mut BASEBROWSERDATALH {
        (::windows_core::Interface::vtable(self).base__.PutBaseBrowserData)(::windows_core::Interface::as_raw(self))
    }
    pub unsafe fn InitializeTravelLog<P0>(&self, ptl: P0, dw: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ITravelLog>,
    {
        (::windows_core::Interface::vtable(self).base__.InitializeTravelLog)(::windows_core::Interface::as_raw(self), ptl.into_param().abi(), dw).ok()
    }
    pub unsafe fn SetTopBrowser(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetTopBrowser)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Offline(&self, icmd: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Offline)(::windows_core::Interface::as_raw(self), icmd).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AllowViewResize<P0>(&self, f: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.AllowViewResize)(::windows_core::Interface::as_raw(self), f.into_param().abi()).ok()
    }
    pub unsafe fn SetActivateState(&self, u: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetActivateState)(::windows_core::Interface::as_raw(self), u).ok()
    }
    pub unsafe fn UpdateSecureLockIcon(&self, esecurelock: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.UpdateSecureLockIcon)(::windows_core::Interface::as_raw(self), esecurelock).ok()
    }
    pub unsafe fn InitializeDownloadManager(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.InitializeDownloadManager)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn InitializeTransitionSite(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.InitializeTransitionSite)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _Initialize<P0, P1>(&self, hwnd: P0, pauto: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).base__._Initialize)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), pauto.into_param().abi()).ok()
    }
    pub unsafe fn _CancelPendingNavigationAsync(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__._CancelPendingNavigationAsync)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn _CancelPendingView(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__._CancelPendingView)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn _MaySaveChanges(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__._MaySaveChanges)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _PauseOrResumeView<P0>(&self, fpaused: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__._PauseOrResumeView)(::windows_core::Interface::as_raw(self), fpaused.into_param().abi()).ok()
    }
    pub unsafe fn _DisableModeless(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__._DisableModeless)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn _NavigateToPidl2(&self, pidl: *const Common::ITEMIDLIST, grfhlnf: u32, dwflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__._NavigateToPidl2)(::windows_core::Interface::as_raw(self), pidl, grfhlnf, dwflags).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn _TryShell2Rename<P0>(&self, psv: P0, pidlnew: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).base__._TryShell2Rename)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), pidlnew).ok()
    }
    pub unsafe fn _SwitchActivationNow(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__._SwitchActivationNow)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn _ExecChildren<P0, P1>(&self, punkbar: P0, fbroadcast: P1, pguidcmdgroup: ::core::option::Option<*const ::windows_core::GUID>, ncmdid: u32, ncmdexecopt: u32, pvarargin: ::core::option::Option<*const super::super::System::Variant::VARIANT>, pvarargout: ::core::option::Option<*mut super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__._ExecChildren)(::windows_core::Interface::as_raw(self), punkbar.into_param().abi(), fbroadcast.into_param().abi(), ::core::mem::transmute(pguidcmdgroup.unwrap_or(::std::ptr::null())), ncmdid, ncmdexecopt, ::core::mem::transmute(pvarargin.unwrap_or(::std::ptr::null())), ::core::mem::transmute(pvarargout.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _SendChildren<P0, P1, P2, P3>(&self, hwndbar: P0, fbroadcast: P1, umsg: u32, wparam: P2, lparam: P3) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
        P2: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P3: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).base__._SendChildren)(::windows_core::Interface::as_raw(self), hwndbar.into_param().abi(), fbroadcast.into_param().abi(), umsg, wparam.into_param().abi(), lparam.into_param().abi()).ok()
    }
    pub unsafe fn GetFolderSetData(&self, pfsd: *mut FOLDERSETDATA) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetFolderSetData)(::windows_core::Interface::as_raw(self), pfsd).ok()
    }
    pub unsafe fn _OnFocusChange(&self, itb: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__._OnFocusChange)(::windows_core::Interface::as_raw(self), itb).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn v_ShowHideChildWindows<P0>(&self, fchildonly: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.v_ShowHideChildWindows)(::windows_core::Interface::as_raw(self), fchildonly.into_param().abi()).ok()
    }
    pub unsafe fn _get_itbLastFocus(&self) -> u32 {
        (::windows_core::Interface::vtable(self).base__._get_itbLastFocus)(::windows_core::Interface::as_raw(self))
    }
    pub unsafe fn _put_itbLastFocus(&self, itblastfocus: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__._put_itbLastFocus)(::windows_core::Interface::as_raw(self), itblastfocus).ok()
    }
    pub unsafe fn _UIActivateView(&self, ustate: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__._UIActivateView)(::windows_core::Interface::as_raw(self), ustate).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _GetViewBorderRect(&self, prc: *mut super::super::Foundation::RECT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__._GetViewBorderRect)(::windows_core::Interface::as_raw(self), prc).ok()
    }
    pub unsafe fn _UpdateViewRectSize(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__._UpdateViewRectSize)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn _ResizeNextBorder(&self, itb: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__._ResizeNextBorder)(::windows_core::Interface::as_raw(self), itb).ok()
    }
    pub unsafe fn _ResizeView(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__._ResizeView)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn _GetEffectiveClientArea<P0>(&self, lprectborder: *mut super::super::Foundation::RECT, hmon: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Graphics::Gdi::HMONITOR>,
    {
        (::windows_core::Interface::vtable(self).base__._GetEffectiveClientArea)(::windows_core::Interface::as_raw(self), lprectborder, hmon.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn v_GetViewStream<P0>(&self, pidl: *mut Common::ITEMIDLIST, grfmode: u32, pwszname: P0) -> ::core::option::Option<super::super::System::Com::IStream>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.v_GetViewStream)(::windows_core::Interface::as_raw(self), pidl, grfmode, pwszname.into_param().abi())
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ForwardViewMsg<P0, P1>(&self, umsg: u32, wparam: P0, lparam: P1) -> super::super::Foundation::LRESULT
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).base__.ForwardViewMsg)(::windows_core::Interface::as_raw(self), umsg, wparam.into_param().abi(), lparam.into_param().abi())
    }
    #[doc = "*Required features: `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn SetAcceleratorMenu<P0>(&self, hacc: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::WindowsAndMessaging::HACCEL>,
    {
        (::windows_core::Interface::vtable(self).base__.SetAcceleratorMenu)(::windows_core::Interface::as_raw(self), hacc.into_param().abi()).ok()
    }
    pub unsafe fn _GetToolbarCount(&self) -> i32 {
        (::windows_core::Interface::vtable(self).base__._GetToolbarCount)(::windows_core::Interface::as_raw(self))
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Ole"))]
    pub unsafe fn _GetToolbarItem(&self, itb: i32) -> *mut TOOLBARITEM {
        (::windows_core::Interface::vtable(self).base__._GetToolbarItem)(::windows_core::Interface::as_raw(self), itb)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn _SaveToolbars<P0>(&self, pstm: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
    {
        (::windows_core::Interface::vtable(self).base__._SaveToolbars)(::windows_core::Interface::as_raw(self), pstm.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn _LoadToolbars<P0>(&self, pstm: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
    {
        (::windows_core::Interface::vtable(self).base__._LoadToolbars)(::windows_core::Interface::as_raw(self), pstm.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _CloseAndReleaseToolbars<P0>(&self, fclose: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__._CloseAndReleaseToolbars)(::windows_core::Interface::as_raw(self), fclose.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Ole", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn v_MayGetNextToolbarFocus(&self, lpmsg: *const super::WindowsAndMessaging::MSG, itbnext: u32, citb: i32, pptbi: *mut *mut TOOLBARITEM, phwnd: *mut super::super::Foundation::HWND) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.v_MayGetNextToolbarFocus)(::windows_core::Interface::as_raw(self), lpmsg, itbnext, citb, pptbi, phwnd).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _ResizeNextBorderHelper<P0>(&self, itb: u32, busehmonitor: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__._ResizeNextBorderHelper)(::windows_core::Interface::as_raw(self), itb, busehmonitor.into_param().abi()).ok()
    }
    pub unsafe fn _FindTBar<P0>(&self, punksrc: P0) -> u32
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).base__._FindTBar)(::windows_core::Interface::as_raw(self), punksrc.into_param().abi())
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Ole", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn _SetFocus<P0>(&self, ptbi: *const TOOLBARITEM, hwnd: P0, lpmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).base__._SetFocus)(::windows_core::Interface::as_raw(self), ptbi, hwnd.into_param().abi(), lpmsg).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn v_MayTranslateAccelerator(&self, pmsg: *mut super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.v_MayTranslateAccelerator)(::windows_core::Interface::as_raw(self), pmsg).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _GetBorderDWHelper<P0, P1>(&self, punksrc: P0, lprectborder: *mut super::super::Foundation::RECT, busehmonitor: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__._GetBorderDWHelper)(::windows_core::Interface::as_raw(self), punksrc.into_param().abi(), lprectborder, busehmonitor.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn v_CheckZoneCrossing(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.v_CheckZoneCrossing)(::windows_core::Interface::as_raw(self), pidl).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _PositionViewWindow<P0>(&self, hwnd: P0, prc: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self)._PositionViewWindow)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), prc).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn IEParseDisplayNameEx<P0>(&self, uicp: u32, pwszpath: P0, dwflags: u32) -> ::windows_core::Result<*mut Common::ITEMIDLIST>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IEParseDisplayNameEx)(::windows_core::Interface::as_raw(self), uicp, pwszpath.into_param().abi(), dwflags, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IBrowserService3, ::windows_core::IUnknown, IBrowserService, IBrowserService2);
impl ::core::cmp::PartialEq for IBrowserService3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IBrowserService3 {}
impl ::core::fmt::Debug for IBrowserService3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IBrowserService3").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IBrowserService3 {
    type Vtable = IBrowserService3_Vtbl;
}
impl ::core::clone::Clone for IBrowserService3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBrowserService3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x27d7ce21_762d_48f3_86f3_40e2fd3749c4);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBrowserService3_Vtbl {
    pub base__: IBrowserService2_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub _PositionViewWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, prc: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    _PositionViewWindow: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub IEParseDisplayNameEx: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, uicp: u32, pwszpath: ::windows_core::PCWSTR, dwflags: u32, ppidlout: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    IEParseDisplayNameEx: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IBrowserService4(::windows_core::IUnknown);
impl IBrowserService4 {
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn GetParentSite(&self) -> ::windows_core::Result<super::super::System::Ole::IOleInPlaceSite> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.GetParentSite)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn SetTitle<P0, P1>(&self, psv: P0, pszname: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.SetTitle)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), pszname.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn GetTitle<P0>(&self, psv: P0, pszname: &mut [u16]) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.GetTitle)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), ::core::mem::transmute(pszname.as_ptr()), pszname.len() as _).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn GetOleObject(&self) -> ::windows_core::Result<super::super::System::Ole::IOleObject> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.GetOleObject)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetTravelLog(&self) -> ::windows_core::Result<ITravelLog> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.GetTravelLog)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ShowControlWindow<P0>(&self, id: u32, fshow: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.ShowControlWindow)(::windows_core::Interface::as_raw(self), id, fshow.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsControlWindowShown(&self, id: u32) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.IsControlWindowShown)(::windows_core::Interface::as_raw(self), id, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn IEGetDisplayName(&self, pidl: *const Common::ITEMIDLIST, pwszname: ::windows_core::PWSTR, uflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.IEGetDisplayName)(::windows_core::Interface::as_raw(self), pidl, ::core::mem::transmute(pwszname), uflags).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn IEParseDisplayName<P0>(&self, uicp: u32, pwszpath: P0) -> ::windows_core::Result<*mut Common::ITEMIDLIST>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.IEParseDisplayName)(::windows_core::Interface::as_raw(self), uicp, pwszpath.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn DisplayParseError<P0>(&self, hres: ::windows_core::HRESULT, pwszpath: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.DisplayParseError)(::windows_core::Interface::as_raw(self), hres, pwszpath.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn NavigateToPidl(&self, pidl: *const Common::ITEMIDLIST, grfhlnf: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.NavigateToPidl)(::windows_core::Interface::as_raw(self), pidl, grfhlnf).ok()
    }
    pub unsafe fn SetNavigateState(&self, bnstate: BNSTATE) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.SetNavigateState)(::windows_core::Interface::as_raw(self), bnstate).ok()
    }
    pub unsafe fn GetNavigateState(&self) -> ::windows_core::Result<BNSTATE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.GetNavigateState)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn NotifyRedirect<P0>(&self, psv: P0, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<super::super::Foundation::BOOL>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.NotifyRedirect)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), pidl, &mut result__).from_abi(result__)
    }
    pub unsafe fn UpdateWindowList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.UpdateWindowList)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn UpdateBackForwardState(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.UpdateBackForwardState)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetFlags(&self, dwflags: u32, dwflagmask: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.SetFlags)(::windows_core::Interface::as_raw(self), dwflags, dwflagmask).ok()
    }
    pub unsafe fn GetFlags(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.GetFlags)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CanNavigateNow(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.CanNavigateNow)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetPidl(&self) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.GetPidl)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn SetReferrer(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.SetReferrer)(::windows_core::Interface::as_raw(self), pidl).ok()
    }
    pub unsafe fn GetBrowserIndex(&self) -> u32 {
        (::windows_core::Interface::vtable(self).base__.base__.base__.GetBrowserIndex)(::windows_core::Interface::as_raw(self))
    }
    pub unsafe fn GetBrowserByIndex(&self, dwid: u32) -> ::windows_core::Result<::windows_core::IUnknown> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.GetBrowserByIndex)(::windows_core::Interface::as_raw(self), dwid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn GetHistoryObject(&self, ppole: *mut ::core::option::Option<super::super::System::Ole::IOleObject>, pstm: *mut ::core::option::Option<super::super::System::Com::IStream>, ppbc: *mut ::core::option::Option<super::super::System::Com::IBindCtx>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.GetHistoryObject)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(ppole), ::core::mem::transmute(pstm), ::core::mem::transmute(ppbc)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn SetHistoryObject<P0, P1>(&self, pole: P0, fislocalanchor: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Ole::IOleObject>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.SetHistoryObject)(::windows_core::Interface::as_raw(self), pole.into_param().abi(), fislocalanchor.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn CacheOLEServer<P0>(&self, pole: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Ole::IOleObject>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.CacheOLEServer)(::windows_core::Interface::as_raw(self), pole.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn GetSetCodePage(&self, pvarin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.GetSetCodePage)(::windows_core::Interface::as_raw(self), pvarin, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn OnHttpEquiv<P0, P1>(&self, psv: P0, fdone: P1, pvarargin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<IShellView>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.OnHttpEquiv)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), fdone.into_param().abi(), pvarargin, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetPalette(&self) -> ::windows_core::Result<super::super::Graphics::Gdi::HPALETTE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.GetPalette)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RegisterWindow<P0>(&self, fforceregister: P0, swc: ShellWindowTypeConstants) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.RegisterWindow)(::windows_core::Interface::as_raw(self), fforceregister.into_param().abi(), swc).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn WndProcBS<P0, P1, P2>(&self, hwnd: P0, umsg: u32, wparam: P1, lparam: P2) -> super::super::Foundation::LRESULT
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P2: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.WndProcBS)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), umsg, wparam.into_param().abi(), lparam.into_param().abi())
    }
    pub unsafe fn SetAsDefFolderSettings(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.SetAsDefFolderSettings)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetViewRect(&self) -> ::windows_core::Result<super::super::Foundation::RECT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetViewRect)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnSize<P0>(&self, wparam: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.OnSize)(::windows_core::Interface::as_raw(self), wparam.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn OnCreate(&self, pcs: *const super::WindowsAndMessaging::CREATESTRUCTW) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.OnCreate)(::windows_core::Interface::as_raw(self), pcs).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnCommand<P0, P1>(&self, wparam: P0, lparam: P1) -> super::super::Foundation::LRESULT
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.OnCommand)(::windows_core::Interface::as_raw(self), wparam.into_param().abi(), lparam.into_param().abi())
    }
    pub unsafe fn OnDestroy(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.OnDestroy)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Controls\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls"))]
    pub unsafe fn OnNotify(&self, pnm: *const super::Controls::NMHDR) -> super::super::Foundation::LRESULT {
        (::windows_core::Interface::vtable(self).base__.base__.OnNotify)(::windows_core::Interface::as_raw(self), pnm)
    }
    pub unsafe fn OnSetFocus(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.OnSetFocus)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnFrameWindowActivateBS<P0>(&self, factive: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.OnFrameWindowActivateBS)(::windows_core::Interface::as_raw(self), factive.into_param().abi()).ok()
    }
    pub unsafe fn ReleaseShellView(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.ReleaseShellView)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ActivatePendingView(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.ActivatePendingView)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn CreateViewWindow<P0, P1>(&self, psvnew: P0, psvold: P1, prcview: *const super::super::Foundation::RECT) -> ::windows_core::Result<super::super::Foundation::HWND>
    where
        P0: ::windows_core::IntoParam<IShellView>,
        P1: ::windows_core::IntoParam<IShellView>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.CreateViewWindow)(::windows_core::Interface::as_raw(self), psvnew.into_param().abi(), psvold.into_param().abi(), prcview, &mut result__).from_abi(result__)
    }
    pub unsafe fn CreateBrowserPropSheetExt(&self, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.CreateBrowserPropSheetExt)(::windows_core::Interface::as_raw(self), riid, ppv).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetViewWindow(&self) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetViewWindow)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn GetBaseBrowserData(&self) -> ::windows_core::Result<*mut BASEBROWSERDATALH> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetBaseBrowserData)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn PutBaseBrowserData(&self) -> *mut BASEBROWSERDATALH {
        (::windows_core::Interface::vtable(self).base__.base__.PutBaseBrowserData)(::windows_core::Interface::as_raw(self))
    }
    pub unsafe fn InitializeTravelLog<P0>(&self, ptl: P0, dw: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ITravelLog>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.InitializeTravelLog)(::windows_core::Interface::as_raw(self), ptl.into_param().abi(), dw).ok()
    }
    pub unsafe fn SetTopBrowser(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.SetTopBrowser)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Offline(&self, icmd: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.Offline)(::windows_core::Interface::as_raw(self), icmd).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AllowViewResize<P0>(&self, f: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.AllowViewResize)(::windows_core::Interface::as_raw(self), f.into_param().abi()).ok()
    }
    pub unsafe fn SetActivateState(&self, u: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.SetActivateState)(::windows_core::Interface::as_raw(self), u).ok()
    }
    pub unsafe fn UpdateSecureLockIcon(&self, esecurelock: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.UpdateSecureLockIcon)(::windows_core::Interface::as_raw(self), esecurelock).ok()
    }
    pub unsafe fn InitializeDownloadManager(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.InitializeDownloadManager)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn InitializeTransitionSite(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.InitializeTransitionSite)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _Initialize<P0, P1>(&self, hwnd: P0, pauto: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).base__.base__._Initialize)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), pauto.into_param().abi()).ok()
    }
    pub unsafe fn _CancelPendingNavigationAsync(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__._CancelPendingNavigationAsync)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn _CancelPendingView(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__._CancelPendingView)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn _MaySaveChanges(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__._MaySaveChanges)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _PauseOrResumeView<P0>(&self, fpaused: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__._PauseOrResumeView)(::windows_core::Interface::as_raw(self), fpaused.into_param().abi()).ok()
    }
    pub unsafe fn _DisableModeless(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__._DisableModeless)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn _NavigateToPidl2(&self, pidl: *const Common::ITEMIDLIST, grfhlnf: u32, dwflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__._NavigateToPidl2)(::windows_core::Interface::as_raw(self), pidl, grfhlnf, dwflags).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn _TryShell2Rename<P0>(&self, psv: P0, pidlnew: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).base__.base__._TryShell2Rename)(::windows_core::Interface::as_raw(self), psv.into_param().abi(), pidlnew).ok()
    }
    pub unsafe fn _SwitchActivationNow(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__._SwitchActivationNow)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn _ExecChildren<P0, P1>(&self, punkbar: P0, fbroadcast: P1, pguidcmdgroup: ::core::option::Option<*const ::windows_core::GUID>, ncmdid: u32, ncmdexecopt: u32, pvarargin: ::core::option::Option<*const super::super::System::Variant::VARIANT>, pvarargout: ::core::option::Option<*mut super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__._ExecChildren)(::windows_core::Interface::as_raw(self), punkbar.into_param().abi(), fbroadcast.into_param().abi(), ::core::mem::transmute(pguidcmdgroup.unwrap_or(::std::ptr::null())), ncmdid, ncmdexecopt, ::core::mem::transmute(pvarargin.unwrap_or(::std::ptr::null())), ::core::mem::transmute(pvarargout.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _SendChildren<P0, P1, P2, P3>(&self, hwndbar: P0, fbroadcast: P1, umsg: u32, wparam: P2, lparam: P3) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
        P2: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P3: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).base__.base__._SendChildren)(::windows_core::Interface::as_raw(self), hwndbar.into_param().abi(), fbroadcast.into_param().abi(), umsg, wparam.into_param().abi(), lparam.into_param().abi()).ok()
    }
    pub unsafe fn GetFolderSetData(&self, pfsd: *mut FOLDERSETDATA) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.GetFolderSetData)(::windows_core::Interface::as_raw(self), pfsd).ok()
    }
    pub unsafe fn _OnFocusChange(&self, itb: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__._OnFocusChange)(::windows_core::Interface::as_raw(self), itb).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn v_ShowHideChildWindows<P0>(&self, fchildonly: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.v_ShowHideChildWindows)(::windows_core::Interface::as_raw(self), fchildonly.into_param().abi()).ok()
    }
    pub unsafe fn _get_itbLastFocus(&self) -> u32 {
        (::windows_core::Interface::vtable(self).base__.base__._get_itbLastFocus)(::windows_core::Interface::as_raw(self))
    }
    pub unsafe fn _put_itbLastFocus(&self, itblastfocus: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__._put_itbLastFocus)(::windows_core::Interface::as_raw(self), itblastfocus).ok()
    }
    pub unsafe fn _UIActivateView(&self, ustate: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__._UIActivateView)(::windows_core::Interface::as_raw(self), ustate).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _GetViewBorderRect(&self, prc: *mut super::super::Foundation::RECT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__._GetViewBorderRect)(::windows_core::Interface::as_raw(self), prc).ok()
    }
    pub unsafe fn _UpdateViewRectSize(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__._UpdateViewRectSize)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn _ResizeNextBorder(&self, itb: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__._ResizeNextBorder)(::windows_core::Interface::as_raw(self), itb).ok()
    }
    pub unsafe fn _ResizeView(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__._ResizeView)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn _GetEffectiveClientArea<P0>(&self, lprectborder: *mut super::super::Foundation::RECT, hmon: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Graphics::Gdi::HMONITOR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__._GetEffectiveClientArea)(::windows_core::Interface::as_raw(self), lprectborder, hmon.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn v_GetViewStream<P0>(&self, pidl: *mut Common::ITEMIDLIST, grfmode: u32, pwszname: P0) -> ::core::option::Option<super::super::System::Com::IStream>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.v_GetViewStream)(::windows_core::Interface::as_raw(self), pidl, grfmode, pwszname.into_param().abi())
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ForwardViewMsg<P0, P1>(&self, umsg: u32, wparam: P0, lparam: P1) -> super::super::Foundation::LRESULT
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.ForwardViewMsg)(::windows_core::Interface::as_raw(self), umsg, wparam.into_param().abi(), lparam.into_param().abi())
    }
    #[doc = "*Required features: `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn SetAcceleratorMenu<P0>(&self, hacc: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::WindowsAndMessaging::HACCEL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.SetAcceleratorMenu)(::windows_core::Interface::as_raw(self), hacc.into_param().abi()).ok()
    }
    pub unsafe fn _GetToolbarCount(&self) -> i32 {
        (::windows_core::Interface::vtable(self).base__.base__._GetToolbarCount)(::windows_core::Interface::as_raw(self))
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Ole"))]
    pub unsafe fn _GetToolbarItem(&self, itb: i32) -> *mut TOOLBARITEM {
        (::windows_core::Interface::vtable(self).base__.base__._GetToolbarItem)(::windows_core::Interface::as_raw(self), itb)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn _SaveToolbars<P0>(&self, pstm: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
    {
        (::windows_core::Interface::vtable(self).base__.base__._SaveToolbars)(::windows_core::Interface::as_raw(self), pstm.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn _LoadToolbars<P0>(&self, pstm: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
    {
        (::windows_core::Interface::vtable(self).base__.base__._LoadToolbars)(::windows_core::Interface::as_raw(self), pstm.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _CloseAndReleaseToolbars<P0>(&self, fclose: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__._CloseAndReleaseToolbars)(::windows_core::Interface::as_raw(self), fclose.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Ole", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn v_MayGetNextToolbarFocus(&self, lpmsg: *const super::WindowsAndMessaging::MSG, itbnext: u32, citb: i32, pptbi: *mut *mut TOOLBARITEM, phwnd: *mut super::super::Foundation::HWND) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.v_MayGetNextToolbarFocus)(::windows_core::Interface::as_raw(self), lpmsg, itbnext, citb, pptbi, phwnd).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _ResizeNextBorderHelper<P0>(&self, itb: u32, busehmonitor: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__._ResizeNextBorderHelper)(::windows_core::Interface::as_raw(self), itb, busehmonitor.into_param().abi()).ok()
    }
    pub unsafe fn _FindTBar<P0>(&self, punksrc: P0) -> u32
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).base__.base__._FindTBar)(::windows_core::Interface::as_raw(self), punksrc.into_param().abi())
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Ole", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn _SetFocus<P0>(&self, ptbi: *const TOOLBARITEM, hwnd: P0, lpmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).base__.base__._SetFocus)(::windows_core::Interface::as_raw(self), ptbi, hwnd.into_param().abi(), lpmsg).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn v_MayTranslateAccelerator(&self, pmsg: *mut super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.v_MayTranslateAccelerator)(::windows_core::Interface::as_raw(self), pmsg).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _GetBorderDWHelper<P0, P1>(&self, punksrc: P0, lprectborder: *mut super::super::Foundation::RECT, busehmonitor: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__._GetBorderDWHelper)(::windows_core::Interface::as_raw(self), punksrc.into_param().abi(), lprectborder, busehmonitor.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn v_CheckZoneCrossing(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.v_CheckZoneCrossing)(::windows_core::Interface::as_raw(self), pidl).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn _PositionViewWindow<P0>(&self, hwnd: P0, prc: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).base__._PositionViewWindow)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), prc).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn IEParseDisplayNameEx<P0>(&self, uicp: u32, pwszpath: P0, dwflags: u32) -> ::windows_core::Result<*mut Common::ITEMIDLIST>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.IEParseDisplayNameEx)(::windows_core::Interface::as_raw(self), uicp, pwszpath.into_param().abi(), dwflags, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ActivateView<P0>(&self, fpendingview: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).ActivateView)(::windows_core::Interface::as_raw(self), fpendingview.into_param().abi()).ok()
    }
    pub unsafe fn SaveViewState(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SaveViewState)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn _ResizeAllBorders(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self)._ResizeAllBorders)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IBrowserService4, ::windows_core::IUnknown, IBrowserService, IBrowserService2, IBrowserService3);
impl ::core::cmp::PartialEq for IBrowserService4 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IBrowserService4 {}
impl ::core::fmt::Debug for IBrowserService4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IBrowserService4").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IBrowserService4 {
    type Vtable = IBrowserService4_Vtbl;
}
impl ::core::clone::Clone for IBrowserService4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IBrowserService4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x639f1bff_e135_4096_abd8_e0f504d649a4);
}
#[repr(C)]
#[doc(hidden)]
pub struct IBrowserService4_Vtbl {
    pub base__: IBrowserService3_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub ActivateView: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fpendingview: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ActivateView: usize,
    pub SaveViewState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub _ResizeAllBorders: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICDBurn(::windows_core::IUnknown);
impl ICDBurn {
    pub unsafe fn GetRecorderDriveLetter(&self, pszdrive: &mut [u16]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetRecorderDriveLetter)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszdrive.as_ptr()), pszdrive.len() as _).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Burn<P0>(&self, hwnd: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).Burn)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn HasRecordableDrive(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).HasRecordableDrive)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ICDBurn, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICDBurn {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICDBurn {}
impl ::core::fmt::Debug for ICDBurn {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICDBurn").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICDBurn {
    type Vtable = ICDBurn_Vtbl;
}
impl ::core::clone::Clone for ICDBurn {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICDBurn {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x3d73a659_e5d0_4d42_afc0_5121ba425c8d);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICDBurn_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetRecorderDriveLetter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszdrive: ::windows_core::PWSTR, cch: u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub Burn: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Burn: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub HasRecordableDrive: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfhasrecorder: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    HasRecordableDrive: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICDBurnExt(::windows_core::IUnknown);
impl ICDBurnExt {
    pub unsafe fn GetSupportedActionTypes(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSupportedActionTypes)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ICDBurnExt, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICDBurnExt {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICDBurnExt {}
impl ::core::fmt::Debug for ICDBurnExt {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICDBurnExt").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICDBurnExt {
    type Vtable = ICDBurnExt_Vtbl;
}
impl ::core::clone::Clone for ICDBurnExt {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICDBurnExt {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x2271dcca_74fc_4414_8fb7_c56b05ace2d7);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICDBurnExt_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetSupportedActionTypes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwactions: *mut u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICategorizer(::windows_core::IUnknown);
impl ICategorizer {
    pub unsafe fn GetDescription(&self, pszdesc: &mut [u16]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetDescription)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszdesc.as_ptr()), pszdesc.len() as _).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetCategory(&self, cidl: u32, apidl: *const *const Common::ITEMIDLIST, rgcategoryids: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetCategory)(::windows_core::Interface::as_raw(self), cidl, apidl, rgcategoryids).ok()
    }
    pub unsafe fn GetCategoryInfo(&self, dwcategoryid: u32, pci: *mut CATEGORY_INFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetCategoryInfo)(::windows_core::Interface::as_raw(self), dwcategoryid, pci).ok()
    }
    pub unsafe fn CompareCategory(&self, csfflags: CATSORT_FLAGS, dwcategoryid1: u32, dwcategoryid2: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).CompareCategory)(::windows_core::Interface::as_raw(self), csfflags, dwcategoryid1, dwcategoryid2).ok()
    }
}
::windows_core::imp::interface_hierarchy!(ICategorizer, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICategorizer {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICategorizer {}
impl ::core::fmt::Debug for ICategorizer {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICategorizer").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICategorizer {
    type Vtable = ICategorizer_Vtbl;
}
impl ::core::clone::Clone for ICategorizer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICategorizer {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xa3b14589_9174_49a8_89a3_06a1ae2b9ba7);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICategorizer_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetDescription: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszdesc: ::windows_core::PWSTR, cch: u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetCategory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, cidl: u32, apidl: *const *const Common::ITEMIDLIST, rgcategoryids: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetCategory: usize,
    pub GetCategoryInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwcategoryid: u32, pci: *mut CATEGORY_INFO) -> ::windows_core::HRESULT,
    pub CompareCategory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, csfflags: CATSORT_FLAGS, dwcategoryid1: u32, dwcategoryid2: u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICategoryProvider(::windows_core::IUnknown);
impl ICategoryProvider {
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn CanCategorizeOnSCID(&self, pscid: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).CanCategorizeOnSCID)(::windows_core::Interface::as_raw(self), pscid).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetDefaultCategory(&self, pguid: *mut ::windows_core::GUID, pscid: *mut PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetDefaultCategory)(::windows_core::Interface::as_raw(self), pguid, pscid).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetCategoryForSCID(&self, pscid: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<::windows_core::GUID> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCategoryForSCID)(::windows_core::Interface::as_raw(self), pscid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EnumCategories(&self) -> ::windows_core::Result<super::super::System::Com::IEnumGUID> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).EnumCategories)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCategoryName(&self, pguid: *const ::windows_core::GUID, pszname: &mut [u16]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetCategoryName)(::windows_core::Interface::as_raw(self), pguid, ::core::mem::transmute(pszname.as_ptr()), pszname.len() as _).ok()
    }
    pub unsafe fn CreateCategory<T>(&self, pguid: *const ::windows_core::GUID) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).CreateCategory)(::windows_core::Interface::as_raw(self), pguid, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ICategoryProvider, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICategoryProvider {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICategoryProvider {}
impl ::core::fmt::Debug for ICategoryProvider {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICategoryProvider").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICategoryProvider {
    type Vtable = ICategoryProvider_Vtbl;
}
impl ::core::clone::Clone for ICategoryProvider {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICategoryProvider {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x9af64809_5864_4c26_a720_c1f78c086ee3);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICategoryProvider_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub CanCategorizeOnSCID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pscid: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    CanCategorizeOnSCID: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetDefaultCategory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pguid: *mut ::windows_core::GUID, pscid: *mut PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetDefaultCategory: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetCategoryForSCID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pscid: *const PropertiesSystem::PROPERTYKEY, pguid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetCategoryForSCID: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub EnumCategories: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, penum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    EnumCategories: usize,
    pub GetCategoryName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pguid: *const ::windows_core::GUID, pszname: ::windows_core::PWSTR, cch: u32) -> ::windows_core::HRESULT,
    pub CreateCategory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pguid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IColumnManager(::windows_core::IUnknown);
impl IColumnManager {
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn SetColumnInfo(&self, propkey: *const PropertiesSystem::PROPERTYKEY, pcmci: *const CM_COLUMNINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetColumnInfo)(::windows_core::Interface::as_raw(self), propkey, pcmci).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetColumnInfo(&self, propkey: *const PropertiesSystem::PROPERTYKEY, pcmci: *mut CM_COLUMNINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetColumnInfo)(::windows_core::Interface::as_raw(self), propkey, pcmci).ok()
    }
    pub unsafe fn GetColumnCount(&self, dwflags: CM_ENUM_FLAGS) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetColumnCount)(::windows_core::Interface::as_raw(self), dwflags, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetColumns(&self, dwflags: CM_ENUM_FLAGS, rgkeyorder: &mut [PropertiesSystem::PROPERTYKEY]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetColumns)(::windows_core::Interface::as_raw(self), dwflags, ::core::mem::transmute(rgkeyorder.as_ptr()), rgkeyorder.len() as _).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn SetColumns(&self, rgkeyorder: &[PropertiesSystem::PROPERTYKEY]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetColumns)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(rgkeyorder.as_ptr()), rgkeyorder.len() as _).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IColumnManager, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IColumnManager {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IColumnManager {}
impl ::core::fmt::Debug for IColumnManager {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IColumnManager").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IColumnManager {
    type Vtable = IColumnManager_Vtbl;
}
impl ::core::clone::Clone for IColumnManager {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IColumnManager {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xd8ec27bb_3f3b_4042_b10a_4acfd924d453);
}
#[repr(C)]
#[doc(hidden)]
pub struct IColumnManager_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub SetColumnInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, propkey: *const PropertiesSystem::PROPERTYKEY, pcmci: *const CM_COLUMNINFO) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    SetColumnInfo: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetColumnInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, propkey: *const PropertiesSystem::PROPERTYKEY, pcmci: *mut CM_COLUMNINFO) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetColumnInfo: usize,
    pub GetColumnCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: CM_ENUM_FLAGS, pucount: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetColumns: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: CM_ENUM_FLAGS, rgkeyorder: *mut PropertiesSystem::PROPERTYKEY, ccolumns: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetColumns: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub SetColumns: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rgkeyorder: *const PropertiesSystem::PROPERTYKEY, cvisible: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    SetColumns: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IColumnProvider(::windows_core::IUnknown);
impl IColumnProvider {
    pub unsafe fn Initialize(&self, psci: *const SHCOLUMNINIT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), psci).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(all(feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub unsafe fn GetColumnInfo(&self, dwindex: u32, psci: *mut SHCOLUMNINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetColumnInfo)(::windows_core::Interface::as_raw(self), dwindex, psci).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub unsafe fn GetItemData(&self, pscid: *const PropertiesSystem::PROPERTYKEY, pscd: *const SHCOLUMNDATA) -> ::windows_core::Result<super::super::System::Variant::VARIANT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetItemData)(::windows_core::Interface::as_raw(self), pscid, pscd, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IColumnProvider, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IColumnProvider {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IColumnProvider {}
impl ::core::fmt::Debug for IColumnProvider {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IColumnProvider").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IColumnProvider {
    type Vtable = IColumnProvider_Vtbl;
}
impl ::core::clone::Clone for IColumnProvider {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IColumnProvider {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xe8025004_1c42_11d2_be2c_00a0c9a83da1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IColumnProvider_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psci: *const SHCOLUMNINIT) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub GetColumnInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, psci: *mut SHCOLUMNINFO) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem")))]
    GetColumnInfo: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub GetItemData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pscid: *const PropertiesSystem::PROPERTYKEY, pscd: *const SHCOLUMNDATA, pvardata: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem")))]
    GetItemData: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICommDlgBrowser(::windows_core::IUnknown);
impl ICommDlgBrowser {
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn OnDefaultCommand<P0>(&self, ppshv: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).OnDefaultCommand)(::windows_core::Interface::as_raw(self), ppshv.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn OnStateChange<P0>(&self, ppshv: P0, uchange: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).OnStateChange)(::windows_core::Interface::as_raw(self), ppshv.into_param().abi(), uchange).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn IncludeObject<P0>(&self, ppshv: P0, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).IncludeObject)(::windows_core::Interface::as_raw(self), ppshv.into_param().abi(), pidl).ok()
    }
}
::windows_core::imp::interface_hierarchy!(ICommDlgBrowser, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICommDlgBrowser {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICommDlgBrowser {}
impl ::core::fmt::Debug for ICommDlgBrowser {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICommDlgBrowser").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICommDlgBrowser {
    type Vtable = ICommDlgBrowser_Vtbl;
}
impl ::core::clone::Clone for ICommDlgBrowser {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICommDlgBrowser {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214f1_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommDlgBrowser_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Ole")]
    pub OnDefaultCommand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppshv: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    OnDefaultCommand: usize,
    #[cfg(feature = "Win32_System_Ole")]
    pub OnStateChange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppshv: *mut ::core::ffi::c_void, uchange: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    OnStateChange: usize,
    #[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub IncludeObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppshv: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common")))]
    IncludeObject: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICommDlgBrowser2(::windows_core::IUnknown);
impl ICommDlgBrowser2 {
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn OnDefaultCommand<P0>(&self, ppshv: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).base__.OnDefaultCommand)(::windows_core::Interface::as_raw(self), ppshv.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn OnStateChange<P0>(&self, ppshv: P0, uchange: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).base__.OnStateChange)(::windows_core::Interface::as_raw(self), ppshv.into_param().abi(), uchange).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn IncludeObject<P0>(&self, ppshv: P0, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).base__.IncludeObject)(::windows_core::Interface::as_raw(self), ppshv.into_param().abi(), pidl).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn Notify<P0>(&self, ppshv: P0, dwnotifytype: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).Notify)(::windows_core::Interface::as_raw(self), ppshv.into_param().abi(), dwnotifytype).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn GetDefaultMenuText<P0>(&self, ppshv: P0, psztext: &mut [u16]) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).GetDefaultMenuText)(::windows_core::Interface::as_raw(self), ppshv.into_param().abi(), ::core::mem::transmute(psztext.as_ptr()), psztext.len() as _).ok()
    }
    pub unsafe fn GetViewFlags(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetViewFlags)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ICommDlgBrowser2, ::windows_core::IUnknown, ICommDlgBrowser);
impl ::core::cmp::PartialEq for ICommDlgBrowser2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICommDlgBrowser2 {}
impl ::core::fmt::Debug for ICommDlgBrowser2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICommDlgBrowser2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICommDlgBrowser2 {
    type Vtable = ICommDlgBrowser2_Vtbl;
}
impl ::core::clone::Clone for ICommDlgBrowser2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICommDlgBrowser2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x10339516_2894_11d2_9039_00c04f8eeb3e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommDlgBrowser2_Vtbl {
    pub base__: ICommDlgBrowser_Vtbl,
    #[cfg(feature = "Win32_System_Ole")]
    pub Notify: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppshv: *mut ::core::ffi::c_void, dwnotifytype: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    Notify: usize,
    #[cfg(feature = "Win32_System_Ole")]
    pub GetDefaultMenuText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppshv: *mut ::core::ffi::c_void, psztext: ::windows_core::PWSTR, cchmax: i32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    GetDefaultMenuText: usize,
    pub GetViewFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICommDlgBrowser3(::windows_core::IUnknown);
impl ICommDlgBrowser3 {
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn OnDefaultCommand<P0>(&self, ppshv: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.OnDefaultCommand)(::windows_core::Interface::as_raw(self), ppshv.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn OnStateChange<P0>(&self, ppshv: P0, uchange: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.OnStateChange)(::windows_core::Interface::as_raw(self), ppshv.into_param().abi(), uchange).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn IncludeObject<P0>(&self, ppshv: P0, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.IncludeObject)(::windows_core::Interface::as_raw(self), ppshv.into_param().abi(), pidl).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn Notify<P0>(&self, ppshv: P0, dwnotifytype: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).base__.Notify)(::windows_core::Interface::as_raw(self), ppshv.into_param().abi(), dwnotifytype).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn GetDefaultMenuText<P0>(&self, ppshv: P0, psztext: &mut [u16]) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).base__.GetDefaultMenuText)(::windows_core::Interface::as_raw(self), ppshv.into_param().abi(), ::core::mem::transmute(psztext.as_ptr()), psztext.len() as _).ok()
    }
    pub unsafe fn GetViewFlags(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetViewFlags)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn OnColumnClicked<P0>(&self, ppshv: P0, icolumn: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).OnColumnClicked)(::windows_core::Interface::as_raw(self), ppshv.into_param().abi(), icolumn).ok()
    }
    pub unsafe fn GetCurrentFilter(&self, pszfilespec: &mut [u16]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetCurrentFilter)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszfilespec.as_ptr()), pszfilespec.len() as _).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn OnPreViewCreated<P0>(&self, ppshv: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).OnPreViewCreated)(::windows_core::Interface::as_raw(self), ppshv.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(ICommDlgBrowser3, ::windows_core::IUnknown, ICommDlgBrowser, ICommDlgBrowser2);
impl ::core::cmp::PartialEq for ICommDlgBrowser3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICommDlgBrowser3 {}
impl ::core::fmt::Debug for ICommDlgBrowser3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICommDlgBrowser3").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICommDlgBrowser3 {
    type Vtable = ICommDlgBrowser3_Vtbl;
}
impl ::core::clone::Clone for ICommDlgBrowser3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICommDlgBrowser3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xc8ad25a1_3294_41ee_8165_71174bd01c57);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICommDlgBrowser3_Vtbl {
    pub base__: ICommDlgBrowser2_Vtbl,
    #[cfg(feature = "Win32_System_Ole")]
    pub OnColumnClicked: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppshv: *mut ::core::ffi::c_void, icolumn: i32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    OnColumnClicked: usize,
    pub GetCurrentFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszfilespec: ::windows_core::PWSTR, cchfilespec: i32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Ole")]
    pub OnPreViewCreated: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppshv: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    OnPreViewCreated: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IComputerInfoChangeNotify(::windows_core::IUnknown);
impl IComputerInfoChangeNotify {
    pub unsafe fn ComputerInfoChanged(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ComputerInfoChanged)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IComputerInfoChangeNotify, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IComputerInfoChangeNotify {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IComputerInfoChangeNotify {}
impl ::core::fmt::Debug for IComputerInfoChangeNotify {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IComputerInfoChangeNotify").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IComputerInfoChangeNotify {
    type Vtable = IComputerInfoChangeNotify_Vtbl;
}
impl ::core::clone::Clone for IComputerInfoChangeNotify {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IComputerInfoChangeNotify {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x0df60d92_6818_46d6_b358_d66170dde466);
}
#[repr(C)]
#[doc(hidden)]
pub struct IComputerInfoChangeNotify_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub ComputerInfoChanged: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IConnectableCredentialProviderCredential(::windows_core::IUnknown);
impl IConnectableCredentialProviderCredential {
    pub unsafe fn Advise<P0>(&self, pcpce: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredentialEvents>,
    {
        (::windows_core::Interface::vtable(self).base__.Advise)(::windows_core::Interface::as_raw(self), pcpce.into_param().abi()).ok()
    }
    pub unsafe fn UnAdvise(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.UnAdvise)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetSelected(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.SetSelected)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDeselected(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetDeselected)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetFieldState(&self, dwfieldid: u32, pcpfs: *mut CREDENTIAL_PROVIDER_FIELD_STATE, pcpfis: *mut CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetFieldState)(::windows_core::Interface::as_raw(self), dwfieldid, pcpfs, pcpfis).ok()
    }
    pub unsafe fn GetStringValue(&self, dwfieldid: u32) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetStringValue)(::windows_core::Interface::as_raw(self), dwfieldid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetBitmapValue(&self, dwfieldid: u32) -> ::windows_core::Result<super::super::Graphics::Gdi::HBITMAP> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetBitmapValue)(::windows_core::Interface::as_raw(self), dwfieldid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetCheckboxValue(&self, dwfieldid: u32, pbchecked: *mut super::super::Foundation::BOOL, ppszlabel: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetCheckboxValue)(::windows_core::Interface::as_raw(self), dwfieldid, pbchecked, ppszlabel).ok()
    }
    pub unsafe fn GetSubmitButtonValue(&self, dwfieldid: u32) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetSubmitButtonValue)(::windows_core::Interface::as_raw(self), dwfieldid, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetComboBoxValueCount(&self, dwfieldid: u32, pcitems: *mut u32, pdwselecteditem: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetComboBoxValueCount)(::windows_core::Interface::as_raw(self), dwfieldid, pcitems, pdwselecteditem).ok()
    }
    pub unsafe fn GetComboBoxValueAt(&self, dwfieldid: u32, dwitem: u32) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetComboBoxValueAt)(::windows_core::Interface::as_raw(self), dwfieldid, dwitem, &mut result__).from_abi(result__)
    }
    pub unsafe fn SetStringValue<P0>(&self, dwfieldid: u32, psz: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetStringValue)(::windows_core::Interface::as_raw(self), dwfieldid, psz.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetCheckboxValue<P0>(&self, dwfieldid: u32, bchecked: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.SetCheckboxValue)(::windows_core::Interface::as_raw(self), dwfieldid, bchecked.into_param().abi()).ok()
    }
    pub unsafe fn SetComboBoxSelectedValue(&self, dwfieldid: u32, dwselecteditem: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetComboBoxSelectedValue)(::windows_core::Interface::as_raw(self), dwfieldid, dwselecteditem).ok()
    }
    pub unsafe fn CommandLinkClicked(&self, dwfieldid: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.CommandLinkClicked)(::windows_core::Interface::as_raw(self), dwfieldid).ok()
    }
    pub unsafe fn GetSerialization(&self, pcpgsr: *mut CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE, pcpcs: *mut CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, ppszoptionalstatustext: *mut ::windows_core::PWSTR, pcpsioptionalstatusicon: *mut CREDENTIAL_PROVIDER_STATUS_ICON) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetSerialization)(::windows_core::Interface::as_raw(self), pcpgsr, pcpcs, ppszoptionalstatustext, pcpsioptionalstatusicon).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ReportResult<P0, P1>(&self, ntsstatus: P0, ntssubstatus: P1, ppszoptionalstatustext: *mut ::windows_core::PWSTR, pcpsioptionalstatusicon: *mut CREDENTIAL_PROVIDER_STATUS_ICON) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::NTSTATUS>,
        P1: ::windows_core::IntoParam<super::super::Foundation::NTSTATUS>,
    {
        (::windows_core::Interface::vtable(self).base__.ReportResult)(::windows_core::Interface::as_raw(self), ntsstatus.into_param().abi(), ntssubstatus.into_param().abi(), ppszoptionalstatustext, pcpsioptionalstatusicon).ok()
    }
    pub unsafe fn Connect<P0>(&self, pqcws: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IQueryContinueWithStatus>,
    {
        (::windows_core::Interface::vtable(self).Connect)(::windows_core::Interface::as_raw(self), pqcws.into_param().abi()).ok()
    }
    pub unsafe fn Disconnect(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Disconnect)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IConnectableCredentialProviderCredential, ::windows_core::IUnknown, ICredentialProviderCredential);
impl ::core::cmp::PartialEq for IConnectableCredentialProviderCredential {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IConnectableCredentialProviderCredential {}
impl ::core::fmt::Debug for IConnectableCredentialProviderCredential {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IConnectableCredentialProviderCredential").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IConnectableCredentialProviderCredential {
    type Vtable = IConnectableCredentialProviderCredential_Vtbl;
}
impl ::core::clone::Clone for IConnectableCredentialProviderCredential {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IConnectableCredentialProviderCredential {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x9387928b_ac75_4bf9_8ab2_2b93c4a55290);
}
#[repr(C)]
#[doc(hidden)]
pub struct IConnectableCredentialProviderCredential_Vtbl {
    pub base__: ICredentialProviderCredential_Vtbl,
    pub Connect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pqcws: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Disconnect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IContactManagerInterop(::windows_core::IUnknown);
impl IContactManagerInterop {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ShowContactCardForWindow<P0, P1>(&self, appwindow: P0, contact: P1, selection: *const super::super::Foundation::RECT, preferredplacement: FLYOUT_PLACEMENT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).ShowContactCardForWindow)(::windows_core::Interface::as_raw(self), appwindow.into_param().abi(), contact.into_param().abi(), selection, preferredplacement).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IContactManagerInterop, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IContactManagerInterop {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IContactManagerInterop {}
impl ::core::fmt::Debug for IContactManagerInterop {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IContactManagerInterop").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IContactManagerInterop {
    type Vtable = IContactManagerInterop_Vtbl;
}
impl ::core::clone::Clone for IContactManagerInterop {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContactManagerInterop {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x99eacba7_e073_43b6_a896_55afe48a0833);
}
#[repr(C)]
#[doc(hidden)]
pub struct IContactManagerInterop_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub ShowContactCardForWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, appwindow: super::super::Foundation::HWND, contact: *mut ::core::ffi::c_void, selection: *const super::super::Foundation::RECT, preferredplacement: FLYOUT_PLACEMENT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ShowContactCardForWindow: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IContextMenu(::windows_core::IUnknown);
impl IContextMenu {
    #[doc = "*Required features: `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn QueryContextMenu<P0>(&self, hmenu: P0, indexmenu: u32, idcmdfirst: u32, idcmdlast: u32, uflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::WindowsAndMessaging::HMENU>,
    {
        (::windows_core::Interface::vtable(self).QueryContextMenu)(::windows_core::Interface::as_raw(self), hmenu.into_param().abi(), indexmenu, idcmdfirst, idcmdlast, uflags).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn InvokeCommand(&self, pici: *const CMINVOKECOMMANDINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).InvokeCommand)(::windows_core::Interface::as_raw(self), pici).ok()
    }
    pub unsafe fn GetCommandString(&self, idcmd: usize, utype: u32, preserved: ::core::option::Option<*const u32>, pszname: ::windows_core::PSTR, cchmax: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetCommandString)(::windows_core::Interface::as_raw(self), idcmd, utype, ::core::mem::transmute(preserved.unwrap_or(::std::ptr::null())), ::core::mem::transmute(pszname), cchmax).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IContextMenu, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IContextMenu {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IContextMenu {}
impl ::core::fmt::Debug for IContextMenu {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IContextMenu").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IContextMenu {
    type Vtable = IContextMenu_Vtbl;
}
impl ::core::clone::Clone for IContextMenu {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContextMenu {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214e4_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct IContextMenu_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub QueryContextMenu: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hmenu: super::WindowsAndMessaging::HMENU, indexmenu: u32, idcmdfirst: u32, idcmdlast: u32, uflags: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_WindowsAndMessaging"))]
    QueryContextMenu: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub InvokeCommand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pici: *const CMINVOKECOMMANDINFO) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    InvokeCommand: usize,
    pub GetCommandString: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, idcmd: usize, utype: u32, preserved: *const u32, pszname: ::windows_core::PSTR, cchmax: u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IContextMenu2(::windows_core::IUnknown);
impl IContextMenu2 {
    #[doc = "*Required features: `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn QueryContextMenu<P0>(&self, hmenu: P0, indexmenu: u32, idcmdfirst: u32, idcmdlast: u32, uflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::WindowsAndMessaging::HMENU>,
    {
        (::windows_core::Interface::vtable(self).base__.QueryContextMenu)(::windows_core::Interface::as_raw(self), hmenu.into_param().abi(), indexmenu, idcmdfirst, idcmdlast, uflags).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn InvokeCommand(&self, pici: *const CMINVOKECOMMANDINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.InvokeCommand)(::windows_core::Interface::as_raw(self), pici).ok()
    }
    pub unsafe fn GetCommandString(&self, idcmd: usize, utype: u32, preserved: ::core::option::Option<*const u32>, pszname: ::windows_core::PSTR, cchmax: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetCommandString)(::windows_core::Interface::as_raw(self), idcmd, utype, ::core::mem::transmute(preserved.unwrap_or(::std::ptr::null())), ::core::mem::transmute(pszname), cchmax).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn HandleMenuMsg<P0, P1>(&self, umsg: u32, wparam: P0, lparam: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).HandleMenuMsg)(::windows_core::Interface::as_raw(self), umsg, wparam.into_param().abi(), lparam.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IContextMenu2, ::windows_core::IUnknown, IContextMenu);
impl ::core::cmp::PartialEq for IContextMenu2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IContextMenu2 {}
impl ::core::fmt::Debug for IContextMenu2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IContextMenu2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IContextMenu2 {
    type Vtable = IContextMenu2_Vtbl;
}
impl ::core::clone::Clone for IContextMenu2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContextMenu2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214f4_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct IContextMenu2_Vtbl {
    pub base__: IContextMenu_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub HandleMenuMsg: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    HandleMenuMsg: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IContextMenu3(::windows_core::IUnknown);
impl IContextMenu3 {
    #[doc = "*Required features: `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn QueryContextMenu<P0>(&self, hmenu: P0, indexmenu: u32, idcmdfirst: u32, idcmdlast: u32, uflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::WindowsAndMessaging::HMENU>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.QueryContextMenu)(::windows_core::Interface::as_raw(self), hmenu.into_param().abi(), indexmenu, idcmdfirst, idcmdlast, uflags).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn InvokeCommand(&self, pici: *const CMINVOKECOMMANDINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.InvokeCommand)(::windows_core::Interface::as_raw(self), pici).ok()
    }
    pub unsafe fn GetCommandString(&self, idcmd: usize, utype: u32, preserved: ::core::option::Option<*const u32>, pszname: ::windows_core::PSTR, cchmax: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.GetCommandString)(::windows_core::Interface::as_raw(self), idcmd, utype, ::core::mem::transmute(preserved.unwrap_or(::std::ptr::null())), ::core::mem::transmute(pszname), cchmax).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn HandleMenuMsg<P0, P1>(&self, umsg: u32, wparam: P0, lparam: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).base__.HandleMenuMsg)(::windows_core::Interface::as_raw(self), umsg, wparam.into_param().abi(), lparam.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn HandleMenuMsg2<P0, P1>(&self, umsg: u32, wparam: P0, lparam: P1, plresult: ::core::option::Option<*mut super::super::Foundation::LRESULT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).HandleMenuMsg2)(::windows_core::Interface::as_raw(self), umsg, wparam.into_param().abi(), lparam.into_param().abi(), ::core::mem::transmute(plresult.unwrap_or(::std::ptr::null_mut()))).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IContextMenu3, ::windows_core::IUnknown, IContextMenu, IContextMenu2);
impl ::core::cmp::PartialEq for IContextMenu3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IContextMenu3 {}
impl ::core::fmt::Debug for IContextMenu3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IContextMenu3").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IContextMenu3 {
    type Vtable = IContextMenu3_Vtbl;
}
impl ::core::clone::Clone for IContextMenu3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContextMenu3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xbcfce0a0_ec17_11d0_8d10_00a0c90f2719);
}
#[repr(C)]
#[doc(hidden)]
pub struct IContextMenu3_Vtbl {
    pub base__: IContextMenu2_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub HandleMenuMsg2: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM, plresult: *mut super::super::Foundation::LRESULT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    HandleMenuMsg2: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IContextMenuCB(::windows_core::IUnknown);
impl IContextMenuCB {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn CallBack<P0, P1, P2, P3, P4>(&self, psf: P0, hwndowner: P1, pdtobj: P2, umsg: u32, wparam: P3, lparam: P4) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellFolder>,
        P1: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P2: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
        P3: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P4: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).CallBack)(::windows_core::Interface::as_raw(self), psf.into_param().abi(), hwndowner.into_param().abi(), pdtobj.into_param().abi(), umsg, wparam.into_param().abi(), lparam.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IContextMenuCB, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IContextMenuCB {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IContextMenuCB {}
impl ::core::fmt::Debug for IContextMenuCB {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IContextMenuCB").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IContextMenuCB {
    type Vtable = IContextMenuCB_Vtbl;
}
impl ::core::clone::Clone for IContextMenuCB {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContextMenuCB {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x3409e930_5a39_11d1_83fa_00a0c90dc849);
}
#[repr(C)]
#[doc(hidden)]
pub struct IContextMenuCB_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub CallBack: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psf: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND, pdtobj: *mut ::core::ffi::c_void, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com")))]
    CallBack: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IContextMenuSite(::windows_core::IUnknown);
impl IContextMenuSite {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn DoContextMenuPopup<P0>(&self, punkcontextmenu: P0, fflags: u32, pt: super::super::Foundation::POINT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).DoContextMenuPopup)(::windows_core::Interface::as_raw(self), punkcontextmenu.into_param().abi(), fflags, ::core::mem::transmute(pt)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IContextMenuSite, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IContextMenuSite {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IContextMenuSite {}
impl ::core::fmt::Debug for IContextMenuSite {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IContextMenuSite").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IContextMenuSite {
    type Vtable = IContextMenuSite_Vtbl;
}
impl ::core::clone::Clone for IContextMenuSite {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IContextMenuSite {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x0811aebe_0b87_4c54_9e72_548cf649016b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IContextMenuSite_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub DoContextMenuPopup: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punkcontextmenu: *mut ::core::ffi::c_void, fflags: u32, pt: super::super::Foundation::POINT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    DoContextMenuPopup: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICopyHookA(::windows_core::IUnknown);
impl ICopyHookA {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CopyCallback<P0, P1, P2>(&self, hwnd: P0, wfunc: u32, wflags: u32, pszsrcfile: P1, dwsrcattribs: u32, pszdestfile: P2, dwdestattribs: u32) -> u32
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<::windows_core::PCSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCSTR>,
    {
        (::windows_core::Interface::vtable(self).CopyCallback)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), wfunc, wflags, pszsrcfile.into_param().abi(), dwsrcattribs, pszdestfile.into_param().abi(), dwdestattribs)
    }
}
::windows_core::imp::interface_hierarchy!(ICopyHookA, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICopyHookA {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICopyHookA {}
impl ::core::fmt::Debug for ICopyHookA {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICopyHookA").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICopyHookA {
    type Vtable = ICopyHookA_Vtbl;
}
impl ::core::clone::Clone for ICopyHookA {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICopyHookA {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214ef_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICopyHookA_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub CopyCallback: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, wfunc: u32, wflags: u32, pszsrcfile: ::windows_core::PCSTR, dwsrcattribs: u32, pszdestfile: ::windows_core::PCSTR, dwdestattribs: u32) -> u32,
    #[cfg(not(feature = "Win32_Foundation"))]
    CopyCallback: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICopyHookW(::windows_core::IUnknown);
impl ICopyHookW {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CopyCallback<P0, P1, P2>(&self, hwnd: P0, wfunc: u32, wflags: u32, pszsrcfile: P1, dwsrcattribs: u32, pszdestfile: P2, dwdestattribs: u32) -> u32
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).CopyCallback)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), wfunc, wflags, pszsrcfile.into_param().abi(), dwsrcattribs, pszdestfile.into_param().abi(), dwdestattribs)
    }
}
::windows_core::imp::interface_hierarchy!(ICopyHookW, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICopyHookW {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICopyHookW {}
impl ::core::fmt::Debug for ICopyHookW {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICopyHookW").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICopyHookW {
    type Vtable = ICopyHookW_Vtbl;
}
impl ::core::clone::Clone for ICopyHookW {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICopyHookW {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214fc_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICopyHookW_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub CopyCallback: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, wfunc: u32, wflags: u32, pszsrcfile: ::windows_core::PCWSTR, dwsrcattribs: u32, pszdestfile: ::windows_core::PCWSTR, dwdestattribs: u32) -> u32,
    #[cfg(not(feature = "Win32_Foundation"))]
    CopyCallback: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICreateProcessInputs(::windows_core::IUnknown);
impl ICreateProcessInputs {
    pub unsafe fn GetCreateFlags(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCreateFlags)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCreateFlags(&self, dwcreationflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetCreateFlags)(::windows_core::Interface::as_raw(self), dwcreationflags).ok()
    }
    pub unsafe fn AddCreateFlags(&self, dwcreationflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).AddCreateFlags)(::windows_core::Interface::as_raw(self), dwcreationflags).ok()
    }
    pub unsafe fn SetHotKey(&self, whotkey: u16) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetHotKey)(::windows_core::Interface::as_raw(self), whotkey).ok()
    }
    pub unsafe fn AddStartupFlags(&self, dwstartupinfoflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).AddStartupFlags)(::windows_core::Interface::as_raw(self), dwstartupinfoflags).ok()
    }
    pub unsafe fn SetTitle<P0>(&self, psztitle: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetTitle)(::windows_core::Interface::as_raw(self), psztitle.into_param().abi()).ok()
    }
    pub unsafe fn SetEnvironmentVariable<P0, P1>(&self, pszname: P0, pszvalue: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetEnvironmentVariable)(::windows_core::Interface::as_raw(self), pszname.into_param().abi(), pszvalue.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(ICreateProcessInputs, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICreateProcessInputs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICreateProcessInputs {}
impl ::core::fmt::Debug for ICreateProcessInputs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICreateProcessInputs").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICreateProcessInputs {
    type Vtable = ICreateProcessInputs_Vtbl;
}
impl ::core::clone::Clone for ICreateProcessInputs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICreateProcessInputs {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xf6ef6140_e26f_4d82_bac4_e9ba5fd239a8);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICreateProcessInputs_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetCreateFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwcreationflags: *mut u32) -> ::windows_core::HRESULT,
    pub SetCreateFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwcreationflags: u32) -> ::windows_core::HRESULT,
    pub AddCreateFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwcreationflags: u32) -> ::windows_core::HRESULT,
    pub SetHotKey: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, whotkey: u16) -> ::windows_core::HRESULT,
    pub AddStartupFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwstartupinfoflags: u32) -> ::windows_core::HRESULT,
    pub SetTitle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psztitle: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub SetEnvironmentVariable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR, pszvalue: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICreatingProcess(::windows_core::IUnknown);
impl ICreatingProcess {
    pub unsafe fn OnCreating<P0>(&self, pcpi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICreateProcessInputs>,
    {
        (::windows_core::Interface::vtable(self).OnCreating)(::windows_core::Interface::as_raw(self), pcpi.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(ICreatingProcess, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICreatingProcess {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICreatingProcess {}
impl ::core::fmt::Debug for ICreatingProcess {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICreatingProcess").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICreatingProcess {
    type Vtable = ICreatingProcess_Vtbl;
}
impl ::core::clone::Clone for ICreatingProcess {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICreatingProcess {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xc2b937a9_3110_4398_8a56_f34c6342d244);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICreatingProcess_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub OnCreating: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcpi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICredentialProvider(::windows_core::IUnknown);
impl ICredentialProvider {
    pub unsafe fn SetUsageScenario(&self, cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO, dwflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetUsageScenario)(::windows_core::Interface::as_raw(self), cpus, dwflags).ok()
    }
    pub unsafe fn SetSerialization(&self, pcpcs: *const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetSerialization)(::windows_core::Interface::as_raw(self), pcpcs).ok()
    }
    pub unsafe fn Advise<P0>(&self, pcpe: P0, upadvisecontext: usize) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderEvents>,
    {
        (::windows_core::Interface::vtable(self).Advise)(::windows_core::Interface::as_raw(self), pcpe.into_param().abi(), upadvisecontext).ok()
    }
    pub unsafe fn UnAdvise(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).UnAdvise)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetFieldDescriptorCount(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFieldDescriptorCount)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFieldDescriptorAt(&self, dwindex: u32) -> ::windows_core::Result<*mut CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFieldDescriptorAt)(::windows_core::Interface::as_raw(self), dwindex, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetCredentialCount(&self, pdwcount: *mut u32, pdwdefault: *mut u32, pbautologonwithdefault: *mut super::super::Foundation::BOOL) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetCredentialCount)(::windows_core::Interface::as_raw(self), pdwcount, pdwdefault, pbautologonwithdefault).ok()
    }
    pub unsafe fn GetCredentialAt(&self, dwindex: u32) -> ::windows_core::Result<ICredentialProviderCredential> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCredentialAt)(::windows_core::Interface::as_raw(self), dwindex, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ICredentialProvider, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICredentialProvider {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICredentialProvider {}
impl ::core::fmt::Debug for ICredentialProvider {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICredentialProvider").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICredentialProvider {
    type Vtable = ICredentialProvider_Vtbl;
}
impl ::core::clone::Clone for ICredentialProvider {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICredentialProvider {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xd27c3481_5a1c_45b2_8aaa_c20ebbe8229e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICredentialProvider_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetUsageScenario: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO, dwflags: u32) -> ::windows_core::HRESULT,
    pub SetSerialization: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcpcs: *const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION) -> ::windows_core::HRESULT,
    pub Advise: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcpe: *mut ::core::ffi::c_void, upadvisecontext: usize) -> ::windows_core::HRESULT,
    pub UnAdvise: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetFieldDescriptorCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows_core::HRESULT,
    pub GetFieldDescriptorAt: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, ppcpfd: *mut *mut CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetCredentialCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwcount: *mut u32, pdwdefault: *mut u32, pbautologonwithdefault: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetCredentialCount: usize,
    pub GetCredentialAt: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, ppcpc: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICredentialProviderCredential(::windows_core::IUnknown);
impl ICredentialProviderCredential {
    pub unsafe fn Advise<P0>(&self, pcpce: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredentialEvents>,
    {
        (::windows_core::Interface::vtable(self).Advise)(::windows_core::Interface::as_raw(self), pcpce.into_param().abi()).ok()
    }
    pub unsafe fn UnAdvise(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).UnAdvise)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetSelected(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).SetSelected)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDeselected(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetDeselected)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetFieldState(&self, dwfieldid: u32, pcpfs: *mut CREDENTIAL_PROVIDER_FIELD_STATE, pcpfis: *mut CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetFieldState)(::windows_core::Interface::as_raw(self), dwfieldid, pcpfs, pcpfis).ok()
    }
    pub unsafe fn GetStringValue(&self, dwfieldid: u32) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetStringValue)(::windows_core::Interface::as_raw(self), dwfieldid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetBitmapValue(&self, dwfieldid: u32) -> ::windows_core::Result<super::super::Graphics::Gdi::HBITMAP> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetBitmapValue)(::windows_core::Interface::as_raw(self), dwfieldid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetCheckboxValue(&self, dwfieldid: u32, pbchecked: *mut super::super::Foundation::BOOL, ppszlabel: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetCheckboxValue)(::windows_core::Interface::as_raw(self), dwfieldid, pbchecked, ppszlabel).ok()
    }
    pub unsafe fn GetSubmitButtonValue(&self, dwfieldid: u32) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSubmitButtonValue)(::windows_core::Interface::as_raw(self), dwfieldid, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetComboBoxValueCount(&self, dwfieldid: u32, pcitems: *mut u32, pdwselecteditem: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetComboBoxValueCount)(::windows_core::Interface::as_raw(self), dwfieldid, pcitems, pdwselecteditem).ok()
    }
    pub unsafe fn GetComboBoxValueAt(&self, dwfieldid: u32, dwitem: u32) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetComboBoxValueAt)(::windows_core::Interface::as_raw(self), dwfieldid, dwitem, &mut result__).from_abi(result__)
    }
    pub unsafe fn SetStringValue<P0>(&self, dwfieldid: u32, psz: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetStringValue)(::windows_core::Interface::as_raw(self), dwfieldid, psz.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetCheckboxValue<P0>(&self, dwfieldid: u32, bchecked: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetCheckboxValue)(::windows_core::Interface::as_raw(self), dwfieldid, bchecked.into_param().abi()).ok()
    }
    pub unsafe fn SetComboBoxSelectedValue(&self, dwfieldid: u32, dwselecteditem: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetComboBoxSelectedValue)(::windows_core::Interface::as_raw(self), dwfieldid, dwselecteditem).ok()
    }
    pub unsafe fn CommandLinkClicked(&self, dwfieldid: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).CommandLinkClicked)(::windows_core::Interface::as_raw(self), dwfieldid).ok()
    }
    pub unsafe fn GetSerialization(&self, pcpgsr: *mut CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE, pcpcs: *mut CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, ppszoptionalstatustext: *mut ::windows_core::PWSTR, pcpsioptionalstatusicon: *mut CREDENTIAL_PROVIDER_STATUS_ICON) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetSerialization)(::windows_core::Interface::as_raw(self), pcpgsr, pcpcs, ppszoptionalstatustext, pcpsioptionalstatusicon).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ReportResult<P0, P1>(&self, ntsstatus: P0, ntssubstatus: P1, ppszoptionalstatustext: *mut ::windows_core::PWSTR, pcpsioptionalstatusicon: *mut CREDENTIAL_PROVIDER_STATUS_ICON) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::NTSTATUS>,
        P1: ::windows_core::IntoParam<super::super::Foundation::NTSTATUS>,
    {
        (::windows_core::Interface::vtable(self).ReportResult)(::windows_core::Interface::as_raw(self), ntsstatus.into_param().abi(), ntssubstatus.into_param().abi(), ppszoptionalstatustext, pcpsioptionalstatusicon).ok()
    }
}
::windows_core::imp::interface_hierarchy!(ICredentialProviderCredential, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICredentialProviderCredential {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICredentialProviderCredential {}
impl ::core::fmt::Debug for ICredentialProviderCredential {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICredentialProviderCredential").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICredentialProviderCredential {
    type Vtable = ICredentialProviderCredential_Vtbl;
}
impl ::core::clone::Clone for ICredentialProviderCredential {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICredentialProviderCredential {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x63913a93_40c1_481a_818d_4072ff8c70cc);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICredentialProviderCredential_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Advise: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcpce: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub UnAdvise: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetSelected: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbautologon: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetSelected: usize,
    pub SetDeselected: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetFieldState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwfieldid: u32, pcpfs: *mut CREDENTIAL_PROVIDER_FIELD_STATE, pcpfis: *mut CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) -> ::windows_core::HRESULT,
    pub GetStringValue: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwfieldid: u32, ppsz: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub GetBitmapValue: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwfieldid: u32, phbmp: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))]
    GetBitmapValue: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetCheckboxValue: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwfieldid: u32, pbchecked: *mut super::super::Foundation::BOOL, ppszlabel: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetCheckboxValue: usize,
    pub GetSubmitButtonValue: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwfieldid: u32, pdwadjacentto: *mut u32) -> ::windows_core::HRESULT,
    pub GetComboBoxValueCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwfieldid: u32, pcitems: *mut u32, pdwselecteditem: *mut u32) -> ::windows_core::HRESULT,
    pub GetComboBoxValueAt: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwfieldid: u32, dwitem: u32, ppszitem: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub SetStringValue: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwfieldid: u32, psz: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetCheckboxValue: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwfieldid: u32, bchecked: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetCheckboxValue: usize,
    pub SetComboBoxSelectedValue: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwfieldid: u32, dwselecteditem: u32) -> ::windows_core::HRESULT,
    pub CommandLinkClicked: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwfieldid: u32) -> ::windows_core::HRESULT,
    pub GetSerialization: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcpgsr: *mut CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE, pcpcs: *mut CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, ppszoptionalstatustext: *mut ::windows_core::PWSTR, pcpsioptionalstatusicon: *mut CREDENTIAL_PROVIDER_STATUS_ICON) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub ReportResult: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ntsstatus: super::super::Foundation::NTSTATUS, ntssubstatus: super::super::Foundation::NTSTATUS, ppszoptionalstatustext: *mut ::windows_core::PWSTR, pcpsioptionalstatusicon: *mut CREDENTIAL_PROVIDER_STATUS_ICON) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ReportResult: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICredentialProviderCredential2(::windows_core::IUnknown);
impl ICredentialProviderCredential2 {
    pub unsafe fn Advise<P0>(&self, pcpce: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredentialEvents>,
    {
        (::windows_core::Interface::vtable(self).base__.Advise)(::windows_core::Interface::as_raw(self), pcpce.into_param().abi()).ok()
    }
    pub unsafe fn UnAdvise(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.UnAdvise)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetSelected(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.SetSelected)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDeselected(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetDeselected)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetFieldState(&self, dwfieldid: u32, pcpfs: *mut CREDENTIAL_PROVIDER_FIELD_STATE, pcpfis: *mut CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetFieldState)(::windows_core::Interface::as_raw(self), dwfieldid, pcpfs, pcpfis).ok()
    }
    pub unsafe fn GetStringValue(&self, dwfieldid: u32) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetStringValue)(::windows_core::Interface::as_raw(self), dwfieldid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetBitmapValue(&self, dwfieldid: u32) -> ::windows_core::Result<super::super::Graphics::Gdi::HBITMAP> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetBitmapValue)(::windows_core::Interface::as_raw(self), dwfieldid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetCheckboxValue(&self, dwfieldid: u32, pbchecked: *mut super::super::Foundation::BOOL, ppszlabel: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetCheckboxValue)(::windows_core::Interface::as_raw(self), dwfieldid, pbchecked, ppszlabel).ok()
    }
    pub unsafe fn GetSubmitButtonValue(&self, dwfieldid: u32) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetSubmitButtonValue)(::windows_core::Interface::as_raw(self), dwfieldid, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetComboBoxValueCount(&self, dwfieldid: u32, pcitems: *mut u32, pdwselecteditem: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetComboBoxValueCount)(::windows_core::Interface::as_raw(self), dwfieldid, pcitems, pdwselecteditem).ok()
    }
    pub unsafe fn GetComboBoxValueAt(&self, dwfieldid: u32, dwitem: u32) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetComboBoxValueAt)(::windows_core::Interface::as_raw(self), dwfieldid, dwitem, &mut result__).from_abi(result__)
    }
    pub unsafe fn SetStringValue<P0>(&self, dwfieldid: u32, psz: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetStringValue)(::windows_core::Interface::as_raw(self), dwfieldid, psz.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetCheckboxValue<P0>(&self, dwfieldid: u32, bchecked: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.SetCheckboxValue)(::windows_core::Interface::as_raw(self), dwfieldid, bchecked.into_param().abi()).ok()
    }
    pub unsafe fn SetComboBoxSelectedValue(&self, dwfieldid: u32, dwselecteditem: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetComboBoxSelectedValue)(::windows_core::Interface::as_raw(self), dwfieldid, dwselecteditem).ok()
    }
    pub unsafe fn CommandLinkClicked(&self, dwfieldid: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.CommandLinkClicked)(::windows_core::Interface::as_raw(self), dwfieldid).ok()
    }
    pub unsafe fn GetSerialization(&self, pcpgsr: *mut CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE, pcpcs: *mut CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, ppszoptionalstatustext: *mut ::windows_core::PWSTR, pcpsioptionalstatusicon: *mut CREDENTIAL_PROVIDER_STATUS_ICON) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetSerialization)(::windows_core::Interface::as_raw(self), pcpgsr, pcpcs, ppszoptionalstatustext, pcpsioptionalstatusicon).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ReportResult<P0, P1>(&self, ntsstatus: P0, ntssubstatus: P1, ppszoptionalstatustext: *mut ::windows_core::PWSTR, pcpsioptionalstatusicon: *mut CREDENTIAL_PROVIDER_STATUS_ICON) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::NTSTATUS>,
        P1: ::windows_core::IntoParam<super::super::Foundation::NTSTATUS>,
    {
        (::windows_core::Interface::vtable(self).base__.ReportResult)(::windows_core::Interface::as_raw(self), ntsstatus.into_param().abi(), ntssubstatus.into_param().abi(), ppszoptionalstatustext, pcpsioptionalstatusicon).ok()
    }
    pub unsafe fn GetUserSid(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetUserSid)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ICredentialProviderCredential2, ::windows_core::IUnknown, ICredentialProviderCredential);
impl ::core::cmp::PartialEq for ICredentialProviderCredential2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICredentialProviderCredential2 {}
impl ::core::fmt::Debug for ICredentialProviderCredential2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICredentialProviderCredential2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICredentialProviderCredential2 {
    type Vtable = ICredentialProviderCredential2_Vtbl;
}
impl ::core::clone::Clone for ICredentialProviderCredential2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICredentialProviderCredential2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xfd672c54_40ea_4d6e_9b49_cfb1a7507bd7);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICredentialProviderCredential2_Vtbl {
    pub base__: ICredentialProviderCredential_Vtbl,
    pub GetUserSid: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, sid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICredentialProviderCredentialEvents(::windows_core::IUnknown);
impl ICredentialProviderCredentialEvents {
    pub unsafe fn SetFieldState<P0>(&self, pcpc: P0, dwfieldid: u32, cpfs: CREDENTIAL_PROVIDER_FIELD_STATE) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
    {
        (::windows_core::Interface::vtable(self).SetFieldState)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, cpfs).ok()
    }
    pub unsafe fn SetFieldInteractiveState<P0>(&self, pcpc: P0, dwfieldid: u32, cpfis: CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
    {
        (::windows_core::Interface::vtable(self).SetFieldInteractiveState)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, cpfis).ok()
    }
    pub unsafe fn SetFieldString<P0, P1>(&self, pcpc: P0, dwfieldid: u32, psz: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetFieldString)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, psz.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetFieldCheckbox<P0, P1, P2>(&self, pcpc: P0, dwfieldid: u32, bchecked: P1, pszlabel: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetFieldCheckbox)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, bchecked.into_param().abi(), pszlabel.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn SetFieldBitmap<P0, P1>(&self, pcpc: P0, dwfieldid: u32, hbmp: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
        P1: ::windows_core::IntoParam<super::super::Graphics::Gdi::HBITMAP>,
    {
        (::windows_core::Interface::vtable(self).SetFieldBitmap)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, hbmp.into_param().abi()).ok()
    }
    pub unsafe fn SetFieldComboBoxSelectedItem<P0>(&self, pcpc: P0, dwfieldid: u32, dwselecteditem: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
    {
        (::windows_core::Interface::vtable(self).SetFieldComboBoxSelectedItem)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, dwselecteditem).ok()
    }
    pub unsafe fn DeleteFieldComboBoxItem<P0>(&self, pcpc: P0, dwfieldid: u32, dwitem: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
    {
        (::windows_core::Interface::vtable(self).DeleteFieldComboBoxItem)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, dwitem).ok()
    }
    pub unsafe fn AppendFieldComboBoxItem<P0, P1>(&self, pcpc: P0, dwfieldid: u32, pszitem: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).AppendFieldComboBoxItem)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, pszitem.into_param().abi()).ok()
    }
    pub unsafe fn SetFieldSubmitButton<P0>(&self, pcpc: P0, dwfieldid: u32, dwadjacentto: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
    {
        (::windows_core::Interface::vtable(self).SetFieldSubmitButton)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, dwadjacentto).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnCreatingWindow(&self) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).OnCreatingWindow)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ICredentialProviderCredentialEvents, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICredentialProviderCredentialEvents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICredentialProviderCredentialEvents {}
impl ::core::fmt::Debug for ICredentialProviderCredentialEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICredentialProviderCredentialEvents").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICredentialProviderCredentialEvents {
    type Vtable = ICredentialProviderCredentialEvents_Vtbl;
}
impl ::core::clone::Clone for ICredentialProviderCredentialEvents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICredentialProviderCredentialEvents {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xfa6fa76b_66b7_4b11_95f1_86171118e816);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICredentialProviderCredentialEvents_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetFieldState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, cpfs: CREDENTIAL_PROVIDER_FIELD_STATE) -> ::windows_core::HRESULT,
    pub SetFieldInteractiveState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, cpfis: CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) -> ::windows_core::HRESULT,
    pub SetFieldString: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, psz: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetFieldCheckbox: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, bchecked: super::super::Foundation::BOOL, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetFieldCheckbox: usize,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub SetFieldBitmap: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, hbmp: super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))]
    SetFieldBitmap: usize,
    pub SetFieldComboBoxSelectedItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, dwselecteditem: u32) -> ::windows_core::HRESULT,
    pub DeleteFieldComboBoxItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, dwitem: u32) -> ::windows_core::HRESULT,
    pub AppendFieldComboBoxItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, pszitem: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub SetFieldSubmitButton: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, dwadjacentto: u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub OnCreatingWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phwndowner: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    OnCreatingWindow: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICredentialProviderCredentialEvents2(::windows_core::IUnknown);
impl ICredentialProviderCredentialEvents2 {
    pub unsafe fn SetFieldState<P0>(&self, pcpc: P0, dwfieldid: u32, cpfs: CREDENTIAL_PROVIDER_FIELD_STATE) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFieldState)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, cpfs).ok()
    }
    pub unsafe fn SetFieldInteractiveState<P0>(&self, pcpc: P0, dwfieldid: u32, cpfis: CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFieldInteractiveState)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, cpfis).ok()
    }
    pub unsafe fn SetFieldString<P0, P1>(&self, pcpc: P0, dwfieldid: u32, psz: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFieldString)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, psz.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetFieldCheckbox<P0, P1, P2>(&self, pcpc: P0, dwfieldid: u32, bchecked: P1, pszlabel: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFieldCheckbox)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, bchecked.into_param().abi(), pszlabel.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn SetFieldBitmap<P0, P1>(&self, pcpc: P0, dwfieldid: u32, hbmp: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
        P1: ::windows_core::IntoParam<super::super::Graphics::Gdi::HBITMAP>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFieldBitmap)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, hbmp.into_param().abi()).ok()
    }
    pub unsafe fn SetFieldComboBoxSelectedItem<P0>(&self, pcpc: P0, dwfieldid: u32, dwselecteditem: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFieldComboBoxSelectedItem)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, dwselecteditem).ok()
    }
    pub unsafe fn DeleteFieldComboBoxItem<P0>(&self, pcpc: P0, dwfieldid: u32, dwitem: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
    {
        (::windows_core::Interface::vtable(self).base__.DeleteFieldComboBoxItem)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, dwitem).ok()
    }
    pub unsafe fn AppendFieldComboBoxItem<P0, P1>(&self, pcpc: P0, dwfieldid: u32, pszitem: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.AppendFieldComboBoxItem)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, pszitem.into_param().abi()).ok()
    }
    pub unsafe fn SetFieldSubmitButton<P0>(&self, pcpc: P0, dwfieldid: u32, dwadjacentto: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFieldSubmitButton)(::windows_core::Interface::as_raw(self), pcpc.into_param().abi(), dwfieldid, dwadjacentto).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnCreatingWindow(&self) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.OnCreatingWindow)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn BeginFieldUpdates(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).BeginFieldUpdates)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn EndFieldUpdates(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).EndFieldUpdates)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetFieldOptions<P0>(&self, credential: P0, fieldid: u32, options: CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderCredential>,
    {
        (::windows_core::Interface::vtable(self).SetFieldOptions)(::windows_core::Interface::as_raw(self), credential.into_param().abi(), fieldid, options).ok()
    }
}
::windows_core::imp::interface_hierarchy!(ICredentialProviderCredentialEvents2, ::windows_core::IUnknown, ICredentialProviderCredentialEvents);
impl ::core::cmp::PartialEq for ICredentialProviderCredentialEvents2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICredentialProviderCredentialEvents2 {}
impl ::core::fmt::Debug for ICredentialProviderCredentialEvents2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICredentialProviderCredentialEvents2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICredentialProviderCredentialEvents2 {
    type Vtable = ICredentialProviderCredentialEvents2_Vtbl;
}
impl ::core::clone::Clone for ICredentialProviderCredentialEvents2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICredentialProviderCredentialEvents2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xb53c00b6_9922_4b78_b1f4_ddfe774dc39b);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICredentialProviderCredentialEvents2_Vtbl {
    pub base__: ICredentialProviderCredentialEvents_Vtbl,
    pub BeginFieldUpdates: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub EndFieldUpdates: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SetFieldOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, credential: *mut ::core::ffi::c_void, fieldid: u32, options: CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICredentialProviderCredentialWithFieldOptions(::windows_core::IUnknown);
impl ICredentialProviderCredentialWithFieldOptions {
    pub unsafe fn GetFieldOptions(&self, fieldid: u32) -> ::windows_core::Result<CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFieldOptions)(::windows_core::Interface::as_raw(self), fieldid, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ICredentialProviderCredentialWithFieldOptions, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICredentialProviderCredentialWithFieldOptions {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICredentialProviderCredentialWithFieldOptions {}
impl ::core::fmt::Debug for ICredentialProviderCredentialWithFieldOptions {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICredentialProviderCredentialWithFieldOptions").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICredentialProviderCredentialWithFieldOptions {
    type Vtable = ICredentialProviderCredentialWithFieldOptions_Vtbl;
}
impl ::core::clone::Clone for ICredentialProviderCredentialWithFieldOptions {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICredentialProviderCredentialWithFieldOptions {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xdbc6fb30_c843_49e3_a645_573e6f39446a);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICredentialProviderCredentialWithFieldOptions_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetFieldOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fieldid: u32, options: *mut CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICredentialProviderEvents(::windows_core::IUnknown);
impl ICredentialProviderEvents {
    pub unsafe fn CredentialsChanged(&self, upadvisecontext: usize) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).CredentialsChanged)(::windows_core::Interface::as_raw(self), upadvisecontext).ok()
    }
}
::windows_core::imp::interface_hierarchy!(ICredentialProviderEvents, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICredentialProviderEvents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICredentialProviderEvents {}
impl ::core::fmt::Debug for ICredentialProviderEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICredentialProviderEvents").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICredentialProviderEvents {
    type Vtable = ICredentialProviderEvents_Vtbl;
}
impl ::core::clone::Clone for ICredentialProviderEvents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICredentialProviderEvents {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x34201e5a_a787_41a3_a5a4_bd6dcf2a854e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICredentialProviderEvents_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub CredentialsChanged: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, upadvisecontext: usize) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICredentialProviderFilter(::windows_core::IUnknown);
impl ICredentialProviderFilter {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Filter(&self, cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO, dwflags: u32, rgclsidproviders: *const ::windows_core::GUID, rgballow: *mut super::super::Foundation::BOOL, cproviders: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Filter)(::windows_core::Interface::as_raw(self), cpus, dwflags, rgclsidproviders, rgballow, cproviders).ok()
    }
    pub unsafe fn UpdateRemoteCredential(&self, pcpcsin: *const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, pcpcsout: *mut CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).UpdateRemoteCredential)(::windows_core::Interface::as_raw(self), pcpcsin, pcpcsout).ok()
    }
}
::windows_core::imp::interface_hierarchy!(ICredentialProviderFilter, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICredentialProviderFilter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICredentialProviderFilter {}
impl ::core::fmt::Debug for ICredentialProviderFilter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICredentialProviderFilter").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICredentialProviderFilter {
    type Vtable = ICredentialProviderFilter_Vtbl;
}
impl ::core::clone::Clone for ICredentialProviderFilter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICredentialProviderFilter {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xa5da53f9_d475_4080_a120_910c4a739880);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICredentialProviderFilter_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub Filter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO, dwflags: u32, rgclsidproviders: *const ::windows_core::GUID, rgballow: *mut super::super::Foundation::BOOL, cproviders: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Filter: usize,
    pub UpdateRemoteCredential: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcpcsin: *const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, pcpcsout: *mut CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICredentialProviderSetUserArray(::windows_core::IUnknown);
impl ICredentialProviderSetUserArray {
    pub unsafe fn SetUserArray<P0>(&self, users: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ICredentialProviderUserArray>,
    {
        (::windows_core::Interface::vtable(self).SetUserArray)(::windows_core::Interface::as_raw(self), users.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(ICredentialProviderSetUserArray, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICredentialProviderSetUserArray {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICredentialProviderSetUserArray {}
impl ::core::fmt::Debug for ICredentialProviderSetUserArray {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICredentialProviderSetUserArray").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICredentialProviderSetUserArray {
    type Vtable = ICredentialProviderSetUserArray_Vtbl;
}
impl ::core::clone::Clone for ICredentialProviderSetUserArray {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICredentialProviderSetUserArray {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x095c1484_1c0c_4388_9c6d_500e61bf84bd);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICredentialProviderSetUserArray_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetUserArray: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, users: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICredentialProviderUser(::windows_core::IUnknown);
impl ICredentialProviderUser {
    pub unsafe fn GetSid(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSid)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetProviderID(&self) -> ::windows_core::Result<::windows_core::GUID> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetProviderID)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetStringValue(&self, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetStringValue)(::windows_core::Interface::as_raw(self), key, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub unsafe fn GetValue(&self, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetValue)(::windows_core::Interface::as_raw(self), key, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ICredentialProviderUser, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICredentialProviderUser {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICredentialProviderUser {}
impl ::core::fmt::Debug for ICredentialProviderUser {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICredentialProviderUser").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICredentialProviderUser {
    type Vtable = ICredentialProviderUser_Vtbl;
}
impl ::core::clone::Clone for ICredentialProviderUser {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICredentialProviderUser {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x13793285_3ea6_40fd_b420_15f47da41fbb);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICredentialProviderUser_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetSid: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, sid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub GetProviderID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, providerid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetStringValue: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, stringvalue: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetStringValue: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub GetValue: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, value: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem")))]
    GetValue: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICredentialProviderUserArray(::windows_core::IUnknown);
impl ICredentialProviderUserArray {
    pub unsafe fn SetProviderFilter(&self, guidprovidertofilterto: *const ::windows_core::GUID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetProviderFilter)(::windows_core::Interface::as_raw(self), guidprovidertofilterto).ok()
    }
    pub unsafe fn GetAccountOptions(&self) -> ::windows_core::Result<CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetAccountOptions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCount(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCount)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetAt(&self, userindex: u32) -> ::windows_core::Result<ICredentialProviderUser> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetAt)(::windows_core::Interface::as_raw(self), userindex, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ICredentialProviderUserArray, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICredentialProviderUserArray {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICredentialProviderUserArray {}
impl ::core::fmt::Debug for ICredentialProviderUserArray {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICredentialProviderUserArray").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICredentialProviderUserArray {
    type Vtable = ICredentialProviderUserArray_Vtbl;
}
impl ::core::clone::Clone for ICredentialProviderUserArray {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICredentialProviderUserArray {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x90c119ae_0f18_4520_a1f1_114366a40fe8);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICredentialProviderUserArray_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetProviderFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, guidprovidertofilterto: *const ::windows_core::GUID) -> ::windows_core::HRESULT,
    pub GetAccountOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, credentialprovideraccountoptions: *mut CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS) -> ::windows_core::HRESULT,
    pub GetCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, usercount: *mut u32) -> ::windows_core::HRESULT,
    pub GetAt: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, userindex: u32, user: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICurrentItem(::windows_core::IUnknown);
impl ICurrentItem {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetItemIDList(&self) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetItemIDList)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetItem(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetItem)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ICurrentItem, ::windows_core::IUnknown, IRelatedItem);
impl ::core::cmp::PartialEq for ICurrentItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICurrentItem {}
impl ::core::fmt::Debug for ICurrentItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICurrentItem").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICurrentItem {
    type Vtable = ICurrentItem_Vtbl;
}
impl ::core::clone::Clone for ICurrentItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICurrentItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x240a7174_d653_4a1d_a6d3_d4943cfbfe3d);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICurrentItem_Vtbl {
    pub base__: IRelatedItem_Vtbl,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICurrentWorkingDirectory(::windows_core::IUnknown);
impl ICurrentWorkingDirectory {
    pub unsafe fn GetDirectory(&self, pwzpath: &mut [u16]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetDirectory)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pwzpath.as_ptr()), pwzpath.len() as _).ok()
    }
    pub unsafe fn SetDirectory<P0>(&self, pwzpath: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetDirectory)(::windows_core::Interface::as_raw(self), pwzpath.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(ICurrentWorkingDirectory, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICurrentWorkingDirectory {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICurrentWorkingDirectory {}
impl ::core::fmt::Debug for ICurrentWorkingDirectory {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICurrentWorkingDirectory").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICurrentWorkingDirectory {
    type Vtable = ICurrentWorkingDirectory_Vtbl;
}
impl ::core::clone::Clone for ICurrentWorkingDirectory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICurrentWorkingDirectory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x91956d21_9276_11d1_921a_006097df5bd4);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICurrentWorkingDirectory_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetDirectory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwzpath: ::windows_core::PWSTR, cchsize: u32) -> ::windows_core::HRESULT,
    pub SetDirectory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwzpath: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ICustomDestinationList(::windows_core::IUnknown);
impl ICustomDestinationList {
    pub unsafe fn SetAppID<P0>(&self, pszappid: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetAppID)(::windows_core::Interface::as_raw(self), pszappid.into_param().abi()).ok()
    }
    pub unsafe fn BeginList<T>(&self, pcminslots: *mut u32) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).BeginList)(::windows_core::Interface::as_raw(self), pcminslots, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn AppendCategory<P0, P1>(&self, pszcategory: P0, poa: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<Common::IObjectArray>,
    {
        (::windows_core::Interface::vtable(self).AppendCategory)(::windows_core::Interface::as_raw(self), pszcategory.into_param().abi(), poa.into_param().abi()).ok()
    }
    pub unsafe fn AppendKnownCategory(&self, category: KNOWNDESTCATEGORY) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).AppendKnownCategory)(::windows_core::Interface::as_raw(self), category).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn AddUserTasks<P0>(&self, poa: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<Common::IObjectArray>,
    {
        (::windows_core::Interface::vtable(self).AddUserTasks)(::windows_core::Interface::as_raw(self), poa.into_param().abi()).ok()
    }
    pub unsafe fn CommitList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).CommitList)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetRemovedDestinations<T>(&self) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetRemovedDestinations)(::windows_core::Interface::as_raw(self), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    pub unsafe fn DeleteList<P0>(&self, pszappid: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).DeleteList)(::windows_core::Interface::as_raw(self), pszappid.into_param().abi()).ok()
    }
    pub unsafe fn AbortList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).AbortList)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(ICustomDestinationList, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ICustomDestinationList {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICustomDestinationList {}
impl ::core::fmt::Debug for ICustomDestinationList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICustomDestinationList").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ICustomDestinationList {
    type Vtable = ICustomDestinationList_Vtbl;
}
impl ::core::clone::Clone for ICustomDestinationList {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ICustomDestinationList {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x6332debf_87b5_4670_90c0_5e57b408a49e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICustomDestinationList_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetAppID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszappid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub BeginList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcminslots: *mut u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub AppendCategory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszcategory: ::windows_core::PCWSTR, poa: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    AppendCategory: usize,
    pub AppendKnownCategory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, category: KNOWNDESTCATEGORY) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub AddUserTasks: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, poa: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    AddUserTasks: usize,
    pub CommitList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetRemovedDestinations: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub DeleteList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszappid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub AbortList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IDataObjectAsyncCapability(::windows_core::IUnknown);
impl IDataObjectAsyncCapability {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetAsyncMode<P0>(&self, fdoopasync: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetAsyncMode)(::windows_core::Interface::as_raw(self), fdoopasync.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetAsyncMode(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetAsyncMode)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn StartOperation<P0>(&self, pbcreserved: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
    {
        (::windows_core::Interface::vtable(self).StartOperation)(::windows_core::Interface::as_raw(self), pbcreserved.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn InOperation(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).InOperation)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn EndOperation<P0>(&self, hresult: ::windows_core::HRESULT, pbcreserved: P0, dweffects: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
    {
        (::windows_core::Interface::vtable(self).EndOperation)(::windows_core::Interface::as_raw(self), hresult, pbcreserved.into_param().abi(), dweffects).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IDataObjectAsyncCapability, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IDataObjectAsyncCapability {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDataObjectAsyncCapability {}
impl ::core::fmt::Debug for IDataObjectAsyncCapability {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDataObjectAsyncCapability").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IDataObjectAsyncCapability {
    type Vtable = IDataObjectAsyncCapability_Vtbl;
}
impl ::core::clone::Clone for IDataObjectAsyncCapability {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDataObjectAsyncCapability {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x3d8b0590_f691_11d2_8ea9_006097df5bd4);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataObjectAsyncCapability_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub SetAsyncMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fdoopasync: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetAsyncMode: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetAsyncMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfisopasync: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetAsyncMode: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub StartOperation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbcreserved: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    StartOperation: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub InOperation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfinasyncop: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    InOperation: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub EndOperation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hresult: ::windows_core::HRESULT, pbcreserved: *mut ::core::ffi::c_void, dweffects: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    EndOperation: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IDataObjectProvider(::windows_core::IUnknown);
impl IDataObjectProvider {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetDataObject(&self) -> ::windows_core::Result<super::super::System::Com::IDataObject> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetDataObject)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetDataObject<P0>(&self, dataobject: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    {
        (::windows_core::Interface::vtable(self).SetDataObject)(::windows_core::Interface::as_raw(self), dataobject.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IDataObjectProvider, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IDataObjectProvider {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDataObjectProvider {}
impl ::core::fmt::Debug for IDataObjectProvider {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDataObjectProvider").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IDataObjectProvider {
    type Vtable = IDataObjectProvider_Vtbl;
}
impl ::core::clone::Clone for IDataObjectProvider {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDataObjectProvider {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x3d25f6d6_4b2a_433c_9184_7c33ad35d001);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataObjectProvider_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub GetDataObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dataobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetDataObject: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetDataObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dataobject: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetDataObject: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IDataTransferManagerInterop(::windows_core::IUnknown);
impl IDataTransferManagerInterop {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetForWindow<P0, T>(&self, appwindow: P0) -> ::windows_core::Result<T>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetForWindow)(::windows_core::Interface::as_raw(self), appwindow.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ShowShareUIForWindow<P0>(&self, appwindow: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).ShowShareUIForWindow)(::windows_core::Interface::as_raw(self), appwindow.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IDataTransferManagerInterop, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IDataTransferManagerInterop {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDataTransferManagerInterop {}
impl ::core::fmt::Debug for IDataTransferManagerInterop {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDataTransferManagerInterop").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IDataTransferManagerInterop {
    type Vtable = IDataTransferManagerInterop_Vtbl;
}
impl ::core::clone::Clone for IDataTransferManagerInterop {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDataTransferManagerInterop {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x3a3dcd6c_3eab_43dc_bcde_45671ce800c8);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDataTransferManagerInterop_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub GetForWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, appwindow: super::super::Foundation::HWND, riid: *const ::windows_core::GUID, datatransfermanager: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetForWindow: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub ShowShareUIForWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, appwindow: super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ShowShareUIForWindow: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IDefaultExtractIconInit(::windows_core::IUnknown);
impl IDefaultExtractIconInit {
    pub unsafe fn SetFlags(&self, uflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFlags)(::windows_core::Interface::as_raw(self), uflags).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Registry\"`*"]
    #[cfg(feature = "Win32_System_Registry")]
    pub unsafe fn SetKey<P0>(&self, hkey: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    {
        (::windows_core::Interface::vtable(self).SetKey)(::windows_core::Interface::as_raw(self), hkey.into_param().abi()).ok()
    }
    pub unsafe fn SetNormalIcon<P0>(&self, pszfile: P0, iicon: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetNormalIcon)(::windows_core::Interface::as_raw(self), pszfile.into_param().abi(), iicon).ok()
    }
    pub unsafe fn SetOpenIcon<P0>(&self, pszfile: P0, iicon: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetOpenIcon)(::windows_core::Interface::as_raw(self), pszfile.into_param().abi(), iicon).ok()
    }
    pub unsafe fn SetShortcutIcon<P0>(&self, pszfile: P0, iicon: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetShortcutIcon)(::windows_core::Interface::as_raw(self), pszfile.into_param().abi(), iicon).ok()
    }
    pub unsafe fn SetDefaultIcon<P0>(&self, pszfile: P0, iicon: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetDefaultIcon)(::windows_core::Interface::as_raw(self), pszfile.into_param().abi(), iicon).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IDefaultExtractIconInit, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IDefaultExtractIconInit {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDefaultExtractIconInit {}
impl ::core::fmt::Debug for IDefaultExtractIconInit {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDefaultExtractIconInit").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IDefaultExtractIconInit {
    type Vtable = IDefaultExtractIconInit_Vtbl;
}
impl ::core::clone::Clone for IDefaultExtractIconInit {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDefaultExtractIconInit {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x41ded17d_d6b3_4261_997d_88c60e4b1d58);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDefaultExtractIconInit_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, uflags: u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Registry")]
    pub SetKey: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hkey: super::super::System::Registry::HKEY) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Registry"))]
    SetKey: usize,
    pub SetNormalIcon: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PCWSTR, iicon: i32) -> ::windows_core::HRESULT,
    pub SetOpenIcon: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PCWSTR, iicon: i32) -> ::windows_core::HRESULT,
    pub SetShortcutIcon: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PCWSTR, iicon: i32) -> ::windows_core::HRESULT,
    pub SetDefaultIcon: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PCWSTR, iicon: i32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IDefaultFolderMenuInitialize(::windows_core::IUnknown);
impl IDefaultFolderMenuInitialize {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn Initialize<P0, P1, P2, P3>(&self, hwnd: P0, pcmcb: P1, pidlfolder: ::core::option::Option<*const Common::ITEMIDLIST>, psf: P2, apidl: &[*const Common::ITEMIDLIST], punkassociation: P3, ckeys: u32, akeys: ::core::option::Option<*const super::super::System::Registry::HKEY>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<IContextMenuCB>,
        P2: ::windows_core::IntoParam<IShellFolder>,
        P3: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), pcmcb.into_param().abi(), ::core::mem::transmute(pidlfolder.unwrap_or(::std::ptr::null())), psf.into_param().abi(), apidl.len() as _, ::core::mem::transmute(apidl.as_ptr()), punkassociation.into_param().abi(), ckeys, ::core::mem::transmute(akeys.unwrap_or(::std::ptr::null()))).ok()
    }
    pub unsafe fn SetMenuRestrictions(&self, dfmrvalues: DEFAULT_FOLDER_MENU_RESTRICTIONS) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetMenuRestrictions)(::windows_core::Interface::as_raw(self), dfmrvalues).ok()
    }
    pub unsafe fn GetMenuRestrictions(&self, dfmrmask: DEFAULT_FOLDER_MENU_RESTRICTIONS) -> ::windows_core::Result<DEFAULT_FOLDER_MENU_RESTRICTIONS> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetMenuRestrictions)(::windows_core::Interface::as_raw(self), dfmrmask, &mut result__).from_abi(result__)
    }
    pub unsafe fn SetHandlerClsid(&self, rclsid: *const ::windows_core::GUID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetHandlerClsid)(::windows_core::Interface::as_raw(self), rclsid).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IDefaultFolderMenuInitialize, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IDefaultFolderMenuInitialize {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDefaultFolderMenuInitialize {}
impl ::core::fmt::Debug for IDefaultFolderMenuInitialize {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDefaultFolderMenuInitialize").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IDefaultFolderMenuInitialize {
    type Vtable = IDefaultFolderMenuInitialize_Vtbl;
}
impl ::core::clone::Clone for IDefaultFolderMenuInitialize {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDefaultFolderMenuInitialize {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x7690aa79_f8fc_4615_a327_36f7d18f5d91);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDefaultFolderMenuInitialize_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common"))]
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pcmcb: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST, psf: *mut ::core::ffi::c_void, cidl: u32, apidl: *const *const Common::ITEMIDLIST, punkassociation: *mut ::core::ffi::c_void, ckeys: u32, akeys: *const super::super::System::Registry::HKEY) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common")))]
    Initialize: usize,
    pub SetMenuRestrictions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dfmrvalues: DEFAULT_FOLDER_MENU_RESTRICTIONS) -> ::windows_core::HRESULT,
    pub GetMenuRestrictions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dfmrmask: DEFAULT_FOLDER_MENU_RESTRICTIONS, pdfmrvalues: *mut DEFAULT_FOLDER_MENU_RESTRICTIONS) -> ::windows_core::HRESULT,
    pub SetHandlerClsid: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rclsid: *const ::windows_core::GUID) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IDelegateFolder(::windows_core::IUnknown);
impl IDelegateFolder {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetItemAlloc<P0>(&self, pmalloc: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IMalloc>,
    {
        (::windows_core::Interface::vtable(self).SetItemAlloc)(::windows_core::Interface::as_raw(self), pmalloc.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IDelegateFolder, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IDelegateFolder {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDelegateFolder {}
impl ::core::fmt::Debug for IDelegateFolder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDelegateFolder").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IDelegateFolder {
    type Vtable = IDelegateFolder_Vtbl;
}
impl ::core::clone::Clone for IDelegateFolder {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDelegateFolder {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xadd8ba80_002b_11d0_8f0f_00c04fd7d062);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDelegateFolder_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub SetItemAlloc: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmalloc: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetItemAlloc: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IDelegateItem(::windows_core::IUnknown);
impl IDelegateItem {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetItemIDList(&self) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetItemIDList)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetItem(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetItem)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IDelegateItem, ::windows_core::IUnknown, IRelatedItem);
impl ::core::cmp::PartialEq for IDelegateItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDelegateItem {}
impl ::core::fmt::Debug for IDelegateItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDelegateItem").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IDelegateItem {
    type Vtable = IDelegateItem_Vtbl;
}
impl ::core::clone::Clone for IDelegateItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDelegateItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x3c5a1c94_c951_4cb7_bb6d_3b93f30cce93);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDelegateItem_Vtbl {
    pub base__: IRelatedItem_Vtbl,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Ole\"`*"]
#[cfg(feature = "Win32_System_Ole")]
#[repr(transparent)]
pub struct IDeskBand(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Ole")]
impl IDeskBand {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn GetWindow(&self) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetWindow)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn ContextSensitiveHelp<P0>(&self, fentermode: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.ContextSensitiveHelp)(::windows_core::Interface::as_raw(self), fentermode.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ShowDW<P0>(&self, fshow: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.ShowDW)(::windows_core::Interface::as_raw(self), fshow.into_param().abi()).ok()
    }
    pub unsafe fn CloseDW(&self, dwreserved: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.CloseDW)(::windows_core::Interface::as_raw(self), dwreserved).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ResizeBorderDW<P0, P1>(&self, prcborder: *const super::super::Foundation::RECT, punktoolbarsite: P0, freserved: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.ResizeBorderDW)(::windows_core::Interface::as_raw(self), prcborder, punktoolbarsite.into_param().abi(), freserved.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetBandInfo(&self, dwbandid: u32, dwviewmode: u32, pdbi: *mut DESKBANDINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetBandInfo)(::windows_core::Interface::as_raw(self), dwbandid, dwviewmode, pdbi).ok()
    }
}
#[cfg(feature = "Win32_System_Ole")]
::windows_core::imp::interface_hierarchy!(IDeskBand, ::windows_core::IUnknown, super::super::System::Ole::IOleWindow, IDockingWindow);
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::PartialEq for IDeskBand {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::Eq for IDeskBand {}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::fmt::Debug for IDeskBand {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDeskBand").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::Interface for IDeskBand {
    type Vtable = IDeskBand_Vtbl;
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::clone::Clone for IDeskBand {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::ComInterface for IDeskBand {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xeb0fe172_1a3a_11d0_89b3_00a0c90a90ac);
}
#[cfg(feature = "Win32_System_Ole")]
#[repr(C)]
#[doc(hidden)]
pub struct IDeskBand_Vtbl {
    pub base__: IDockingWindow_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub GetBandInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwbandid: u32, dwviewmode: u32, pdbi: *mut DESKBANDINFO) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetBandInfo: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Ole\"`*"]
#[cfg(feature = "Win32_System_Ole")]
#[repr(transparent)]
pub struct IDeskBand2(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Ole")]
impl IDeskBand2 {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn GetWindow(&self) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.GetWindow)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn ContextSensitiveHelp<P0>(&self, fentermode: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.ContextSensitiveHelp)(::windows_core::Interface::as_raw(self), fentermode.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ShowDW<P0>(&self, fshow: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.ShowDW)(::windows_core::Interface::as_raw(self), fshow.into_param().abi()).ok()
    }
    pub unsafe fn CloseDW(&self, dwreserved: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.CloseDW)(::windows_core::Interface::as_raw(self), dwreserved).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ResizeBorderDW<P0, P1>(&self, prcborder: *const super::super::Foundation::RECT, punktoolbarsite: P0, freserved: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.ResizeBorderDW)(::windows_core::Interface::as_raw(self), prcborder, punktoolbarsite.into_param().abi(), freserved.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetBandInfo(&self, dwbandid: u32, dwviewmode: u32, pdbi: *mut DESKBANDINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetBandInfo)(::windows_core::Interface::as_raw(self), dwbandid, dwviewmode, pdbi).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CanRenderComposited(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).CanRenderComposited)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetCompositionState<P0>(&self, fcompositionenabled: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetCompositionState)(::windows_core::Interface::as_raw(self), fcompositionenabled.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetCompositionState(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCompositionState)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Ole")]
::windows_core::imp::interface_hierarchy!(IDeskBand2, ::windows_core::IUnknown, super::super::System::Ole::IOleWindow, IDockingWindow, IDeskBand);
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::PartialEq for IDeskBand2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::Eq for IDeskBand2 {}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::fmt::Debug for IDeskBand2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDeskBand2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::Interface for IDeskBand2 {
    type Vtable = IDeskBand2_Vtbl;
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::clone::Clone for IDeskBand2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::ComInterface for IDeskBand2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x79d16de4_abee_4021_8d9d_9169b261d657);
}
#[cfg(feature = "Win32_System_Ole")]
#[repr(C)]
#[doc(hidden)]
pub struct IDeskBand2_Vtbl {
    pub base__: IDeskBand_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub CanRenderComposited: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfcanrendercomposited: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    CanRenderComposited: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetCompositionState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fcompositionenabled: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetCompositionState: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetCompositionState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfcompositionenabled: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetCompositionState: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IDeskBandInfo(::windows_core::IUnknown);
impl IDeskBandInfo {
    pub unsafe fn GetDefaultBandWidth(&self, dwbandid: u32, dwviewmode: u32) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetDefaultBandWidth)(::windows_core::Interface::as_raw(self), dwbandid, dwviewmode, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IDeskBandInfo, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IDeskBandInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDeskBandInfo {}
impl ::core::fmt::Debug for IDeskBandInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDeskBandInfo").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IDeskBandInfo {
    type Vtable = IDeskBandInfo_Vtbl;
}
impl ::core::clone::Clone for IDeskBandInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDeskBandInfo {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x77e425fc_cbf9_4307_ba6a_bb5727745661);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDeskBandInfo_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetDefaultBandWidth: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwbandid: u32, dwviewmode: u32, pnwidth: *mut i32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Ole\"`*"]
#[cfg(feature = "Win32_System_Ole")]
#[repr(transparent)]
pub struct IDeskBar(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Ole")]
impl IDeskBar {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn GetWindow(&self) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetWindow)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn ContextSensitiveHelp<P0>(&self, fentermode: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.ContextSensitiveHelp)(::windows_core::Interface::as_raw(self), fentermode.into_param().abi()).ok()
    }
    pub unsafe fn SetClient<P0>(&self, punkclient: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).SetClient)(::windows_core::Interface::as_raw(self), punkclient.into_param().abi()).ok()
    }
    pub unsafe fn GetClient(&self) -> ::windows_core::Result<::windows_core::IUnknown> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetClient)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnPosRectChangeDB(&self, prc: *const super::super::Foundation::RECT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).OnPosRectChangeDB)(::windows_core::Interface::as_raw(self), prc).ok()
    }
}
#[cfg(feature = "Win32_System_Ole")]
::windows_core::imp::interface_hierarchy!(IDeskBar, ::windows_core::IUnknown, super::super::System::Ole::IOleWindow);
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::PartialEq for IDeskBar {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::Eq for IDeskBar {}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::fmt::Debug for IDeskBar {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDeskBar").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::Interface for IDeskBar {
    type Vtable = IDeskBar_Vtbl;
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::clone::Clone for IDeskBar {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::ComInterface for IDeskBar {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xeb0fe173_1a3a_11d0_89b3_00a0c90a90ac);
}
#[cfg(feature = "Win32_System_Ole")]
#[repr(C)]
#[doc(hidden)]
pub struct IDeskBar_Vtbl {
    pub base__: super::super::System::Ole::IOleWindow_Vtbl,
    pub SetClient: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punkclient: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetClient: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppunkclient: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub OnPosRectChangeDB: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prc: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    OnPosRectChangeDB: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Ole\"`*"]
#[cfg(feature = "Win32_System_Ole")]
#[repr(transparent)]
pub struct IDeskBarClient(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Ole")]
impl IDeskBarClient {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn GetWindow(&self) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetWindow)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn ContextSensitiveHelp<P0>(&self, fentermode: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.ContextSensitiveHelp)(::windows_core::Interface::as_raw(self), fentermode.into_param().abi()).ok()
    }
    pub unsafe fn SetDeskBarSite<P0>(&self, punksite: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).SetDeskBarSite)(::windows_core::Interface::as_raw(self), punksite.into_param().abi()).ok()
    }
    pub unsafe fn SetModeDBC(&self, dwmode: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetModeDBC)(::windows_core::Interface::as_raw(self), dwmode).ok()
    }
    pub unsafe fn UIActivateDBC(&self, dwstate: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).UIActivateDBC)(::windows_core::Interface::as_raw(self), dwstate).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSize(&self, dwwhich: u32) -> ::windows_core::Result<super::super::Foundation::RECT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSize)(::windows_core::Interface::as_raw(self), dwwhich, &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Ole")]
::windows_core::imp::interface_hierarchy!(IDeskBarClient, ::windows_core::IUnknown, super::super::System::Ole::IOleWindow);
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::PartialEq for IDeskBarClient {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::Eq for IDeskBarClient {}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::fmt::Debug for IDeskBarClient {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDeskBarClient").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::Interface for IDeskBarClient {
    type Vtable = IDeskBarClient_Vtbl;
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::clone::Clone for IDeskBarClient {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::ComInterface for IDeskBarClient {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xeb0fe175_1a3a_11d0_89b3_00a0c90a90ac);
}
#[cfg(feature = "Win32_System_Ole")]
#[repr(C)]
#[doc(hidden)]
pub struct IDeskBarClient_Vtbl {
    pub base__: super::super::System::Ole::IOleWindow_Vtbl,
    pub SetDeskBarSite: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punksite: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SetModeDBC: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwmode: u32) -> ::windows_core::HRESULT,
    pub UIActivateDBC: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwstate: u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwwhich: u32, prc: *mut super::super::Foundation::RECT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetSize: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IDesktopGadget(::windows_core::IUnknown);
impl IDesktopGadget {
    pub unsafe fn RunGadget<P0>(&self, gadgetpath: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).RunGadget)(::windows_core::Interface::as_raw(self), gadgetpath.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IDesktopGadget, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IDesktopGadget {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDesktopGadget {}
impl ::core::fmt::Debug for IDesktopGadget {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDesktopGadget").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IDesktopGadget {
    type Vtable = IDesktopGadget_Vtbl;
}
impl ::core::clone::Clone for IDesktopGadget {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDesktopGadget {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xc1646bc4_f298_4f91_a204_eb2dd1709d1a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDesktopGadget_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub RunGadget: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, gadgetpath: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IDesktopWallpaper(::windows_core::IUnknown);
impl IDesktopWallpaper {
    pub unsafe fn SetWallpaper<P0, P1>(&self, monitorid: P0, wallpaper: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetWallpaper)(::windows_core::Interface::as_raw(self), monitorid.into_param().abi(), wallpaper.into_param().abi()).ok()
    }
    pub unsafe fn GetWallpaper<P0>(&self, monitorid: P0) -> ::windows_core::Result<::windows_core::PWSTR>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetWallpaper)(::windows_core::Interface::as_raw(self), monitorid.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetMonitorDevicePathAt(&self, monitorindex: u32) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetMonitorDevicePathAt)(::windows_core::Interface::as_raw(self), monitorindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetMonitorDevicePathCount(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetMonitorDevicePathCount)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetMonitorRECT<P0>(&self, monitorid: P0) -> ::windows_core::Result<super::super::Foundation::RECT>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetMonitorRECT)(::windows_core::Interface::as_raw(self), monitorid.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetBackgroundColor<P0>(&self, color: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::COLORREF>,
    {
        (::windows_core::Interface::vtable(self).SetBackgroundColor)(::windows_core::Interface::as_raw(self), color.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetBackgroundColor(&self) -> ::windows_core::Result<super::super::Foundation::COLORREF> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetBackgroundColor)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPosition(&self, position: DESKTOP_WALLPAPER_POSITION) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetPosition)(::windows_core::Interface::as_raw(self), position).ok()
    }
    pub unsafe fn GetPosition(&self) -> ::windows_core::Result<DESKTOP_WALLPAPER_POSITION> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetPosition)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSlideshow<P0>(&self, items: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItemArray>,
    {
        (::windows_core::Interface::vtable(self).SetSlideshow)(::windows_core::Interface::as_raw(self), items.into_param().abi()).ok()
    }
    pub unsafe fn GetSlideshow(&self) -> ::windows_core::Result<IShellItemArray> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSlideshow)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSlideshowOptions(&self, options: DESKTOP_SLIDESHOW_OPTIONS, slideshowtick: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetSlideshowOptions)(::windows_core::Interface::as_raw(self), options, slideshowtick).ok()
    }
    pub unsafe fn GetSlideshowOptions(&self, options: *mut DESKTOP_SLIDESHOW_OPTIONS, slideshowtick: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetSlideshowOptions)(::windows_core::Interface::as_raw(self), options, slideshowtick).ok()
    }
    pub unsafe fn AdvanceSlideshow<P0>(&self, monitorid: P0, direction: DESKTOP_SLIDESHOW_DIRECTION) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).AdvanceSlideshow)(::windows_core::Interface::as_raw(self), monitorid.into_param().abi(), direction).ok()
    }
    pub unsafe fn GetStatus(&self) -> ::windows_core::Result<DESKTOP_SLIDESHOW_STATE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetStatus)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Enable<P0>(&self, enable: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).Enable)(::windows_core::Interface::as_raw(self), enable.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IDesktopWallpaper, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IDesktopWallpaper {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDesktopWallpaper {}
impl ::core::fmt::Debug for IDesktopWallpaper {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDesktopWallpaper").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IDesktopWallpaper {
    type Vtable = IDesktopWallpaper_Vtbl;
}
impl ::core::clone::Clone for IDesktopWallpaper {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDesktopWallpaper {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xb92b56a9_8b55_4e14_9a89_0199bbb6f93b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDesktopWallpaper_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetWallpaper: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, monitorid: ::windows_core::PCWSTR, wallpaper: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub GetWallpaper: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, monitorid: ::windows_core::PCWSTR, wallpaper: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub GetMonitorDevicePathAt: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, monitorindex: u32, monitorid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub GetMonitorDevicePathCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetMonitorRECT: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, monitorid: ::windows_core::PCWSTR, displayrect: *mut super::super::Foundation::RECT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetMonitorRECT: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetBackgroundColor: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, color: super::super::Foundation::COLORREF) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetBackgroundColor: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetBackgroundColor: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, color: *mut super::super::Foundation::COLORREF) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetBackgroundColor: usize,
    pub SetPosition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, position: DESKTOP_WALLPAPER_POSITION) -> ::windows_core::HRESULT,
    pub GetPosition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, position: *mut DESKTOP_WALLPAPER_POSITION) -> ::windows_core::HRESULT,
    pub SetSlideshow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, items: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetSlideshow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, items: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SetSlideshowOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, options: DESKTOP_SLIDESHOW_OPTIONS, slideshowtick: u32) -> ::windows_core::HRESULT,
    pub GetSlideshowOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, options: *mut DESKTOP_SLIDESHOW_OPTIONS, slideshowtick: *mut u32) -> ::windows_core::HRESULT,
    pub AdvanceSlideshow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, monitorid: ::windows_core::PCWSTR, direction: DESKTOP_SLIDESHOW_DIRECTION) -> ::windows_core::HRESULT,
    pub GetStatus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, state: *mut DESKTOP_SLIDESHOW_STATE) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub Enable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, enable: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Enable: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IDestinationStreamFactory(::windows_core::IUnknown);
impl IDestinationStreamFactory {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetDestinationStream(&self) -> ::windows_core::Result<super::super::System::Com::IStream> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetDestinationStream)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IDestinationStreamFactory, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IDestinationStreamFactory {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDestinationStreamFactory {}
impl ::core::fmt::Debug for IDestinationStreamFactory {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDestinationStreamFactory").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IDestinationStreamFactory {
    type Vtable = IDestinationStreamFactory_Vtbl;
}
impl ::core::clone::Clone for IDestinationStreamFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDestinationStreamFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x8a87781b_39a7_4a1f_aab3_a39b9c34a7d9);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDestinationStreamFactory_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub GetDestinationStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppstm: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetDestinationStream: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IDisplayItem(::windows_core::IUnknown);
impl IDisplayItem {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetItemIDList(&self) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetItemIDList)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetItem(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetItem)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IDisplayItem, ::windows_core::IUnknown, IRelatedItem);
impl ::core::cmp::PartialEq for IDisplayItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDisplayItem {}
impl ::core::fmt::Debug for IDisplayItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDisplayItem").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IDisplayItem {
    type Vtable = IDisplayItem_Vtbl;
}
impl ::core::clone::Clone for IDisplayItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDisplayItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xc6fd5997_9f6b_4888_8703_94e80e8cde3f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDisplayItem_Vtbl {
    pub base__: IRelatedItem_Vtbl,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IDocViewSite(::windows_core::IUnknown);
impl IDocViewSite {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn OnSetTitle(&self, pvtitle: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).OnSetTitle)(::windows_core::Interface::as_raw(self), pvtitle).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IDocViewSite, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IDocViewSite {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDocViewSite {}
impl ::core::fmt::Debug for IDocViewSite {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDocViewSite").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IDocViewSite {
    type Vtable = IDocViewSite_Vtbl;
}
impl ::core::clone::Clone for IDocViewSite {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDocViewSite {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x87d605e0_c511_11cf_89a9_00a0c9054129);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDocViewSite_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub OnSetTitle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pvtitle: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    OnSetTitle: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Ole\"`*"]
#[cfg(feature = "Win32_System_Ole")]
#[repr(transparent)]
pub struct IDockingWindow(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Ole")]
impl IDockingWindow {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn GetWindow(&self) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetWindow)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn ContextSensitiveHelp<P0>(&self, fentermode: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.ContextSensitiveHelp)(::windows_core::Interface::as_raw(self), fentermode.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ShowDW<P0>(&self, fshow: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).ShowDW)(::windows_core::Interface::as_raw(self), fshow.into_param().abi()).ok()
    }
    pub unsafe fn CloseDW(&self, dwreserved: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).CloseDW)(::windows_core::Interface::as_raw(self), dwreserved).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ResizeBorderDW<P0, P1>(&self, prcborder: *const super::super::Foundation::RECT, punktoolbarsite: P0, freserved: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).ResizeBorderDW)(::windows_core::Interface::as_raw(self), prcborder, punktoolbarsite.into_param().abi(), freserved.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Ole")]
::windows_core::imp::interface_hierarchy!(IDockingWindow, ::windows_core::IUnknown, super::super::System::Ole::IOleWindow);
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::PartialEq for IDockingWindow {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::Eq for IDockingWindow {}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::fmt::Debug for IDockingWindow {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDockingWindow").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::Interface for IDockingWindow {
    type Vtable = IDockingWindow_Vtbl;
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::clone::Clone for IDockingWindow {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::ComInterface for IDockingWindow {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x012dd920_7b26_11d0_8ca9_00a0c92dbfe8);
}
#[cfg(feature = "Win32_System_Ole")]
#[repr(C)]
#[doc(hidden)]
pub struct IDockingWindow_Vtbl {
    pub base__: super::super::System::Ole::IOleWindow_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub ShowDW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fshow: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ShowDW: usize,
    pub CloseDW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwreserved: u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub ResizeBorderDW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prcborder: *const super::super::Foundation::RECT, punktoolbarsite: *mut ::core::ffi::c_void, freserved: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ResizeBorderDW: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Ole\"`*"]
#[cfg(feature = "Win32_System_Ole")]
#[repr(transparent)]
pub struct IDockingWindowFrame(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Ole")]
impl IDockingWindowFrame {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn GetWindow(&self) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetWindow)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn ContextSensitiveHelp<P0>(&self, fentermode: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.ContextSensitiveHelp)(::windows_core::Interface::as_raw(self), fentermode.into_param().abi()).ok()
    }
    pub unsafe fn AddToolbar<P0, P1>(&self, punksrc: P0, pwszitem: P1, dwaddflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).AddToolbar)(::windows_core::Interface::as_raw(self), punksrc.into_param().abi(), pwszitem.into_param().abi(), dwaddflags).ok()
    }
    pub unsafe fn RemoveToolbar<P0>(&self, punksrc: P0, dwremoveflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).RemoveToolbar)(::windows_core::Interface::as_raw(self), punksrc.into_param().abi(), dwremoveflags).ok()
    }
    pub unsafe fn FindToolbar<P0>(&self, pwszitem: P0, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).FindToolbar)(::windows_core::Interface::as_raw(self), pwszitem.into_param().abi(), riid, ppv).ok()
    }
}
#[cfg(feature = "Win32_System_Ole")]
::windows_core::imp::interface_hierarchy!(IDockingWindowFrame, ::windows_core::IUnknown, super::super::System::Ole::IOleWindow);
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::PartialEq for IDockingWindowFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::Eq for IDockingWindowFrame {}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::fmt::Debug for IDockingWindowFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDockingWindowFrame").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::Interface for IDockingWindowFrame {
    type Vtable = IDockingWindowFrame_Vtbl;
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::clone::Clone for IDockingWindowFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::ComInterface for IDockingWindowFrame {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x47d2657a_7b27_11d0_8ca9_00a0c92dbfe8);
}
#[cfg(feature = "Win32_System_Ole")]
#[repr(C)]
#[doc(hidden)]
pub struct IDockingWindowFrame_Vtbl {
    pub base__: super::super::System::Ole::IOleWindow_Vtbl,
    pub AddToolbar: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punksrc: *mut ::core::ffi::c_void, pwszitem: ::windows_core::PCWSTR, dwaddflags: u32) -> ::windows_core::HRESULT,
    pub RemoveToolbar: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punksrc: *mut ::core::ffi::c_void, dwremoveflags: u32) -> ::windows_core::HRESULT,
    pub FindToolbar: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwszitem: ::windows_core::PCWSTR, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Ole\"`*"]
#[cfg(feature = "Win32_System_Ole")]
#[repr(transparent)]
pub struct IDockingWindowSite(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Ole")]
impl IDockingWindowSite {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn GetWindow(&self) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetWindow)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn ContextSensitiveHelp<P0>(&self, fentermode: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.ContextSensitiveHelp)(::windows_core::Interface::as_raw(self), fentermode.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetBorderDW<P0>(&self, punkobj: P0) -> ::windows_core::Result<super::super::Foundation::RECT>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetBorderDW)(::windows_core::Interface::as_raw(self), punkobj.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RequestBorderSpaceDW<P0>(&self, punkobj: P0, pbw: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).RequestBorderSpaceDW)(::windows_core::Interface::as_raw(self), punkobj.into_param().abi(), pbw).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetBorderSpaceDW<P0>(&self, punkobj: P0, pbw: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).SetBorderSpaceDW)(::windows_core::Interface::as_raw(self), punkobj.into_param().abi(), pbw).ok()
    }
}
#[cfg(feature = "Win32_System_Ole")]
::windows_core::imp::interface_hierarchy!(IDockingWindowSite, ::windows_core::IUnknown, super::super::System::Ole::IOleWindow);
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::PartialEq for IDockingWindowSite {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::Eq for IDockingWindowSite {}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::fmt::Debug for IDockingWindowSite {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDockingWindowSite").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::Interface for IDockingWindowSite {
    type Vtable = IDockingWindowSite_Vtbl;
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::clone::Clone for IDockingWindowSite {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::ComInterface for IDockingWindowSite {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x2a342fc2_7b26_11d0_8ca9_00a0c92dbfe8);
}
#[cfg(feature = "Win32_System_Ole")]
#[repr(C)]
#[doc(hidden)]
pub struct IDockingWindowSite_Vtbl {
    pub base__: super::super::System::Ole::IOleWindow_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub GetBorderDW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punkobj: *mut ::core::ffi::c_void, prcborder: *mut super::super::Foundation::RECT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetBorderDW: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub RequestBorderSpaceDW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punkobj: *mut ::core::ffi::c_void, pbw: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RequestBorderSpaceDW: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetBorderSpaceDW: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punkobj: *mut ::core::ffi::c_void, pbw: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetBorderSpaceDW: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IDragSourceHelper(::windows_core::IUnknown);
impl IDragSourceHelper {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com"))]
    pub unsafe fn InitializeFromBitmap<P0>(&self, pshdi: *const SHDRAGIMAGE, pdataobject: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    {
        (::windows_core::Interface::vtable(self).InitializeFromBitmap)(::windows_core::Interface::as_raw(self), pshdi, pdataobject.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn InitializeFromWindow<P0, P1>(&self, hwnd: P0, ppt: ::core::option::Option<*const super::super::Foundation::POINT>, pdataobject: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    {
        (::windows_core::Interface::vtable(self).InitializeFromWindow)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), ::core::mem::transmute(ppt.unwrap_or(::std::ptr::null())), pdataobject.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IDragSourceHelper, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IDragSourceHelper {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDragSourceHelper {}
impl ::core::fmt::Debug for IDragSourceHelper {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDragSourceHelper").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IDragSourceHelper {
    type Vtable = IDragSourceHelper_Vtbl;
}
impl ::core::clone::Clone for IDragSourceHelper {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDragSourceHelper {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xde5bf786_477a_11d2_839d_00c04fd918d0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragSourceHelper_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com"))]
    pub InitializeFromBitmap: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pshdi: *const SHDRAGIMAGE, pdataobject: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com")))]
    InitializeFromBitmap: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub InitializeFromWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, ppt: *const super::super::Foundation::POINT, pdataobject: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com")))]
    InitializeFromWindow: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IDragSourceHelper2(::windows_core::IUnknown);
impl IDragSourceHelper2 {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com"))]
    pub unsafe fn InitializeFromBitmap<P0>(&self, pshdi: *const SHDRAGIMAGE, pdataobject: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    {
        (::windows_core::Interface::vtable(self).base__.InitializeFromBitmap)(::windows_core::Interface::as_raw(self), pshdi, pdataobject.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn InitializeFromWindow<P0, P1>(&self, hwnd: P0, ppt: ::core::option::Option<*const super::super::Foundation::POINT>, pdataobject: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    {
        (::windows_core::Interface::vtable(self).base__.InitializeFromWindow)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), ::core::mem::transmute(ppt.unwrap_or(::std::ptr::null())), pdataobject.into_param().abi()).ok()
    }
    pub unsafe fn SetFlags(&self, dwflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFlags)(::windows_core::Interface::as_raw(self), dwflags).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IDragSourceHelper2, ::windows_core::IUnknown, IDragSourceHelper);
impl ::core::cmp::PartialEq for IDragSourceHelper2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDragSourceHelper2 {}
impl ::core::fmt::Debug for IDragSourceHelper2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDragSourceHelper2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IDragSourceHelper2 {
    type Vtable = IDragSourceHelper2_Vtbl;
}
impl ::core::clone::Clone for IDragSourceHelper2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDragSourceHelper2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x83e07d0d_0c5f_4163_bf1a_60b274051e40);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDragSourceHelper2_Vtbl {
    pub base__: IDragSourceHelper_Vtbl,
    pub SetFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IDropTargetHelper(::windows_core::IUnknown);
impl IDropTargetHelper {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn DragEnter<P0, P1>(&self, hwndtarget: P0, pdataobject: P1, ppt: *const super::super::Foundation::POINT, dweffect: super::super::System::Ole::DROPEFFECT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    {
        (::windows_core::Interface::vtable(self).DragEnter)(::windows_core::Interface::as_raw(self), hwndtarget.into_param().abi(), pdataobject.into_param().abi(), ppt, dweffect).ok()
    }
    pub unsafe fn DragLeave(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).DragLeave)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn DragOver(&self, ppt: *const super::super::Foundation::POINT, dweffect: super::super::System::Ole::DROPEFFECT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).DragOver)(::windows_core::Interface::as_raw(self), ppt, dweffect).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub unsafe fn Drop<P0>(&self, pdataobject: P0, ppt: *const super::super::Foundation::POINT, dweffect: super::super::System::Ole::DROPEFFECT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    {
        (::windows_core::Interface::vtable(self).Drop)(::windows_core::Interface::as_raw(self), pdataobject.into_param().abi(), ppt, dweffect).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Show<P0>(&self, fshow: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).Show)(::windows_core::Interface::as_raw(self), fshow.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IDropTargetHelper, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IDropTargetHelper {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDropTargetHelper {}
impl ::core::fmt::Debug for IDropTargetHelper {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDropTargetHelper").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IDropTargetHelper {
    type Vtable = IDropTargetHelper_Vtbl;
}
impl ::core::clone::Clone for IDropTargetHelper {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDropTargetHelper {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x4657278b_411b_11d2_839a_00c04fd918d0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDropTargetHelper_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub DragEnter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwndtarget: super::super::Foundation::HWND, pdataobject: *mut ::core::ffi::c_void, ppt: *const super::super::Foundation::POINT, dweffect: super::super::System::Ole::DROPEFFECT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    DragEnter: usize,
    pub DragLeave: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub DragOver: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppt: *const super::super::Foundation::POINT, dweffect: super::super::System::Ole::DROPEFFECT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole")))]
    DragOver: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
    pub Drop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdataobject: *mut ::core::ffi::c_void, ppt: *const super::super::Foundation::POINT, dweffect: super::super::System::Ole::DROPEFFECT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole")))]
    Drop: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub Show: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fshow: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Show: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IDynamicHWHandler(::windows_core::IUnknown);
impl IDynamicHWHandler {
    pub unsafe fn GetDynamicInfo<P0>(&self, pszdeviceid: P0, dwcontenttype: u32) -> ::windows_core::Result<::windows_core::PWSTR>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetDynamicInfo)(::windows_core::Interface::as_raw(self), pszdeviceid.into_param().abi(), dwcontenttype, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IDynamicHWHandler, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IDynamicHWHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IDynamicHWHandler {}
impl ::core::fmt::Debug for IDynamicHWHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IDynamicHWHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IDynamicHWHandler {
    type Vtable = IDynamicHWHandler_Vtbl;
}
impl ::core::clone::Clone for IDynamicHWHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IDynamicHWHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xdc2601d7_059e_42fc_a09d_2afd21b6d5f7);
}
#[repr(C)]
#[doc(hidden)]
pub struct IDynamicHWHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetDynamicInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszdeviceid: ::windows_core::PCWSTR, dwcontenttype: u32, ppszaction: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IEnumACString(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IEnumACString {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Next(&self, rgelt: &mut [::windows_core::PWSTR], pceltfetched: ::core::option::Option<*mut u32>) -> ::windows_core::HRESULT {
        (::windows_core::Interface::vtable(self).base__.Next)(::windows_core::Interface::as_raw(self), rgelt.len() as _, ::core::mem::transmute(rgelt.as_ptr()), ::core::mem::transmute(pceltfetched.unwrap_or(::std::ptr::null_mut())))
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Skip(&self, celt: u32) -> ::windows_core::HRESULT {
        (::windows_core::Interface::vtable(self).base__.Skip)(::windows_core::Interface::as_raw(self), celt)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Reset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Reset)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Clone(&self) -> ::windows_core::Result<super::super::System::Com::IEnumString> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Clone)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn NextItem(&self, pszurl: ::core::option::Option<&mut [u16]>, pulsortindex: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).NextItem)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszurl.as_deref().map_or(::core::ptr::null(), |slice| slice.as_ptr())), pszurl.as_deref().map_or(0, |slice| slice.len() as _), pulsortindex).ok()
    }
    pub unsafe fn SetEnumOptions(&self, dwoptions: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetEnumOptions)(::windows_core::Interface::as_raw(self), dwoptions).ok()
    }
    pub unsafe fn GetEnumOptions(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetEnumOptions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IEnumACString, ::windows_core::IUnknown, super::super::System::Com::IEnumString);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IEnumACString {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IEnumACString {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IEnumACString {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumACString").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IEnumACString {
    type Vtable = IEnumACString_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IEnumACString {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IEnumACString {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x8e74c210_cf9d_4eaf_a403_7356428f0a5a);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IEnumACString_Vtbl {
    pub base__: super::super::System::Com::IEnumString_Vtbl,
    pub NextItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszurl: ::windows_core::PWSTR, cchmax: u32, pulsortindex: *mut u32) -> ::windows_core::HRESULT,
    pub SetEnumOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwoptions: u32) -> ::windows_core::HRESULT,
    pub GetEnumOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwoptions: *mut u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IEnumAssocHandlers(::windows_core::IUnknown);
impl IEnumAssocHandlers {
    pub unsafe fn Next(&self, rgelt: &mut [::core::option::Option<IAssocHandler>], pceltfetched: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Next)(::windows_core::Interface::as_raw(self), rgelt.len() as _, ::core::mem::transmute(rgelt.as_ptr()), ::core::mem::transmute(pceltfetched.unwrap_or(::std::ptr::null_mut()))).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IEnumAssocHandlers, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IEnumAssocHandlers {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumAssocHandlers {}
impl ::core::fmt::Debug for IEnumAssocHandlers {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumAssocHandlers").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IEnumAssocHandlers {
    type Vtable = IEnumAssocHandlers_Vtbl;
}
impl ::core::clone::Clone for IEnumAssocHandlers {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IEnumAssocHandlers {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x973810ae_9599_4b88_9e4d_6ee98c9552da);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumAssocHandlers_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IEnumExplorerCommand(::windows_core::IUnknown);
impl IEnumExplorerCommand {
    pub unsafe fn Next(&self, puicommand: &mut [::core::option::Option<IExplorerCommand>], pceltfetched: ::core::option::Option<*mut u32>) -> ::windows_core::HRESULT {
        (::windows_core::Interface::vtable(self).Next)(::windows_core::Interface::as_raw(self), puicommand.len() as _, ::core::mem::transmute(puicommand.as_ptr()), ::core::mem::transmute(pceltfetched.unwrap_or(::std::ptr::null_mut())))
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Skip)(::windows_core::Interface::as_raw(self), celt).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Reset)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows_core::Result<IEnumExplorerCommand> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Clone)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IEnumExplorerCommand, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IEnumExplorerCommand {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumExplorerCommand {}
impl ::core::fmt::Debug for IEnumExplorerCommand {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumExplorerCommand").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IEnumExplorerCommand {
    type Vtable = IEnumExplorerCommand_Vtbl;
}
impl ::core::clone::Clone for IEnumExplorerCommand {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IEnumExplorerCommand {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xa88826f8_186f_4987_aade_ea0cef8fbfe8);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumExplorerCommand_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, puicommand: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IEnumExtraSearch(::windows_core::IUnknown);
impl IEnumExtraSearch {
    pub unsafe fn Next(&self, rgelt: &mut [EXTRASEARCH], pceltfetched: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Next)(::windows_core::Interface::as_raw(self), rgelt.len() as _, ::core::mem::transmute(rgelt.as_ptr()), pceltfetched).ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Skip)(::windows_core::Interface::as_raw(self), celt).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Reset)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows_core::Result<IEnumExtraSearch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Clone)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IEnumExtraSearch, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IEnumExtraSearch {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumExtraSearch {}
impl ::core::fmt::Debug for IEnumExtraSearch {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumExtraSearch").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IEnumExtraSearch {
    type Vtable = IEnumExtraSearch_Vtbl;
}
impl ::core::clone::Clone for IEnumExtraSearch {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IEnumExtraSearch {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x0e700be1_9db6_11d1_a1ce_00c04fd75d13);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumExtraSearch_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut EXTRASEARCH, pceltfetched: *mut u32) -> ::windows_core::HRESULT,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IEnumFullIDList(::windows_core::IUnknown);
impl IEnumFullIDList {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn Next(&self, rgelt: &mut [*mut Common::ITEMIDLIST], pceltfetched: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Next)(::windows_core::Interface::as_raw(self), rgelt.len() as _, ::core::mem::transmute(rgelt.as_ptr()), ::core::mem::transmute(pceltfetched.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Skip)(::windows_core::Interface::as_raw(self), celt).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Reset)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows_core::Result<IEnumFullIDList> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Clone)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IEnumFullIDList, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IEnumFullIDList {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumFullIDList {}
impl ::core::fmt::Debug for IEnumFullIDList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumFullIDList").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IEnumFullIDList {
    type Vtable = IEnumFullIDList_Vtbl;
}
impl ::core::clone::Clone for IEnumFullIDList {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IEnumFullIDList {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xd0191542_7954_4908_bc06_b2360bbe45ba);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumFullIDList_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut Common::ITEMIDLIST, pceltfetched: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    Next: usize,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IEnumHLITEM(::windows_core::IUnknown);
impl IEnumHLITEM {
    pub unsafe fn Next(&self, celt: u32, rgelt: *mut HLITEM, pceltfetched: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Next)(::windows_core::Interface::as_raw(self), celt, rgelt, pceltfetched).ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Skip)(::windows_core::Interface::as_raw(self), celt).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Reset)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows_core::Result<IEnumHLITEM> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Clone)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IEnumHLITEM, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IEnumHLITEM {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumHLITEM {}
impl ::core::fmt::Debug for IEnumHLITEM {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumHLITEM").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IEnumHLITEM {
    type Vtable = IEnumHLITEM_Vtbl;
}
impl ::core::clone::Clone for IEnumHLITEM {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IEnumHLITEM {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x79eac9c6_baf9_11ce_8c82_00aa004ba90b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumHLITEM_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut HLITEM, pceltfetched: *mut u32) -> ::windows_core::HRESULT,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppienumhlitem: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IEnumIDList(::windows_core::IUnknown);
impl IEnumIDList {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn Next(&self, rgelt: &mut [*mut Common::ITEMIDLIST], pceltfetched: ::core::option::Option<*mut u32>) -> ::windows_core::HRESULT {
        (::windows_core::Interface::vtable(self).Next)(::windows_core::Interface::as_raw(self), rgelt.len() as _, ::core::mem::transmute(rgelt.as_ptr()), ::core::mem::transmute(pceltfetched.unwrap_or(::std::ptr::null_mut())))
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows_core::HRESULT {
        (::windows_core::Interface::vtable(self).Skip)(::windows_core::Interface::as_raw(self), celt)
    }
    pub unsafe fn Reset(&self) -> ::windows_core::HRESULT {
        (::windows_core::Interface::vtable(self).Reset)(::windows_core::Interface::as_raw(self))
    }
    pub unsafe fn Clone(&self, ppenum: *mut ::core::option::Option<IEnumIDList>) -> ::windows_core::HRESULT {
        (::windows_core::Interface::vtable(self).Clone)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(ppenum))
    }
}
::windows_core::imp::interface_hierarchy!(IEnumIDList, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IEnumIDList {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumIDList {}
impl ::core::fmt::Debug for IEnumIDList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumIDList").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IEnumIDList {
    type Vtable = IEnumIDList_Vtbl;
}
impl ::core::clone::Clone for IEnumIDList {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IEnumIDList {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214f2_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumIDList_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut Common::ITEMIDLIST, pceltfetched: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    Next: usize,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IEnumObjects(::windows_core::IUnknown);
impl IEnumObjects {
    pub unsafe fn Next(&self, riid: *const ::windows_core::GUID, rgelt: &mut [*mut ::core::ffi::c_void], pceltfetched: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Next)(::windows_core::Interface::as_raw(self), rgelt.len() as _, riid, ::core::mem::transmute(rgelt.as_ptr()), ::core::mem::transmute(pceltfetched.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Skip)(::windows_core::Interface::as_raw(self), celt).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Reset)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows_core::Result<IEnumObjects> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Clone)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IEnumObjects, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IEnumObjects {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumObjects {}
impl ::core::fmt::Debug for IEnumObjects {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumObjects").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IEnumObjects {
    type Vtable = IEnumObjects_Vtbl;
}
impl ::core::clone::Clone for IEnumObjects {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IEnumObjects {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x2c1c7e2e_2d0e_4059_831e_1e6f82335c2e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumObjects_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, riid: *const ::windows_core::GUID, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IEnumPublishedApps(::windows_core::IUnknown);
impl IEnumPublishedApps {
    pub unsafe fn Next(&self) -> ::windows_core::Result<IPublishedApp> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Next)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Reset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Reset)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IEnumPublishedApps, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IEnumPublishedApps {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumPublishedApps {}
impl ::core::fmt::Debug for IEnumPublishedApps {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumPublishedApps").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IEnumPublishedApps {
    type Vtable = IEnumPublishedApps_Vtbl;
}
impl ::core::clone::Clone for IEnumPublishedApps {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IEnumPublishedApps {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x0b124f8c_91f0_11d1_b8b5_006008059382);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumPublishedApps_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pia: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IEnumReadyCallback(::windows_core::IUnknown);
impl IEnumReadyCallback {
    pub unsafe fn EnumReady(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).EnumReady)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IEnumReadyCallback, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IEnumReadyCallback {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumReadyCallback {}
impl ::core::fmt::Debug for IEnumReadyCallback {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumReadyCallback").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IEnumReadyCallback {
    type Vtable = IEnumReadyCallback_Vtbl;
}
impl ::core::clone::Clone for IEnumReadyCallback {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IEnumReadyCallback {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x61e00d45_8fff_4e60_924e_6537b61612dd);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumReadyCallback_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub EnumReady: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IEnumResources(::windows_core::IUnknown);
impl IEnumResources {
    pub unsafe fn Next(&self, psir: &mut [SHELL_ITEM_RESOURCE], pceltfetched: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Next)(::windows_core::Interface::as_raw(self), psir.len() as _, ::core::mem::transmute(psir.as_ptr()), pceltfetched).ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Skip)(::windows_core::Interface::as_raw(self), celt).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Reset)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows_core::Result<IEnumResources> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Clone)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IEnumResources, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IEnumResources {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumResources {}
impl ::core::fmt::Debug for IEnumResources {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumResources").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IEnumResources {
    type Vtable = IEnumResources_Vtbl;
}
impl ::core::clone::Clone for IEnumResources {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IEnumResources {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x2dd81fe3_a83c_4da9_a330_47249d345ba1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumResources_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, psir: *mut SHELL_ITEM_RESOURCE, pceltfetched: *mut u32) -> ::windows_core::HRESULT,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenumr: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IEnumShellItems(::windows_core::IUnknown);
impl IEnumShellItems {
    pub unsafe fn Next(&self, rgelt: &mut [::core::option::Option<IShellItem>], pceltfetched: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Next)(::windows_core::Interface::as_raw(self), rgelt.len() as _, ::core::mem::transmute(rgelt.as_ptr()), ::core::mem::transmute(pceltfetched.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Skip)(::windows_core::Interface::as_raw(self), celt).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Reset)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows_core::Result<IEnumShellItems> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Clone)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IEnumShellItems, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IEnumShellItems {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumShellItems {}
impl ::core::fmt::Debug for IEnumShellItems {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumShellItems").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IEnumShellItems {
    type Vtable = IEnumShellItems_Vtbl;
}
impl ::core::clone::Clone for IEnumShellItems {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IEnumShellItems {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x70629033_e363_4a28_a567_0db78006e6d7);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumShellItems_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IEnumSyncMgrConflict(::windows_core::IUnknown);
impl IEnumSyncMgrConflict {
    pub unsafe fn Next(&self, rgelt: &mut [::core::option::Option<ISyncMgrConflict>], pceltfetched: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Next)(::windows_core::Interface::as_raw(self), rgelt.len() as _, ::core::mem::transmute(rgelt.as_ptr()), pceltfetched).ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Skip)(::windows_core::Interface::as_raw(self), celt).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Reset)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows_core::Result<IEnumSyncMgrConflict> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Clone)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IEnumSyncMgrConflict, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IEnumSyncMgrConflict {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumSyncMgrConflict {}
impl ::core::fmt::Debug for IEnumSyncMgrConflict {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumSyncMgrConflict").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IEnumSyncMgrConflict {
    type Vtable = IEnumSyncMgrConflict_Vtbl;
}
impl ::core::clone::Clone for IEnumSyncMgrConflict {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IEnumSyncMgrConflict {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x82705914_dda3_4893_ba99_49de6c8c8036);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumSyncMgrConflict_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IEnumSyncMgrEvents(::windows_core::IUnknown);
impl IEnumSyncMgrEvents {
    pub unsafe fn Next(&self, rgelt: &mut [::core::option::Option<ISyncMgrEvent>], pceltfetched: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Next)(::windows_core::Interface::as_raw(self), rgelt.len() as _, ::core::mem::transmute(rgelt.as_ptr()), pceltfetched).ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Skip)(::windows_core::Interface::as_raw(self), celt).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Reset)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows_core::Result<IEnumSyncMgrEvents> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Clone)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IEnumSyncMgrEvents, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IEnumSyncMgrEvents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumSyncMgrEvents {}
impl ::core::fmt::Debug for IEnumSyncMgrEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumSyncMgrEvents").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IEnumSyncMgrEvents {
    type Vtable = IEnumSyncMgrEvents_Vtbl;
}
impl ::core::clone::Clone for IEnumSyncMgrEvents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IEnumSyncMgrEvents {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xc81a1d4e_8cf7_4683_80e0_bcae88d677b6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumSyncMgrEvents_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IEnumSyncMgrSyncItems(::windows_core::IUnknown);
impl IEnumSyncMgrSyncItems {
    pub unsafe fn Next(&self, rgelt: &mut [::core::option::Option<ISyncMgrSyncItem>], pceltfetched: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Next)(::windows_core::Interface::as_raw(self), rgelt.len() as _, ::core::mem::transmute(rgelt.as_ptr()), pceltfetched).ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Skip)(::windows_core::Interface::as_raw(self), celt).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Reset)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows_core::Result<IEnumSyncMgrSyncItems> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Clone)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IEnumSyncMgrSyncItems, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IEnumSyncMgrSyncItems {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumSyncMgrSyncItems {}
impl ::core::fmt::Debug for IEnumSyncMgrSyncItems {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumSyncMgrSyncItems").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IEnumSyncMgrSyncItems {
    type Vtable = IEnumSyncMgrSyncItems_Vtbl;
}
impl ::core::clone::Clone for IEnumSyncMgrSyncItems {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IEnumSyncMgrSyncItems {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x54b3abf3_f085_4181_b546_e29c403c726b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumSyncMgrSyncItems_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IEnumTravelLogEntry(::windows_core::IUnknown);
impl IEnumTravelLogEntry {
    pub unsafe fn Next(&self, rgelt: &mut [::core::option::Option<ITravelLogEntry>], pceltfetched: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Next)(::windows_core::Interface::as_raw(self), rgelt.len() as _, ::core::mem::transmute(rgelt.as_ptr()), pceltfetched).ok()
    }
    pub unsafe fn Skip(&self, celt: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Skip)(::windows_core::Interface::as_raw(self), celt).ok()
    }
    pub unsafe fn Reset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Reset)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Clone(&self) -> ::windows_core::Result<IEnumTravelLogEntry> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Clone)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IEnumTravelLogEntry, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IEnumTravelLogEntry {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumTravelLogEntry {}
impl ::core::fmt::Debug for IEnumTravelLogEntry {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumTravelLogEntry").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IEnumTravelLogEntry {
    type Vtable = IEnumTravelLogEntry_Vtbl;
}
impl ::core::clone::Clone for IEnumTravelLogEntry {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IEnumTravelLogEntry {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x7ebfdd85_ad18_11d3_a4c5_00c04f72d6b8);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumTravelLogEntry_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Next: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT,
    pub Skip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT,
    pub Reset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IEnumerableView(::windows_core::IUnknown);
impl IEnumerableView {
    pub unsafe fn SetEnumReadyCallback<P0>(&self, percb: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IEnumReadyCallback>,
    {
        (::windows_core::Interface::vtable(self).SetEnumReadyCallback)(::windows_core::Interface::as_raw(self), percb.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn CreateEnumIDListFromContents(&self, pidlfolder: *const Common::ITEMIDLIST, dwenumflags: u32) -> ::windows_core::Result<IEnumIDList> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).CreateEnumIDListFromContents)(::windows_core::Interface::as_raw(self), pidlfolder, dwenumflags, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IEnumerableView, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IEnumerableView {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IEnumerableView {}
impl ::core::fmt::Debug for IEnumerableView {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IEnumerableView").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IEnumerableView {
    type Vtable = IEnumerableView_Vtbl;
}
impl ::core::clone::Clone for IEnumerableView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IEnumerableView {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x8c8bf236_1aec_495f_9894_91d57c3c686f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IEnumerableView_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetEnumReadyCallback: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, percb: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub CreateEnumIDListFromContents: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST, dwenumflags: u32, ppenumidlist: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    CreateEnumIDListFromContents: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IExecuteCommand(::windows_core::IUnknown);
impl IExecuteCommand {
    pub unsafe fn SetKeyState(&self, grfkeystate: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetKeyState)(::windows_core::Interface::as_raw(self), grfkeystate).ok()
    }
    pub unsafe fn SetParameters<P0>(&self, pszparameters: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetParameters)(::windows_core::Interface::as_raw(self), pszparameters.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetPosition(&self, pt: super::super::Foundation::POINT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetPosition)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pt)).ok()
    }
    pub unsafe fn SetShowWindow(&self, nshow: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetShowWindow)(::windows_core::Interface::as_raw(self), nshow).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetNoShowUI<P0>(&self, fnoshowui: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetNoShowUI)(::windows_core::Interface::as_raw(self), fnoshowui.into_param().abi()).ok()
    }
    pub unsafe fn SetDirectory<P0>(&self, pszdirectory: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetDirectory)(::windows_core::Interface::as_raw(self), pszdirectory.into_param().abi()).ok()
    }
    pub unsafe fn Execute(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Execute)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IExecuteCommand, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IExecuteCommand {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IExecuteCommand {}
impl ::core::fmt::Debug for IExecuteCommand {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IExecuteCommand").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IExecuteCommand {
    type Vtable = IExecuteCommand_Vtbl;
}
impl ::core::clone::Clone for IExecuteCommand {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IExecuteCommand {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x7f9185b0_cb92_43c5_80a9_92277a4f7b54);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExecuteCommand_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetKeyState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, grfkeystate: u32) -> ::windows_core::HRESULT,
    pub SetParameters: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszparameters: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetPosition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pt: super::super::Foundation::POINT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetPosition: usize,
    pub SetShowWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, nshow: i32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetNoShowUI: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fnoshowui: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetNoShowUI: usize,
    pub SetDirectory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszdirectory: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub Execute: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IExecuteCommandApplicationHostEnvironment(::windows_core::IUnknown);
impl IExecuteCommandApplicationHostEnvironment {
    pub unsafe fn GetValue(&self) -> ::windows_core::Result<AHE_TYPE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetValue)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IExecuteCommandApplicationHostEnvironment, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IExecuteCommandApplicationHostEnvironment {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IExecuteCommandApplicationHostEnvironment {}
impl ::core::fmt::Debug for IExecuteCommandApplicationHostEnvironment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IExecuteCommandApplicationHostEnvironment").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IExecuteCommandApplicationHostEnvironment {
    type Vtable = IExecuteCommandApplicationHostEnvironment_Vtbl;
}
impl ::core::clone::Clone for IExecuteCommandApplicationHostEnvironment {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IExecuteCommandApplicationHostEnvironment {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x18b21aa9_e184_4ff0_9f5e_f882d03771b3);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExecuteCommandApplicationHostEnvironment_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetValue: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pahe: *mut AHE_TYPE) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IExecuteCommandHost(::windows_core::IUnknown);
impl IExecuteCommandHost {
    pub unsafe fn GetUIMode(&self) -> ::windows_core::Result<EC_HOST_UI_MODE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetUIMode)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IExecuteCommandHost, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IExecuteCommandHost {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IExecuteCommandHost {}
impl ::core::fmt::Debug for IExecuteCommandHost {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IExecuteCommandHost").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IExecuteCommandHost {
    type Vtable = IExecuteCommandHost_Vtbl;
}
impl ::core::clone::Clone for IExecuteCommandHost {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IExecuteCommandHost {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x4b6832a2_5f04_4c9d_b89d_727a15d103e7);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExecuteCommandHost_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetUIMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, puimode: *mut EC_HOST_UI_MODE) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IExpDispSupport(::windows_core::IUnknown);
impl IExpDispSupport {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn FindConnectionPoint(&self, riid: *const ::windows_core::GUID) -> ::windows_core::Result<super::super::System::Com::IConnectionPoint> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).FindConnectionPoint)(::windows_core::Interface::as_raw(self), riid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn OnTranslateAccelerator(&self, pmsg: *const super::WindowsAndMessaging::MSG, grfmodifiers: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).OnTranslateAccelerator)(::windows_core::Interface::as_raw(self), pmsg, grfmodifiers).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn OnInvoke(&self, dispidmember: i32, iid: *const ::windows_core::GUID, lcid: u32, wflags: u16, pdispparams: *const super::super::System::Com::DISPPARAMS, pvarresult: *mut super::super::System::Variant::VARIANT, pexcepinfo: *mut super::super::System::Com::EXCEPINFO, puargerr: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).OnInvoke)(::windows_core::Interface::as_raw(self), dispidmember, iid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IExpDispSupport, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IExpDispSupport {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IExpDispSupport {}
impl ::core::fmt::Debug for IExpDispSupport {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IExpDispSupport").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IExpDispSupport {
    type Vtable = IExpDispSupport_Vtbl;
}
impl ::core::clone::Clone for IExpDispSupport {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IExpDispSupport {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x0d7d1d00_6fc0_11d0_a974_00c04fd705a2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExpDispSupport_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub FindConnectionPoint: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppccp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    FindConnectionPoint: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub OnTranslateAccelerator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG, grfmodifiers: u32) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))]
    OnTranslateAccelerator: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub OnInvoke: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dispidmember: i32, iid: *const ::windows_core::GUID, lcid: u32, wflags: u16, pdispparams: *const super::super::System::Com::DISPPARAMS, pvarresult: *mut super::super::System::Variant::VARIANT, pexcepinfo: *mut super::super::System::Com::EXCEPINFO, puargerr: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    OnInvoke: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IExpDispSupportXP(::windows_core::IUnknown);
impl IExpDispSupportXP {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn FindCIE4ConnectionPoint(&self, riid: *const ::windows_core::GUID) -> ::windows_core::Result<CIE4ConnectionPoint> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).FindCIE4ConnectionPoint)(::windows_core::Interface::as_raw(self), riid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn OnTranslateAccelerator(&self, pmsg: *const super::WindowsAndMessaging::MSG, grfmodifiers: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).OnTranslateAccelerator)(::windows_core::Interface::as_raw(self), pmsg, grfmodifiers).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn OnInvoke(&self, dispidmember: i32, iid: *const ::windows_core::GUID, lcid: u32, wflags: u16, pdispparams: *const super::super::System::Com::DISPPARAMS, pvarresult: *mut super::super::System::Variant::VARIANT, pexcepinfo: *mut super::super::System::Com::EXCEPINFO, puargerr: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).OnInvoke)(::windows_core::Interface::as_raw(self), dispidmember, iid, lcid, wflags, pdispparams, pvarresult, pexcepinfo, puargerr).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IExpDispSupportXP, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IExpDispSupportXP {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IExpDispSupportXP {}
impl ::core::fmt::Debug for IExpDispSupportXP {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IExpDispSupportXP").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IExpDispSupportXP {
    type Vtable = IExpDispSupportXP_Vtbl;
}
impl ::core::clone::Clone for IExpDispSupportXP {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IExpDispSupportXP {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x2f0dd58c_f789_4f14_99fb_9293b3c9c212);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExpDispSupportXP_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub FindCIE4ConnectionPoint: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppccp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    FindCIE4ConnectionPoint: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub OnTranslateAccelerator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG, grfmodifiers: u32) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))]
    OnTranslateAccelerator: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub OnInvoke: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dispidmember: i32, iid: *const ::windows_core::GUID, lcid: u32, wflags: u16, pdispparams: *const super::super::System::Com::DISPPARAMS, pvarresult: *mut super::super::System::Variant::VARIANT, pexcepinfo: *mut super::super::System::Com::EXCEPINFO, puargerr: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    OnInvoke: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IExplorerBrowser(::windows_core::IUnknown);
impl IExplorerBrowser {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Initialize<P0>(&self, hwndparent: P0, prc: *const super::super::Foundation::RECT, pfs: ::core::option::Option<*const FOLDERSETTINGS>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), hwndparent.into_param().abi(), prc, ::core::mem::transmute(pfs.unwrap_or(::std::ptr::null()))).ok()
    }
    pub unsafe fn Destroy(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Destroy)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn SetRect(&self, phdwp: ::core::option::Option<*mut super::WindowsAndMessaging::HDWP>, rcbrowser: super::super::Foundation::RECT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetRect)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(phdwp.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(rcbrowser)).ok()
    }
    pub unsafe fn SetPropertyBag<P0>(&self, pszpropertybag: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetPropertyBag)(::windows_core::Interface::as_raw(self), pszpropertybag.into_param().abi()).ok()
    }
    pub unsafe fn SetEmptyText<P0>(&self, pszemptytext: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetEmptyText)(::windows_core::Interface::as_raw(self), pszemptytext.into_param().abi()).ok()
    }
    pub unsafe fn SetFolderSettings(&self, pfs: *const FOLDERSETTINGS) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFolderSettings)(::windows_core::Interface::as_raw(self), pfs).ok()
    }
    pub unsafe fn Advise<P0>(&self, psbe: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<IExplorerBrowserEvents>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Advise)(::windows_core::Interface::as_raw(self), psbe.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Unadvise(&self, dwcookie: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Unadvise)(::windows_core::Interface::as_raw(self), dwcookie).ok()
    }
    pub unsafe fn SetOptions(&self, dwflag: EXPLORER_BROWSER_OPTIONS) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetOptions)(::windows_core::Interface::as_raw(self), dwflag).ok()
    }
    pub unsafe fn GetOptions(&self) -> ::windows_core::Result<EXPLORER_BROWSER_OPTIONS> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetOptions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn BrowseToIDList(&self, pidl: *const Common::ITEMIDLIST, uflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).BrowseToIDList)(::windows_core::Interface::as_raw(self), pidl, uflags).ok()
    }
    pub unsafe fn BrowseToObject<P0>(&self, punk: P0, uflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).BrowseToObject)(::windows_core::Interface::as_raw(self), punk.into_param().abi(), uflags).ok()
    }
    pub unsafe fn FillFromObject<P0>(&self, punk: P0, dwflags: EXPLORER_BROWSER_FILL_FLAGS) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).FillFromObject)(::windows_core::Interface::as_raw(self), punk.into_param().abi(), dwflags).ok()
    }
    pub unsafe fn RemoveAll(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RemoveAll)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetCurrentView<T>(&self) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetCurrentView)(::windows_core::Interface::as_raw(self), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IExplorerBrowser, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IExplorerBrowser {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IExplorerBrowser {}
impl ::core::fmt::Debug for IExplorerBrowser {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IExplorerBrowser").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IExplorerBrowser {
    type Vtable = IExplorerBrowser_Vtbl;
}
impl ::core::clone::Clone for IExplorerBrowser {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IExplorerBrowser {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xdfd3b6b5_c10c_4be9_85f6_a66969f402f6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExplorerBrowser_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND, prc: *const super::super::Foundation::RECT, pfs: *const FOLDERSETTINGS) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Initialize: usize,
    pub Destroy: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub SetRect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phdwp: *mut super::WindowsAndMessaging::HDWP, rcbrowser: super::super::Foundation::RECT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))]
    SetRect: usize,
    pub SetPropertyBag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszpropertybag: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub SetEmptyText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszemptytext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub SetFolderSettings: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfs: *const FOLDERSETTINGS) -> ::windows_core::HRESULT,
    pub Advise: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psbe: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT,
    pub Unadvise: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows_core::HRESULT,
    pub SetOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflag: EXPLORER_BROWSER_OPTIONS) -> ::windows_core::HRESULT,
    pub GetOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwflag: *mut EXPLORER_BROWSER_OPTIONS) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub BrowseToIDList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, uflags: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    BrowseToIDList: usize,
    pub BrowseToObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, uflags: u32) -> ::windows_core::HRESULT,
    pub FillFromObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, dwflags: EXPLORER_BROWSER_FILL_FLAGS) -> ::windows_core::HRESULT,
    pub RemoveAll: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetCurrentView: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IExplorerBrowserEvents(::windows_core::IUnknown);
impl IExplorerBrowserEvents {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn OnNavigationPending(&self, pidlfolder: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).OnNavigationPending)(::windows_core::Interface::as_raw(self), pidlfolder).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn OnViewCreated<P0>(&self, psv: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).OnViewCreated)(::windows_core::Interface::as_raw(self), psv.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn OnNavigationComplete(&self, pidlfolder: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).OnNavigationComplete)(::windows_core::Interface::as_raw(self), pidlfolder).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn OnNavigationFailed(&self, pidlfolder: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).OnNavigationFailed)(::windows_core::Interface::as_raw(self), pidlfolder).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IExplorerBrowserEvents, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IExplorerBrowserEvents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IExplorerBrowserEvents {}
impl ::core::fmt::Debug for IExplorerBrowserEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IExplorerBrowserEvents").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IExplorerBrowserEvents {
    type Vtable = IExplorerBrowserEvents_Vtbl;
}
impl ::core::clone::Clone for IExplorerBrowserEvents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IExplorerBrowserEvents {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x361bbdc7_e6ee_4e13_be58_58e2240c810f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExplorerBrowserEvents_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub OnNavigationPending: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    OnNavigationPending: usize,
    #[cfg(feature = "Win32_System_Ole")]
    pub OnViewCreated: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psv: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    OnViewCreated: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub OnNavigationComplete: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    OnNavigationComplete: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub OnNavigationFailed: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    OnNavigationFailed: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IExplorerCommand(::windows_core::IUnknown);
impl IExplorerCommand {
    pub unsafe fn GetTitle<P0>(&self, psiitemarray: P0) -> ::windows_core::Result<::windows_core::PWSTR>
    where
        P0: ::windows_core::IntoParam<IShellItemArray>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetTitle)(::windows_core::Interface::as_raw(self), psiitemarray.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetIcon<P0>(&self, psiitemarray: P0) -> ::windows_core::Result<::windows_core::PWSTR>
    where
        P0: ::windows_core::IntoParam<IShellItemArray>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetIcon)(::windows_core::Interface::as_raw(self), psiitemarray.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetToolTip<P0>(&self, psiitemarray: P0) -> ::windows_core::Result<::windows_core::PWSTR>
    where
        P0: ::windows_core::IntoParam<IShellItemArray>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetToolTip)(::windows_core::Interface::as_raw(self), psiitemarray.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCanonicalName(&self) -> ::windows_core::Result<::windows_core::GUID> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCanonicalName)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetState<P0, P1>(&self, psiitemarray: P0, foktobeslow: P1) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<IShellItemArray>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetState)(::windows_core::Interface::as_raw(self), psiitemarray.into_param().abi(), foktobeslow.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Invoke<P0, P1>(&self, psiitemarray: P0, pbc: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItemArray>,
        P1: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
    {
        (::windows_core::Interface::vtable(self).Invoke)(::windows_core::Interface::as_raw(self), psiitemarray.into_param().abi(), pbc.into_param().abi()).ok()
    }
    pub unsafe fn GetFlags(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFlags)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn EnumSubCommands(&self) -> ::windows_core::Result<IEnumExplorerCommand> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).EnumSubCommands)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IExplorerCommand, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IExplorerCommand {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IExplorerCommand {}
impl ::core::fmt::Debug for IExplorerCommand {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IExplorerCommand").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IExplorerCommand {
    type Vtable = IExplorerCommand_Vtbl;
}
impl ::core::clone::Clone for IExplorerCommand {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IExplorerCommand {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xa08ce4d0_fa25_44ab_b57c_c7b1c323e0b9);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExplorerCommand_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetTitle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiitemarray: *mut ::core::ffi::c_void, ppszname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub GetIcon: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiitemarray: *mut ::core::ffi::c_void, ppszicon: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub GetToolTip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiitemarray: *mut ::core::ffi::c_void, ppszinfotip: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub GetCanonicalName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pguidcommandname: *mut ::windows_core::GUID) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiitemarray: *mut ::core::ffi::c_void, foktobeslow: super::super::Foundation::BOOL, pcmdstate: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetState: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Invoke: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiitemarray: *mut ::core::ffi::c_void, pbc: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Invoke: usize,
    pub GetFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pflags: *mut u32) -> ::windows_core::HRESULT,
    pub EnumSubCommands: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IExplorerCommandProvider(::windows_core::IUnknown);
impl IExplorerCommandProvider {
    pub unsafe fn GetCommands<P0, T>(&self, punksite: P0) -> ::windows_core::Result<T>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetCommands)(::windows_core::Interface::as_raw(self), punksite.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCommand<T>(&self, rguidcommandid: *const ::windows_core::GUID) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetCommand)(::windows_core::Interface::as_raw(self), rguidcommandid, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IExplorerCommandProvider, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IExplorerCommandProvider {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IExplorerCommandProvider {}
impl ::core::fmt::Debug for IExplorerCommandProvider {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IExplorerCommandProvider").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IExplorerCommandProvider {
    type Vtable = IExplorerCommandProvider_Vtbl;
}
impl ::core::clone::Clone for IExplorerCommandProvider {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IExplorerCommandProvider {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x64961751_0835_43c0_8ffe_d57686530e64);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExplorerCommandProvider_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetCommands: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punksite: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetCommand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rguidcommandid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IExplorerCommandState(::windows_core::IUnknown);
impl IExplorerCommandState {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetState<P0, P1>(&self, psiitemarray: P0, foktobeslow: P1) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<IShellItemArray>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetState)(::windows_core::Interface::as_raw(self), psiitemarray.into_param().abi(), foktobeslow.into_param().abi(), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IExplorerCommandState, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IExplorerCommandState {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IExplorerCommandState {}
impl ::core::fmt::Debug for IExplorerCommandState {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IExplorerCommandState").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IExplorerCommandState {
    type Vtable = IExplorerCommandState_Vtbl;
}
impl ::core::clone::Clone for IExplorerCommandState {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IExplorerCommandState {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xbddacb60_7657_47ae_8445_d23e1acf82ae);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExplorerCommandState_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub GetState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiitemarray: *mut ::core::ffi::c_void, foktobeslow: super::super::Foundation::BOOL, pcmdstate: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetState: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IExplorerPaneVisibility(::windows_core::IUnknown);
impl IExplorerPaneVisibility {
    pub unsafe fn GetPaneState(&self, ep: *const ::windows_core::GUID) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetPaneState)(::windows_core::Interface::as_raw(self), ep, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IExplorerPaneVisibility, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IExplorerPaneVisibility {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IExplorerPaneVisibility {}
impl ::core::fmt::Debug for IExplorerPaneVisibility {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IExplorerPaneVisibility").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IExplorerPaneVisibility {
    type Vtable = IExplorerPaneVisibility_Vtbl;
}
impl ::core::clone::Clone for IExplorerPaneVisibility {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IExplorerPaneVisibility {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xe07010ec_bc17_44c0_97b0_46c7c95b9edc);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExplorerPaneVisibility_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetPaneState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ep: *const ::windows_core::GUID, peps: *mut u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IExtensionServices(::windows_core::IUnknown);
impl IExtensionServices {
    pub unsafe fn SetAdditionalHeaders<P0>(&self, pwzadditionalheaders: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetAdditionalHeaders)(::windows_core::Interface::as_raw(self), pwzadditionalheaders.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetAuthenticateData<P0, P1, P2>(&self, phwnd: P0, pwzusername: P1, pwzpassword: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetAuthenticateData)(::windows_core::Interface::as_raw(self), phwnd.into_param().abi(), pwzusername.into_param().abi(), pwzpassword.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IExtensionServices, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IExtensionServices {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IExtensionServices {}
impl ::core::fmt::Debug for IExtensionServices {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IExtensionServices").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IExtensionServices {
    type Vtable = IExtensionServices_Vtbl;
}
impl ::core::clone::Clone for IExtensionServices {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IExtensionServices {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x79eac9cb_baf9_11ce_8c82_00aa004ba90b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExtensionServices_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetAdditionalHeaders: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwzadditionalheaders: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetAuthenticateData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phwnd: super::super::Foundation::HWND, pwzusername: ::windows_core::PCWSTR, pwzpassword: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetAuthenticateData: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IExtractIconA(::windows_core::IUnknown);
impl IExtractIconA {
    pub unsafe fn GetIconLocation(&self, uflags: u32, psziconfile: &mut [u8], piindex: *mut i32, pwflags: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetIconLocation)(::windows_core::Interface::as_raw(self), uflags, ::core::mem::transmute(psziconfile.as_ptr()), psziconfile.len() as _, piindex, pwflags).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn Extract<P0>(&self, pszfile: P0, niconindex: u32, phiconlarge: ::core::option::Option<*mut super::WindowsAndMessaging::HICON>, phiconsmall: ::core::option::Option<*mut super::WindowsAndMessaging::HICON>, niconsize: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    {
        (::windows_core::Interface::vtable(self).Extract)(::windows_core::Interface::as_raw(self), pszfile.into_param().abi(), niconindex, ::core::mem::transmute(phiconlarge.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(phiconsmall.unwrap_or(::std::ptr::null_mut())), niconsize).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IExtractIconA, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IExtractIconA {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IExtractIconA {}
impl ::core::fmt::Debug for IExtractIconA {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IExtractIconA").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IExtractIconA {
    type Vtable = IExtractIconA_Vtbl;
}
impl ::core::clone::Clone for IExtractIconA {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IExtractIconA {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214eb_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExtractIconA_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetIconLocation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, uflags: u32, psziconfile: ::windows_core::PSTR, cchmax: u32, piindex: *mut i32, pwflags: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub Extract: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PCSTR, niconindex: u32, phiconlarge: *mut super::WindowsAndMessaging::HICON, phiconsmall: *mut super::WindowsAndMessaging::HICON, niconsize: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_WindowsAndMessaging"))]
    Extract: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IExtractIconW(::windows_core::IUnknown);
impl IExtractIconW {
    pub unsafe fn GetIconLocation(&self, uflags: u32, psziconfile: &mut [u16], piindex: *mut i32, pwflags: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetIconLocation)(::windows_core::Interface::as_raw(self), uflags, ::core::mem::transmute(psziconfile.as_ptr()), psziconfile.len() as _, piindex, pwflags).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn Extract<P0>(&self, pszfile: P0, niconindex: u32, phiconlarge: ::core::option::Option<*mut super::WindowsAndMessaging::HICON>, phiconsmall: ::core::option::Option<*mut super::WindowsAndMessaging::HICON>, niconsize: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).Extract)(::windows_core::Interface::as_raw(self), pszfile.into_param().abi(), niconindex, ::core::mem::transmute(phiconlarge.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(phiconsmall.unwrap_or(::std::ptr::null_mut())), niconsize).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IExtractIconW, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IExtractIconW {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IExtractIconW {}
impl ::core::fmt::Debug for IExtractIconW {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IExtractIconW").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IExtractIconW {
    type Vtable = IExtractIconW_Vtbl;
}
impl ::core::clone::Clone for IExtractIconW {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IExtractIconW {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214fa_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExtractIconW_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetIconLocation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, uflags: u32, psziconfile: ::windows_core::PWSTR, cchmax: u32, piindex: *mut i32, pwflags: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub Extract: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PCWSTR, niconindex: u32, phiconlarge: *mut super::WindowsAndMessaging::HICON, phiconsmall: *mut super::WindowsAndMessaging::HICON, niconsize: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_WindowsAndMessaging"))]
    Extract: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IExtractImage(::windows_core::IUnknown);
impl IExtractImage {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetLocation(&self, pszpathbuffer: &mut [u16], pdwpriority: *mut u32, prgsize: *const super::super::Foundation::SIZE, dwrecclrdepth: u32, pdwflags: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetLocation)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszpathbuffer.as_ptr()), pszpathbuffer.len() as _, pdwpriority, prgsize, dwrecclrdepth, pdwflags).ok()
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn Extract(&self) -> ::windows_core::Result<super::super::Graphics::Gdi::HBITMAP> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Extract)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IExtractImage, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IExtractImage {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IExtractImage {}
impl ::core::fmt::Debug for IExtractImage {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IExtractImage").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IExtractImage {
    type Vtable = IExtractImage_Vtbl;
}
impl ::core::clone::Clone for IExtractImage {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IExtractImage {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xbb2e617c_0920_11d1_9a0b_00c04fc2d6c1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExtractImage_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub GetLocation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszpathbuffer: ::windows_core::PWSTR, cch: u32, pdwpriority: *mut u32, prgsize: *const super::super::Foundation::SIZE, dwrecclrdepth: u32, pdwflags: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetLocation: usize,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub Extract: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phbmpthumbnail: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))]
    Extract: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IExtractImage2(::windows_core::IUnknown);
impl IExtractImage2 {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetLocation(&self, pszpathbuffer: &mut [u16], pdwpriority: *mut u32, prgsize: *const super::super::Foundation::SIZE, dwrecclrdepth: u32, pdwflags: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetLocation)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszpathbuffer.as_ptr()), pszpathbuffer.len() as _, pdwpriority, prgsize, dwrecclrdepth, pdwflags).ok()
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn Extract(&self) -> ::windows_core::Result<super::super::Graphics::Gdi::HBITMAP> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Extract)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetDateStamp(&self) -> ::windows_core::Result<super::super::Foundation::FILETIME> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetDateStamp)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IExtractImage2, ::windows_core::IUnknown, IExtractImage);
impl ::core::cmp::PartialEq for IExtractImage2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IExtractImage2 {}
impl ::core::fmt::Debug for IExtractImage2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IExtractImage2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IExtractImage2 {
    type Vtable = IExtractImage2_Vtbl;
}
impl ::core::clone::Clone for IExtractImage2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IExtractImage2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x953bb1ee_93b4_11d1_98a3_00c04fb687da);
}
#[repr(C)]
#[doc(hidden)]
pub struct IExtractImage2_Vtbl {
    pub base__: IExtractImage_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub GetDateStamp: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdatestamp: *mut super::super::Foundation::FILETIME) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetDateStamp: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFileDialog(::windows_core::IUnknown);
impl IFileDialog {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Show<P0>(&self, hwndowner: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).base__.Show)(::windows_core::Interface::as_raw(self), hwndowner.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn SetFileTypes(&self, rgfilterspec: &[Common::COMDLG_FILTERSPEC]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFileTypes)(::windows_core::Interface::as_raw(self), rgfilterspec.len() as _, ::core::mem::transmute(rgfilterspec.as_ptr())).ok()
    }
    pub unsafe fn SetFileTypeIndex(&self, ifiletype: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFileTypeIndex)(::windows_core::Interface::as_raw(self), ifiletype).ok()
    }
    pub unsafe fn GetFileTypeIndex(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFileTypeIndex)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Advise<P0>(&self, pfde: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<IFileDialogEvents>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Advise)(::windows_core::Interface::as_raw(self), pfde.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Unadvise(&self, dwcookie: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Unadvise)(::windows_core::Interface::as_raw(self), dwcookie).ok()
    }
    pub unsafe fn SetOptions(&self, fos: FILEOPENDIALOGOPTIONS) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetOptions)(::windows_core::Interface::as_raw(self), fos).ok()
    }
    pub unsafe fn GetOptions(&self) -> ::windows_core::Result<FILEOPENDIALOGOPTIONS> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetOptions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDefaultFolder<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).SetDefaultFolder)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn SetFolder<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).SetFolder)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn GetFolder(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFolder)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCurrentSelection(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCurrentSelection)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFileName<P0>(&self, pszname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetFileName)(::windows_core::Interface::as_raw(self), pszname.into_param().abi()).ok()
    }
    pub unsafe fn GetFileName(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFileName)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetTitle<P0>(&self, psztitle: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetTitle)(::windows_core::Interface::as_raw(self), psztitle.into_param().abi()).ok()
    }
    pub unsafe fn SetOkButtonLabel<P0>(&self, psztext: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetOkButtonLabel)(::windows_core::Interface::as_raw(self), psztext.into_param().abi()).ok()
    }
    pub unsafe fn SetFileNameLabel<P0>(&self, pszlabel: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetFileNameLabel)(::windows_core::Interface::as_raw(self), pszlabel.into_param().abi()).ok()
    }
    pub unsafe fn GetResult(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetResult)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AddPlace<P0>(&self, psi: P0, fdap: FDAP) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).AddPlace)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), fdap).ok()
    }
    pub unsafe fn SetDefaultExtension<P0>(&self, pszdefaultextension: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetDefaultExtension)(::windows_core::Interface::as_raw(self), pszdefaultextension.into_param().abi()).ok()
    }
    pub unsafe fn Close(&self, hr: ::windows_core::HRESULT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Close)(::windows_core::Interface::as_raw(self), hr).ok()
    }
    pub unsafe fn SetClientGuid(&self, guid: *const ::windows_core::GUID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetClientGuid)(::windows_core::Interface::as_raw(self), guid).ok()
    }
    pub unsafe fn ClearClientData(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ClearClientData)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetFilter<P0>(&self, pfilter: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItemFilter>,
    {
        (::windows_core::Interface::vtable(self).SetFilter)(::windows_core::Interface::as_raw(self), pfilter.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IFileDialog, ::windows_core::IUnknown, IModalWindow);
impl ::core::cmp::PartialEq for IFileDialog {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFileDialog {}
impl ::core::fmt::Debug for IFileDialog {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFileDialog").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFileDialog {
    type Vtable = IFileDialog_Vtbl;
}
impl ::core::clone::Clone for IFileDialog {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFileDialog {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x42f85136_db7e_439c_85f1_e4075d135fc8);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFileDialog_Vtbl {
    pub base__: IModalWindow_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub SetFileTypes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, cfiletypes: u32, rgfilterspec: *const Common::COMDLG_FILTERSPEC) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    SetFileTypes: usize,
    pub SetFileTypeIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ifiletype: u32) -> ::windows_core::HRESULT,
    pub GetFileTypeIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pifiletype: *mut u32) -> ::windows_core::HRESULT,
    pub Advise: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfde: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT,
    pub Unadvise: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows_core::HRESULT,
    pub SetOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fos: FILEOPENDIALOGOPTIONS) -> ::windows_core::HRESULT,
    pub GetOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfos: *mut FILEOPENDIALOGOPTIONS) -> ::windows_core::HRESULT,
    pub SetDefaultFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SetFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppsi: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetCurrentSelection: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppsi: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SetFileName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub GetFileName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub SetTitle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psztitle: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub SetOkButtonLabel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psztext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub SetFileNameLabel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub GetResult: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppsi: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub AddPlace: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, fdap: FDAP) -> ::windows_core::HRESULT,
    pub SetDefaultExtension: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszdefaultextension: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub Close: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hr: ::windows_core::HRESULT) -> ::windows_core::HRESULT,
    pub SetClientGuid: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, guid: *const ::windows_core::GUID) -> ::windows_core::HRESULT,
    pub ClearClientData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SetFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfilter: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFileDialog2(::windows_core::IUnknown);
impl IFileDialog2 {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Show<P0>(&self, hwndowner: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.Show)(::windows_core::Interface::as_raw(self), hwndowner.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn SetFileTypes(&self, rgfilterspec: &[Common::COMDLG_FILTERSPEC]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetFileTypes)(::windows_core::Interface::as_raw(self), rgfilterspec.len() as _, ::core::mem::transmute(rgfilterspec.as_ptr())).ok()
    }
    pub unsafe fn SetFileTypeIndex(&self, ifiletype: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetFileTypeIndex)(::windows_core::Interface::as_raw(self), ifiletype).ok()
    }
    pub unsafe fn GetFileTypeIndex(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetFileTypeIndex)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Advise<P0>(&self, pfde: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<IFileDialogEvents>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Advise)(::windows_core::Interface::as_raw(self), pfde.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Unadvise(&self, dwcookie: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Unadvise)(::windows_core::Interface::as_raw(self), dwcookie).ok()
    }
    pub unsafe fn SetOptions(&self, fos: FILEOPENDIALOGOPTIONS) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetOptions)(::windows_core::Interface::as_raw(self), fos).ok()
    }
    pub unsafe fn GetOptions(&self) -> ::windows_core::Result<FILEOPENDIALOGOPTIONS> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetOptions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDefaultFolder<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).base__.SetDefaultFolder)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn SetFolder<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFolder)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn GetFolder(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetFolder)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCurrentSelection(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetCurrentSelection)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFileName<P0>(&self, pszname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFileName)(::windows_core::Interface::as_raw(self), pszname.into_param().abi()).ok()
    }
    pub unsafe fn GetFileName(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetFileName)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetTitle<P0>(&self, psztitle: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetTitle)(::windows_core::Interface::as_raw(self), psztitle.into_param().abi()).ok()
    }
    pub unsafe fn SetOkButtonLabel<P0>(&self, psztext: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetOkButtonLabel)(::windows_core::Interface::as_raw(self), psztext.into_param().abi()).ok()
    }
    pub unsafe fn SetFileNameLabel<P0>(&self, pszlabel: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFileNameLabel)(::windows_core::Interface::as_raw(self), pszlabel.into_param().abi()).ok()
    }
    pub unsafe fn GetResult(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetResult)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AddPlace<P0>(&self, psi: P0, fdap: FDAP) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).base__.AddPlace)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), fdap).ok()
    }
    pub unsafe fn SetDefaultExtension<P0>(&self, pszdefaultextension: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetDefaultExtension)(::windows_core::Interface::as_raw(self), pszdefaultextension.into_param().abi()).ok()
    }
    pub unsafe fn Close(&self, hr: ::windows_core::HRESULT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Close)(::windows_core::Interface::as_raw(self), hr).ok()
    }
    pub unsafe fn SetClientGuid(&self, guid: *const ::windows_core::GUID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetClientGuid)(::windows_core::Interface::as_raw(self), guid).ok()
    }
    pub unsafe fn ClearClientData(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.ClearClientData)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetFilter<P0>(&self, pfilter: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItemFilter>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFilter)(::windows_core::Interface::as_raw(self), pfilter.into_param().abi()).ok()
    }
    pub unsafe fn SetCancelButtonLabel<P0>(&self, pszlabel: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetCancelButtonLabel)(::windows_core::Interface::as_raw(self), pszlabel.into_param().abi()).ok()
    }
    pub unsafe fn SetNavigationRoot<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).SetNavigationRoot)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IFileDialog2, ::windows_core::IUnknown, IModalWindow, IFileDialog);
impl ::core::cmp::PartialEq for IFileDialog2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFileDialog2 {}
impl ::core::fmt::Debug for IFileDialog2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFileDialog2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFileDialog2 {
    type Vtable = IFileDialog2_Vtbl;
}
impl ::core::clone::Clone for IFileDialog2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFileDialog2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x61744fc7_85b5_4791_a9b0_272276309b13);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFileDialog2_Vtbl {
    pub base__: IFileDialog_Vtbl,
    pub SetCancelButtonLabel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub SetNavigationRoot: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFileDialogControlEvents(::windows_core::IUnknown);
impl IFileDialogControlEvents {
    pub unsafe fn OnItemSelected<P0>(&self, pfdc: P0, dwidctl: u32, dwiditem: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IFileDialogCustomize>,
    {
        (::windows_core::Interface::vtable(self).OnItemSelected)(::windows_core::Interface::as_raw(self), pfdc.into_param().abi(), dwidctl, dwiditem).ok()
    }
    pub unsafe fn OnButtonClicked<P0>(&self, pfdc: P0, dwidctl: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IFileDialogCustomize>,
    {
        (::windows_core::Interface::vtable(self).OnButtonClicked)(::windows_core::Interface::as_raw(self), pfdc.into_param().abi(), dwidctl).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnCheckButtonToggled<P0, P1>(&self, pfdc: P0, dwidctl: u32, bchecked: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IFileDialogCustomize>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).OnCheckButtonToggled)(::windows_core::Interface::as_raw(self), pfdc.into_param().abi(), dwidctl, bchecked.into_param().abi()).ok()
    }
    pub unsafe fn OnControlActivating<P0>(&self, pfdc: P0, dwidctl: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IFileDialogCustomize>,
    {
        (::windows_core::Interface::vtable(self).OnControlActivating)(::windows_core::Interface::as_raw(self), pfdc.into_param().abi(), dwidctl).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IFileDialogControlEvents, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IFileDialogControlEvents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFileDialogControlEvents {}
impl ::core::fmt::Debug for IFileDialogControlEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFileDialogControlEvents").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFileDialogControlEvents {
    type Vtable = IFileDialogControlEvents_Vtbl;
}
impl ::core::clone::Clone for IFileDialogControlEvents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFileDialogControlEvents {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x36116642_d713_4b97_9b83_7484a9d00433);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFileDialogControlEvents_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub OnItemSelected: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfdc: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32) -> ::windows_core::HRESULT,
    pub OnButtonClicked: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfdc: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub OnCheckButtonToggled: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfdc: *mut ::core::ffi::c_void, dwidctl: u32, bchecked: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    OnCheckButtonToggled: usize,
    pub OnControlActivating: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfdc: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFileDialogCustomize(::windows_core::IUnknown);
impl IFileDialogCustomize {
    pub unsafe fn EnableOpenDropDown(&self, dwidctl: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).EnableOpenDropDown)(::windows_core::Interface::as_raw(self), dwidctl).ok()
    }
    pub unsafe fn AddMenu<P0>(&self, dwidctl: u32, pszlabel: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).AddMenu)(::windows_core::Interface::as_raw(self), dwidctl, pszlabel.into_param().abi()).ok()
    }
    pub unsafe fn AddPushButton<P0>(&self, dwidctl: u32, pszlabel: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).AddPushButton)(::windows_core::Interface::as_raw(self), dwidctl, pszlabel.into_param().abi()).ok()
    }
    pub unsafe fn AddComboBox(&self, dwidctl: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).AddComboBox)(::windows_core::Interface::as_raw(self), dwidctl).ok()
    }
    pub unsafe fn AddRadioButtonList(&self, dwidctl: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).AddRadioButtonList)(::windows_core::Interface::as_raw(self), dwidctl).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AddCheckButton<P0, P1>(&self, dwidctl: u32, pszlabel: P0, bchecked: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).AddCheckButton)(::windows_core::Interface::as_raw(self), dwidctl, pszlabel.into_param().abi(), bchecked.into_param().abi()).ok()
    }
    pub unsafe fn AddEditBox<P0>(&self, dwidctl: u32, psztext: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).AddEditBox)(::windows_core::Interface::as_raw(self), dwidctl, psztext.into_param().abi()).ok()
    }
    pub unsafe fn AddSeparator(&self, dwidctl: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).AddSeparator)(::windows_core::Interface::as_raw(self), dwidctl).ok()
    }
    pub unsafe fn AddText<P0>(&self, dwidctl: u32, psztext: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).AddText)(::windows_core::Interface::as_raw(self), dwidctl, psztext.into_param().abi()).ok()
    }
    pub unsafe fn SetControlLabel<P0>(&self, dwidctl: u32, pszlabel: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetControlLabel)(::windows_core::Interface::as_raw(self), dwidctl, pszlabel.into_param().abi()).ok()
    }
    pub unsafe fn GetControlState(&self, dwidctl: u32) -> ::windows_core::Result<CDCONTROLSTATEF> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetControlState)(::windows_core::Interface::as_raw(self), dwidctl, &mut result__).from_abi(result__)
    }
    pub unsafe fn SetControlState(&self, dwidctl: u32, dwstate: CDCONTROLSTATEF) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetControlState)(::windows_core::Interface::as_raw(self), dwidctl, dwstate).ok()
    }
    pub unsafe fn GetEditBoxText(&self, dwidctl: u32) -> ::windows_core::Result<*mut u16> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetEditBoxText)(::windows_core::Interface::as_raw(self), dwidctl, &mut result__).from_abi(result__)
    }
    pub unsafe fn SetEditBoxText<P0>(&self, dwidctl: u32, psztext: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetEditBoxText)(::windows_core::Interface::as_raw(self), dwidctl, psztext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetCheckButtonState(&self, dwidctl: u32) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCheckButtonState)(::windows_core::Interface::as_raw(self), dwidctl, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetCheckButtonState<P0>(&self, dwidctl: u32, bchecked: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetCheckButtonState)(::windows_core::Interface::as_raw(self), dwidctl, bchecked.into_param().abi()).ok()
    }
    pub unsafe fn AddControlItem<P0>(&self, dwidctl: u32, dwiditem: u32, pszlabel: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).AddControlItem)(::windows_core::Interface::as_raw(self), dwidctl, dwiditem, pszlabel.into_param().abi()).ok()
    }
    pub unsafe fn RemoveControlItem(&self, dwidctl: u32, dwiditem: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RemoveControlItem)(::windows_core::Interface::as_raw(self), dwidctl, dwiditem).ok()
    }
    pub unsafe fn RemoveAllControlItems(&self, dwidctl: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RemoveAllControlItems)(::windows_core::Interface::as_raw(self), dwidctl).ok()
    }
    pub unsafe fn GetControlItemState(&self, dwidctl: u32, dwiditem: u32) -> ::windows_core::Result<CDCONTROLSTATEF> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetControlItemState)(::windows_core::Interface::as_raw(self), dwidctl, dwiditem, &mut result__).from_abi(result__)
    }
    pub unsafe fn SetControlItemState(&self, dwidctl: u32, dwiditem: u32, dwstate: CDCONTROLSTATEF) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetControlItemState)(::windows_core::Interface::as_raw(self), dwidctl, dwiditem, dwstate).ok()
    }
    pub unsafe fn GetSelectedControlItem(&self, dwidctl: u32) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSelectedControlItem)(::windows_core::Interface::as_raw(self), dwidctl, &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSelectedControlItem(&self, dwidctl: u32, dwiditem: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetSelectedControlItem)(::windows_core::Interface::as_raw(self), dwidctl, dwiditem).ok()
    }
    pub unsafe fn StartVisualGroup<P0>(&self, dwidctl: u32, pszlabel: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).StartVisualGroup)(::windows_core::Interface::as_raw(self), dwidctl, pszlabel.into_param().abi()).ok()
    }
    pub unsafe fn EndVisualGroup(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).EndVisualGroup)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn MakeProminent(&self, dwidctl: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).MakeProminent)(::windows_core::Interface::as_raw(self), dwidctl).ok()
    }
    pub unsafe fn SetControlItemText<P0>(&self, dwidctl: u32, dwiditem: u32, pszlabel: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetControlItemText)(::windows_core::Interface::as_raw(self), dwidctl, dwiditem, pszlabel.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IFileDialogCustomize, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IFileDialogCustomize {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFileDialogCustomize {}
impl ::core::fmt::Debug for IFileDialogCustomize {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFileDialogCustomize").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFileDialogCustomize {
    type Vtable = IFileDialogCustomize_Vtbl;
}
impl ::core::clone::Clone for IFileDialogCustomize {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFileDialogCustomize {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xe6fdd21a_163f_4975_9c8c_a69f1ba37034);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFileDialogCustomize_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub EnableOpenDropDown: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows_core::HRESULT,
    pub AddMenu: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub AddPushButton: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub AddComboBox: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows_core::HRESULT,
    pub AddRadioButtonList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub AddCheckButton: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, pszlabel: ::windows_core::PCWSTR, bchecked: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    AddCheckButton: usize,
    pub AddEditBox: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, psztext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub AddSeparator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows_core::HRESULT,
    pub AddText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, psztext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub SetControlLabel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub GetControlState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, pdwstate: *mut CDCONTROLSTATEF) -> ::windows_core::HRESULT,
    pub SetControlState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, dwstate: CDCONTROLSTATEF) -> ::windows_core::HRESULT,
    pub GetEditBoxText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, ppsztext: *mut *mut u16) -> ::windows_core::HRESULT,
    pub SetEditBoxText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, psztext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetCheckButtonState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, pbchecked: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetCheckButtonState: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetCheckButtonState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, bchecked: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetCheckButtonState: usize,
    pub AddControlItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub RemoveControlItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32) -> ::windows_core::HRESULT,
    pub RemoveAllControlItems: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows_core::HRESULT,
    pub GetControlItemState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32, pdwstate: *mut CDCONTROLSTATEF) -> ::windows_core::HRESULT,
    pub SetControlItemState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32, dwstate: CDCONTROLSTATEF) -> ::windows_core::HRESULT,
    pub GetSelectedControlItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, pdwiditem: *mut u32) -> ::windows_core::HRESULT,
    pub SetSelectedControlItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32) -> ::windows_core::HRESULT,
    pub StartVisualGroup: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub EndVisualGroup: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub MakeProminent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows_core::HRESULT,
    pub SetControlItemText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFileDialogEvents(::windows_core::IUnknown);
impl IFileDialogEvents {
    pub unsafe fn OnFileOk<P0>(&self, pfd: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IFileDialog>,
    {
        (::windows_core::Interface::vtable(self).OnFileOk)(::windows_core::Interface::as_raw(self), pfd.into_param().abi()).ok()
    }
    pub unsafe fn OnFolderChanging<P0, P1>(&self, pfd: P0, psifolder: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IFileDialog>,
        P1: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).OnFolderChanging)(::windows_core::Interface::as_raw(self), pfd.into_param().abi(), psifolder.into_param().abi()).ok()
    }
    pub unsafe fn OnFolderChange<P0>(&self, pfd: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IFileDialog>,
    {
        (::windows_core::Interface::vtable(self).OnFolderChange)(::windows_core::Interface::as_raw(self), pfd.into_param().abi()).ok()
    }
    pub unsafe fn OnSelectionChange<P0>(&self, pfd: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IFileDialog>,
    {
        (::windows_core::Interface::vtable(self).OnSelectionChange)(::windows_core::Interface::as_raw(self), pfd.into_param().abi()).ok()
    }
    pub unsafe fn OnShareViolation<P0, P1>(&self, pfd: P0, psi: P1) -> ::windows_core::Result<FDE_SHAREVIOLATION_RESPONSE>
    where
        P0: ::windows_core::IntoParam<IFileDialog>,
        P1: ::windows_core::IntoParam<IShellItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).OnShareViolation)(::windows_core::Interface::as_raw(self), pfd.into_param().abi(), psi.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn OnTypeChange<P0>(&self, pfd: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IFileDialog>,
    {
        (::windows_core::Interface::vtable(self).OnTypeChange)(::windows_core::Interface::as_raw(self), pfd.into_param().abi()).ok()
    }
    pub unsafe fn OnOverwrite<P0, P1>(&self, pfd: P0, psi: P1) -> ::windows_core::Result<FDE_OVERWRITE_RESPONSE>
    where
        P0: ::windows_core::IntoParam<IFileDialog>,
        P1: ::windows_core::IntoParam<IShellItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).OnOverwrite)(::windows_core::Interface::as_raw(self), pfd.into_param().abi(), psi.into_param().abi(), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IFileDialogEvents, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IFileDialogEvents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFileDialogEvents {}
impl ::core::fmt::Debug for IFileDialogEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFileDialogEvents").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFileDialogEvents {
    type Vtable = IFileDialogEvents_Vtbl;
}
impl ::core::clone::Clone for IFileDialogEvents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFileDialogEvents {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x973510db_7d7f_452b_8975_74a85828d354);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFileDialogEvents_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub OnFileOk: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfd: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub OnFolderChanging: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfd: *mut ::core::ffi::c_void, psifolder: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub OnFolderChange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfd: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub OnSelectionChange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfd: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub OnShareViolation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfd: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, presponse: *mut FDE_SHAREVIOLATION_RESPONSE) -> ::windows_core::HRESULT,
    pub OnTypeChange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfd: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub OnOverwrite: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfd: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, presponse: *mut FDE_OVERWRITE_RESPONSE) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFileIsInUse(::windows_core::IUnknown);
impl IFileIsInUse {
    pub unsafe fn GetAppName(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetAppName)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetUsage(&self) -> ::windows_core::Result<FILE_USAGE_TYPE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetUsage)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCapabilities(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCapabilities)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSwitchToHWND(&self) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSwitchToHWND)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CloseFile(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).CloseFile)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IFileIsInUse, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IFileIsInUse {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFileIsInUse {}
impl ::core::fmt::Debug for IFileIsInUse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFileIsInUse").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFileIsInUse {
    type Vtable = IFileIsInUse_Vtbl;
}
impl ::core::clone::Clone for IFileIsInUse {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFileIsInUse {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x64a1cbf0_3a1a_4461_9158_376969693950);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFileIsInUse_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetAppName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppszname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub GetUsage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfut: *mut FILE_USAGE_TYPE) -> ::windows_core::HRESULT,
    pub GetCapabilities: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwcapflags: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetSwitchToHWND: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phwnd: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetSwitchToHWND: usize,
    pub CloseFile: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFileOpenDialog(::windows_core::IUnknown);
impl IFileOpenDialog {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Show<P0>(&self, hwndowner: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.Show)(::windows_core::Interface::as_raw(self), hwndowner.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn SetFileTypes(&self, rgfilterspec: &[Common::COMDLG_FILTERSPEC]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetFileTypes)(::windows_core::Interface::as_raw(self), rgfilterspec.len() as _, ::core::mem::transmute(rgfilterspec.as_ptr())).ok()
    }
    pub unsafe fn SetFileTypeIndex(&self, ifiletype: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetFileTypeIndex)(::windows_core::Interface::as_raw(self), ifiletype).ok()
    }
    pub unsafe fn GetFileTypeIndex(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetFileTypeIndex)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Advise<P0>(&self, pfde: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<IFileDialogEvents>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Advise)(::windows_core::Interface::as_raw(self), pfde.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Unadvise(&self, dwcookie: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Unadvise)(::windows_core::Interface::as_raw(self), dwcookie).ok()
    }
    pub unsafe fn SetOptions(&self, fos: FILEOPENDIALOGOPTIONS) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetOptions)(::windows_core::Interface::as_raw(self), fos).ok()
    }
    pub unsafe fn GetOptions(&self) -> ::windows_core::Result<FILEOPENDIALOGOPTIONS> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetOptions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDefaultFolder<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).base__.SetDefaultFolder)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn SetFolder<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFolder)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn GetFolder(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetFolder)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCurrentSelection(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetCurrentSelection)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFileName<P0>(&self, pszname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFileName)(::windows_core::Interface::as_raw(self), pszname.into_param().abi()).ok()
    }
    pub unsafe fn GetFileName(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetFileName)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetTitle<P0>(&self, psztitle: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetTitle)(::windows_core::Interface::as_raw(self), psztitle.into_param().abi()).ok()
    }
    pub unsafe fn SetOkButtonLabel<P0>(&self, psztext: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetOkButtonLabel)(::windows_core::Interface::as_raw(self), psztext.into_param().abi()).ok()
    }
    pub unsafe fn SetFileNameLabel<P0>(&self, pszlabel: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFileNameLabel)(::windows_core::Interface::as_raw(self), pszlabel.into_param().abi()).ok()
    }
    pub unsafe fn GetResult(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetResult)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AddPlace<P0>(&self, psi: P0, fdap: FDAP) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).base__.AddPlace)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), fdap).ok()
    }
    pub unsafe fn SetDefaultExtension<P0>(&self, pszdefaultextension: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetDefaultExtension)(::windows_core::Interface::as_raw(self), pszdefaultextension.into_param().abi()).ok()
    }
    pub unsafe fn Close(&self, hr: ::windows_core::HRESULT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Close)(::windows_core::Interface::as_raw(self), hr).ok()
    }
    pub unsafe fn SetClientGuid(&self, guid: *const ::windows_core::GUID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetClientGuid)(::windows_core::Interface::as_raw(self), guid).ok()
    }
    pub unsafe fn ClearClientData(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.ClearClientData)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetFilter<P0>(&self, pfilter: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItemFilter>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFilter)(::windows_core::Interface::as_raw(self), pfilter.into_param().abi()).ok()
    }
    pub unsafe fn GetResults(&self) -> ::windows_core::Result<IShellItemArray> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetResults)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSelectedItems(&self) -> ::windows_core::Result<IShellItemArray> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSelectedItems)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IFileOpenDialog, ::windows_core::IUnknown, IModalWindow, IFileDialog);
impl ::core::cmp::PartialEq for IFileOpenDialog {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFileOpenDialog {}
impl ::core::fmt::Debug for IFileOpenDialog {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFileOpenDialog").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFileOpenDialog {
    type Vtable = IFileOpenDialog_Vtbl;
}
impl ::core::clone::Clone for IFileOpenDialog {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFileOpenDialog {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xd57c7288_d4ad_4768_be02_9d969532d960);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFileOpenDialog_Vtbl {
    pub base__: IFileDialog_Vtbl,
    pub GetResults: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetSelectedItems: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppsai: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFileOperation(::windows_core::IUnknown);
impl IFileOperation {
    pub unsafe fn Advise<P0>(&self, pfops: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<IFileOperationProgressSink>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Advise)(::windows_core::Interface::as_raw(self), pfops.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Unadvise(&self, dwcookie: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Unadvise)(::windows_core::Interface::as_raw(self), dwcookie).ok()
    }
    pub unsafe fn SetOperationFlags(&self, dwoperationflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetOperationFlags)(::windows_core::Interface::as_raw(self), dwoperationflags).ok()
    }
    pub unsafe fn SetProgressMessage<P0>(&self, pszmessage: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetProgressMessage)(::windows_core::Interface::as_raw(self), pszmessage.into_param().abi()).ok()
    }
    pub unsafe fn SetProgressDialog<P0>(&self, popd: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IOperationsProgressDialog>,
    {
        (::windows_core::Interface::vtable(self).SetProgressDialog)(::windows_core::Interface::as_raw(self), popd.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn SetProperties<P0>(&self, pproparray: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<PropertiesSystem::IPropertyChangeArray>,
    {
        (::windows_core::Interface::vtable(self).SetProperties)(::windows_core::Interface::as_raw(self), pproparray.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetOwnerWindow<P0>(&self, hwndowner: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).SetOwnerWindow)(::windows_core::Interface::as_raw(self), hwndowner.into_param().abi()).ok()
    }
    pub unsafe fn ApplyPropertiesToItem<P0>(&self, psiitem: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).ApplyPropertiesToItem)(::windows_core::Interface::as_raw(self), psiitem.into_param().abi()).ok()
    }
    pub unsafe fn ApplyPropertiesToItems<P0>(&self, punkitems: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).ApplyPropertiesToItems)(::windows_core::Interface::as_raw(self), punkitems.into_param().abi()).ok()
    }
    pub unsafe fn RenameItem<P0, P1, P2>(&self, psiitem: P0, psznewname: P1, pfopsitem: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<IFileOperationProgressSink>,
    {
        (::windows_core::Interface::vtable(self).RenameItem)(::windows_core::Interface::as_raw(self), psiitem.into_param().abi(), psznewname.into_param().abi(), pfopsitem.into_param().abi()).ok()
    }
    pub unsafe fn RenameItems<P0, P1>(&self, punkitems: P0, psznewname: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).RenameItems)(::windows_core::Interface::as_raw(self), punkitems.into_param().abi(), psznewname.into_param().abi()).ok()
    }
    pub unsafe fn MoveItem<P0, P1, P2, P3>(&self, psiitem: P0, psidestinationfolder: P1, psznewname: P2, pfopsitem: P3) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItem>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P3: ::windows_core::IntoParam<IFileOperationProgressSink>,
    {
        (::windows_core::Interface::vtable(self).MoveItem)(::windows_core::Interface::as_raw(self), psiitem.into_param().abi(), psidestinationfolder.into_param().abi(), psznewname.into_param().abi(), pfopsitem.into_param().abi()).ok()
    }
    pub unsafe fn MoveItems<P0, P1>(&self, punkitems: P0, psidestinationfolder: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).MoveItems)(::windows_core::Interface::as_raw(self), punkitems.into_param().abi(), psidestinationfolder.into_param().abi()).ok()
    }
    pub unsafe fn CopyItem<P0, P1, P2, P3>(&self, psiitem: P0, psidestinationfolder: P1, pszcopyname: P2, pfopsitem: P3) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItem>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P3: ::windows_core::IntoParam<IFileOperationProgressSink>,
    {
        (::windows_core::Interface::vtable(self).CopyItem)(::windows_core::Interface::as_raw(self), psiitem.into_param().abi(), psidestinationfolder.into_param().abi(), pszcopyname.into_param().abi(), pfopsitem.into_param().abi()).ok()
    }
    pub unsafe fn CopyItems<P0, P1>(&self, punkitems: P0, psidestinationfolder: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).CopyItems)(::windows_core::Interface::as_raw(self), punkitems.into_param().abi(), psidestinationfolder.into_param().abi()).ok()
    }
    pub unsafe fn DeleteItem<P0, P1>(&self, psiitem: P0, pfopsitem: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IFileOperationProgressSink>,
    {
        (::windows_core::Interface::vtable(self).DeleteItem)(::windows_core::Interface::as_raw(self), psiitem.into_param().abi(), pfopsitem.into_param().abi()).ok()
    }
    pub unsafe fn DeleteItems<P0>(&self, punkitems: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).DeleteItems)(::windows_core::Interface::as_raw(self), punkitems.into_param().abi()).ok()
    }
    pub unsafe fn NewItem<P0, P1, P2, P3>(&self, psidestinationfolder: P0, dwfileattributes: u32, pszname: P1, psztemplatename: P2, pfopsitem: P3) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P3: ::windows_core::IntoParam<IFileOperationProgressSink>,
    {
        (::windows_core::Interface::vtable(self).NewItem)(::windows_core::Interface::as_raw(self), psidestinationfolder.into_param().abi(), dwfileattributes, pszname.into_param().abi(), psztemplatename.into_param().abi(), pfopsitem.into_param().abi()).ok()
    }
    pub unsafe fn PerformOperations(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).PerformOperations)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetAnyOperationsAborted(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetAnyOperationsAborted)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IFileOperation, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IFileOperation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFileOperation {}
impl ::core::fmt::Debug for IFileOperation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFileOperation").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFileOperation {
    type Vtable = IFileOperation_Vtbl;
}
impl ::core::clone::Clone for IFileOperation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFileOperation {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x947aab5f_0a5c_4c13_b4d6_4bf7836fc9f8);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFileOperation_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Advise: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfops: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT,
    pub Unadvise: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows_core::HRESULT,
    pub SetOperationFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwoperationflags: u32) -> ::windows_core::HRESULT,
    pub SetProgressMessage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszmessage: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub SetProgressDialog: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, popd: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub SetProperties: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pproparray: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    SetProperties: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetOwnerWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetOwnerWindow: usize,
    pub ApplyPropertiesToItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub ApplyPropertiesToItems: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punkitems: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub RenameItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiitem: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR, pfopsitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub RenameItems: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punkitems: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub MoveItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiitem: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR, pfopsitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub MoveItems: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punkitems: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub CopyItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiitem: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void, pszcopyname: ::windows_core::PCWSTR, pfopsitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub CopyItems: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punkitems: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub DeleteItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiitem: *mut ::core::ffi::c_void, pfopsitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub DeleteItems: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punkitems: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub NewItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void, dwfileattributes: u32, pszname: ::windows_core::PCWSTR, psztemplatename: ::windows_core::PCWSTR, pfopsitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub PerformOperations: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetAnyOperationsAborted: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfanyoperationsaborted: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetAnyOperationsAborted: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFileOperation2(::windows_core::IUnknown);
impl IFileOperation2 {
    pub unsafe fn Advise<P0>(&self, pfops: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<IFileOperationProgressSink>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Advise)(::windows_core::Interface::as_raw(self), pfops.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Unadvise(&self, dwcookie: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Unadvise)(::windows_core::Interface::as_raw(self), dwcookie).ok()
    }
    pub unsafe fn SetOperationFlags(&self, dwoperationflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetOperationFlags)(::windows_core::Interface::as_raw(self), dwoperationflags).ok()
    }
    pub unsafe fn SetProgressMessage<P0>(&self, pszmessage: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetProgressMessage)(::windows_core::Interface::as_raw(self), pszmessage.into_param().abi()).ok()
    }
    pub unsafe fn SetProgressDialog<P0>(&self, popd: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IOperationsProgressDialog>,
    {
        (::windows_core::Interface::vtable(self).base__.SetProgressDialog)(::windows_core::Interface::as_raw(self), popd.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn SetProperties<P0>(&self, pproparray: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<PropertiesSystem::IPropertyChangeArray>,
    {
        (::windows_core::Interface::vtable(self).base__.SetProperties)(::windows_core::Interface::as_raw(self), pproparray.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetOwnerWindow<P0>(&self, hwndowner: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).base__.SetOwnerWindow)(::windows_core::Interface::as_raw(self), hwndowner.into_param().abi()).ok()
    }
    pub unsafe fn ApplyPropertiesToItem<P0>(&self, psiitem: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).base__.ApplyPropertiesToItem)(::windows_core::Interface::as_raw(self), psiitem.into_param().abi()).ok()
    }
    pub unsafe fn ApplyPropertiesToItems<P0>(&self, punkitems: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).base__.ApplyPropertiesToItems)(::windows_core::Interface::as_raw(self), punkitems.into_param().abi()).ok()
    }
    pub unsafe fn RenameItem<P0, P1, P2>(&self, psiitem: P0, psznewname: P1, pfopsitem: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<IFileOperationProgressSink>,
    {
        (::windows_core::Interface::vtable(self).base__.RenameItem)(::windows_core::Interface::as_raw(self), psiitem.into_param().abi(), psznewname.into_param().abi(), pfopsitem.into_param().abi()).ok()
    }
    pub unsafe fn RenameItems<P0, P1>(&self, punkitems: P0, psznewname: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.RenameItems)(::windows_core::Interface::as_raw(self), punkitems.into_param().abi(), psznewname.into_param().abi()).ok()
    }
    pub unsafe fn MoveItem<P0, P1, P2, P3>(&self, psiitem: P0, psidestinationfolder: P1, psznewname: P2, pfopsitem: P3) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItem>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P3: ::windows_core::IntoParam<IFileOperationProgressSink>,
    {
        (::windows_core::Interface::vtable(self).base__.MoveItem)(::windows_core::Interface::as_raw(self), psiitem.into_param().abi(), psidestinationfolder.into_param().abi(), psznewname.into_param().abi(), pfopsitem.into_param().abi()).ok()
    }
    pub unsafe fn MoveItems<P0, P1>(&self, punkitems: P0, psidestinationfolder: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).base__.MoveItems)(::windows_core::Interface::as_raw(self), punkitems.into_param().abi(), psidestinationfolder.into_param().abi()).ok()
    }
    pub unsafe fn CopyItem<P0, P1, P2, P3>(&self, psiitem: P0, psidestinationfolder: P1, pszcopyname: P2, pfopsitem: P3) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItem>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P3: ::windows_core::IntoParam<IFileOperationProgressSink>,
    {
        (::windows_core::Interface::vtable(self).base__.CopyItem)(::windows_core::Interface::as_raw(self), psiitem.into_param().abi(), psidestinationfolder.into_param().abi(), pszcopyname.into_param().abi(), pfopsitem.into_param().abi()).ok()
    }
    pub unsafe fn CopyItems<P0, P1>(&self, punkitems: P0, psidestinationfolder: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).base__.CopyItems)(::windows_core::Interface::as_raw(self), punkitems.into_param().abi(), psidestinationfolder.into_param().abi()).ok()
    }
    pub unsafe fn DeleteItem<P0, P1>(&self, psiitem: P0, pfopsitem: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IFileOperationProgressSink>,
    {
        (::windows_core::Interface::vtable(self).base__.DeleteItem)(::windows_core::Interface::as_raw(self), psiitem.into_param().abi(), pfopsitem.into_param().abi()).ok()
    }
    pub unsafe fn DeleteItems<P0>(&self, punkitems: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).base__.DeleteItems)(::windows_core::Interface::as_raw(self), punkitems.into_param().abi()).ok()
    }
    pub unsafe fn NewItem<P0, P1, P2, P3>(&self, psidestinationfolder: P0, dwfileattributes: u32, pszname: P1, psztemplatename: P2, pfopsitem: P3) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P3: ::windows_core::IntoParam<IFileOperationProgressSink>,
    {
        (::windows_core::Interface::vtable(self).base__.NewItem)(::windows_core::Interface::as_raw(self), psidestinationfolder.into_param().abi(), dwfileattributes, pszname.into_param().abi(), psztemplatename.into_param().abi(), pfopsitem.into_param().abi()).ok()
    }
    pub unsafe fn PerformOperations(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.PerformOperations)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetAnyOperationsAborted(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetAnyOperationsAborted)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOperationFlags2(&self, operationflags2: FILE_OPERATION_FLAGS2) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetOperationFlags2)(::windows_core::Interface::as_raw(self), operationflags2).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IFileOperation2, ::windows_core::IUnknown, IFileOperation);
impl ::core::cmp::PartialEq for IFileOperation2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFileOperation2 {}
impl ::core::fmt::Debug for IFileOperation2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFileOperation2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFileOperation2 {
    type Vtable = IFileOperation2_Vtbl;
}
impl ::core::clone::Clone for IFileOperation2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFileOperation2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xcd8f23c1_8f61_4916_909d_55bdd0918753);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFileOperation2_Vtbl {
    pub base__: IFileOperation_Vtbl,
    pub SetOperationFlags2: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, operationflags2: FILE_OPERATION_FLAGS2) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFileOperationProgressSink(::windows_core::IUnknown);
impl IFileOperationProgressSink {
    pub unsafe fn StartOperations(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).StartOperations)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FinishOperations(&self, hrresult: ::windows_core::HRESULT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).FinishOperations)(::windows_core::Interface::as_raw(self), hrresult).ok()
    }
    pub unsafe fn PreRenameItem<P0, P1>(&self, dwflags: u32, psiitem: P0, psznewname: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).PreRenameItem)(::windows_core::Interface::as_raw(self), dwflags, psiitem.into_param().abi(), psznewname.into_param().abi()).ok()
    }
    pub unsafe fn PostRenameItem<P0, P1, P2>(&self, dwflags: u32, psiitem: P0, psznewname: P1, hrrename: ::windows_core::HRESULT, psinewlycreated: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).PostRenameItem)(::windows_core::Interface::as_raw(self), dwflags, psiitem.into_param().abi(), psznewname.into_param().abi(), hrrename, psinewlycreated.into_param().abi()).ok()
    }
    pub unsafe fn PreMoveItem<P0, P1, P2>(&self, dwflags: u32, psiitem: P0, psidestinationfolder: P1, psznewname: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItem>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).PreMoveItem)(::windows_core::Interface::as_raw(self), dwflags, psiitem.into_param().abi(), psidestinationfolder.into_param().abi(), psznewname.into_param().abi()).ok()
    }
    pub unsafe fn PostMoveItem<P0, P1, P2, P3>(&self, dwflags: u32, psiitem: P0, psidestinationfolder: P1, psznewname: P2, hrmove: ::windows_core::HRESULT, psinewlycreated: P3) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItem>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P3: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).PostMoveItem)(::windows_core::Interface::as_raw(self), dwflags, psiitem.into_param().abi(), psidestinationfolder.into_param().abi(), psznewname.into_param().abi(), hrmove, psinewlycreated.into_param().abi()).ok()
    }
    pub unsafe fn PreCopyItem<P0, P1, P2>(&self, dwflags: u32, psiitem: P0, psidestinationfolder: P1, psznewname: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItem>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).PreCopyItem)(::windows_core::Interface::as_raw(self), dwflags, psiitem.into_param().abi(), psidestinationfolder.into_param().abi(), psznewname.into_param().abi()).ok()
    }
    pub unsafe fn PostCopyItem<P0, P1, P2, P3>(&self, dwflags: u32, psiitem: P0, psidestinationfolder: P1, psznewname: P2, hrcopy: ::windows_core::HRESULT, psinewlycreated: P3) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItem>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P3: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).PostCopyItem)(::windows_core::Interface::as_raw(self), dwflags, psiitem.into_param().abi(), psidestinationfolder.into_param().abi(), psznewname.into_param().abi(), hrcopy, psinewlycreated.into_param().abi()).ok()
    }
    pub unsafe fn PreDeleteItem<P0>(&self, dwflags: u32, psiitem: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).PreDeleteItem)(::windows_core::Interface::as_raw(self), dwflags, psiitem.into_param().abi()).ok()
    }
    pub unsafe fn PostDeleteItem<P0, P1>(&self, dwflags: u32, psiitem: P0, hrdelete: ::windows_core::HRESULT, psinewlycreated: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).PostDeleteItem)(::windows_core::Interface::as_raw(self), dwflags, psiitem.into_param().abi(), hrdelete, psinewlycreated.into_param().abi()).ok()
    }
    pub unsafe fn PreNewItem<P0, P1>(&self, dwflags: u32, psidestinationfolder: P0, psznewname: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).PreNewItem)(::windows_core::Interface::as_raw(self), dwflags, psidestinationfolder.into_param().abi(), psznewname.into_param().abi()).ok()
    }
    pub unsafe fn PostNewItem<P0, P1, P2, P3>(&self, dwflags: u32, psidestinationfolder: P0, psznewname: P1, psztemplatename: P2, dwfileattributes: u32, hrnew: ::windows_core::HRESULT, psinewitem: P3) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P3: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).PostNewItem)(::windows_core::Interface::as_raw(self), dwflags, psidestinationfolder.into_param().abi(), psznewname.into_param().abi(), psztemplatename.into_param().abi(), dwfileattributes, hrnew, psinewitem.into_param().abi()).ok()
    }
    pub unsafe fn UpdateProgress(&self, iworktotal: u32, iworksofar: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).UpdateProgress)(::windows_core::Interface::as_raw(self), iworktotal, iworksofar).ok()
    }
    pub unsafe fn ResetTimer(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ResetTimer)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PauseTimer(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).PauseTimer)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ResumeTimer(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ResumeTimer)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IFileOperationProgressSink, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IFileOperationProgressSink {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFileOperationProgressSink {}
impl ::core::fmt::Debug for IFileOperationProgressSink {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFileOperationProgressSink").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFileOperationProgressSink {
    type Vtable = IFileOperationProgressSink_Vtbl;
}
impl ::core::clone::Clone for IFileOperationProgressSink {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFileOperationProgressSink {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x04b0f1a7_9490_44bc_96e1_4296a31252e2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFileOperationProgressSink_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub StartOperations: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub FinishOperations: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hrresult: ::windows_core::HRESULT) -> ::windows_core::HRESULT,
    pub PreRenameItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub PostRenameItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR, hrrename: ::windows_core::HRESULT, psinewlycreated: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub PreMoveItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub PostMoveItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR, hrmove: ::windows_core::HRESULT, psinewlycreated: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub PreCopyItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub PostCopyItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR, hrcopy: ::windows_core::HRESULT, psinewlycreated: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub PreDeleteItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub PostDeleteItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: *mut ::core::ffi::c_void, hrdelete: ::windows_core::HRESULT, psinewlycreated: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub PreNewItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, psidestinationfolder: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub PostNewItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, psidestinationfolder: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR, psztemplatename: ::windows_core::PCWSTR, dwfileattributes: u32, hrnew: ::windows_core::HRESULT, psinewitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub UpdateProgress: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, iworktotal: u32, iworksofar: u32) -> ::windows_core::HRESULT,
    pub ResetTimer: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub PauseTimer: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub ResumeTimer: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFileSaveDialog(::windows_core::IUnknown);
impl IFileSaveDialog {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Show<P0>(&self, hwndowner: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.Show)(::windows_core::Interface::as_raw(self), hwndowner.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn SetFileTypes(&self, rgfilterspec: &[Common::COMDLG_FILTERSPEC]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetFileTypes)(::windows_core::Interface::as_raw(self), rgfilterspec.len() as _, ::core::mem::transmute(rgfilterspec.as_ptr())).ok()
    }
    pub unsafe fn SetFileTypeIndex(&self, ifiletype: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetFileTypeIndex)(::windows_core::Interface::as_raw(self), ifiletype).ok()
    }
    pub unsafe fn GetFileTypeIndex(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetFileTypeIndex)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Advise<P0>(&self, pfde: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<IFileDialogEvents>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Advise)(::windows_core::Interface::as_raw(self), pfde.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Unadvise(&self, dwcookie: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Unadvise)(::windows_core::Interface::as_raw(self), dwcookie).ok()
    }
    pub unsafe fn SetOptions(&self, fos: FILEOPENDIALOGOPTIONS) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetOptions)(::windows_core::Interface::as_raw(self), fos).ok()
    }
    pub unsafe fn GetOptions(&self) -> ::windows_core::Result<FILEOPENDIALOGOPTIONS> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetOptions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDefaultFolder<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).base__.SetDefaultFolder)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn SetFolder<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFolder)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn GetFolder(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetFolder)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCurrentSelection(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetCurrentSelection)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFileName<P0>(&self, pszname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFileName)(::windows_core::Interface::as_raw(self), pszname.into_param().abi()).ok()
    }
    pub unsafe fn GetFileName(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetFileName)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetTitle<P0>(&self, psztitle: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetTitle)(::windows_core::Interface::as_raw(self), psztitle.into_param().abi()).ok()
    }
    pub unsafe fn SetOkButtonLabel<P0>(&self, psztext: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetOkButtonLabel)(::windows_core::Interface::as_raw(self), psztext.into_param().abi()).ok()
    }
    pub unsafe fn SetFileNameLabel<P0>(&self, pszlabel: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFileNameLabel)(::windows_core::Interface::as_raw(self), pszlabel.into_param().abi()).ok()
    }
    pub unsafe fn GetResult(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetResult)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AddPlace<P0>(&self, psi: P0, fdap: FDAP) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).base__.AddPlace)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), fdap).ok()
    }
    pub unsafe fn SetDefaultExtension<P0>(&self, pszdefaultextension: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetDefaultExtension)(::windows_core::Interface::as_raw(self), pszdefaultextension.into_param().abi()).ok()
    }
    pub unsafe fn Close(&self, hr: ::windows_core::HRESULT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Close)(::windows_core::Interface::as_raw(self), hr).ok()
    }
    pub unsafe fn SetClientGuid(&self, guid: *const ::windows_core::GUID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetClientGuid)(::windows_core::Interface::as_raw(self), guid).ok()
    }
    pub unsafe fn ClearClientData(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.ClearClientData)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetFilter<P0>(&self, pfilter: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItemFilter>,
    {
        (::windows_core::Interface::vtable(self).base__.SetFilter)(::windows_core::Interface::as_raw(self), pfilter.into_param().abi()).ok()
    }
    pub unsafe fn SetSaveAsItem<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).SetSaveAsItem)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn SetProperties<P0>(&self, pstore: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<PropertiesSystem::IPropertyStore>,
    {
        (::windows_core::Interface::vtable(self).SetProperties)(::windows_core::Interface::as_raw(self), pstore.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub unsafe fn SetCollectedProperties<P0, P1>(&self, plist: P0, fappenddefault: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<PropertiesSystem::IPropertyDescriptionList>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetCollectedProperties)(::windows_core::Interface::as_raw(self), plist.into_param().abi(), fappenddefault.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetProperties(&self) -> ::windows_core::Result<PropertiesSystem::IPropertyStore> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetProperties)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub unsafe fn ApplyProperties<P0, P1, P2, P3>(&self, psi: P0, pstore: P1, hwnd: P2, psink: P3) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<PropertiesSystem::IPropertyStore>,
        P2: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P3: ::windows_core::IntoParam<IFileOperationProgressSink>,
    {
        (::windows_core::Interface::vtable(self).ApplyProperties)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), pstore.into_param().abi(), hwnd.into_param().abi(), psink.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IFileSaveDialog, ::windows_core::IUnknown, IModalWindow, IFileDialog);
impl ::core::cmp::PartialEq for IFileSaveDialog {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFileSaveDialog {}
impl ::core::fmt::Debug for IFileSaveDialog {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFileSaveDialog").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFileSaveDialog {
    type Vtable = IFileSaveDialog_Vtbl;
}
impl ::core::clone::Clone for IFileSaveDialog {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFileSaveDialog {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x84bccd23_5fde_4cdb_aea4_af64b83d78ab);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFileSaveDialog_Vtbl {
    pub base__: IFileDialog_Vtbl,
    pub SetSaveAsItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub SetProperties: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pstore: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    SetProperties: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub SetCollectedProperties: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plist: *mut ::core::ffi::c_void, fappenddefault: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem")))]
    SetCollectedProperties: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetProperties: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppstore: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetProperties: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub ApplyProperties: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, pstore: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, psink: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem")))]
    ApplyProperties: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IFileSearchBand(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IFileSearchBand {
    pub unsafe fn SetFocus(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFocus)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn SetSearchParameters<P0>(&self, pbstrsearchid: *const ::windows_core::BSTR, bnavtoresults: P0, pvarscope: *const super::super::System::Variant::VARIANT, pvarqueryfile: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetSearchParameters)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pbstrsearchid), bnavtoresults.into_param().abi(), pvarscope, pvarqueryfile).ok()
    }
    pub unsafe fn SearchID(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).SearchID)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Scope(&self) -> ::windows_core::Result<super::super::System::Variant::VARIANT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Scope)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn QueryFile(&self) -> ::windows_core::Result<super::super::System::Variant::VARIANT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).QueryFile)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IFileSearchBand, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IFileSearchBand {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IFileSearchBand {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IFileSearchBand {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFileSearchBand").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IFileSearchBand {
    type Vtable = IFileSearchBand_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IFileSearchBand {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IFileSearchBand {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x2d91eea1_9932_11d2_be86_00a0c9a83da1);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IFileSearchBand_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
    pub SetFocus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub SetSearchParameters: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrsearchid: *const ::std::mem::MaybeUninit<::windows_core::BSTR>, bnavtoresults: super::super::Foundation::VARIANT_BOOL, pvarscope: *const super::super::System::Variant::VARIANT, pvarqueryfile: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    SetSearchParameters: usize,
    pub SearchID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrsearchid: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub Scope: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pvarscope: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    Scope: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub QueryFile: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pvarfile: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    QueryFile: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFileSyncMergeHandler(::windows_core::IUnknown);
impl IFileSyncMergeHandler {
    pub unsafe fn Merge<P0, P1>(&self, localfilepath: P0, serverfilepath: P1) -> ::windows_core::Result<MERGE_UPDATE_STATUS>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Merge)(::windows_core::Interface::as_raw(self), localfilepath.into_param().abi(), serverfilepath.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn ShowResolveConflictUIAsync<P0, P1>(&self, localfilepath: P0, monitortodisplayon: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<super::super::Graphics::Gdi::HMONITOR>,
    {
        (::windows_core::Interface::vtable(self).ShowResolveConflictUIAsync)(::windows_core::Interface::as_raw(self), localfilepath.into_param().abi(), monitortodisplayon.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IFileSyncMergeHandler, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IFileSyncMergeHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFileSyncMergeHandler {}
impl ::core::fmt::Debug for IFileSyncMergeHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFileSyncMergeHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFileSyncMergeHandler {
    type Vtable = IFileSyncMergeHandler_Vtbl;
}
impl ::core::clone::Clone for IFileSyncMergeHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFileSyncMergeHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xd97b5aac_c792_433c_975d_35c4eadc7a9d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFileSyncMergeHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Merge: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, localfilepath: ::windows_core::PCWSTR, serverfilepath: ::windows_core::PCWSTR, updatestatus: *mut MERGE_UPDATE_STATUS) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub ShowResolveConflictUIAsync: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, localfilepath: ::windows_core::PCWSTR, monitortodisplayon: super::super::Graphics::Gdi::HMONITOR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))]
    ShowResolveConflictUIAsync: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFileSystemBindData(::windows_core::IUnknown);
impl IFileSystemBindData {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Storage_FileSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
    pub unsafe fn SetFindData(&self, pfd: *const super::super::Storage::FileSystem::WIN32_FIND_DATAW) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFindData)(::windows_core::Interface::as_raw(self), pfd).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Storage_FileSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
    pub unsafe fn GetFindData(&self, pfd: *mut super::super::Storage::FileSystem::WIN32_FIND_DATAW) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetFindData)(::windows_core::Interface::as_raw(self), pfd).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IFileSystemBindData, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IFileSystemBindData {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFileSystemBindData {}
impl ::core::fmt::Debug for IFileSystemBindData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFileSystemBindData").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFileSystemBindData {
    type Vtable = IFileSystemBindData_Vtbl;
}
impl ::core::clone::Clone for IFileSystemBindData {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFileSystemBindData {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x01e18d10_4d8b_11d2_855d_006008059367);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFileSystemBindData_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
    pub SetFindData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfd: *const super::super::Storage::FileSystem::WIN32_FIND_DATAW) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem")))]
    SetFindData: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
    pub GetFindData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfd: *mut super::super::Storage::FileSystem::WIN32_FIND_DATAW) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem")))]
    GetFindData: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFileSystemBindData2(::windows_core::IUnknown);
impl IFileSystemBindData2 {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Storage_FileSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
    pub unsafe fn SetFindData(&self, pfd: *const super::super::Storage::FileSystem::WIN32_FIND_DATAW) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetFindData)(::windows_core::Interface::as_raw(self), pfd).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Storage_FileSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
    pub unsafe fn GetFindData(&self, pfd: *mut super::super::Storage::FileSystem::WIN32_FIND_DATAW) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetFindData)(::windows_core::Interface::as_raw(self), pfd).ok()
    }
    pub unsafe fn SetFileID(&self, lifileid: i64) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFileID)(::windows_core::Interface::as_raw(self), lifileid).ok()
    }
    pub unsafe fn GetFileID(&self) -> ::windows_core::Result<i64> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFileID)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetJunctionCLSID(&self, clsid: *const ::windows_core::GUID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetJunctionCLSID)(::windows_core::Interface::as_raw(self), clsid).ok()
    }
    pub unsafe fn GetJunctionCLSID(&self) -> ::windows_core::Result<::windows_core::GUID> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetJunctionCLSID)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IFileSystemBindData2, ::windows_core::IUnknown, IFileSystemBindData);
impl ::core::cmp::PartialEq for IFileSystemBindData2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFileSystemBindData2 {}
impl ::core::fmt::Debug for IFileSystemBindData2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFileSystemBindData2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFileSystemBindData2 {
    type Vtable = IFileSystemBindData2_Vtbl;
}
impl ::core::clone::Clone for IFileSystemBindData2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFileSystemBindData2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x3acf075f_71db_4afa_81f0_3fc4fdf2a5b8);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFileSystemBindData2_Vtbl {
    pub base__: IFileSystemBindData_Vtbl,
    pub SetFileID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lifileid: i64) -> ::windows_core::HRESULT,
    pub GetFileID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plifileid: *mut i64) -> ::windows_core::HRESULT,
    pub SetJunctionCLSID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, clsid: *const ::windows_core::GUID) -> ::windows_core::HRESULT,
    pub GetJunctionCLSID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pclsid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFolderBandPriv(::windows_core::IUnknown);
impl IFolderBandPriv {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetCascade<P0>(&self, fcascade: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetCascade)(::windows_core::Interface::as_raw(self), fcascade.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetAccelerators<P0>(&self, faccelerators: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetAccelerators)(::windows_core::Interface::as_raw(self), faccelerators.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetNoIcons<P0>(&self, fnoicons: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetNoIcons)(::windows_core::Interface::as_raw(self), fnoicons.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetNoText<P0>(&self, fnotext: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetNoText)(::windows_core::Interface::as_raw(self), fnotext.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IFolderBandPriv, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IFolderBandPriv {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFolderBandPriv {}
impl ::core::fmt::Debug for IFolderBandPriv {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFolderBandPriv").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFolderBandPriv {
    type Vtable = IFolderBandPriv_Vtbl;
}
impl ::core::clone::Clone for IFolderBandPriv {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFolderBandPriv {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x47c01f95_e185_412c_b5c5_4f27df965aea);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFolderBandPriv_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub SetCascade: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fcascade: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetCascade: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetAccelerators: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, faccelerators: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetAccelerators: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetNoIcons: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fnoicons: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetNoIcons: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetNoText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fnotext: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetNoText: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFolderFilter(::windows_core::IUnknown);
impl IFolderFilter {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn ShouldShow<P0>(&self, psf: P0, pidlfolder: *const Common::ITEMIDLIST, pidlitem: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellFolder>,
    {
        (::windows_core::Interface::vtable(self).ShouldShow)(::windows_core::Interface::as_raw(self), psf.into_param().abi(), pidlfolder, pidlitem).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn GetEnumFlags<P0>(&self, psf: P0, pidlfolder: *const Common::ITEMIDLIST, phwnd: *mut super::super::Foundation::HWND, pgrfflags: *mut u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellFolder>,
    {
        (::windows_core::Interface::vtable(self).GetEnumFlags)(::windows_core::Interface::as_raw(self), psf.into_param().abi(), pidlfolder, phwnd, pgrfflags).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IFolderFilter, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IFolderFilter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFolderFilter {}
impl ::core::fmt::Debug for IFolderFilter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFolderFilter").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFolderFilter {
    type Vtable = IFolderFilter_Vtbl;
}
impl ::core::clone::Clone for IFolderFilter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFolderFilter {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x9cc22886_dc8e_11d2_b1d0_00c04f8eeb3e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFolderFilter_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub ShouldShow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psf: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST, pidlitem: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    ShouldShow: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub GetEnumFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psf: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST, phwnd: *mut super::super::Foundation::HWND, pgrfflags: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common")))]
    GetEnumFlags: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFolderFilterSite(::windows_core::IUnknown);
impl IFolderFilterSite {
    pub unsafe fn SetFilter<P0>(&self, punk: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).SetFilter)(::windows_core::Interface::as_raw(self), punk.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IFolderFilterSite, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IFolderFilterSite {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFolderFilterSite {}
impl ::core::fmt::Debug for IFolderFilterSite {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFolderFilterSite").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFolderFilterSite {
    type Vtable = IFolderFilterSite_Vtbl;
}
impl ::core::clone::Clone for IFolderFilterSite {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFolderFilterSite {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xc0a651f5_b48b_11d2_b5ed_006097c686f6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFolderFilterSite_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetFilter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFolderView(::windows_core::IUnknown);
impl IFolderView {
    pub unsafe fn GetCurrentViewMode(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCurrentViewMode)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentViewMode(&self, viewmode: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetCurrentViewMode)(::windows_core::Interface::as_raw(self), viewmode).ok()
    }
    pub unsafe fn GetFolder<T>(&self) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetFolder)(::windows_core::Interface::as_raw(self), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn Item(&self, iitemindex: i32) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Item)(::windows_core::Interface::as_raw(self), iitemindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn ItemCount(&self, uflags: _SVGIO) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ItemCount)(::windows_core::Interface::as_raw(self), uflags.0 as _, &mut result__).from_abi(result__)
    }
    pub unsafe fn Items<T>(&self, uflags: _SVGIO) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).Items)(::windows_core::Interface::as_raw(self), uflags.0 as _, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSelectionMarkedItem(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSelectionMarkedItem)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFocusedItem(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFocusedItem)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn GetItemPosition(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<super::super::Foundation::POINT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetItemPosition)(::windows_core::Interface::as_raw(self), pidl, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSpacing(&self, ppt: *mut super::super::Foundation::POINT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetSpacing)(::windows_core::Interface::as_raw(self), ppt).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetDefaultSpacing(&self) -> ::windows_core::Result<super::super::Foundation::POINT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetDefaultSpacing)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetAutoArrange(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetAutoArrange)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SelectItem(&self, iitem: i32, dwflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SelectItem)(::windows_core::Interface::as_raw(self), iitem, dwflags).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn SelectAndPositionItems(&self, cidl: u32, apidl: *const *const Common::ITEMIDLIST, apt: ::core::option::Option<*const super::super::Foundation::POINT>, dwflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SelectAndPositionItems)(::windows_core::Interface::as_raw(self), cidl, apidl, ::core::mem::transmute(apt.unwrap_or(::std::ptr::null())), dwflags).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IFolderView, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IFolderView {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFolderView {}
impl ::core::fmt::Debug for IFolderView {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFolderView").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFolderView {
    type Vtable = IFolderView_Vtbl;
}
impl ::core::clone::Clone for IFolderView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFolderView {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xcde725b0_ccc9_4519_917e_325d72fab4ce);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFolderView_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetCurrentViewMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pviewmode: *mut u32) -> ::windows_core::HRESULT,
    pub SetCurrentViewMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, viewmode: u32) -> ::windows_core::HRESULT,
    pub GetFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub Item: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, iitemindex: i32, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    Item: usize,
    pub ItemCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, uflags: u32, pcitems: *mut i32) -> ::windows_core::HRESULT,
    pub Items: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, uflags: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetSelectionMarkedItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, piitem: *mut i32) -> ::windows_core::HRESULT,
    pub GetFocusedItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, piitem: *mut i32) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub GetItemPosition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, ppt: *mut super::super::Foundation::POINT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common")))]
    GetItemPosition: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetSpacing: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppt: *mut super::super::Foundation::POINT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetSpacing: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetDefaultSpacing: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppt: *mut super::super::Foundation::POINT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetDefaultSpacing: usize,
    pub GetAutoArrange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SelectItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, iitem: i32, dwflags: u32) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub SelectAndPositionItems: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, cidl: u32, apidl: *const *const Common::ITEMIDLIST, apt: *const super::super::Foundation::POINT, dwflags: u32) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common")))]
    SelectAndPositionItems: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFolderView2(::windows_core::IUnknown);
impl IFolderView2 {
    pub unsafe fn GetCurrentViewMode(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetCurrentViewMode)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentViewMode(&self, viewmode: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetCurrentViewMode)(::windows_core::Interface::as_raw(self), viewmode).ok()
    }
    pub unsafe fn GetFolder<T>(&self) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).base__.GetFolder)(::windows_core::Interface::as_raw(self), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn Item(&self, iitemindex: i32) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Item)(::windows_core::Interface::as_raw(self), iitemindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn ItemCount(&self, uflags: _SVGIO) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.ItemCount)(::windows_core::Interface::as_raw(self), uflags.0 as _, &mut result__).from_abi(result__)
    }
    pub unsafe fn Items<T>(&self, uflags: _SVGIO) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).base__.Items)(::windows_core::Interface::as_raw(self), uflags.0 as _, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSelectionMarkedItem(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetSelectionMarkedItem)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFocusedItem(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetFocusedItem)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn GetItemPosition(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<super::super::Foundation::POINT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetItemPosition)(::windows_core::Interface::as_raw(self), pidl, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSpacing(&self, ppt: *mut super::super::Foundation::POINT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetSpacing)(::windows_core::Interface::as_raw(self), ppt).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetDefaultSpacing(&self) -> ::windows_core::Result<super::super::Foundation::POINT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetDefaultSpacing)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetAutoArrange(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetAutoArrange)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SelectItem(&self, iitem: i32, dwflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SelectItem)(::windows_core::Interface::as_raw(self), iitem, dwflags).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn SelectAndPositionItems(&self, cidl: u32, apidl: *const *const Common::ITEMIDLIST, apt: ::core::option::Option<*const super::super::Foundation::POINT>, dwflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SelectAndPositionItems)(::windows_core::Interface::as_raw(self), cidl, apidl, ::core::mem::transmute(apt.unwrap_or(::std::ptr::null())), dwflags).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub unsafe fn SetGroupBy<P0>(&self, key: *const PropertiesSystem::PROPERTYKEY, fascending: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetGroupBy)(::windows_core::Interface::as_raw(self), key, fascending.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub unsafe fn GetGroupBy(&self, pkey: *mut PropertiesSystem::PROPERTYKEY, pfascending: ::core::option::Option<*mut super::super::Foundation::BOOL>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetGroupBy)(::windows_core::Interface::as_raw(self), pkey, ::core::mem::transmute(pfascending.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub unsafe fn SetViewProperty(&self, pidl: *const Common::ITEMIDLIST, propkey: *const PropertiesSystem::PROPERTYKEY, propvar: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetViewProperty)(::windows_core::Interface::as_raw(self), pidl, propkey, propvar).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub unsafe fn GetViewProperty(&self, pidl: *const Common::ITEMIDLIST, propkey: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetViewProperty)(::windows_core::Interface::as_raw(self), pidl, propkey, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn SetTileViewProperties<P0>(&self, pidl: *const Common::ITEMIDLIST, pszproplist: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetTileViewProperties)(::windows_core::Interface::as_raw(self), pidl, pszproplist.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn SetExtendedTileViewProperties<P0>(&self, pidl: *const Common::ITEMIDLIST, pszproplist: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetExtendedTileViewProperties)(::windows_core::Interface::as_raw(self), pidl, pszproplist.into_param().abi()).ok()
    }
    pub unsafe fn SetText<P0>(&self, itype: FVTEXTTYPE, pwsztext: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetText)(::windows_core::Interface::as_raw(self), itype, pwsztext.into_param().abi()).ok()
    }
    pub unsafe fn SetCurrentFolderFlags(&self, dwmask: u32, dwflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetCurrentFolderFlags)(::windows_core::Interface::as_raw(self), dwmask, dwflags).ok()
    }
    pub unsafe fn GetCurrentFolderFlags(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCurrentFolderFlags)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSortColumnCount(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSortColumnCount)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn SetSortColumns(&self, rgsortcolumns: &[SORTCOLUMN]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetSortColumns)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(rgsortcolumns.as_ptr()), rgsortcolumns.len() as _).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetSortColumns(&self, rgsortcolumns: &mut [SORTCOLUMN]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetSortColumns)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(rgsortcolumns.as_ptr()), rgsortcolumns.len() as _).ok()
    }
    pub unsafe fn GetItem<T>(&self, iitem: i32) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetItem)(::windows_core::Interface::as_raw(self), iitem, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetVisibleItem<P0>(&self, istart: i32, fprevious: P0) -> ::windows_core::Result<i32>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetVisibleItem)(::windows_core::Interface::as_raw(self), istart, fprevious.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSelectedItem(&self, istart: i32) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSelectedItem)(::windows_core::Interface::as_raw(self), istart, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSelection<P0>(&self, fnoneimpliesfolder: P0) -> ::windows_core::Result<IShellItemArray>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSelection)(::windows_core::Interface::as_raw(self), fnoneimpliesfolder.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetSelectionState(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSelectionState)(::windows_core::Interface::as_raw(self), pidl, &mut result__).from_abi(result__)
    }
    pub unsafe fn InvokeVerbOnSelection<P0>(&self, pszverb: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    {
        (::windows_core::Interface::vtable(self).InvokeVerbOnSelection)(::windows_core::Interface::as_raw(self), pszverb.into_param().abi()).ok()
    }
    pub unsafe fn SetViewModeAndIconSize(&self, uviewmode: FOLDERVIEWMODE, iimagesize: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetViewModeAndIconSize)(::windows_core::Interface::as_raw(self), uviewmode, iimagesize).ok()
    }
    pub unsafe fn GetViewModeAndIconSize(&self, puviewmode: *mut FOLDERVIEWMODE, piimagesize: *mut i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetViewModeAndIconSize)(::windows_core::Interface::as_raw(self), puviewmode, piimagesize).ok()
    }
    pub unsafe fn SetGroupSubsetCount(&self, cvisiblerows: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetGroupSubsetCount)(::windows_core::Interface::as_raw(self), cvisiblerows).ok()
    }
    pub unsafe fn GetGroupSubsetCount(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetGroupSubsetCount)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetRedraw<P0>(&self, fredrawon: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetRedraw)(::windows_core::Interface::as_raw(self), fredrawon.into_param().abi()).ok()
    }
    pub unsafe fn IsMoveInSameFolder(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).IsMoveInSameFolder)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn DoRename(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).DoRename)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IFolderView2, ::windows_core::IUnknown, IFolderView);
impl ::core::cmp::PartialEq for IFolderView2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFolderView2 {}
impl ::core::fmt::Debug for IFolderView2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFolderView2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFolderView2 {
    type Vtable = IFolderView2_Vtbl;
}
impl ::core::clone::Clone for IFolderView2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFolderView2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x1af3a467_214f_4298_908e_06b03e0b39f9);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFolderView2_Vtbl {
    pub base__: IFolderView_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub SetGroupBy: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, fascending: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem")))]
    SetGroupBy: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub GetGroupBy: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pkey: *mut PropertiesSystem::PROPERTYKEY, pfascending: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem")))]
    GetGroupBy: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub SetViewProperty: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, propkey: *const PropertiesSystem::PROPERTYKEY, propvar: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem")))]
    SetViewProperty: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub GetViewProperty: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, propkey: *const PropertiesSystem::PROPERTYKEY, ppropvar: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem")))]
    GetViewProperty: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub SetTileViewProperties: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pszproplist: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    SetTileViewProperties: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub SetExtendedTileViewProperties: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pszproplist: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    SetExtendedTileViewProperties: usize,
    pub SetText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, itype: FVTEXTTYPE, pwsztext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub SetCurrentFolderFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwmask: u32, dwflags: u32) -> ::windows_core::HRESULT,
    pub GetCurrentFolderFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT,
    pub GetSortColumnCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pccolumns: *mut i32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub SetSortColumns: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rgsortcolumns: *const SORTCOLUMN, ccolumns: i32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    SetSortColumns: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetSortColumns: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rgsortcolumns: *mut SORTCOLUMN, ccolumns: i32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetSortColumns: usize,
    pub GetItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, iitem: i32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetVisibleItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, istart: i32, fprevious: super::super::Foundation::BOOL, piitem: *mut i32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetVisibleItem: usize,
    pub GetSelectedItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, istart: i32, piitem: *mut i32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetSelection: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fnoneimpliesfolder: super::super::Foundation::BOOL, ppsia: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetSelection: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetSelectionState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pdwflags: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetSelectionState: usize,
    pub InvokeVerbOnSelection: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszverb: ::windows_core::PCSTR) -> ::windows_core::HRESULT,
    pub SetViewModeAndIconSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, uviewmode: FOLDERVIEWMODE, iimagesize: i32) -> ::windows_core::HRESULT,
    pub GetViewModeAndIconSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, puviewmode: *mut FOLDERVIEWMODE, piimagesize: *mut i32) -> ::windows_core::HRESULT,
    pub SetGroupSubsetCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, cvisiblerows: u32) -> ::windows_core::HRESULT,
    pub GetGroupSubsetCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcvisiblerows: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetRedraw: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fredrawon: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetRedraw: usize,
    pub IsMoveInSameFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub DoRename: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFolderViewHost(::windows_core::IUnknown);
impl IFolderViewHost {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn Initialize<P0, P1>(&self, hwndparent: P0, pdo: P1, prc: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), hwndparent.into_param().abi(), pdo.into_param().abi(), prc).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IFolderViewHost, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IFolderViewHost {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFolderViewHost {}
impl ::core::fmt::Debug for IFolderViewHost {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFolderViewHost").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFolderViewHost {
    type Vtable = IFolderViewHost_Vtbl;
}
impl ::core::clone::Clone for IFolderViewHost {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFolderViewHost {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x1ea58f02_d55a_411d_b09e_9e65ac21605b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFolderViewHost_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND, pdo: *mut ::core::ffi::c_void, prc: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com")))]
    Initialize: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IFolderViewOC(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IFolderViewOC {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetFolderView<P0>(&self, pdisp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IDispatch>,
    {
        (::windows_core::Interface::vtable(self).SetFolderView)(::windows_core::Interface::as_raw(self), pdisp.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IFolderViewOC, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IFolderViewOC {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IFolderViewOC {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IFolderViewOC {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFolderViewOC").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IFolderViewOC {
    type Vtable = IFolderViewOC_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IFolderViewOC {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IFolderViewOC {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x9ba05970_f6a8_11cf_a442_00a0c90a8f39);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IFolderViewOC_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub SetFolderView: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdisp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetFolderView: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFolderViewOptions(::windows_core::IUnknown);
impl IFolderViewOptions {
    pub unsafe fn SetFolderViewOptions(&self, fvomask: FOLDERVIEWOPTIONS, fvoflags: FOLDERVIEWOPTIONS) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFolderViewOptions)(::windows_core::Interface::as_raw(self), fvomask, fvoflags).ok()
    }
    pub unsafe fn GetFolderViewOptions(&self) -> ::windows_core::Result<FOLDERVIEWOPTIONS> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFolderViewOptions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IFolderViewOptions, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IFolderViewOptions {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFolderViewOptions {}
impl ::core::fmt::Debug for IFolderViewOptions {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFolderViewOptions").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFolderViewOptions {
    type Vtable = IFolderViewOptions_Vtbl;
}
impl ::core::clone::Clone for IFolderViewOptions {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFolderViewOptions {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x3cc974d2_b302_4d36_ad3e_06d93f695d3f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFolderViewOptions_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetFolderViewOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fvomask: FOLDERVIEWOPTIONS, fvoflags: FOLDERVIEWOPTIONS) -> ::windows_core::HRESULT,
    pub GetFolderViewOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfvoflags: *mut FOLDERVIEWOPTIONS) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFolderViewSettings(::windows_core::IUnknown);
impl IFolderViewSettings {
    pub unsafe fn GetColumnPropertyList<T>(&self) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetColumnPropertyList)(::windows_core::Interface::as_raw(self), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub unsafe fn GetGroupByProperty(&self, pkey: *mut PropertiesSystem::PROPERTYKEY, pfgroupascending: *mut super::super::Foundation::BOOL) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetGroupByProperty)(::windows_core::Interface::as_raw(self), pkey, pfgroupascending).ok()
    }
    pub unsafe fn GetViewMode(&self) -> ::windows_core::Result<FOLDERLOGICALVIEWMODE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetViewMode)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetIconSize(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetIconSize)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFolderFlags(&self, pfoldermask: *mut FOLDERFLAGS, pfolderflags: *mut FOLDERFLAGS) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetFolderFlags)(::windows_core::Interface::as_raw(self), pfoldermask, pfolderflags).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetSortColumns(&self, rgsortcolumns: &mut [SORTCOLUMN], pccolumnsout: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetSortColumns)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(rgsortcolumns.as_ptr()), rgsortcolumns.len() as _, pccolumnsout).ok()
    }
    pub unsafe fn GetGroupSubsetCount(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetGroupSubsetCount)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IFolderViewSettings, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IFolderViewSettings {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFolderViewSettings {}
impl ::core::fmt::Debug for IFolderViewSettings {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFolderViewSettings").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFolderViewSettings {
    type Vtable = IFolderViewSettings_Vtbl;
}
impl ::core::clone::Clone for IFolderViewSettings {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFolderViewSettings {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xae8c987d_8797_4ed3_be72_2a47dd938db0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFolderViewSettings_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetColumnPropertyList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub GetGroupByProperty: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pkey: *mut PropertiesSystem::PROPERTYKEY, pfgroupascending: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem")))]
    GetGroupByProperty: usize,
    pub GetViewMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plvm: *mut FOLDERLOGICALVIEWMODE) -> ::windows_core::HRESULT,
    pub GetIconSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, puiconsize: *mut u32) -> ::windows_core::HRESULT,
    pub GetFolderFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfoldermask: *mut FOLDERFLAGS, pfolderflags: *mut FOLDERFLAGS) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetSortColumns: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rgsortcolumns: *mut SORTCOLUMN, ccolumnsin: u32, pccolumnsout: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetSortColumns: usize,
    pub GetGroupSubsetCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcvisiblerows: *mut u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFrameworkInputPane(::windows_core::IUnknown);
impl IFrameworkInputPane {
    pub unsafe fn Advise<P0, P1>(&self, pwindow: P0, phandler: P1) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<IFrameworkInputPaneHandler>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Advise)(::windows_core::Interface::as_raw(self), pwindow.into_param().abi(), phandler.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AdviseWithHWND<P0, P1>(&self, hwnd: P0, phandler: P1) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<IFrameworkInputPaneHandler>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).AdviseWithHWND)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), phandler.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Unadvise(&self, dwcookie: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Unadvise)(::windows_core::Interface::as_raw(self), dwcookie).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Location(&self) -> ::windows_core::Result<super::super::Foundation::RECT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Location)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IFrameworkInputPane, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IFrameworkInputPane {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFrameworkInputPane {}
impl ::core::fmt::Debug for IFrameworkInputPane {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFrameworkInputPane").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFrameworkInputPane {
    type Vtable = IFrameworkInputPane_Vtbl;
}
impl ::core::clone::Clone for IFrameworkInputPane {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFrameworkInputPane {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x5752238b_24f0_495a_82f1_2fd593056796);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrameworkInputPane_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Advise: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwindow: *mut ::core::ffi::c_void, phandler: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub AdviseWithHWND: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, phandler: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    AdviseWithHWND: usize,
    pub Unadvise: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub Location: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prcinputpanescreenlocation: *mut super::super::Foundation::RECT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Location: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IFrameworkInputPaneHandler(::windows_core::IUnknown);
impl IFrameworkInputPaneHandler {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Showing<P0>(&self, prcinputpanescreenlocation: *const super::super::Foundation::RECT, fensurefocusedelementinview: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).Showing)(::windows_core::Interface::as_raw(self), prcinputpanescreenlocation, fensurefocusedelementinview.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Hiding<P0>(&self, fensurefocusedelementinview: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).Hiding)(::windows_core::Interface::as_raw(self), fensurefocusedelementinview.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IFrameworkInputPaneHandler, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IFrameworkInputPaneHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IFrameworkInputPaneHandler {}
impl ::core::fmt::Debug for IFrameworkInputPaneHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IFrameworkInputPaneHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IFrameworkInputPaneHandler {
    type Vtable = IFrameworkInputPaneHandler_Vtbl;
}
impl ::core::clone::Clone for IFrameworkInputPaneHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IFrameworkInputPaneHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x226c537b_1e76_4d9e_a760_33db29922f18);
}
#[repr(C)]
#[doc(hidden)]
pub struct IFrameworkInputPaneHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub Showing: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prcinputpanescreenlocation: *const super::super::Foundation::RECT, fensurefocusedelementinview: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Showing: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub Hiding: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fensurefocusedelementinview: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Hiding: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IGetServiceIds(::windows_core::IUnknown);
impl IGetServiceIds {
    pub unsafe fn GetServiceIds(&self, serviceidcount: *mut u32, serviceids: *mut *mut ::windows_core::GUID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetServiceIds)(::windows_core::Interface::as_raw(self), serviceidcount, serviceids).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IGetServiceIds, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IGetServiceIds {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IGetServiceIds {}
impl ::core::fmt::Debug for IGetServiceIds {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IGetServiceIds").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IGetServiceIds {
    type Vtable = IGetServiceIds_Vtbl;
}
impl ::core::clone::Clone for IGetServiceIds {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IGetServiceIds {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x4a073526_6103_4e21_b7bc_f519d1524e5d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IGetServiceIds_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetServiceIds: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, serviceidcount: *mut u32, serviceids: *mut *mut ::windows_core::GUID) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IHWEventHandler(::windows_core::IUnknown);
impl IHWEventHandler {
    pub unsafe fn Initialize<P0>(&self, pszparams: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), pszparams.into_param().abi()).ok()
    }
    pub unsafe fn HandleEvent<P0, P1, P2>(&self, pszdeviceid: P0, pszaltdeviceid: P1, pszeventtype: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).HandleEvent)(::windows_core::Interface::as_raw(self), pszdeviceid.into_param().abi(), pszaltdeviceid.into_param().abi(), pszeventtype.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn HandleEventWithContent<P0, P1, P2, P3, P4>(&self, pszdeviceid: P0, pszaltdeviceid: P1, pszeventtype: P2, pszcontenttypehandler: P3, pdataobject: P4) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P3: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P4: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    {
        (::windows_core::Interface::vtable(self).HandleEventWithContent)(::windows_core::Interface::as_raw(self), pszdeviceid.into_param().abi(), pszaltdeviceid.into_param().abi(), pszeventtype.into_param().abi(), pszcontenttypehandler.into_param().abi(), pdataobject.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IHWEventHandler, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IHWEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IHWEventHandler {}
impl ::core::fmt::Debug for IHWEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IHWEventHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IHWEventHandler {
    type Vtable = IHWEventHandler_Vtbl;
}
impl ::core::clone::Clone for IHWEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHWEventHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xc1fb73d0_ec3a_4ba2_b512_8cdb9187b6d1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IHWEventHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszparams: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub HandleEvent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszdeviceid: ::windows_core::PCWSTR, pszaltdeviceid: ::windows_core::PCWSTR, pszeventtype: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub HandleEventWithContent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszdeviceid: ::windows_core::PCWSTR, pszaltdeviceid: ::windows_core::PCWSTR, pszeventtype: ::windows_core::PCWSTR, pszcontenttypehandler: ::windows_core::PCWSTR, pdataobject: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    HandleEventWithContent: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IHWEventHandler2(::windows_core::IUnknown);
impl IHWEventHandler2 {
    pub unsafe fn Initialize<P0>(&self, pszparams: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.Initialize)(::windows_core::Interface::as_raw(self), pszparams.into_param().abi()).ok()
    }
    pub unsafe fn HandleEvent<P0, P1, P2>(&self, pszdeviceid: P0, pszaltdeviceid: P1, pszeventtype: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.HandleEvent)(::windows_core::Interface::as_raw(self), pszdeviceid.into_param().abi(), pszaltdeviceid.into_param().abi(), pszeventtype.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn HandleEventWithContent<P0, P1, P2, P3, P4>(&self, pszdeviceid: P0, pszaltdeviceid: P1, pszeventtype: P2, pszcontenttypehandler: P3, pdataobject: P4) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P3: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P4: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    {
        (::windows_core::Interface::vtable(self).base__.HandleEventWithContent)(::windows_core::Interface::as_raw(self), pszdeviceid.into_param().abi(), pszaltdeviceid.into_param().abi(), pszeventtype.into_param().abi(), pszcontenttypehandler.into_param().abi(), pdataobject.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn HandleEventWithHWND<P0, P1, P2, P3>(&self, pszdeviceid: P0, pszaltdeviceid: P1, pszeventtype: P2, hwndowner: P3) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P3: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).HandleEventWithHWND)(::windows_core::Interface::as_raw(self), pszdeviceid.into_param().abi(), pszaltdeviceid.into_param().abi(), pszeventtype.into_param().abi(), hwndowner.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IHWEventHandler2, ::windows_core::IUnknown, IHWEventHandler);
impl ::core::cmp::PartialEq for IHWEventHandler2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IHWEventHandler2 {}
impl ::core::fmt::Debug for IHWEventHandler2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IHWEventHandler2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IHWEventHandler2 {
    type Vtable = IHWEventHandler2_Vtbl;
}
impl ::core::clone::Clone for IHWEventHandler2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHWEventHandler2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xcfcc809f_295d_42e8_9ffc_424b33c487e6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IHWEventHandler2_Vtbl {
    pub base__: IHWEventHandler_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub HandleEventWithHWND: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszdeviceid: ::windows_core::PCWSTR, pszaltdeviceid: ::windows_core::PCWSTR, pszeventtype: ::windows_core::PCWSTR, hwndowner: super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    HandleEventWithHWND: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IHandlerActivationHost(::windows_core::IUnknown);
impl IHandlerActivationHost {
    pub unsafe fn BeforeCoCreateInstance<P0, P1>(&self, clsidhandler: *const ::windows_core::GUID, itemsbeingactivated: P0, handlerinfo: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItemArray>,
        P1: ::windows_core::IntoParam<IHandlerInfo>,
    {
        (::windows_core::Interface::vtable(self).BeforeCoCreateInstance)(::windows_core::Interface::as_raw(self), clsidhandler, itemsbeingactivated.into_param().abi(), handlerinfo.into_param().abi()).ok()
    }
    pub unsafe fn BeforeCreateProcess<P0, P1, P2>(&self, applicationpath: P0, commandline: P1, handlerinfo: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<IHandlerInfo>,
    {
        (::windows_core::Interface::vtable(self).BeforeCreateProcess)(::windows_core::Interface::as_raw(self), applicationpath.into_param().abi(), commandline.into_param().abi(), handlerinfo.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IHandlerActivationHost, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IHandlerActivationHost {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IHandlerActivationHost {}
impl ::core::fmt::Debug for IHandlerActivationHost {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IHandlerActivationHost").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IHandlerActivationHost {
    type Vtable = IHandlerActivationHost_Vtbl;
}
impl ::core::clone::Clone for IHandlerActivationHost {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHandlerActivationHost {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x35094a87_8bb1_4237_96c6_c417eebdb078);
}
#[repr(C)]
#[doc(hidden)]
pub struct IHandlerActivationHost_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub BeforeCoCreateInstance: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, clsidhandler: *const ::windows_core::GUID, itemsbeingactivated: *mut ::core::ffi::c_void, handlerinfo: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub BeforeCreateProcess: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, applicationpath: ::windows_core::PCWSTR, commandline: ::windows_core::PCWSTR, handlerinfo: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IHandlerInfo(::windows_core::IUnknown);
impl IHandlerInfo {
    pub unsafe fn GetApplicationDisplayName(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetApplicationDisplayName)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetApplicationPublisher(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetApplicationPublisher)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetApplicationIconReference(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetApplicationIconReference)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IHandlerInfo, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IHandlerInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IHandlerInfo {}
impl ::core::fmt::Debug for IHandlerInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IHandlerInfo").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IHandlerInfo {
    type Vtable = IHandlerInfo_Vtbl;
}
impl ::core::clone::Clone for IHandlerInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHandlerInfo {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x997706ef_f880_453b_8118_39e1a2d2655a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IHandlerInfo_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetApplicationDisplayName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, value: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub GetApplicationPublisher: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, value: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub GetApplicationIconReference: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, value: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IHandlerInfo2(::windows_core::IUnknown);
impl IHandlerInfo2 {
    pub unsafe fn GetApplicationDisplayName(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetApplicationDisplayName)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetApplicationPublisher(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetApplicationPublisher)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetApplicationIconReference(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetApplicationIconReference)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetApplicationId(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetApplicationId)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IHandlerInfo2, ::windows_core::IUnknown, IHandlerInfo);
impl ::core::cmp::PartialEq for IHandlerInfo2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IHandlerInfo2 {}
impl ::core::fmt::Debug for IHandlerInfo2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IHandlerInfo2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IHandlerInfo2 {
    type Vtable = IHandlerInfo2_Vtbl;
}
impl ::core::clone::Clone for IHandlerInfo2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHandlerInfo2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x31cca04c_04d3_4ea9_90de_97b15e87a532);
}
#[repr(C)]
#[doc(hidden)]
pub struct IHandlerInfo2_Vtbl {
    pub base__: IHandlerInfo_Vtbl,
    pub GetApplicationId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, value: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IHlink(::windows_core::IUnknown);
impl IHlink {
    pub unsafe fn SetHlinkSite<P0>(&self, pihlsite: P0, dwsitedata: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IHlinkSite>,
    {
        (::windows_core::Interface::vtable(self).SetHlinkSite)(::windows_core::Interface::as_raw(self), pihlsite.into_param().abi(), dwsitedata).ok()
    }
    pub unsafe fn GetHlinkSite(&self, ppihlsite: *mut ::core::option::Option<IHlinkSite>, pdwsitedata: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetHlinkSite)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(ppihlsite), pdwsitedata).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetMonikerReference<P0, P1>(&self, grfhlsetf: u32, pimktarget: P0, pwzlocation: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetMonikerReference)(::windows_core::Interface::as_raw(self), grfhlsetf, pimktarget.into_param().abi(), pwzlocation.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetMonikerReference(&self, dwwhichref: u32, ppimktarget: ::core::option::Option<*mut ::core::option::Option<super::super::System::Com::IMoniker>>, ppwzlocation: ::core::option::Option<*mut ::windows_core::PWSTR>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetMonikerReference)(::windows_core::Interface::as_raw(self), dwwhichref, ::core::mem::transmute(ppimktarget.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppwzlocation.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    pub unsafe fn SetStringReference<P0, P1>(&self, grfhlsetf: u32, pwztarget: P0, pwzlocation: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetStringReference)(::windows_core::Interface::as_raw(self), grfhlsetf, pwztarget.into_param().abi(), pwzlocation.into_param().abi()).ok()
    }
    pub unsafe fn GetStringReference(&self, dwwhichref: u32, ppwztarget: ::core::option::Option<*mut ::windows_core::PWSTR>, ppwzlocation: ::core::option::Option<*mut ::windows_core::PWSTR>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetStringReference)(::windows_core::Interface::as_raw(self), dwwhichref, ::core::mem::transmute(ppwztarget.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppwzlocation.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    pub unsafe fn SetFriendlyName<P0>(&self, pwzfriendlyname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetFriendlyName)(::windows_core::Interface::as_raw(self), pwzfriendlyname.into_param().abi()).ok()
    }
    pub unsafe fn GetFriendlyName(&self, grfhlfnamef: u32) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFriendlyName)(::windows_core::Interface::as_raw(self), grfhlfnamef, &mut result__).from_abi(result__)
    }
    pub unsafe fn SetTargetFrameName<P0>(&self, pwztargetframename: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetTargetFrameName)(::windows_core::Interface::as_raw(self), pwztargetframename.into_param().abi()).ok()
    }
    pub unsafe fn GetTargetFrameName(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetTargetFrameName)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetMiscStatus(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetMiscStatus)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Navigate<P0, P1, P2>(&self, grfhlnf: u32, pibc: P0, pibsc: P1, pihlbc: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
        P1: ::windows_core::IntoParam<super::super::System::Com::IBindStatusCallback>,
        P2: ::windows_core::IntoParam<IHlinkBrowseContext>,
    {
        (::windows_core::Interface::vtable(self).Navigate)(::windows_core::Interface::as_raw(self), grfhlnf, pibc.into_param().abi(), pibsc.into_param().abi(), pihlbc.into_param().abi()).ok()
    }
    pub unsafe fn SetAdditionalParams<P0>(&self, pwzadditionalparams: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetAdditionalParams)(::windows_core::Interface::as_raw(self), pwzadditionalparams.into_param().abi()).ok()
    }
    pub unsafe fn GetAdditionalParams(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetAdditionalParams)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IHlink, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IHlink {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IHlink {}
impl ::core::fmt::Debug for IHlink {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IHlink").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IHlink {
    type Vtable = IHlink_Vtbl;
}
impl ::core::clone::Clone for IHlink {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHlink {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x79eac9c3_baf9_11ce_8c82_00aa004ba90b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IHlink_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetHlinkSite: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pihlsite: *mut ::core::ffi::c_void, dwsitedata: u32) -> ::windows_core::HRESULT,
    pub GetHlinkSite: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppihlsite: *mut *mut ::core::ffi::c_void, pdwsitedata: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub SetMonikerReference: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, grfhlsetf: u32, pimktarget: *mut ::core::ffi::c_void, pwzlocation: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetMonikerReference: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub GetMonikerReference: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwwhichref: u32, ppimktarget: *mut *mut ::core::ffi::c_void, ppwzlocation: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetMonikerReference: usize,
    pub SetStringReference: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, grfhlsetf: u32, pwztarget: ::windows_core::PCWSTR, pwzlocation: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub GetStringReference: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwwhichref: u32, ppwztarget: *mut ::windows_core::PWSTR, ppwzlocation: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub SetFriendlyName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwzfriendlyname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub GetFriendlyName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, grfhlfnamef: u32, ppwzfriendlyname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub SetTargetFrameName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwztargetframename: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub GetTargetFrameName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppwztargetframename: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub GetMiscStatus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwstatus: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub Navigate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, grfhlnf: u32, pibc: *mut ::core::ffi::c_void, pibsc: *mut ::core::ffi::c_void, pihlbc: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Navigate: usize,
    pub SetAdditionalParams: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwzadditionalparams: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub GetAdditionalParams: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppwzadditionalparams: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IHlinkBrowseContext(::windows_core::IUnknown);
impl IHlinkBrowseContext {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Register<P0, P1>(&self, reserved: u32, piunk: P0, pimk: P1) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Register)(::windows_core::Interface::as_raw(self), reserved, piunk.into_param().abi(), pimk.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub unsafe fn GetObject<P0, P1>(&self, pimk: P0, fbindifrootregistered: P1) -> ::windows_core::Result<::windows_core::IUnknown>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetObject)(::windows_core::Interface::as_raw(self), pimk.into_param().abi(), fbindifrootregistered.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Revoke(&self, dwregister: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Revoke)(::windows_core::Interface::as_raw(self), dwregister).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetBrowseWindowInfo(&self, phlbwi: *const HLBWINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetBrowseWindowInfo)(::windows_core::Interface::as_raw(self), phlbwi).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetBrowseWindowInfo(&self, phlbwi: *mut HLBWINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetBrowseWindowInfo)(::windows_core::Interface::as_raw(self), phlbwi).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetInitialHlink<P0, P1, P2>(&self, pimktarget: P0, pwzlocation: P1, pwzfriendlyname: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetInitialHlink)(::windows_core::Interface::as_raw(self), pimktarget.into_param().abi(), pwzlocation.into_param().abi(), pwzfriendlyname.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn OnNavigateHlink<P0, P1, P2>(&self, grfhlnf: u32, pimktarget: P0, pwzlocation: P1, pwzfriendlyname: P2) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).OnNavigateHlink)(::windows_core::Interface::as_raw(self), grfhlnf, pimktarget.into_param().abi(), pwzlocation.into_param().abi(), pwzfriendlyname.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn UpdateHlink<P0, P1, P2>(&self, uhlid: u32, pimktarget: P0, pwzlocation: P1, pwzfriendlyname: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).UpdateHlink)(::windows_core::Interface::as_raw(self), uhlid, pimktarget.into_param().abi(), pwzlocation.into_param().abi(), pwzfriendlyname.into_param().abi()).ok()
    }
    pub unsafe fn EnumNavigationStack(&self, dwreserved: u32, grfhlfnamef: u32) -> ::windows_core::Result<IEnumHLITEM> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).EnumNavigationStack)(::windows_core::Interface::as_raw(self), dwreserved, grfhlfnamef, &mut result__).from_abi(result__)
    }
    pub unsafe fn QueryHlink(&self, grfhlqf: u32, uhlid: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).QueryHlink)(::windows_core::Interface::as_raw(self), grfhlqf, uhlid).ok()
    }
    pub unsafe fn GetHlink(&self, uhlid: u32) -> ::windows_core::Result<IHlink> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetHlink)(::windows_core::Interface::as_raw(self), uhlid, &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentHlink(&self, uhlid: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetCurrentHlink)(::windows_core::Interface::as_raw(self), uhlid).ok()
    }
    pub unsafe fn Clone<P0>(&self, piunkouter: P0, riid: *const ::windows_core::GUID) -> ::windows_core::Result<::windows_core::IUnknown>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Clone)(::windows_core::Interface::as_raw(self), piunkouter.into_param().abi(), riid, &mut result__).from_abi(result__)
    }
    pub unsafe fn Close(&self, reserved: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Close)(::windows_core::Interface::as_raw(self), reserved).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IHlinkBrowseContext, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IHlinkBrowseContext {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IHlinkBrowseContext {}
impl ::core::fmt::Debug for IHlinkBrowseContext {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IHlinkBrowseContext").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IHlinkBrowseContext {
    type Vtable = IHlinkBrowseContext_Vtbl;
}
impl ::core::clone::Clone for IHlinkBrowseContext {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHlinkBrowseContext {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x79eac9c7_baf9_11ce_8c82_00aa004ba90b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IHlinkBrowseContext_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Register: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, reserved: u32, piunk: *mut ::core::ffi::c_void, pimk: *mut ::core::ffi::c_void, pdwregister: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Register: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
    pub GetObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pimk: *mut ::core::ffi::c_void, fbindifrootregistered: super::super::Foundation::BOOL, ppiunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com")))]
    GetObject: usize,
    pub Revoke: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwregister: u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetBrowseWindowInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phlbwi: *const HLBWINFO) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetBrowseWindowInfo: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetBrowseWindowInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phlbwi: *mut HLBWINFO) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetBrowseWindowInfo: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetInitialHlink: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pimktarget: *mut ::core::ffi::c_void, pwzlocation: ::windows_core::PCWSTR, pwzfriendlyname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetInitialHlink: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub OnNavigateHlink: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, grfhlnf: u32, pimktarget: *mut ::core::ffi::c_void, pwzlocation: ::windows_core::PCWSTR, pwzfriendlyname: ::windows_core::PCWSTR, puhlid: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    OnNavigateHlink: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub UpdateHlink: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, uhlid: u32, pimktarget: *mut ::core::ffi::c_void, pwzlocation: ::windows_core::PCWSTR, pwzfriendlyname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    UpdateHlink: usize,
    pub EnumNavigationStack: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwreserved: u32, grfhlfnamef: u32, ppienumhlitem: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub QueryHlink: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, grfhlqf: u32, uhlid: u32) -> ::windows_core::HRESULT,
    pub GetHlink: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, uhlid: u32, ppihl: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SetCurrentHlink: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, uhlid: u32) -> ::windows_core::HRESULT,
    pub Clone: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, piunkouter: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppiunkobj: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Close: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, reserved: u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IHlinkFrame(::windows_core::IUnknown);
impl IHlinkFrame {
    pub unsafe fn SetBrowseContext<P0>(&self, pihlbc: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IHlinkBrowseContext>,
    {
        (::windows_core::Interface::vtable(self).SetBrowseContext)(::windows_core::Interface::as_raw(self), pihlbc.into_param().abi()).ok()
    }
    pub unsafe fn GetBrowseContext(&self) -> ::windows_core::Result<IHlinkBrowseContext> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetBrowseContext)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Navigate<P0, P1, P2>(&self, grfhlnf: u32, pbc: P0, pibsc: P1, pihlnavigate: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
        P1: ::windows_core::IntoParam<super::super::System::Com::IBindStatusCallback>,
        P2: ::windows_core::IntoParam<IHlink>,
    {
        (::windows_core::Interface::vtable(self).Navigate)(::windows_core::Interface::as_raw(self), grfhlnf, pbc.into_param().abi(), pibsc.into_param().abi(), pihlnavigate.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn OnNavigate<P0, P1, P2>(&self, grfhlnf: u32, pimktarget: P0, pwzlocation: P1, pwzfriendlyname: P2, dwreserved: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).OnNavigate)(::windows_core::Interface::as_raw(self), grfhlnf, pimktarget.into_param().abi(), pwzlocation.into_param().abi(), pwzfriendlyname.into_param().abi(), dwreserved).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn UpdateHlink<P0, P1, P2>(&self, uhlid: u32, pimktarget: P0, pwzlocation: P1, pwzfriendlyname: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IMoniker>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).UpdateHlink)(::windows_core::Interface::as_raw(self), uhlid, pimktarget.into_param().abi(), pwzlocation.into_param().abi(), pwzfriendlyname.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IHlinkFrame, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IHlinkFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IHlinkFrame {}
impl ::core::fmt::Debug for IHlinkFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IHlinkFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IHlinkFrame {
    type Vtable = IHlinkFrame_Vtbl;
}
impl ::core::clone::Clone for IHlinkFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHlinkFrame {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x79eac9c5_baf9_11ce_8c82_00aa004ba90b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IHlinkFrame_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetBrowseContext: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pihlbc: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetBrowseContext: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppihlbc: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub Navigate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, grfhlnf: u32, pbc: *mut ::core::ffi::c_void, pibsc: *mut ::core::ffi::c_void, pihlnavigate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Navigate: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub OnNavigate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, grfhlnf: u32, pimktarget: *mut ::core::ffi::c_void, pwzlocation: ::windows_core::PCWSTR, pwzfriendlyname: ::windows_core::PCWSTR, dwreserved: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    OnNavigate: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub UpdateHlink: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, uhlid: u32, pimktarget: *mut ::core::ffi::c_void, pwzlocation: ::windows_core::PCWSTR, pwzfriendlyname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    UpdateHlink: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IHlinkSite(::windows_core::IUnknown);
impl IHlinkSite {
    pub unsafe fn QueryService(&self, dwsitedata: u32, guidservice: *const ::windows_core::GUID, riid: *const ::windows_core::GUID) -> ::windows_core::Result<::windows_core::IUnknown> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).QueryService)(::windows_core::Interface::as_raw(self), dwsitedata, guidservice, riid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetMoniker(&self, dwsitedata: u32, dwassign: u32, dwwhich: u32) -> ::windows_core::Result<super::super::System::Com::IMoniker> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetMoniker)(::windows_core::Interface::as_raw(self), dwsitedata, dwassign, dwwhich, &mut result__).from_abi(result__)
    }
    pub unsafe fn ReadyToNavigate(&self, dwsitedata: u32, dwreserved: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ReadyToNavigate)(::windows_core::Interface::as_raw(self), dwsitedata, dwreserved).ok()
    }
    pub unsafe fn OnNavigationComplete<P0>(&self, dwsitedata: u32, dwreserved: u32, hrerror: ::windows_core::HRESULT, pwzerror: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).OnNavigationComplete)(::windows_core::Interface::as_raw(self), dwsitedata, dwreserved, hrerror, pwzerror.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IHlinkSite, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IHlinkSite {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IHlinkSite {}
impl ::core::fmt::Debug for IHlinkSite {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IHlinkSite").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IHlinkSite {
    type Vtable = IHlinkSite_Vtbl;
}
impl ::core::clone::Clone for IHlinkSite {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHlinkSite {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x79eac9c2_baf9_11ce_8c82_00aa004ba90b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IHlinkSite_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub QueryService: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwsitedata: u32, guidservice: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppiunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub GetMoniker: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwsitedata: u32, dwassign: u32, dwwhich: u32, ppimk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetMoniker: usize,
    pub ReadyToNavigate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwsitedata: u32, dwreserved: u32) -> ::windows_core::HRESULT,
    pub OnNavigationComplete: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwsitedata: u32, dwreserved: u32, hrerror: ::windows_core::HRESULT, pwzerror: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IHlinkTarget(::windows_core::IUnknown);
impl IHlinkTarget {
    pub unsafe fn SetBrowseContext<P0>(&self, pihlbc: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IHlinkBrowseContext>,
    {
        (::windows_core::Interface::vtable(self).SetBrowseContext)(::windows_core::Interface::as_raw(self), pihlbc.into_param().abi()).ok()
    }
    pub unsafe fn GetBrowseContext(&self) -> ::windows_core::Result<IHlinkBrowseContext> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetBrowseContext)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Navigate<P0>(&self, grfhlnf: u32, pwzjumplocation: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).Navigate)(::windows_core::Interface::as_raw(self), grfhlnf, pwzjumplocation.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetMoniker<P0>(&self, pwzlocation: P0, dwassign: u32) -> ::windows_core::Result<super::super::System::Com::IMoniker>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetMoniker)(::windows_core::Interface::as_raw(self), pwzlocation.into_param().abi(), dwassign, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFriendlyName<P0>(&self, pwzlocation: P0) -> ::windows_core::Result<::windows_core::PWSTR>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFriendlyName)(::windows_core::Interface::as_raw(self), pwzlocation.into_param().abi(), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IHlinkTarget, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IHlinkTarget {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IHlinkTarget {}
impl ::core::fmt::Debug for IHlinkTarget {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IHlinkTarget").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IHlinkTarget {
    type Vtable = IHlinkTarget_Vtbl;
}
impl ::core::clone::Clone for IHlinkTarget {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHlinkTarget {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x79eac9c4_baf9_11ce_8c82_00aa004ba90b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IHlinkTarget_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetBrowseContext: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pihlbc: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetBrowseContext: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppihlbc: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Navigate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, grfhlnf: u32, pwzjumplocation: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub GetMoniker: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwzlocation: ::windows_core::PCWSTR, dwassign: u32, ppimklocation: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetMoniker: usize,
    pub GetFriendlyName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwzlocation: ::windows_core::PCWSTR, ppwzfriendlyname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IHomeGroup(::windows_core::IUnknown);
impl IHomeGroup {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsMember(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IsMember)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ShowSharingWizard<P0>(&self, owner: P0) -> ::windows_core::Result<HOMEGROUPSHARINGCHOICES>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ShowSharingWizard)(::windows_core::Interface::as_raw(self), owner.into_param().abi(), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IHomeGroup, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IHomeGroup {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IHomeGroup {}
impl ::core::fmt::Debug for IHomeGroup {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IHomeGroup").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IHomeGroup {
    type Vtable = IHomeGroup_Vtbl;
}
impl ::core::clone::Clone for IHomeGroup {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IHomeGroup {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x7a3bd1d9_35a9_4fb3_a467_f48cac35e2d0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IHomeGroup_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub IsMember: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, member: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    IsMember: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub ShowSharingWizard: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, owner: super::super::Foundation::HWND, sharingchoices: *mut HOMEGROUPSHARINGCHOICES) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ShowSharingWizard: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IIOCancelInformation(::windows_core::IUnknown);
impl IIOCancelInformation {
    pub unsafe fn SetCancelInformation(&self, dwthreadid: u32, umsgcancel: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetCancelInformation)(::windows_core::Interface::as_raw(self), dwthreadid, umsgcancel).ok()
    }
    pub unsafe fn GetCancelInformation(&self, pdwthreadid: ::core::option::Option<*mut u32>, pumsgcancel: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetCancelInformation)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pdwthreadid.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pumsgcancel.unwrap_or(::std::ptr::null_mut()))).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IIOCancelInformation, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IIOCancelInformation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIOCancelInformation {}
impl ::core::fmt::Debug for IIOCancelInformation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIOCancelInformation").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IIOCancelInformation {
    type Vtable = IIOCancelInformation_Vtbl;
}
impl ::core::clone::Clone for IIOCancelInformation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IIOCancelInformation {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xf5b0bf81_8cb5_4b1b_9449_1a159e0c733c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIOCancelInformation_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetCancelInformation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwthreadid: u32, umsgcancel: u32) -> ::windows_core::HRESULT,
    pub GetCancelInformation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwthreadid: *mut u32, pumsgcancel: *mut u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IIdentityName(::windows_core::IUnknown);
impl IIdentityName {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetItemIDList(&self) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetItemIDList)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetItem(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetItem)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IIdentityName, ::windows_core::IUnknown, IRelatedItem);
impl ::core::cmp::PartialEq for IIdentityName {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IIdentityName {}
impl ::core::fmt::Debug for IIdentityName {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IIdentityName").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IIdentityName {
    type Vtable = IIdentityName_Vtbl;
}
impl ::core::clone::Clone for IIdentityName {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IIdentityName {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x7d903fca_d6f9_4810_8332_946c0177e247);
}
#[repr(C)]
#[doc(hidden)]
pub struct IIdentityName_Vtbl {
    pub base__: IRelatedItem_Vtbl,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IImageRecompress(::windows_core::IUnknown);
impl IImageRecompress {
    #[doc = "*Required features: `\"Win32_System_Com_StructuredStorage\"`*"]
    #[cfg(feature = "Win32_System_Com_StructuredStorage")]
    pub unsafe fn RecompressImage<P0, P1>(&self, psi: P0, cx: i32, cy: i32, iquality: i32, pstg: P1) -> ::windows_core::Result<super::super::System::Com::IStream>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<super::super::System::Com::StructuredStorage::IStorage>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).RecompressImage)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), cx, cy, iquality, pstg.into_param().abi(), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IImageRecompress, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IImageRecompress {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IImageRecompress {}
impl ::core::fmt::Debug for IImageRecompress {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IImageRecompress").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IImageRecompress {
    type Vtable = IImageRecompress_Vtbl;
}
impl ::core::clone::Clone for IImageRecompress {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IImageRecompress {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x505f1513_6b3e_4892_a272_59f8889a4d3e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IImageRecompress_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com_StructuredStorage")]
    pub RecompressImage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, cx: i32, cy: i32, iquality: i32, pstg: *mut ::core::ffi::c_void, ppstrmout: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com_StructuredStorage"))]
    RecompressImage: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IInitializeCommand(::windows_core::IUnknown);
impl IInitializeCommand {
    #[doc = "*Required features: `\"Win32_System_Com_StructuredStorage\"`*"]
    #[cfg(feature = "Win32_System_Com_StructuredStorage")]
    pub unsafe fn Initialize<P0, P1>(&self, pszcommandname: P0, ppb: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<super::super::System::Com::StructuredStorage::IPropertyBag>,
    {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), pszcommandname.into_param().abi(), ppb.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IInitializeCommand, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IInitializeCommand {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IInitializeCommand {}
impl ::core::fmt::Debug for IInitializeCommand {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IInitializeCommand").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IInitializeCommand {
    type Vtable = IInitializeCommand_Vtbl;
}
impl ::core::clone::Clone for IInitializeCommand {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInitializeCommand {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x85075acf_231f_40ea_9610_d26b7b58f638);
}
#[repr(C)]
#[doc(hidden)]
pub struct IInitializeCommand_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com_StructuredStorage")]
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszcommandname: ::windows_core::PCWSTR, ppb: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com_StructuredStorage"))]
    Initialize: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IInitializeNetworkFolder(::windows_core::IUnknown);
impl IInitializeNetworkFolder {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn Initialize<P0, P1>(&self, pidl: *const Common::ITEMIDLIST, pidltarget: *const Common::ITEMIDLIST, udisplaytype: u32, pszresname: P0, pszprovider: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), pidl, pidltarget, udisplaytype, pszresname.into_param().abi(), pszprovider.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IInitializeNetworkFolder, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IInitializeNetworkFolder {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IInitializeNetworkFolder {}
impl ::core::fmt::Debug for IInitializeNetworkFolder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IInitializeNetworkFolder").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IInitializeNetworkFolder {
    type Vtable = IInitializeNetworkFolder_Vtbl;
}
impl ::core::clone::Clone for IInitializeNetworkFolder {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInitializeNetworkFolder {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x6e0f9881_42a8_4f2a_97f8_8af4e026d92d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IInitializeNetworkFolder_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pidltarget: *const Common::ITEMIDLIST, udisplaytype: u32, pszresname: ::windows_core::PCWSTR, pszprovider: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    Initialize: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IInitializeObject(::windows_core::IUnknown);
impl IInitializeObject {
    pub unsafe fn Initialize(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IInitializeObject, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IInitializeObject {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IInitializeObject {}
impl ::core::fmt::Debug for IInitializeObject {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IInitializeObject").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IInitializeObject {
    type Vtable = IInitializeObject_Vtbl;
}
impl ::core::clone::Clone for IInitializeObject {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInitializeObject {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x4622ad16_ff23_11d0_8d34_00a0c90f2719);
}
#[repr(C)]
#[doc(hidden)]
pub struct IInitializeObject_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IInitializeWithBindCtx(::windows_core::IUnknown);
impl IInitializeWithBindCtx {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Initialize<P0>(&self, pbc: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
    {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), pbc.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IInitializeWithBindCtx, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IInitializeWithBindCtx {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IInitializeWithBindCtx {}
impl ::core::fmt::Debug for IInitializeWithBindCtx {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IInitializeWithBindCtx").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IInitializeWithBindCtx {
    type Vtable = IInitializeWithBindCtx_Vtbl;
}
impl ::core::clone::Clone for IInitializeWithBindCtx {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInitializeWithBindCtx {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x71c0d2bc_726d_45cc_a6c0_2e31c1db2159);
}
#[repr(C)]
#[doc(hidden)]
pub struct IInitializeWithBindCtx_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbc: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Initialize: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IInitializeWithItem(::windows_core::IUnknown);
impl IInitializeWithItem {
    pub unsafe fn Initialize<P0>(&self, psi: P0, grfmode: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), grfmode).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IInitializeWithItem, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IInitializeWithItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IInitializeWithItem {}
impl ::core::fmt::Debug for IInitializeWithItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IInitializeWithItem").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IInitializeWithItem {
    type Vtable = IInitializeWithItem_Vtbl;
}
impl ::core::clone::Clone for IInitializeWithItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInitializeWithItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x7f73be3f_fb79_493c_a6c7_7ee14e245841);
}
#[repr(C)]
#[doc(hidden)]
pub struct IInitializeWithItem_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, grfmode: u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IInitializeWithPropertyStore(::windows_core::IUnknown);
impl IInitializeWithPropertyStore {
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn Initialize<P0>(&self, pps: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<PropertiesSystem::IPropertyStore>,
    {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), pps.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IInitializeWithPropertyStore, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IInitializeWithPropertyStore {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IInitializeWithPropertyStore {}
impl ::core::fmt::Debug for IInitializeWithPropertyStore {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IInitializeWithPropertyStore").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IInitializeWithPropertyStore {
    type Vtable = IInitializeWithPropertyStore_Vtbl;
}
impl ::core::clone::Clone for IInitializeWithPropertyStore {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInitializeWithPropertyStore {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xc3e12eb5_7d8d_44f8_b6dd_0e77b34d6de4);
}
#[repr(C)]
#[doc(hidden)]
pub struct IInitializeWithPropertyStore_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pps: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    Initialize: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IInitializeWithWindow(::windows_core::IUnknown);
impl IInitializeWithWindow {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Initialize<P0>(&self, hwnd: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IInitializeWithWindow, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IInitializeWithWindow {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IInitializeWithWindow {}
impl ::core::fmt::Debug for IInitializeWithWindow {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IInitializeWithWindow").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IInitializeWithWindow {
    type Vtable = IInitializeWithWindow_Vtbl;
}
impl ::core::clone::Clone for IInitializeWithWindow {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInitializeWithWindow {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x3e68d4bd_7135_4d10_8018_9fb6d9f33fa1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IInitializeWithWindow_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Initialize: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IInputObject(::windows_core::IUnknown);
impl IInputObject {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn UIActivateIO<P0>(&self, factivate: P0, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).UIActivateIO)(::windows_core::Interface::as_raw(self), factivate.into_param().abi(), pmsg).ok()
    }
    pub unsafe fn HasFocusIO(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).HasFocusIO)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn TranslateAcceleratorIO(&self, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).TranslateAcceleratorIO)(::windows_core::Interface::as_raw(self), pmsg).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IInputObject, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IInputObject {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IInputObject {}
impl ::core::fmt::Debug for IInputObject {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IInputObject").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IInputObject {
    type Vtable = IInputObject_Vtbl;
}
impl ::core::clone::Clone for IInputObject {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInputObject {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x68284faa_6a48_11d0_8c78_00c04fd918b4);
}
#[repr(C)]
#[doc(hidden)]
pub struct IInputObject_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub UIActivateIO: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, factivate: super::super::Foundation::BOOL, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))]
    UIActivateIO: usize,
    pub HasFocusIO: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub TranslateAcceleratorIO: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))]
    TranslateAcceleratorIO: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IInputObject2(::windows_core::IUnknown);
impl IInputObject2 {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn UIActivateIO<P0>(&self, factivate: P0, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.UIActivateIO)(::windows_core::Interface::as_raw(self), factivate.into_param().abi(), pmsg).ok()
    }
    pub unsafe fn HasFocusIO(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.HasFocusIO)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn TranslateAcceleratorIO(&self, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.TranslateAcceleratorIO)(::windows_core::Interface::as_raw(self), pmsg).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn TranslateAcceleratorGlobal(&self, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).TranslateAcceleratorGlobal)(::windows_core::Interface::as_raw(self), pmsg).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IInputObject2, ::windows_core::IUnknown, IInputObject);
impl ::core::cmp::PartialEq for IInputObject2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IInputObject2 {}
impl ::core::fmt::Debug for IInputObject2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IInputObject2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IInputObject2 {
    type Vtable = IInputObject2_Vtbl;
}
impl ::core::clone::Clone for IInputObject2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInputObject2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x6915c085_510b_44cd_94af_28dfa56cf92b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IInputObject2_Vtbl {
    pub base__: IInputObject_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub TranslateAcceleratorGlobal: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))]
    TranslateAcceleratorGlobal: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IInputObjectSite(::windows_core::IUnknown);
impl IInputObjectSite {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnFocusChangeIS<P0, P1>(&self, punkobj: P0, fsetfocus: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).OnFocusChangeIS)(::windows_core::Interface::as_raw(self), punkobj.into_param().abi(), fsetfocus.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IInputObjectSite, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IInputObjectSite {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IInputObjectSite {}
impl ::core::fmt::Debug for IInputObjectSite {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IInputObjectSite").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IInputObjectSite {
    type Vtable = IInputObjectSite_Vtbl;
}
impl ::core::clone::Clone for IInputObjectSite {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInputObjectSite {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xf1db8392_7331_11d0_8c99_00a0c92dbfe8);
}
#[repr(C)]
#[doc(hidden)]
pub struct IInputObjectSite_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub OnFocusChangeIS: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punkobj: *mut ::core::ffi::c_void, fsetfocus: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    OnFocusChangeIS: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IInputPaneAnimationCoordinator(::windows_core::IUnknown);
impl IInputPaneAnimationCoordinator {
    #[doc = "*Required features: `\"Win32_Graphics_DirectComposition\"`*"]
    #[cfg(feature = "Win32_Graphics_DirectComposition")]
    pub unsafe fn AddAnimation<P0, P1>(&self, device: P0, animation: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<super::super::Graphics::DirectComposition::IDCompositionAnimation>,
    {
        (::windows_core::Interface::vtable(self).AddAnimation)(::windows_core::Interface::as_raw(self), device.into_param().abi(), animation.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IInputPaneAnimationCoordinator, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IInputPaneAnimationCoordinator {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IInputPaneAnimationCoordinator {}
impl ::core::fmt::Debug for IInputPaneAnimationCoordinator {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IInputPaneAnimationCoordinator").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IInputPaneAnimationCoordinator {
    type Vtable = IInputPaneAnimationCoordinator_Vtbl;
}
impl ::core::clone::Clone for IInputPaneAnimationCoordinator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInputPaneAnimationCoordinator {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x2af16ba9_2de5_4b75_82d9_01372afbffb4);
}
#[repr(C)]
#[doc(hidden)]
pub struct IInputPaneAnimationCoordinator_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Graphics_DirectComposition")]
    pub AddAnimation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, device: *mut ::core::ffi::c_void, animation: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_DirectComposition"))]
    AddAnimation: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IInputPanelConfiguration(::windows_core::IUnknown);
impl IInputPanelConfiguration {
    pub unsafe fn EnableFocusTracking(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).EnableFocusTracking)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IInputPanelConfiguration, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IInputPanelConfiguration {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IInputPanelConfiguration {}
impl ::core::fmt::Debug for IInputPanelConfiguration {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IInputPanelConfiguration").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IInputPanelConfiguration {
    type Vtable = IInputPanelConfiguration_Vtbl;
}
impl ::core::clone::Clone for IInputPanelConfiguration {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInputPanelConfiguration {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x41c81592_514c_48bd_a22e_e6af638521a6);
}
#[repr(C)]
#[doc(hidden)]
pub struct IInputPanelConfiguration_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub EnableFocusTracking: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IInputPanelInvocationConfiguration(::windows_core::IUnknown);
impl IInputPanelInvocationConfiguration {
    pub unsafe fn RequireTouchInEditControl(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RequireTouchInEditControl)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IInputPanelInvocationConfiguration, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IInputPanelInvocationConfiguration {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IInputPanelInvocationConfiguration {}
impl ::core::fmt::Debug for IInputPanelInvocationConfiguration {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IInputPanelInvocationConfiguration").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IInputPanelInvocationConfiguration {
    type Vtable = IInputPanelInvocationConfiguration_Vtbl;
}
impl ::core::clone::Clone for IInputPanelInvocationConfiguration {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInputPanelInvocationConfiguration {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xa213f136_3b45_4362_a332_efb6547cd432);
}
#[repr(C)]
#[doc(hidden)]
pub struct IInputPanelInvocationConfiguration_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub RequireTouchInEditControl: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IInsertItem(::windows_core::IUnknown);
impl IInsertItem {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn InsertItem(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).InsertItem)(::windows_core::Interface::as_raw(self), pidl).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IInsertItem, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IInsertItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IInsertItem {}
impl ::core::fmt::Debug for IInsertItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IInsertItem").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IInsertItem {
    type Vtable = IInsertItem_Vtbl;
}
impl ::core::clone::Clone for IInsertItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IInsertItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xd2b57227_3d23_4b95_93c0_492bd454c356);
}
#[repr(C)]
#[doc(hidden)]
pub struct IInsertItem_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub InsertItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    InsertItem: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IItemNameLimits(::windows_core::IUnknown);
impl IItemNameLimits {
    pub unsafe fn GetValidCharacters(&self, ppwszvalidchars: *mut ::windows_core::PWSTR, ppwszinvalidchars: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetValidCharacters)(::windows_core::Interface::as_raw(self), ppwszvalidchars, ppwszinvalidchars).ok()
    }
    pub unsafe fn GetMaxLength<P0>(&self, pszname: P0) -> ::windows_core::Result<i32>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetMaxLength)(::windows_core::Interface::as_raw(self), pszname.into_param().abi(), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IItemNameLimits, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IItemNameLimits {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IItemNameLimits {}
impl ::core::fmt::Debug for IItemNameLimits {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IItemNameLimits").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IItemNameLimits {
    type Vtable = IItemNameLimits_Vtbl;
}
impl ::core::clone::Clone for IItemNameLimits {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IItemNameLimits {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x1df0d7f1_b267_4d28_8b10_12e23202a5c4);
}
#[repr(C)]
#[doc(hidden)]
pub struct IItemNameLimits_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetValidCharacters: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppwszvalidchars: *mut ::windows_core::PWSTR, ppwszinvalidchars: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub GetMaxLength: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR, pimaxnamelen: *mut i32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IKnownFolder(::windows_core::IUnknown);
impl IKnownFolder {
    pub unsafe fn GetId(&self) -> ::windows_core::Result<::windows_core::GUID> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetId)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCategory(&self) -> ::windows_core::Result<KF_CATEGORY> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCategory)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetShellItem<T>(&self, dwflags: u32) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetShellItem)(::windows_core::Interface::as_raw(self), dwflags, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetPath(&self, dwflags: u32) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetPath)(::windows_core::Interface::as_raw(self), dwflags, &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPath<P0>(&self, dwflags: u32, pszpath: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetPath)(::windows_core::Interface::as_raw(self), dwflags, pszpath.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetIDList(&self, dwflags: u32) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetIDList)(::windows_core::Interface::as_raw(self), dwflags, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFolderType(&self) -> ::windows_core::Result<::windows_core::GUID> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFolderType)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetRedirectionCapabilities(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetRedirectionCapabilities)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFolderDefinition(&self, pkfd: *mut KNOWNFOLDER_DEFINITION) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetFolderDefinition)(::windows_core::Interface::as_raw(self), pkfd).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IKnownFolder, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IKnownFolder {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IKnownFolder {}
impl ::core::fmt::Debug for IKnownFolder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IKnownFolder").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IKnownFolder {
    type Vtable = IKnownFolder_Vtbl;
}
impl ::core::clone::Clone for IKnownFolder {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IKnownFolder {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x3aa7af7e_9b36_420c_a8e3_f77d4674a488);
}
#[repr(C)]
#[doc(hidden)]
pub struct IKnownFolder_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pkfid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT,
    pub GetCategory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcategory: *mut KF_CATEGORY) -> ::windows_core::HRESULT,
    pub GetShellItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetPath: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, ppszpath: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub SetPath: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, pszpath: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetIDList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetIDList: usize,
    pub GetFolderType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pftid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT,
    pub GetRedirectionCapabilities: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcapabilities: *mut u32) -> ::windows_core::HRESULT,
    pub GetFolderDefinition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pkfd: *mut KNOWNFOLDER_DEFINITION) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IKnownFolderManager(::windows_core::IUnknown);
impl IKnownFolderManager {
    pub unsafe fn FolderIdFromCsidl(&self, ncsidl: i32) -> ::windows_core::Result<::windows_core::GUID> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).FolderIdFromCsidl)(::windows_core::Interface::as_raw(self), ncsidl, &mut result__).from_abi(result__)
    }
    pub unsafe fn FolderIdToCsidl(&self, rfid: *const ::windows_core::GUID) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).FolderIdToCsidl)(::windows_core::Interface::as_raw(self), rfid, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFolderIds(&self, ppkfid: *mut *mut ::windows_core::GUID, pcount: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetFolderIds)(::windows_core::Interface::as_raw(self), ppkfid, pcount).ok()
    }
    pub unsafe fn GetFolder(&self, rfid: *const ::windows_core::GUID) -> ::windows_core::Result<IKnownFolder> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFolder)(::windows_core::Interface::as_raw(self), rfid, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFolderByName<P0>(&self, pszcanonicalname: P0) -> ::windows_core::Result<IKnownFolder>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFolderByName)(::windows_core::Interface::as_raw(self), pszcanonicalname.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn RegisterFolder(&self, rfid: *const ::windows_core::GUID, pkfd: *const KNOWNFOLDER_DEFINITION) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RegisterFolder)(::windows_core::Interface::as_raw(self), rfid, pkfd).ok()
    }
    pub unsafe fn UnregisterFolder(&self, rfid: *const ::windows_core::GUID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).UnregisterFolder)(::windows_core::Interface::as_raw(self), rfid).ok()
    }
    pub unsafe fn FindFolderFromPath<P0>(&self, pszpath: P0, mode: FFFP_MODE) -> ::windows_core::Result<IKnownFolder>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).FindFolderFromPath)(::windows_core::Interface::as_raw(self), pszpath.into_param().abi(), mode, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn FindFolderFromIDList(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<IKnownFolder> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).FindFolderFromIDList)(::windows_core::Interface::as_raw(self), pidl, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Redirect<P0, P1>(&self, rfid: *const ::windows_core::GUID, hwnd: P0, flags: u32, psztargetpath: P1, pexclusion: ::core::option::Option<&[::windows_core::GUID]>, ppszerror: ::core::option::Option<*mut ::windows_core::PWSTR>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).Redirect)(::windows_core::Interface::as_raw(self), rfid, hwnd.into_param().abi(), flags, psztargetpath.into_param().abi(), pexclusion.as_deref().map_or(0, |slice| slice.len() as _), ::core::mem::transmute(pexclusion.as_deref().map_or(::core::ptr::null(), |slice| slice.as_ptr())), ::core::mem::transmute(ppszerror.unwrap_or(::std::ptr::null_mut()))).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IKnownFolderManager, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IKnownFolderManager {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IKnownFolderManager {}
impl ::core::fmt::Debug for IKnownFolderManager {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IKnownFolderManager").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IKnownFolderManager {
    type Vtable = IKnownFolderManager_Vtbl;
}
impl ::core::clone::Clone for IKnownFolderManager {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IKnownFolderManager {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x8be2d872_86aa_4d47_b776_32cca40c7018);
}
#[repr(C)]
#[doc(hidden)]
pub struct IKnownFolderManager_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub FolderIdFromCsidl: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ncsidl: i32, pfid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT,
    pub FolderIdToCsidl: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rfid: *const ::windows_core::GUID, pncsidl: *mut i32) -> ::windows_core::HRESULT,
    pub GetFolderIds: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppkfid: *mut *mut ::windows_core::GUID, pcount: *mut u32) -> ::windows_core::HRESULT,
    pub GetFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rfid: *const ::windows_core::GUID, ppkf: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetFolderByName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszcanonicalname: ::windows_core::PCWSTR, ppkf: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub RegisterFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rfid: *const ::windows_core::GUID, pkfd: *const KNOWNFOLDER_DEFINITION) -> ::windows_core::HRESULT,
    pub UnregisterFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rfid: *const ::windows_core::GUID) -> ::windows_core::HRESULT,
    pub FindFolderFromPath: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszpath: ::windows_core::PCWSTR, mode: FFFP_MODE, ppkf: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub FindFolderFromIDList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, ppkf: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    FindFolderFromIDList: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub Redirect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rfid: *const ::windows_core::GUID, hwnd: super::super::Foundation::HWND, flags: u32, psztargetpath: ::windows_core::PCWSTR, cfolders: u32, pexclusion: *const ::windows_core::GUID, ppszerror: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Redirect: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ILaunchSourceAppUserModelId(::windows_core::IUnknown);
impl ILaunchSourceAppUserModelId {
    pub unsafe fn GetAppUserModelId(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetAppUserModelId)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ILaunchSourceAppUserModelId, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ILaunchSourceAppUserModelId {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ILaunchSourceAppUserModelId {}
impl ::core::fmt::Debug for ILaunchSourceAppUserModelId {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ILaunchSourceAppUserModelId").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ILaunchSourceAppUserModelId {
    type Vtable = ILaunchSourceAppUserModelId_Vtbl;
}
impl ::core::clone::Clone for ILaunchSourceAppUserModelId {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ILaunchSourceAppUserModelId {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x989191ac_28ff_4cf0_9584_e0d078bc2396);
}
#[repr(C)]
#[doc(hidden)]
pub struct ILaunchSourceAppUserModelId_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetAppUserModelId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, launchingapp: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ILaunchSourceViewSizePreference(::windows_core::IUnknown);
impl ILaunchSourceViewSizePreference {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSourceViewToPosition(&self) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSourceViewToPosition)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSourceViewSizePreference(&self) -> ::windows_core::Result<APPLICATION_VIEW_SIZE_PREFERENCE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSourceViewSizePreference)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ILaunchSourceViewSizePreference, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ILaunchSourceViewSizePreference {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ILaunchSourceViewSizePreference {}
impl ::core::fmt::Debug for ILaunchSourceViewSizePreference {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ILaunchSourceViewSizePreference").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ILaunchSourceViewSizePreference {
    type Vtable = ILaunchSourceViewSizePreference_Vtbl;
}
impl ::core::clone::Clone for ILaunchSourceViewSizePreference {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ILaunchSourceViewSizePreference {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xe5aa01f7_1fb8_4830_8720_4e6734cbd5f3);
}
#[repr(C)]
#[doc(hidden)]
pub struct ILaunchSourceViewSizePreference_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub GetSourceViewToPosition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetSourceViewToPosition: usize,
    pub GetSourceViewSizePreference: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, sourcesizeafterlaunch: *mut APPLICATION_VIEW_SIZE_PREFERENCE) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ILaunchTargetMonitor(::windows_core::IUnknown);
impl ILaunchTargetMonitor {
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetMonitor(&self) -> ::windows_core::Result<super::super::Graphics::Gdi::HMONITOR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetMonitor)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ILaunchTargetMonitor, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ILaunchTargetMonitor {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ILaunchTargetMonitor {}
impl ::core::fmt::Debug for ILaunchTargetMonitor {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ILaunchTargetMonitor").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ILaunchTargetMonitor {
    type Vtable = ILaunchTargetMonitor_Vtbl;
}
impl ::core::clone::Clone for ILaunchTargetMonitor {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ILaunchTargetMonitor {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x266fbc7e_490d_46ed_a96b_2274db252003);
}
#[repr(C)]
#[doc(hidden)]
pub struct ILaunchTargetMonitor_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub GetMonitor: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, monitor: *mut super::super::Graphics::Gdi::HMONITOR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))]
    GetMonitor: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ILaunchTargetViewSizePreference(::windows_core::IUnknown);
impl ILaunchTargetViewSizePreference {
    pub unsafe fn GetTargetViewSizePreference(&self) -> ::windows_core::Result<APPLICATION_VIEW_SIZE_PREFERENCE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetTargetViewSizePreference)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ILaunchTargetViewSizePreference, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ILaunchTargetViewSizePreference {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ILaunchTargetViewSizePreference {}
impl ::core::fmt::Debug for ILaunchTargetViewSizePreference {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ILaunchTargetViewSizePreference").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ILaunchTargetViewSizePreference {
    type Vtable = ILaunchTargetViewSizePreference_Vtbl;
}
impl ::core::clone::Clone for ILaunchTargetViewSizePreference {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ILaunchTargetViewSizePreference {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x2f0666c6_12f7_4360_b511_a394a0553725);
}
#[repr(C)]
#[doc(hidden)]
pub struct ILaunchTargetViewSizePreference_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetTargetViewSizePreference: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, targetsizeonlaunch: *mut APPLICATION_VIEW_SIZE_PREFERENCE) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ILaunchUIContext(::windows_core::IUnknown);
impl ILaunchUIContext {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetAssociatedWindow<P0>(&self, value: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).SetAssociatedWindow)(::windows_core::Interface::as_raw(self), value.into_param().abi()).ok()
    }
    pub unsafe fn SetTabGroupingPreference(&self, value: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetTabGroupingPreference)(::windows_core::Interface::as_raw(self), value).ok()
    }
}
::windows_core::imp::interface_hierarchy!(ILaunchUIContext, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ILaunchUIContext {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ILaunchUIContext {}
impl ::core::fmt::Debug for ILaunchUIContext {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ILaunchUIContext").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ILaunchUIContext {
    type Vtable = ILaunchUIContext_Vtbl;
}
impl ::core::clone::Clone for ILaunchUIContext {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ILaunchUIContext {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x1791e8f6_21c7_4340_882a_a6a93e3fd73b);
}
#[repr(C)]
#[doc(hidden)]
pub struct ILaunchUIContext_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub SetAssociatedWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, value: super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetAssociatedWindow: usize,
    pub SetTabGroupingPreference: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, value: u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ILaunchUIContextProvider(::windows_core::IUnknown);
impl ILaunchUIContextProvider {
    pub unsafe fn UpdateContext<P0>(&self, context: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<ILaunchUIContext>,
    {
        (::windows_core::Interface::vtable(self).UpdateContext)(::windows_core::Interface::as_raw(self), context.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(ILaunchUIContextProvider, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ILaunchUIContextProvider {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ILaunchUIContextProvider {}
impl ::core::fmt::Debug for ILaunchUIContextProvider {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ILaunchUIContextProvider").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ILaunchUIContextProvider {
    type Vtable = ILaunchUIContextProvider_Vtbl;
}
impl ::core::clone::Clone for ILaunchUIContextProvider {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ILaunchUIContextProvider {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x0d12c4c8_a3d9_4e24_94c1_0e20c5a956c4);
}
#[repr(C)]
#[doc(hidden)]
pub struct ILaunchUIContextProvider_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub UpdateContext: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IMenuBand(::windows_core::IUnknown);
impl IMenuBand {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn IsMenuMessage(&self, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).IsMenuMessage)(::windows_core::Interface::as_raw(self), pmsg).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn TranslateMenuMessage(&self, pmsg: *mut super::WindowsAndMessaging::MSG, plret: *mut super::super::Foundation::LRESULT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).TranslateMenuMessage)(::windows_core::Interface::as_raw(self), pmsg, plret).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IMenuBand, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IMenuBand {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IMenuBand {}
impl ::core::fmt::Debug for IMenuBand {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMenuBand").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IMenuBand {
    type Vtable = IMenuBand_Vtbl;
}
impl ::core::clone::Clone for IMenuBand {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IMenuBand {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x568804cd_cbd7_11d0_9816_00c04fd91972);
}
#[repr(C)]
#[doc(hidden)]
pub struct IMenuBand_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub IsMenuMessage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))]
    IsMenuMessage: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub TranslateMenuMessage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmsg: *mut super::WindowsAndMessaging::MSG, plret: *mut super::super::Foundation::LRESULT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))]
    TranslateMenuMessage: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Ole\"`*"]
#[cfg(feature = "Win32_System_Ole")]
#[repr(transparent)]
pub struct IMenuPopup(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Ole")]
impl IMenuPopup {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn GetWindow(&self) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetWindow)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn ContextSensitiveHelp<P0>(&self, fentermode: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.ContextSensitiveHelp)(::windows_core::Interface::as_raw(self), fentermode.into_param().abi()).ok()
    }
    pub unsafe fn SetClient<P0>(&self, punkclient: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).base__.SetClient)(::windows_core::Interface::as_raw(self), punkclient.into_param().abi()).ok()
    }
    pub unsafe fn GetClient(&self) -> ::windows_core::Result<::windows_core::IUnknown> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetClient)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnPosRectChangeDB(&self, prc: *const super::super::Foundation::RECT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.OnPosRectChangeDB)(::windows_core::Interface::as_raw(self), prc).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Popup(&self, ppt: *const super::super::Foundation::POINTL, prcexclude: ::core::option::Option<*const super::super::Foundation::RECTL>, dwflags: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Popup)(::windows_core::Interface::as_raw(self), ppt, ::core::mem::transmute(prcexclude.unwrap_or(::std::ptr::null())), dwflags).ok()
    }
    pub unsafe fn OnSelect(&self, dwselecttype: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).OnSelect)(::windows_core::Interface::as_raw(self), dwselecttype).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn SetSubMenu<P0, P1>(&self, pmp: P0, fset: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IMenuPopup>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetSubMenu)(::windows_core::Interface::as_raw(self), pmp.into_param().abi(), fset.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Ole")]
::windows_core::imp::interface_hierarchy!(IMenuPopup, ::windows_core::IUnknown, super::super::System::Ole::IOleWindow, IDeskBar);
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::PartialEq for IMenuPopup {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::Eq for IMenuPopup {}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::fmt::Debug for IMenuPopup {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IMenuPopup").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::Interface for IMenuPopup {
    type Vtable = IMenuPopup_Vtbl;
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::clone::Clone for IMenuPopup {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::ComInterface for IMenuPopup {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xd1e7afeb_6a2e_11d0_8c78_00c04fd918b4);
}
#[cfg(feature = "Win32_System_Ole")]
#[repr(C)]
#[doc(hidden)]
pub struct IMenuPopup_Vtbl {
    pub base__: IDeskBar_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub Popup: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppt: *const super::super::Foundation::POINTL, prcexclude: *const super::super::Foundation::RECTL, dwflags: i32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Popup: usize,
    pub OnSelect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwselecttype: u32) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub SetSubMenu: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmp: *mut ::core::ffi::c_void, fset: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Ole")))]
    SetSubMenu: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IModalWindow(::windows_core::IUnknown);
impl IModalWindow {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Show<P0>(&self, hwndowner: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).Show)(::windows_core::Interface::as_raw(self), hwndowner.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IModalWindow, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IModalWindow {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IModalWindow {}
impl ::core::fmt::Debug for IModalWindow {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IModalWindow").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IModalWindow {
    type Vtable = IModalWindow_Vtbl;
}
impl ::core::clone::Clone for IModalWindow {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IModalWindow {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xb4db1657_70d7_485e_8e3e_6fcb5a5c1802);
}
#[repr(C)]
#[doc(hidden)]
pub struct IModalWindow_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub Show: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Show: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct INameSpaceTreeAccessible(::windows_core::IUnknown);
impl INameSpaceTreeAccessible {
    pub unsafe fn OnGetDefaultAccessibilityAction<P0>(&self, psi: P0) -> ::windows_core::Result<::windows_core::BSTR>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).OnGetDefaultAccessibilityAction)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn OnDoDefaultAccessibilityAction<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).OnDoDefaultAccessibilityAction)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn OnGetAccessibilityRole<P0>(&self, psi: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).OnGetAccessibilityRole)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(INameSpaceTreeAccessible, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for INameSpaceTreeAccessible {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INameSpaceTreeAccessible {}
impl ::core::fmt::Debug for INameSpaceTreeAccessible {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INameSpaceTreeAccessible").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for INameSpaceTreeAccessible {
    type Vtable = INameSpaceTreeAccessible_Vtbl;
}
impl ::core::clone::Clone for INameSpaceTreeAccessible {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INameSpaceTreeAccessible {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x71f312de_43ed_4190_8477_e9536b82350b);
}
#[repr(C)]
#[doc(hidden)]
pub struct INameSpaceTreeAccessible_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub OnGetDefaultAccessibilityAction: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, pbstrdefaultaction: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub OnDoDefaultAccessibilityAction: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub OnGetAccessibilityRole: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, pvarrole: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    OnGetAccessibilityRole: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct INameSpaceTreeControl(::windows_core::IUnknown);
impl INameSpaceTreeControl {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Initialize<P0>(&self, hwndparent: P0, prc: *const super::super::Foundation::RECT, nsctsflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), hwndparent.into_param().abi(), prc, nsctsflags).ok()
    }
    pub unsafe fn TreeAdvise<P0>(&self, punk: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).TreeAdvise)(::windows_core::Interface::as_raw(self), punk.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn TreeUnadvise(&self, dwcookie: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).TreeUnadvise)(::windows_core::Interface::as_raw(self), dwcookie).ok()
    }
    pub unsafe fn AppendRoot<P0, P1>(&self, psiroot: P0, grfenumflags: u32, grfrootstyle: u32, pif: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItemFilter>,
    {
        (::windows_core::Interface::vtable(self).AppendRoot)(::windows_core::Interface::as_raw(self), psiroot.into_param().abi(), grfenumflags, grfrootstyle, pif.into_param().abi()).ok()
    }
    pub unsafe fn InsertRoot<P0, P1>(&self, iindex: i32, psiroot: P0, grfenumflags: u32, grfrootstyle: u32, pif: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItemFilter>,
    {
        (::windows_core::Interface::vtable(self).InsertRoot)(::windows_core::Interface::as_raw(self), iindex, psiroot.into_param().abi(), grfenumflags, grfrootstyle, pif.into_param().abi()).ok()
    }
    pub unsafe fn RemoveRoot<P0>(&self, psiroot: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).RemoveRoot)(::windows_core::Interface::as_raw(self), psiroot.into_param().abi()).ok()
    }
    pub unsafe fn RemoveAllRoots(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RemoveAllRoots)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetRootItems(&self) -> ::windows_core::Result<IShellItemArray> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetRootItems)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetItemState<P0>(&self, psi: P0, nstcismask: u32, nstcisflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).SetItemState)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), nstcismask, nstcisflags).ok()
    }
    pub unsafe fn GetItemState<P0>(&self, psi: P0, nstcismask: u32) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetItemState)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), nstcismask, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSelectedItems(&self) -> ::windows_core::Result<IShellItemArray> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSelectedItems)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetItemCustomState<P0>(&self, psi: P0) -> ::windows_core::Result<i32>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetItemCustomState)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetItemCustomState<P0>(&self, psi: P0, istatenumber: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).SetItemCustomState)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), istatenumber).ok()
    }
    pub unsafe fn EnsureItemVisible<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).EnsureItemVisible)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn SetTheme<P0>(&self, psztheme: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetTheme)(::windows_core::Interface::as_raw(self), psztheme.into_param().abi()).ok()
    }
    pub unsafe fn GetNextItem<P0>(&self, psi: P0, nstcgi: NSTCGNI) -> ::windows_core::Result<IShellItem>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetNextItem)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), nstcgi, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn HitTest(&self, ppt: *const super::super::Foundation::POINT) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).HitTest)(::windows_core::Interface::as_raw(self), ppt, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetItemRect<P0>(&self, psi: P0) -> ::windows_core::Result<super::super::Foundation::RECT>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetItemRect)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn CollapseAll(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).CollapseAll)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(INameSpaceTreeControl, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for INameSpaceTreeControl {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INameSpaceTreeControl {}
impl ::core::fmt::Debug for INameSpaceTreeControl {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INameSpaceTreeControl").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for INameSpaceTreeControl {
    type Vtable = INameSpaceTreeControl_Vtbl;
}
impl ::core::clone::Clone for INameSpaceTreeControl {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INameSpaceTreeControl {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x028212a3_b627_47e9_8856_c14265554e4f);
}
#[repr(C)]
#[doc(hidden)]
pub struct INameSpaceTreeControl_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND, prc: *const super::super::Foundation::RECT, nsctsflags: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Initialize: usize,
    pub TreeAdvise: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT,
    pub TreeUnadvise: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows_core::HRESULT,
    pub AppendRoot: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiroot: *mut ::core::ffi::c_void, grfenumflags: u32, grfrootstyle: u32, pif: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub InsertRoot: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, iindex: i32, psiroot: *mut ::core::ffi::c_void, grfenumflags: u32, grfrootstyle: u32, pif: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub RemoveRoot: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiroot: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub RemoveAllRoots: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetRootItems: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppsiarootitems: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SetItemState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, nstcismask: u32, nstcisflags: u32) -> ::windows_core::HRESULT,
    pub GetItemState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, nstcismask: u32, pnstcisflags: *mut u32) -> ::windows_core::HRESULT,
    pub GetSelectedItems: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiaitems: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetItemCustomState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, pistatenumber: *mut i32) -> ::windows_core::HRESULT,
    pub SetItemCustomState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, istatenumber: i32) -> ::windows_core::HRESULT,
    pub EnsureItemVisible: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SetTheme: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psztheme: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub GetNextItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, nstcgi: NSTCGNI, ppsinext: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub HitTest: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppt: *const super::super::Foundation::POINT, ppsiout: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    HitTest: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetItemRect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, prect: *mut super::super::Foundation::RECT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetItemRect: usize,
    pub CollapseAll: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct INameSpaceTreeControl2(::windows_core::IUnknown);
impl INameSpaceTreeControl2 {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Initialize<P0>(&self, hwndparent: P0, prc: *const super::super::Foundation::RECT, nsctsflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).base__.Initialize)(::windows_core::Interface::as_raw(self), hwndparent.into_param().abi(), prc, nsctsflags).ok()
    }
    pub unsafe fn TreeAdvise<P0>(&self, punk: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.TreeAdvise)(::windows_core::Interface::as_raw(self), punk.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn TreeUnadvise(&self, dwcookie: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.TreeUnadvise)(::windows_core::Interface::as_raw(self), dwcookie).ok()
    }
    pub unsafe fn AppendRoot<P0, P1>(&self, psiroot: P0, grfenumflags: u32, grfrootstyle: u32, pif: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItemFilter>,
    {
        (::windows_core::Interface::vtable(self).base__.AppendRoot)(::windows_core::Interface::as_raw(self), psiroot.into_param().abi(), grfenumflags, grfrootstyle, pif.into_param().abi()).ok()
    }
    pub unsafe fn InsertRoot<P0, P1>(&self, iindex: i32, psiroot: P0, grfenumflags: u32, grfrootstyle: u32, pif: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItemFilter>,
    {
        (::windows_core::Interface::vtable(self).base__.InsertRoot)(::windows_core::Interface::as_raw(self), iindex, psiroot.into_param().abi(), grfenumflags, grfrootstyle, pif.into_param().abi()).ok()
    }
    pub unsafe fn RemoveRoot<P0>(&self, psiroot: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).base__.RemoveRoot)(::windows_core::Interface::as_raw(self), psiroot.into_param().abi()).ok()
    }
    pub unsafe fn RemoveAllRoots(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.RemoveAllRoots)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetRootItems(&self) -> ::windows_core::Result<IShellItemArray> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetRootItems)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetItemState<P0>(&self, psi: P0, nstcismask: u32, nstcisflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).base__.SetItemState)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), nstcismask, nstcisflags).ok()
    }
    pub unsafe fn GetItemState<P0>(&self, psi: P0, nstcismask: u32) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetItemState)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), nstcismask, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSelectedItems(&self) -> ::windows_core::Result<IShellItemArray> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetSelectedItems)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetItemCustomState<P0>(&self, psi: P0) -> ::windows_core::Result<i32>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetItemCustomState)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetItemCustomState<P0>(&self, psi: P0, istatenumber: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).base__.SetItemCustomState)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), istatenumber).ok()
    }
    pub unsafe fn EnsureItemVisible<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).base__.EnsureItemVisible)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn SetTheme<P0>(&self, psztheme: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetTheme)(::windows_core::Interface::as_raw(self), psztheme.into_param().abi()).ok()
    }
    pub unsafe fn GetNextItem<P0>(&self, psi: P0, nstcgi: NSTCGNI) -> ::windows_core::Result<IShellItem>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetNextItem)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), nstcgi, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn HitTest(&self, ppt: *const super::super::Foundation::POINT) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.HitTest)(::windows_core::Interface::as_raw(self), ppt, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetItemRect<P0>(&self, psi: P0) -> ::windows_core::Result<super::super::Foundation::RECT>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetItemRect)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn CollapseAll(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.CollapseAll)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetControlStyle(&self, nstcsmask: u32, nstcsstyle: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetControlStyle)(::windows_core::Interface::as_raw(self), nstcsmask, nstcsstyle).ok()
    }
    pub unsafe fn GetControlStyle(&self, nstcsmask: u32) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetControlStyle)(::windows_core::Interface::as_raw(self), nstcsmask, &mut result__).from_abi(result__)
    }
    pub unsafe fn SetControlStyle2(&self, nstcsmask: NSTCSTYLE2, nstcsstyle: NSTCSTYLE2) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetControlStyle2)(::windows_core::Interface::as_raw(self), nstcsmask, nstcsstyle).ok()
    }
    pub unsafe fn GetControlStyle2(&self, nstcsmask: NSTCSTYLE2) -> ::windows_core::Result<NSTCSTYLE2> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetControlStyle2)(::windows_core::Interface::as_raw(self), nstcsmask, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(INameSpaceTreeControl2, ::windows_core::IUnknown, INameSpaceTreeControl);
impl ::core::cmp::PartialEq for INameSpaceTreeControl2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INameSpaceTreeControl2 {}
impl ::core::fmt::Debug for INameSpaceTreeControl2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INameSpaceTreeControl2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for INameSpaceTreeControl2 {
    type Vtable = INameSpaceTreeControl2_Vtbl;
}
impl ::core::clone::Clone for INameSpaceTreeControl2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INameSpaceTreeControl2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x7cc7aed8_290e_49bc_8945_c1401cc9306c);
}
#[repr(C)]
#[doc(hidden)]
pub struct INameSpaceTreeControl2_Vtbl {
    pub base__: INameSpaceTreeControl_Vtbl,
    pub SetControlStyle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, nstcsmask: u32, nstcsstyle: u32) -> ::windows_core::HRESULT,
    pub GetControlStyle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, nstcsmask: u32, pnstcsstyle: *mut u32) -> ::windows_core::HRESULT,
    pub SetControlStyle2: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, nstcsmask: NSTCSTYLE2, nstcsstyle: NSTCSTYLE2) -> ::windows_core::HRESULT,
    pub GetControlStyle2: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, nstcsmask: NSTCSTYLE2, pnstcsstyle: *mut NSTCSTYLE2) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct INameSpaceTreeControlCustomDraw(::windows_core::IUnknown);
impl INameSpaceTreeControlCustomDraw {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn PrePaint<P0>(&self, hdc: P0, prc: *const super::super::Foundation::RECT) -> ::windows_core::Result<super::super::Foundation::LRESULT>
    where
        P0: ::windows_core::IntoParam<super::super::Graphics::Gdi::HDC>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).PrePaint)(::windows_core::Interface::as_raw(self), hdc.into_param().abi(), prc, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn PostPaint<P0>(&self, hdc: P0, prc: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Graphics::Gdi::HDC>,
    {
        (::windows_core::Interface::vtable(self).PostPaint)(::windows_core::Interface::as_raw(self), hdc.into_param().abi(), prc).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_UI_Controls\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_UI_Controls"))]
    pub unsafe fn ItemPrePaint<P0>(&self, hdc: P0, prc: *const super::super::Foundation::RECT, pnstccditem: *const NSTCCUSTOMDRAW, pclrtext: *mut super::super::Foundation::COLORREF, pclrtextbk: *mut super::super::Foundation::COLORREF, plres: *mut super::super::Foundation::LRESULT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Graphics::Gdi::HDC>,
    {
        (::windows_core::Interface::vtable(self).ItemPrePaint)(::windows_core::Interface::as_raw(self), hdc.into_param().abi(), prc, pnstccditem, pclrtext, pclrtextbk, plres).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_UI_Controls\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_UI_Controls"))]
    pub unsafe fn ItemPostPaint<P0>(&self, hdc: P0, prc: *const super::super::Foundation::RECT, pnstccditem: *const NSTCCUSTOMDRAW) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Graphics::Gdi::HDC>,
    {
        (::windows_core::Interface::vtable(self).ItemPostPaint)(::windows_core::Interface::as_raw(self), hdc.into_param().abi(), prc, pnstccditem).ok()
    }
}
::windows_core::imp::interface_hierarchy!(INameSpaceTreeControlCustomDraw, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for INameSpaceTreeControlCustomDraw {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INameSpaceTreeControlCustomDraw {}
impl ::core::fmt::Debug for INameSpaceTreeControlCustomDraw {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INameSpaceTreeControlCustomDraw").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for INameSpaceTreeControlCustomDraw {
    type Vtable = INameSpaceTreeControlCustomDraw_Vtbl;
}
impl ::core::clone::Clone for INameSpaceTreeControlCustomDraw {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INameSpaceTreeControlCustomDraw {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x2d3ba758_33ee_42d5_bb7b_5f3431d86c78);
}
#[repr(C)]
#[doc(hidden)]
pub struct INameSpaceTreeControlCustomDraw_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub PrePaint: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hdc: super::super::Graphics::Gdi::HDC, prc: *const super::super::Foundation::RECT, plres: *mut super::super::Foundation::LRESULT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi")))]
    PrePaint: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub PostPaint: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hdc: super::super::Graphics::Gdi::HDC, prc: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi")))]
    PostPaint: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_UI_Controls"))]
    pub ItemPrePaint: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hdc: super::super::Graphics::Gdi::HDC, prc: *const super::super::Foundation::RECT, pnstccditem: *const NSTCCUSTOMDRAW, pclrtext: *mut super::super::Foundation::COLORREF, pclrtextbk: *mut super::super::Foundation::COLORREF, plres: *mut super::super::Foundation::LRESULT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_UI_Controls")))]
    ItemPrePaint: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_UI_Controls"))]
    pub ItemPostPaint: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hdc: super::super::Graphics::Gdi::HDC, prc: *const super::super::Foundation::RECT, pnstccditem: *const NSTCCUSTOMDRAW) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_UI_Controls")))]
    ItemPostPaint: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct INameSpaceTreeControlDropHandler(::windows_core::IUnknown);
impl INameSpaceTreeControlDropHandler {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnDragEnter<P0, P1, P2>(&self, psiover: P0, psiadata: P1, foutsidesource: P2, grfkeystate: u32, pdweffect: *mut u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItemArray>,
        P2: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).OnDragEnter)(::windows_core::Interface::as_raw(self), psiover.into_param().abi(), psiadata.into_param().abi(), foutsidesource.into_param().abi(), grfkeystate, pdweffect).ok()
    }
    pub unsafe fn OnDragOver<P0, P1>(&self, psiover: P0, psiadata: P1, grfkeystate: u32, pdweffect: *mut u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItemArray>,
    {
        (::windows_core::Interface::vtable(self).OnDragOver)(::windows_core::Interface::as_raw(self), psiover.into_param().abi(), psiadata.into_param().abi(), grfkeystate, pdweffect).ok()
    }
    pub unsafe fn OnDragPosition<P0, P1>(&self, psiover: P0, psiadata: P1, inewposition: i32, ioldposition: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItemArray>,
    {
        (::windows_core::Interface::vtable(self).OnDragPosition)(::windows_core::Interface::as_raw(self), psiover.into_param().abi(), psiadata.into_param().abi(), inewposition, ioldposition).ok()
    }
    pub unsafe fn OnDrop<P0, P1>(&self, psiover: P0, psiadata: P1, iposition: i32, grfkeystate: u32, pdweffect: *mut u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItemArray>,
    {
        (::windows_core::Interface::vtable(self).OnDrop)(::windows_core::Interface::as_raw(self), psiover.into_param().abi(), psiadata.into_param().abi(), iposition, grfkeystate, pdweffect).ok()
    }
    pub unsafe fn OnDropPosition<P0, P1>(&self, psiover: P0, psiadata: P1, inewposition: i32, ioldposition: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItemArray>,
    {
        (::windows_core::Interface::vtable(self).OnDropPosition)(::windows_core::Interface::as_raw(self), psiover.into_param().abi(), psiadata.into_param().abi(), inewposition, ioldposition).ok()
    }
    pub unsafe fn OnDragLeave<P0>(&self, psiover: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).OnDragLeave)(::windows_core::Interface::as_raw(self), psiover.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(INameSpaceTreeControlDropHandler, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for INameSpaceTreeControlDropHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INameSpaceTreeControlDropHandler {}
impl ::core::fmt::Debug for INameSpaceTreeControlDropHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INameSpaceTreeControlDropHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for INameSpaceTreeControlDropHandler {
    type Vtable = INameSpaceTreeControlDropHandler_Vtbl;
}
impl ::core::clone::Clone for INameSpaceTreeControlDropHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INameSpaceTreeControlDropHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xf9c665d6_c2f2_4c19_bf33_8322d7352f51);
}
#[repr(C)]
#[doc(hidden)]
pub struct INameSpaceTreeControlDropHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub OnDragEnter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiover: *mut ::core::ffi::c_void, psiadata: *mut ::core::ffi::c_void, foutsidesource: super::super::Foundation::BOOL, grfkeystate: u32, pdweffect: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    OnDragEnter: usize,
    pub OnDragOver: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiover: *mut ::core::ffi::c_void, psiadata: *mut ::core::ffi::c_void, grfkeystate: u32, pdweffect: *mut u32) -> ::windows_core::HRESULT,
    pub OnDragPosition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiover: *mut ::core::ffi::c_void, psiadata: *mut ::core::ffi::c_void, inewposition: i32, ioldposition: i32) -> ::windows_core::HRESULT,
    pub OnDrop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiover: *mut ::core::ffi::c_void, psiadata: *mut ::core::ffi::c_void, iposition: i32, grfkeystate: u32, pdweffect: *mut u32) -> ::windows_core::HRESULT,
    pub OnDropPosition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiover: *mut ::core::ffi::c_void, psiadata: *mut ::core::ffi::c_void, inewposition: i32, ioldposition: i32) -> ::windows_core::HRESULT,
    pub OnDragLeave: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiover: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct INameSpaceTreeControlEvents(::windows_core::IUnknown);
impl INameSpaceTreeControlEvents {
    pub unsafe fn OnItemClick<P0>(&self, psi: P0, nstcehittest: u32, nstceclicktype: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).OnItemClick)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), nstcehittest, nstceclicktype).ok()
    }
    pub unsafe fn OnPropertyItemCommit<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).OnPropertyItemCommit)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn OnItemStateChanging<P0>(&self, psi: P0, nstcismask: u32, nstcisstate: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).OnItemStateChanging)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), nstcismask, nstcisstate).ok()
    }
    pub unsafe fn OnItemStateChanged<P0>(&self, psi: P0, nstcismask: u32, nstcisstate: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).OnItemStateChanged)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), nstcismask, nstcisstate).ok()
    }
    pub unsafe fn OnSelectionChanged<P0>(&self, psiaselection: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItemArray>,
    {
        (::windows_core::Interface::vtable(self).OnSelectionChanged)(::windows_core::Interface::as_raw(self), psiaselection.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnKeyboardInput<P0, P1>(&self, umsg: u32, wparam: P0, lparam: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).OnKeyboardInput)(::windows_core::Interface::as_raw(self), umsg, wparam.into_param().abi(), lparam.into_param().abi()).ok()
    }
    pub unsafe fn OnBeforeExpand<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).OnBeforeExpand)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn OnAfterExpand<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).OnAfterExpand)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn OnBeginLabelEdit<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).OnBeginLabelEdit)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn OnEndLabelEdit<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).OnEndLabelEdit)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn OnGetToolTip<P0>(&self, psi: P0, psztip: &mut [u16]) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).OnGetToolTip)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), ::core::mem::transmute(psztip.as_ptr()), psztip.len() as _).ok()
    }
    pub unsafe fn OnBeforeItemDelete<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).OnBeforeItemDelete)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnItemAdded<P0, P1>(&self, psi: P0, fisroot: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).OnItemAdded)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), fisroot.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OnItemDeleted<P0, P1>(&self, psi: P0, fisroot: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).OnItemDeleted)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), fisroot.into_param().abi()).ok()
    }
    pub unsafe fn OnBeforeContextMenu<P0>(&self, psi: P0, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).OnBeforeContextMenu)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), riid, ppv).ok()
    }
    pub unsafe fn OnAfterContextMenu<P0, P1>(&self, psi: P0, pcmin: P1, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IContextMenu>,
    {
        (::windows_core::Interface::vtable(self).OnAfterContextMenu)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), pcmin.into_param().abi(), riid, ppv).ok()
    }
    pub unsafe fn OnBeforeStateImageChange<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).OnBeforeStateImageChange)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn OnGetDefaultIconIndex<P0>(&self, psi: P0, pidefaulticon: *mut i32, piopenicon: *mut i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).OnGetDefaultIconIndex)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), pidefaulticon, piopenicon).ok()
    }
}
::windows_core::imp::interface_hierarchy!(INameSpaceTreeControlEvents, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for INameSpaceTreeControlEvents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INameSpaceTreeControlEvents {}
impl ::core::fmt::Debug for INameSpaceTreeControlEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INameSpaceTreeControlEvents").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for INameSpaceTreeControlEvents {
    type Vtable = INameSpaceTreeControlEvents_Vtbl;
}
impl ::core::clone::Clone for INameSpaceTreeControlEvents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INameSpaceTreeControlEvents {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x93d77985_b3d8_4484_8318_672cdda002ce);
}
#[repr(C)]
#[doc(hidden)]
pub struct INameSpaceTreeControlEvents_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub OnItemClick: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, nstcehittest: u32, nstceclicktype: u32) -> ::windows_core::HRESULT,
    pub OnPropertyItemCommit: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub OnItemStateChanging: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, nstcismask: u32, nstcisstate: u32) -> ::windows_core::HRESULT,
    pub OnItemStateChanged: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, nstcismask: u32, nstcisstate: u32) -> ::windows_core::HRESULT,
    pub OnSelectionChanged: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiaselection: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub OnKeyboardInput: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    OnKeyboardInput: usize,
    pub OnBeforeExpand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub OnAfterExpand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub OnBeginLabelEdit: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub OnEndLabelEdit: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub OnGetToolTip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, psztip: ::windows_core::PWSTR, cchtip: i32) -> ::windows_core::HRESULT,
    pub OnBeforeItemDelete: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub OnItemAdded: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, fisroot: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    OnItemAdded: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub OnItemDeleted: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, fisroot: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    OnItemDeleted: usize,
    pub OnBeforeContextMenu: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub OnAfterContextMenu: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, pcmin: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub OnBeforeStateImageChange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub OnGetDefaultIconIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, pidefaulticon: *mut i32, piopenicon: *mut i32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct INameSpaceTreeControlFolderCapabilities(::windows_core::IUnknown);
impl INameSpaceTreeControlFolderCapabilities {
    pub unsafe fn GetFolderCapabilities(&self, nfcmask: NSTCFOLDERCAPABILITIES) -> ::windows_core::Result<NSTCFOLDERCAPABILITIES> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFolderCapabilities)(::windows_core::Interface::as_raw(self), nfcmask, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(INameSpaceTreeControlFolderCapabilities, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for INameSpaceTreeControlFolderCapabilities {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INameSpaceTreeControlFolderCapabilities {}
impl ::core::fmt::Debug for INameSpaceTreeControlFolderCapabilities {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INameSpaceTreeControlFolderCapabilities").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for INameSpaceTreeControlFolderCapabilities {
    type Vtable = INameSpaceTreeControlFolderCapabilities_Vtbl;
}
impl ::core::clone::Clone for INameSpaceTreeControlFolderCapabilities {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INameSpaceTreeControlFolderCapabilities {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xe9701183_e6b3_4ff2_8568_813615fec7be);
}
#[repr(C)]
#[doc(hidden)]
pub struct INameSpaceTreeControlFolderCapabilities_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetFolderCapabilities: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, nfcmask: NSTCFOLDERCAPABILITIES, pnfcvalue: *mut NSTCFOLDERCAPABILITIES) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct INamedPropertyBag(::windows_core::IUnknown);
impl INamedPropertyBag {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
    pub unsafe fn ReadPropertyNPB<P0, P1>(&self, pszbagname: P0, pszpropname: P1, pvar: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).ReadPropertyNPB)(::windows_core::Interface::as_raw(self), pszbagname.into_param().abi(), pszpropname.into_param().abi(), pvar).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
    pub unsafe fn WritePropertyNPB<P0, P1>(&self, pszbagname: P0, pszpropname: P1, pvar: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).WritePropertyNPB)(::windows_core::Interface::as_raw(self), pszbagname.into_param().abi(), pszpropname.into_param().abi(), pvar).ok()
    }
    pub unsafe fn RemovePropertyNPB<P0, P1>(&self, pszbagname: P0, pszpropname: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).RemovePropertyNPB)(::windows_core::Interface::as_raw(self), pszbagname.into_param().abi(), pszpropname.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(INamedPropertyBag, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for INamedPropertyBag {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INamedPropertyBag {}
impl ::core::fmt::Debug for INamedPropertyBag {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INamedPropertyBag").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for INamedPropertyBag {
    type Vtable = INamedPropertyBag_Vtbl;
}
impl ::core::clone::Clone for INamedPropertyBag {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INamedPropertyBag {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xfb700430_952c_11d1_946f_000000000000);
}
#[repr(C)]
#[doc(hidden)]
pub struct INamedPropertyBag_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
    pub ReadPropertyNPB: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszbagname: ::windows_core::PCWSTR, pszpropname: ::windows_core::PCWSTR, pvar: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant")))]
    ReadPropertyNPB: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
    pub WritePropertyNPB: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszbagname: ::windows_core::PCWSTR, pszpropname: ::windows_core::PCWSTR, pvar: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant")))]
    WritePropertyNPB: usize,
    pub RemovePropertyNPB: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszbagname: ::windows_core::PCWSTR, pszpropname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct INamespaceWalk(::windows_core::IUnknown);
impl INamespaceWalk {
    pub unsafe fn Walk<P0, P1>(&self, punktowalk: P0, dwflags: u32, cdepth: i32, pnswcb: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<INamespaceWalkCB>,
    {
        (::windows_core::Interface::vtable(self).Walk)(::windows_core::Interface::as_raw(self), punktowalk.into_param().abi(), dwflags, cdepth, pnswcb.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetIDArrayResult(&self, pcitems: *mut u32, prgpidl: *mut *mut *mut Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetIDArrayResult)(::windows_core::Interface::as_raw(self), pcitems, prgpidl).ok()
    }
}
::windows_core::imp::interface_hierarchy!(INamespaceWalk, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for INamespaceWalk {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INamespaceWalk {}
impl ::core::fmt::Debug for INamespaceWalk {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INamespaceWalk").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for INamespaceWalk {
    type Vtable = INamespaceWalk_Vtbl;
}
impl ::core::clone::Clone for INamespaceWalk {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INamespaceWalk {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x57ced8a7_3f4a_432c_9350_30f24483f74f);
}
#[repr(C)]
#[doc(hidden)]
pub struct INamespaceWalk_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Walk: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punktowalk: *mut ::core::ffi::c_void, dwflags: u32, cdepth: i32, pnswcb: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetIDArrayResult: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcitems: *mut u32, prgpidl: *mut *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetIDArrayResult: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct INamespaceWalkCB(::windows_core::IUnknown);
impl INamespaceWalkCB {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn FoundItem<P0>(&self, psf: P0, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellFolder>,
    {
        (::windows_core::Interface::vtable(self).FoundItem)(::windows_core::Interface::as_raw(self), psf.into_param().abi(), pidl).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn EnterFolder<P0>(&self, psf: P0, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellFolder>,
    {
        (::windows_core::Interface::vtable(self).EnterFolder)(::windows_core::Interface::as_raw(self), psf.into_param().abi(), pidl).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn LeaveFolder<P0>(&self, psf: P0, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellFolder>,
    {
        (::windows_core::Interface::vtable(self).LeaveFolder)(::windows_core::Interface::as_raw(self), psf.into_param().abi(), pidl).ok()
    }
    pub unsafe fn InitializeProgressDialog(&self, ppsztitle: *mut ::windows_core::PWSTR, ppszcancel: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).InitializeProgressDialog)(::windows_core::Interface::as_raw(self), ppsztitle, ppszcancel).ok()
    }
}
::windows_core::imp::interface_hierarchy!(INamespaceWalkCB, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for INamespaceWalkCB {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INamespaceWalkCB {}
impl ::core::fmt::Debug for INamespaceWalkCB {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INamespaceWalkCB").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for INamespaceWalkCB {
    type Vtable = INamespaceWalkCB_Vtbl;
}
impl ::core::clone::Clone for INamespaceWalkCB {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INamespaceWalkCB {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xd92995f8_cf5e_4a76_bf59_ead39ea2b97e);
}
#[repr(C)]
#[doc(hidden)]
pub struct INamespaceWalkCB_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub FoundItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psf: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    FoundItem: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub EnterFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psf: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    EnterFolder: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub LeaveFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psf: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    LeaveFolder: usize,
    pub InitializeProgressDialog: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppsztitle: *mut ::windows_core::PWSTR, ppszcancel: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct INamespaceWalkCB2(::windows_core::IUnknown);
impl INamespaceWalkCB2 {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn FoundItem<P0>(&self, psf: P0, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellFolder>,
    {
        (::windows_core::Interface::vtable(self).base__.FoundItem)(::windows_core::Interface::as_raw(self), psf.into_param().abi(), pidl).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn EnterFolder<P0>(&self, psf: P0, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellFolder>,
    {
        (::windows_core::Interface::vtable(self).base__.EnterFolder)(::windows_core::Interface::as_raw(self), psf.into_param().abi(), pidl).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn LeaveFolder<P0>(&self, psf: P0, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellFolder>,
    {
        (::windows_core::Interface::vtable(self).base__.LeaveFolder)(::windows_core::Interface::as_raw(self), psf.into_param().abi(), pidl).ok()
    }
    pub unsafe fn InitializeProgressDialog(&self, ppsztitle: *mut ::windows_core::PWSTR, ppszcancel: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.InitializeProgressDialog)(::windows_core::Interface::as_raw(self), ppsztitle, ppszcancel).ok()
    }
    pub unsafe fn WalkComplete(&self, hr: ::windows_core::HRESULT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).WalkComplete)(::windows_core::Interface::as_raw(self), hr).ok()
    }
}
::windows_core::imp::interface_hierarchy!(INamespaceWalkCB2, ::windows_core::IUnknown, INamespaceWalkCB);
impl ::core::cmp::PartialEq for INamespaceWalkCB2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INamespaceWalkCB2 {}
impl ::core::fmt::Debug for INamespaceWalkCB2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INamespaceWalkCB2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for INamespaceWalkCB2 {
    type Vtable = INamespaceWalkCB2_Vtbl;
}
impl ::core::clone::Clone for INamespaceWalkCB2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INamespaceWalkCB2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x7ac7492b_c38e_438a_87db_68737844ff70);
}
#[repr(C)]
#[doc(hidden)]
pub struct INamespaceWalkCB2_Vtbl {
    pub base__: INamespaceWalkCB_Vtbl,
    pub WalkComplete: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hr: ::windows_core::HRESULT) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct INetworkFolderInternal(::windows_core::IUnknown);
impl INetworkFolderInternal {
    pub unsafe fn GetResourceDisplayType(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetResourceDisplayType)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetIDList(&self) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetIDList)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetProvider(&self, itemids: &[*const Common::ITEMIDLIST], provider: &mut [u16]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetProvider)(::windows_core::Interface::as_raw(self), itemids.len() as _, ::core::mem::transmute(itemids.as_ptr()), provider.len() as _, ::core::mem::transmute(provider.as_ptr())).ok()
    }
}
::windows_core::imp::interface_hierarchy!(INetworkFolderInternal, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for INetworkFolderInternal {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INetworkFolderInternal {}
impl ::core::fmt::Debug for INetworkFolderInternal {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INetworkFolderInternal").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for INetworkFolderInternal {
    type Vtable = INetworkFolderInternal_Vtbl;
}
impl ::core::clone::Clone for INetworkFolderInternal {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INetworkFolderInternal {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xceb38218_c971_47bb_a703_f0bc99ccdb81);
}
#[repr(C)]
#[doc(hidden)]
pub struct INetworkFolderInternal_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetResourceDisplayType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, displaytype: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetIDList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, idlist: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetIDList: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetProvider: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, itemidcount: u32, itemids: *const *const Common::ITEMIDLIST, providermaxlength: u32, provider: ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetProvider: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct INewMenuClient(::windows_core::IUnknown);
impl INewMenuClient {
    pub unsafe fn IncludeItems(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IncludeItems)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn SelectAndEditItem(&self, pidlitem: *const Common::ITEMIDLIST, flags: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SelectAndEditItem)(::windows_core::Interface::as_raw(self), pidlitem, flags).ok()
    }
}
::windows_core::imp::interface_hierarchy!(INewMenuClient, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for INewMenuClient {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INewMenuClient {}
impl ::core::fmt::Debug for INewMenuClient {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INewMenuClient").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for INewMenuClient {
    type Vtable = INewMenuClient_Vtbl;
}
impl ::core::clone::Clone for INewMenuClient {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INewMenuClient {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xdcb07fdc_3bb5_451c_90be_966644fed7b0);
}
#[repr(C)]
#[doc(hidden)]
pub struct INewMenuClient_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub IncludeItems: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pflags: *mut i32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub SelectAndEditItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidlitem: *const Common::ITEMIDLIST, flags: i32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    SelectAndEditItem: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct INewShortcutHookA(::windows_core::IUnknown);
impl INewShortcutHookA {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetReferent<P0, P1>(&self, pcszreferent: P0, hwnd: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
        P1: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).SetReferent)(::windows_core::Interface::as_raw(self), pcszreferent.into_param().abi(), hwnd.into_param().abi()).ok()
    }
    pub unsafe fn GetReferent(&self, pszreferent: &mut [u8]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetReferent)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszreferent.as_ptr()), pszreferent.len() as _).ok()
    }
    pub unsafe fn SetFolder<P0>(&self, pcszfolder: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    {
        (::windows_core::Interface::vtable(self).SetFolder)(::windows_core::Interface::as_raw(self), pcszfolder.into_param().abi()).ok()
    }
    pub unsafe fn GetFolder(&self, pszfolder: &mut [u8]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetFolder)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszfolder.as_ptr()), pszfolder.len() as _).ok()
    }
    pub unsafe fn GetName(&self, pszname: &mut [u8]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetName)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszname.as_ptr()), pszname.len() as _).ok()
    }
    pub unsafe fn GetExtension(&self, pszextension: &mut [u8]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetExtension)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszextension.as_ptr()), pszextension.len() as _).ok()
    }
}
::windows_core::imp::interface_hierarchy!(INewShortcutHookA, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for INewShortcutHookA {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INewShortcutHookA {}
impl ::core::fmt::Debug for INewShortcutHookA {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INewShortcutHookA").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for INewShortcutHookA {
    type Vtable = INewShortcutHookA_Vtbl;
}
impl ::core::clone::Clone for INewShortcutHookA {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INewShortcutHookA {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214e1_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct INewShortcutHookA_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub SetReferent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcszreferent: ::windows_core::PCSTR, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetReferent: usize,
    pub GetReferent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszreferent: ::windows_core::PSTR, cchreferent: i32) -> ::windows_core::HRESULT,
    pub SetFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcszfolder: ::windows_core::PCSTR) -> ::windows_core::HRESULT,
    pub GetFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszfolder: ::windows_core::PSTR, cchfolder: i32) -> ::windows_core::HRESULT,
    pub GetName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PSTR, cchname: i32) -> ::windows_core::HRESULT,
    pub GetExtension: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszextension: ::windows_core::PSTR, cchextension: i32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct INewShortcutHookW(::windows_core::IUnknown);
impl INewShortcutHookW {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetReferent<P0, P1>(&self, pcszreferent: P0, hwnd: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).SetReferent)(::windows_core::Interface::as_raw(self), pcszreferent.into_param().abi(), hwnd.into_param().abi()).ok()
    }
    pub unsafe fn GetReferent(&self, pszreferent: &mut [u16]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetReferent)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszreferent.as_ptr()), pszreferent.len() as _).ok()
    }
    pub unsafe fn SetFolder<P0>(&self, pcszfolder: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetFolder)(::windows_core::Interface::as_raw(self), pcszfolder.into_param().abi()).ok()
    }
    pub unsafe fn GetFolder(&self, pszfolder: &mut [u16]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetFolder)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszfolder.as_ptr()), pszfolder.len() as _).ok()
    }
    pub unsafe fn GetName(&self, pszname: &mut [u16]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetName)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszname.as_ptr()), pszname.len() as _).ok()
    }
    pub unsafe fn GetExtension(&self, pszextension: &mut [u16]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetExtension)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszextension.as_ptr()), pszextension.len() as _).ok()
    }
}
::windows_core::imp::interface_hierarchy!(INewShortcutHookW, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for INewShortcutHookW {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INewShortcutHookW {}
impl ::core::fmt::Debug for INewShortcutHookW {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INewShortcutHookW").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for INewShortcutHookW {
    type Vtable = INewShortcutHookW_Vtbl;
}
impl ::core::clone::Clone for INewShortcutHookW {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INewShortcutHookW {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214f7_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct INewShortcutHookW_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub SetReferent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcszreferent: ::windows_core::PCWSTR, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetReferent: usize,
    pub GetReferent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszreferent: ::windows_core::PWSTR, cchreferent: i32) -> ::windows_core::HRESULT,
    pub SetFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcszfolder: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub GetFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszfolder: ::windows_core::PWSTR, cchfolder: i32) -> ::windows_core::HRESULT,
    pub GetName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PWSTR, cchname: i32) -> ::windows_core::HRESULT,
    pub GetExtension: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszextension: ::windows_core::PWSTR, cchextension: i32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct INewWDEvents(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl INewWDEvents {
    pub unsafe fn FinalBack(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.FinalBack)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FinalNext(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.FinalNext)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Cancel(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Cancel)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetCaption<P0>(&self, bstrcaption: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetCaption)(::windows_core::Interface::as_raw(self), bstrcaption.into_param().abi()).ok()
    }
    pub unsafe fn Caption(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Caption)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn put_Property<P0>(&self, bstrpropertyname: P0, pvproperty: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.put_Property)(::windows_core::Interface::as_raw(self), bstrpropertyname.into_param().abi(), pvproperty).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn get_Property<P0>(&self, bstrpropertyname: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.get_Property)(::windows_core::Interface::as_raw(self), bstrpropertyname.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetWizardButtons<P0, P1, P2>(&self, vfenableback: P0, vfenablenext: P1, vflastpage: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P2: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.SetWizardButtons)(::windows_core::Interface::as_raw(self), vfenableback.into_param().abi(), vfenablenext.into_param().abi(), vflastpage.into_param().abi()).ok()
    }
    pub unsafe fn SetHeaderText<P0, P1>(&self, bstrheadertitle: P0, bstrheadersubtitle: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetHeaderText)(::windows_core::Interface::as_raw(self), bstrheadertitle.into_param().abi(), bstrheadersubtitle.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PassportAuthenticate<P0>(&self, bstrsigninurl: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).PassportAuthenticate)(::windows_core::Interface::as_raw(self), bstrsigninurl.into_param().abi(), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(INewWDEvents, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IWebWizardHost);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for INewWDEvents {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for INewWDEvents {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for INewWDEvents {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INewWDEvents").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for INewWDEvents {
    type Vtable = INewWDEvents_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for INewWDEvents {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for INewWDEvents {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x0751c551_7568_41c9_8e5b_e22e38919236);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct INewWDEvents_Vtbl {
    pub base__: IWebWizardHost_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub PassportAuthenticate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrsigninurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvfauthenitcated: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    PassportAuthenticate: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct INewWindowManager(::windows_core::IUnknown);
impl INewWindowManager {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EvaluateNewWindow<P0, P1, P2, P3, P4>(&self, pszurl: P0, pszname: P1, pszurlcontext: P2, pszfeatures: P3, freplace: P4, dwflags: u32, dwuseractiontime: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P3: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P4: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).EvaluateNewWindow)(::windows_core::Interface::as_raw(self), pszurl.into_param().abi(), pszname.into_param().abi(), pszurlcontext.into_param().abi(), pszfeatures.into_param().abi(), freplace.into_param().abi(), dwflags, dwuseractiontime).ok()
    }
}
::windows_core::imp::interface_hierarchy!(INewWindowManager, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for INewWindowManager {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INewWindowManager {}
impl ::core::fmt::Debug for INewWindowManager {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INewWindowManager").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for INewWindowManager {
    type Vtable = INewWindowManager_Vtbl;
}
impl ::core::clone::Clone for INewWindowManager {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INewWindowManager {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xd2bc4c84_3f72_4a52_a604_7bcbf3982cbb);
}
#[repr(C)]
#[doc(hidden)]
pub struct INewWindowManager_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub EvaluateNewWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszurl: ::windows_core::PCWSTR, pszname: ::windows_core::PCWSTR, pszurlcontext: ::windows_core::PCWSTR, pszfeatures: ::windows_core::PCWSTR, freplace: super::super::Foundation::BOOL, dwflags: u32, dwuseractiontime: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    EvaluateNewWindow: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct INotifyReplica(::windows_core::IUnknown);
impl INotifyReplica {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn YouAreAReplica(&self, rgpmkotherreplicas: &mut [::core::option::Option<super::super::System::Com::IMoniker>]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).YouAreAReplica)(::windows_core::Interface::as_raw(self), rgpmkotherreplicas.len() as _, ::core::mem::transmute(rgpmkotherreplicas.as_ptr())).ok()
    }
}
::windows_core::imp::interface_hierarchy!(INotifyReplica, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for INotifyReplica {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for INotifyReplica {}
impl ::core::fmt::Debug for INotifyReplica {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("INotifyReplica").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for INotifyReplica {
    type Vtable = INotifyReplica_Vtbl;
}
impl ::core::clone::Clone for INotifyReplica {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for INotifyReplica {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x99180163_da16_101a_935c_444553540000);
}
#[repr(C)]
#[doc(hidden)]
pub struct INotifyReplica_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub YouAreAReplica: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ulcotherreplicas: u32, rgpmkotherreplicas: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    YouAreAReplica: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IObjMgr(::windows_core::IUnknown);
impl IObjMgr {
    pub unsafe fn Append<P0>(&self, punk: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).Append)(::windows_core::Interface::as_raw(self), punk.into_param().abi()).ok()
    }
    pub unsafe fn Remove<P0>(&self, punk: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).Remove)(::windows_core::Interface::as_raw(self), punk.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IObjMgr, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IObjMgr {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IObjMgr {}
impl ::core::fmt::Debug for IObjMgr {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IObjMgr").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IObjMgr {
    type Vtable = IObjMgr_Vtbl;
}
impl ::core::clone::Clone for IObjMgr {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IObjMgr {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x00bb2761_6a77_11d0_a535_00c04fd7d062);
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjMgr_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Append: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Remove: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IObjectProvider(::windows_core::IUnknown);
impl IObjectProvider {
    pub unsafe fn QueryObject<T>(&self, guidobject: *const ::windows_core::GUID) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).QueryObject)(::windows_core::Interface::as_raw(self), guidobject, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IObjectProvider, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IObjectProvider {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IObjectProvider {}
impl ::core::fmt::Debug for IObjectProvider {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IObjectProvider").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IObjectProvider {
    type Vtable = IObjectProvider_Vtbl;
}
impl ::core::clone::Clone for IObjectProvider {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IObjectProvider {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xa6087428_3be3_4d73_b308_7c04a540bf1a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectProvider_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub QueryObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, guidobject: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvout: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IObjectWithAppUserModelID(::windows_core::IUnknown);
impl IObjectWithAppUserModelID {
    pub unsafe fn SetAppID<P0>(&self, pszappid: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetAppID)(::windows_core::Interface::as_raw(self), pszappid.into_param().abi()).ok()
    }
    pub unsafe fn GetAppID(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetAppID)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IObjectWithAppUserModelID, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IObjectWithAppUserModelID {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IObjectWithAppUserModelID {}
impl ::core::fmt::Debug for IObjectWithAppUserModelID {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IObjectWithAppUserModelID").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IObjectWithAppUserModelID {
    type Vtable = IObjectWithAppUserModelID_Vtbl;
}
impl ::core::clone::Clone for IObjectWithAppUserModelID {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IObjectWithAppUserModelID {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x36db0196_9665_46d1_9ba7_d3709eecf9ed);
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectWithAppUserModelID_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetAppID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszappid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub GetAppID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppszappid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IObjectWithBackReferences(::windows_core::IUnknown);
impl IObjectWithBackReferences {
    pub unsafe fn RemoveBackReferences(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RemoveBackReferences)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IObjectWithBackReferences, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IObjectWithBackReferences {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IObjectWithBackReferences {}
impl ::core::fmt::Debug for IObjectWithBackReferences {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IObjectWithBackReferences").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IObjectWithBackReferences {
    type Vtable = IObjectWithBackReferences_Vtbl;
}
impl ::core::clone::Clone for IObjectWithBackReferences {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IObjectWithBackReferences {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x321a6a6a_d61f_4bf3_97ae_14be2986bb36);
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectWithBackReferences_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub RemoveBackReferences: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IObjectWithCancelEvent(::windows_core::IUnknown);
impl IObjectWithCancelEvent {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetCancelEvent(&self) -> ::windows_core::Result<super::super::Foundation::HANDLE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCancelEvent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IObjectWithCancelEvent, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IObjectWithCancelEvent {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IObjectWithCancelEvent {}
impl ::core::fmt::Debug for IObjectWithCancelEvent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IObjectWithCancelEvent").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IObjectWithCancelEvent {
    type Vtable = IObjectWithCancelEvent_Vtbl;
}
impl ::core::clone::Clone for IObjectWithCancelEvent {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IObjectWithCancelEvent {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xf279b885_0ae9_4b85_ac06_ddecf9408941);
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectWithCancelEvent_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub GetCancelEvent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phevent: *mut super::super::Foundation::HANDLE) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetCancelEvent: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IObjectWithFolderEnumMode(::windows_core::IUnknown);
impl IObjectWithFolderEnumMode {
    pub unsafe fn SetMode(&self, femode: FOLDER_ENUM_MODE) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetMode)(::windows_core::Interface::as_raw(self), femode).ok()
    }
    pub unsafe fn GetMode(&self) -> ::windows_core::Result<FOLDER_ENUM_MODE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetMode)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IObjectWithFolderEnumMode, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IObjectWithFolderEnumMode {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IObjectWithFolderEnumMode {}
impl ::core::fmt::Debug for IObjectWithFolderEnumMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IObjectWithFolderEnumMode").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IObjectWithFolderEnumMode {
    type Vtable = IObjectWithFolderEnumMode_Vtbl;
}
impl ::core::clone::Clone for IObjectWithFolderEnumMode {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IObjectWithFolderEnumMode {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x6a9d9026_0e6e_464c_b000_42ecc07de673);
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectWithFolderEnumMode_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, femode: FOLDER_ENUM_MODE) -> ::windows_core::HRESULT,
    pub GetMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfemode: *mut FOLDER_ENUM_MODE) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IObjectWithProgID(::windows_core::IUnknown);
impl IObjectWithProgID {
    pub unsafe fn SetProgID<P0>(&self, pszprogid: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetProgID)(::windows_core::Interface::as_raw(self), pszprogid.into_param().abi()).ok()
    }
    pub unsafe fn GetProgID(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetProgID)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IObjectWithProgID, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IObjectWithProgID {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IObjectWithProgID {}
impl ::core::fmt::Debug for IObjectWithProgID {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IObjectWithProgID").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IObjectWithProgID {
    type Vtable = IObjectWithProgID_Vtbl;
}
impl ::core::clone::Clone for IObjectWithProgID {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IObjectWithProgID {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x71e806fb_8dee_46fc_bf8c_7748a8a1ae13);
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectWithProgID_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetProgID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszprogid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub GetProgID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppszprogid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IObjectWithSelection(::windows_core::IUnknown);
impl IObjectWithSelection {
    pub unsafe fn SetSelection<P0>(&self, psia: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItemArray>,
    {
        (::windows_core::Interface::vtable(self).SetSelection)(::windows_core::Interface::as_raw(self), psia.into_param().abi()).ok()
    }
    pub unsafe fn GetSelection<T>(&self) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetSelection)(::windows_core::Interface::as_raw(self), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IObjectWithSelection, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IObjectWithSelection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IObjectWithSelection {}
impl ::core::fmt::Debug for IObjectWithSelection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IObjectWithSelection").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IObjectWithSelection {
    type Vtable = IObjectWithSelection_Vtbl;
}
impl ::core::clone::Clone for IObjectWithSelection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IObjectWithSelection {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x1c9cd5bb_98e9_4491_a60f_31aacc72b83c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IObjectWithSelection_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetSelection: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psia: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetSelection: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IOpenControlPanel(::windows_core::IUnknown);
impl IOpenControlPanel {
    pub unsafe fn Open<P0, P1, P2>(&self, pszname: P0, pszpage: P1, punksite: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).Open)(::windows_core::Interface::as_raw(self), pszname.into_param().abi(), pszpage.into_param().abi(), punksite.into_param().abi()).ok()
    }
    pub unsafe fn GetPath<P0>(&self, pszname: P0, pszpath: &mut [u16]) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).GetPath)(::windows_core::Interface::as_raw(self), pszname.into_param().abi(), ::core::mem::transmute(pszpath.as_ptr()), pszpath.len() as _).ok()
    }
    pub unsafe fn GetCurrentView(&self) -> ::windows_core::Result<CPVIEW> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCurrentView)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IOpenControlPanel, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IOpenControlPanel {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IOpenControlPanel {}
impl ::core::fmt::Debug for IOpenControlPanel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IOpenControlPanel").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IOpenControlPanel {
    type Vtable = IOpenControlPanel_Vtbl;
}
impl ::core::clone::Clone for IOpenControlPanel {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IOpenControlPanel {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xd11ad862_66de_4df4_bf6c_1f5621996af1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IOpenControlPanel_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Open: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR, pszpage: ::windows_core::PCWSTR, punksite: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetPath: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR, pszpath: ::windows_core::PWSTR, cchpath: u32) -> ::windows_core::HRESULT,
    pub GetCurrentView: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pview: *mut CPVIEW) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IOpenSearchSource(::windows_core::IUnknown);
impl IOpenSearchSource {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetResults<P0, P1, T>(&self, hwnd: P0, pszquery: P1, dwstartindex: u32, dwcount: u32) -> ::windows_core::Result<T>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetResults)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), pszquery.into_param().abi(), dwstartindex, dwcount, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IOpenSearchSource, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IOpenSearchSource {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IOpenSearchSource {}
impl ::core::fmt::Debug for IOpenSearchSource {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IOpenSearchSource").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IOpenSearchSource {
    type Vtable = IOpenSearchSource_Vtbl;
}
impl ::core::clone::Clone for IOpenSearchSource {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IOpenSearchSource {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xf0ee7333_e6fc_479b_9f25_a860c234a38e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IOpenSearchSource_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub GetResults: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pszquery: ::windows_core::PCWSTR, dwstartindex: u32, dwcount: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetResults: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IOperationsProgressDialog(::windows_core::IUnknown);
impl IOperationsProgressDialog {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn StartProgressDialog<P0>(&self, hwndowner: P0, flags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).StartProgressDialog)(::windows_core::Interface::as_raw(self), hwndowner.into_param().abi(), flags).ok()
    }
    pub unsafe fn StopProgressDialog(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).StopProgressDialog)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetOperation(&self, action: SPACTION) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetOperation)(::windows_core::Interface::as_raw(self), action).ok()
    }
    pub unsafe fn SetMode(&self, mode: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetMode)(::windows_core::Interface::as_raw(self), mode).ok()
    }
    pub unsafe fn UpdateProgress(&self, ullpointscurrent: u64, ullpointstotal: u64, ullsizecurrent: u64, ullsizetotal: u64, ullitemscurrent: u64, ullitemstotal: u64) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).UpdateProgress)(::windows_core::Interface::as_raw(self), ullpointscurrent, ullpointstotal, ullsizecurrent, ullsizetotal, ullitemscurrent, ullitemstotal).ok()
    }
    pub unsafe fn UpdateLocations<P0, P1, P2>(&self, psisource: P0, psitarget: P1, psiitem: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<IShellItem>,
        P2: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).UpdateLocations)(::windows_core::Interface::as_raw(self), psisource.into_param().abi(), psitarget.into_param().abi(), psiitem.into_param().abi()).ok()
    }
    pub unsafe fn ResetTimer(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ResetTimer)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PauseTimer(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).PauseTimer)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ResumeTimer(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ResumeTimer)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetMilliseconds(&self, pullelapsed: *mut u64, pullremaining: *mut u64) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetMilliseconds)(::windows_core::Interface::as_raw(self), pullelapsed, pullremaining).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetOperationStatus(&self) -> ::windows_core::Result<PropertiesSystem::PDOPSTATUS> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetOperationStatus)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IOperationsProgressDialog, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IOperationsProgressDialog {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IOperationsProgressDialog {}
impl ::core::fmt::Debug for IOperationsProgressDialog {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IOperationsProgressDialog").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IOperationsProgressDialog {
    type Vtable = IOperationsProgressDialog_Vtbl;
}
impl ::core::clone::Clone for IOperationsProgressDialog {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IOperationsProgressDialog {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x0c9fb851_e5c9_43eb_a370_f0677b13874c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IOperationsProgressDialog_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub StartProgressDialog: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND, flags: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    StartProgressDialog: usize,
    pub StopProgressDialog: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SetOperation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, action: SPACTION) -> ::windows_core::HRESULT,
    pub SetMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, mode: u32) -> ::windows_core::HRESULT,
    pub UpdateProgress: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ullpointscurrent: u64, ullpointstotal: u64, ullsizecurrent: u64, ullsizetotal: u64, ullitemscurrent: u64, ullitemstotal: u64) -> ::windows_core::HRESULT,
    pub UpdateLocations: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psisource: *mut ::core::ffi::c_void, psitarget: *mut ::core::ffi::c_void, psiitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub ResetTimer: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub PauseTimer: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub ResumeTimer: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetMilliseconds: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pullelapsed: *mut u64, pullremaining: *mut u64) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetOperationStatus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, popstatus: *mut PropertiesSystem::PDOPSTATUS) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetOperationStatus: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IPackageDebugSettings(::windows_core::IUnknown);
impl IPackageDebugSettings {
    pub unsafe fn EnableDebugging<P0, P1, P2>(&self, packagefullname: P0, debuggercommandline: P1, environment: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).EnableDebugging)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi(), debuggercommandline.into_param().abi(), environment.into_param().abi()).ok()
    }
    pub unsafe fn DisableDebugging<P0>(&self, packagefullname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).DisableDebugging)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi()).ok()
    }
    pub unsafe fn Suspend<P0>(&self, packagefullname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).Suspend)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi()).ok()
    }
    pub unsafe fn Resume<P0>(&self, packagefullname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).Resume)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi()).ok()
    }
    pub unsafe fn TerminateAllProcesses<P0>(&self, packagefullname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).TerminateAllProcesses)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi()).ok()
    }
    pub unsafe fn SetTargetSessionId(&self, sessionid: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetTargetSessionId)(::windows_core::Interface::as_raw(self), sessionid).ok()
    }
    pub unsafe fn EnumerateBackgroundTasks<P0>(&self, packagefullname: P0, taskcount: *mut u32, taskids: *mut *mut ::windows_core::GUID, tasknames: *mut *mut ::windows_core::PCWSTR) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).EnumerateBackgroundTasks)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi(), taskcount, taskids, tasknames).ok()
    }
    pub unsafe fn ActivateBackgroundTask(&self, taskid: *const ::windows_core::GUID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ActivateBackgroundTask)(::windows_core::Interface::as_raw(self), taskid).ok()
    }
    pub unsafe fn StartServicing<P0>(&self, packagefullname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).StartServicing)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi()).ok()
    }
    pub unsafe fn StopServicing<P0>(&self, packagefullname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).StopServicing)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi()).ok()
    }
    pub unsafe fn StartSessionRedirection<P0>(&self, packagefullname: P0, sessionid: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).StartSessionRedirection)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi(), sessionid).ok()
    }
    pub unsafe fn StopSessionRedirection<P0>(&self, packagefullname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).StopSessionRedirection)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi()).ok()
    }
    pub unsafe fn GetPackageExecutionState<P0>(&self, packagefullname: P0) -> ::windows_core::Result<PACKAGE_EXECUTION_STATE>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetPackageExecutionState)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn RegisterForPackageStateChanges<P0, P1>(&self, packagefullname: P0, ppackageexecutionstatechangenotification: P1) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<IPackageExecutionStateChangeNotification>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).RegisterForPackageStateChanges)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi(), ppackageexecutionstatechangenotification.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn UnregisterForPackageStateChanges(&self, dwcookie: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).UnregisterForPackageStateChanges)(::windows_core::Interface::as_raw(self), dwcookie).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IPackageDebugSettings, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IPackageDebugSettings {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPackageDebugSettings {}
impl ::core::fmt::Debug for IPackageDebugSettings {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPackageDebugSettings").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IPackageDebugSettings {
    type Vtable = IPackageDebugSettings_Vtbl;
}
impl ::core::clone::Clone for IPackageDebugSettings {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPackageDebugSettings {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xf27c3930_8029_4ad1_94e3_3dba417810c1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPackageDebugSettings_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub EnableDebugging: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR, debuggercommandline: ::windows_core::PCWSTR, environment: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub DisableDebugging: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub Suspend: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub Resume: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub TerminateAllProcesses: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub SetTargetSessionId: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, sessionid: u32) -> ::windows_core::HRESULT,
    pub EnumerateBackgroundTasks: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR, taskcount: *mut u32, taskids: *mut *mut ::windows_core::GUID, tasknames: *mut *mut ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub ActivateBackgroundTask: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, taskid: *const ::windows_core::GUID) -> ::windows_core::HRESULT,
    pub StartServicing: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub StopServicing: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub StartSessionRedirection: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR, sessionid: u32) -> ::windows_core::HRESULT,
    pub StopSessionRedirection: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub GetPackageExecutionState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR, packageexecutionstate: *mut PACKAGE_EXECUTION_STATE) -> ::windows_core::HRESULT,
    pub RegisterForPackageStateChanges: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR, ppackageexecutionstatechangenotification: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT,
    pub UnregisterForPackageStateChanges: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IPackageDebugSettings2(::windows_core::IUnknown);
impl IPackageDebugSettings2 {
    pub unsafe fn EnableDebugging<P0, P1, P2>(&self, packagefullname: P0, debuggercommandline: P1, environment: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.EnableDebugging)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi(), debuggercommandline.into_param().abi(), environment.into_param().abi()).ok()
    }
    pub unsafe fn DisableDebugging<P0>(&self, packagefullname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.DisableDebugging)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi()).ok()
    }
    pub unsafe fn Suspend<P0>(&self, packagefullname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.Suspend)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi()).ok()
    }
    pub unsafe fn Resume<P0>(&self, packagefullname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.Resume)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi()).ok()
    }
    pub unsafe fn TerminateAllProcesses<P0>(&self, packagefullname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.TerminateAllProcesses)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi()).ok()
    }
    pub unsafe fn SetTargetSessionId(&self, sessionid: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetTargetSessionId)(::windows_core::Interface::as_raw(self), sessionid).ok()
    }
    pub unsafe fn EnumerateBackgroundTasks<P0>(&self, packagefullname: P0, taskcount: *mut u32, taskids: *mut *mut ::windows_core::GUID, tasknames: *mut *mut ::windows_core::PCWSTR) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.EnumerateBackgroundTasks)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi(), taskcount, taskids, tasknames).ok()
    }
    pub unsafe fn ActivateBackgroundTask(&self, taskid: *const ::windows_core::GUID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.ActivateBackgroundTask)(::windows_core::Interface::as_raw(self), taskid).ok()
    }
    pub unsafe fn StartServicing<P0>(&self, packagefullname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.StartServicing)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi()).ok()
    }
    pub unsafe fn StopServicing<P0>(&self, packagefullname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.StopServicing)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi()).ok()
    }
    pub unsafe fn StartSessionRedirection<P0>(&self, packagefullname: P0, sessionid: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.StartSessionRedirection)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi(), sessionid).ok()
    }
    pub unsafe fn StopSessionRedirection<P0>(&self, packagefullname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.StopSessionRedirection)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi()).ok()
    }
    pub unsafe fn GetPackageExecutionState<P0>(&self, packagefullname: P0) -> ::windows_core::Result<PACKAGE_EXECUTION_STATE>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetPackageExecutionState)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn RegisterForPackageStateChanges<P0, P1>(&self, packagefullname: P0, ppackageexecutionstatechangenotification: P1) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<IPackageExecutionStateChangeNotification>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.RegisterForPackageStateChanges)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi(), ppackageexecutionstatechangenotification.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn UnregisterForPackageStateChanges(&self, dwcookie: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.UnregisterForPackageStateChanges)(::windows_core::Interface::as_raw(self), dwcookie).ok()
    }
    pub unsafe fn EnumerateApps<P0>(&self, packagefullname: P0, appcount: *mut u32, appusermodelids: *mut *mut ::windows_core::PWSTR, appdisplaynames: *mut *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).EnumerateApps)(::windows_core::Interface::as_raw(self), packagefullname.into_param().abi(), appcount, appusermodelids, appdisplaynames).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IPackageDebugSettings2, ::windows_core::IUnknown, IPackageDebugSettings);
impl ::core::cmp::PartialEq for IPackageDebugSettings2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPackageDebugSettings2 {}
impl ::core::fmt::Debug for IPackageDebugSettings2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPackageDebugSettings2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IPackageDebugSettings2 {
    type Vtable = IPackageDebugSettings2_Vtbl;
}
impl ::core::clone::Clone for IPackageDebugSettings2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPackageDebugSettings2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x6e3194bb_ab82_4d22_93f5_fabda40e7b16);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPackageDebugSettings2_Vtbl {
    pub base__: IPackageDebugSettings_Vtbl,
    pub EnumerateApps: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR, appcount: *mut u32, appusermodelids: *mut *mut ::windows_core::PWSTR, appdisplaynames: *mut *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IPackageExecutionStateChangeNotification(::windows_core::IUnknown);
impl IPackageExecutionStateChangeNotification {
    pub unsafe fn OnStateChanged<P0>(&self, pszpackagefullname: P0, pesnewstate: PACKAGE_EXECUTION_STATE) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).OnStateChanged)(::windows_core::Interface::as_raw(self), pszpackagefullname.into_param().abi(), pesnewstate).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IPackageExecutionStateChangeNotification, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IPackageExecutionStateChangeNotification {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPackageExecutionStateChangeNotification {}
impl ::core::fmt::Debug for IPackageExecutionStateChangeNotification {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPackageExecutionStateChangeNotification").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IPackageExecutionStateChangeNotification {
    type Vtable = IPackageExecutionStateChangeNotification_Vtbl;
}
impl ::core::clone::Clone for IPackageExecutionStateChangeNotification {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPackageExecutionStateChangeNotification {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x1bb12a62_2ad8_432b_8ccf_0c2c52afcd5b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPackageExecutionStateChangeNotification_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub OnStateChanged: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszpackagefullname: ::windows_core::PCWSTR, pesnewstate: PACKAGE_EXECUTION_STATE) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IParentAndItem(::windows_core::IUnknown);
impl IParentAndItem {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn SetParentAndItem<P0>(&self, pidlparent: *const Common::ITEMIDLIST, psf: P0, pidlchild: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellFolder>,
    {
        (::windows_core::Interface::vtable(self).SetParentAndItem)(::windows_core::Interface::as_raw(self), pidlparent, psf.into_param().abi(), pidlchild).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetParentAndItem(&self, ppidlparent: ::core::option::Option<*mut *mut Common::ITEMIDLIST>, ppsf: ::core::option::Option<*mut ::core::option::Option<IShellFolder>>, ppidlchild: ::core::option::Option<*mut *mut Common::ITEMIDLIST>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetParentAndItem)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(ppidlparent.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppsf.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(ppidlchild.unwrap_or(::std::ptr::null_mut()))).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IParentAndItem, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IParentAndItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IParentAndItem {}
impl ::core::fmt::Debug for IParentAndItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IParentAndItem").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IParentAndItem {
    type Vtable = IParentAndItem_Vtbl;
}
impl ::core::clone::Clone for IParentAndItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IParentAndItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xb3a4b685_b685_4805_99d9_5dead2873236);
}
#[repr(C)]
#[doc(hidden)]
pub struct IParentAndItem_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub SetParentAndItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidlparent: *const Common::ITEMIDLIST, psf: *mut ::core::ffi::c_void, pidlchild: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    SetParentAndItem: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetParentAndItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppidlparent: *mut *mut Common::ITEMIDLIST, ppsf: *mut *mut ::core::ffi::c_void, ppidlchild: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetParentAndItem: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IParseAndCreateItem(::windows_core::IUnknown);
impl IParseAndCreateItem {
    pub unsafe fn SetItem<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).SetItem)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn GetItem<T>(&self) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetItem)(::windows_core::Interface::as_raw(self), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IParseAndCreateItem, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IParseAndCreateItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IParseAndCreateItem {}
impl ::core::fmt::Debug for IParseAndCreateItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IParseAndCreateItem").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IParseAndCreateItem {
    type Vtable = IParseAndCreateItem_Vtbl;
}
impl ::core::clone::Clone for IParseAndCreateItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IParseAndCreateItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x67efed0e_e827_4408_b493_78f3982b685c);
}
#[repr(C)]
#[doc(hidden)]
pub struct IParseAndCreateItem_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IPersistFolder(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IPersistFolder {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetClassID(&self) -> ::windows_core::Result<::windows_core::GUID> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetClassID)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn Initialize(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), pidl).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IPersistFolder, ::windows_core::IUnknown, super::super::System::Com::IPersist);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IPersistFolder {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IPersistFolder {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IPersistFolder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPersistFolder").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IPersistFolder {
    type Vtable = IPersistFolder_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IPersistFolder {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IPersistFolder {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214ea_0000_0000_c000_000000000046);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IPersistFolder_Vtbl {
    pub base__: super::super::System::Com::IPersist_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    Initialize: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IPersistFolder2(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IPersistFolder2 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetClassID(&self) -> ::windows_core::Result<::windows_core::GUID> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetClassID)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn Initialize(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Initialize)(::windows_core::Interface::as_raw(self), pidl).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetCurFolder(&self) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCurFolder)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IPersistFolder2, ::windows_core::IUnknown, super::super::System::Com::IPersist, IPersistFolder);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IPersistFolder2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IPersistFolder2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IPersistFolder2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPersistFolder2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IPersistFolder2 {
    type Vtable = IPersistFolder2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IPersistFolder2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IPersistFolder2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x1ac3d9f0_175c_11d1_95be_00609797ea4f);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IPersistFolder2_Vtbl {
    pub base__: IPersistFolder_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetCurFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetCurFolder: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IPersistFolder3(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IPersistFolder3 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetClassID(&self) -> ::windows_core::Result<::windows_core::GUID> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.GetClassID)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn Initialize(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.Initialize)(::windows_core::Interface::as_raw(self), pidl).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetCurFolder(&self) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetCurFolder)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn InitializeEx<P0>(&self, pbc: P0, pidlroot: *const Common::ITEMIDLIST, ppfti: *const PERSIST_FOLDER_TARGET_INFO) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
    {
        (::windows_core::Interface::vtable(self).InitializeEx)(::windows_core::Interface::as_raw(self), pbc.into_param().abi(), pidlroot, ppfti).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetFolderTargetInfo(&self, ppfti: *mut PERSIST_FOLDER_TARGET_INFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetFolderTargetInfo)(::windows_core::Interface::as_raw(self), ppfti).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IPersistFolder3, ::windows_core::IUnknown, super::super::System::Com::IPersist, IPersistFolder, IPersistFolder2);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IPersistFolder3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IPersistFolder3 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IPersistFolder3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPersistFolder3").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IPersistFolder3 {
    type Vtable = IPersistFolder3_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IPersistFolder3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IPersistFolder3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xcef04fdf_fe72_11d2_87a5_00c04f6837cf);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IPersistFolder3_Vtbl {
    pub base__: IPersistFolder2_Vtbl,
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
    pub InitializeEx: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbc: *mut ::core::ffi::c_void, pidlroot: *const Common::ITEMIDLIST, ppfti: *const PERSIST_FOLDER_TARGET_INFO) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common")))]
    InitializeEx: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetFolderTargetInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppfti: *mut PERSIST_FOLDER_TARGET_INFO) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetFolderTargetInfo: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IPersistIDList(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IPersistIDList {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetClassID(&self) -> ::windows_core::Result<::windows_core::GUID> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetClassID)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn SetIDList(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetIDList)(::windows_core::Interface::as_raw(self), pidl).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetIDList(&self) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetIDList)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IPersistIDList, ::windows_core::IUnknown, super::super::System::Com::IPersist);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IPersistIDList {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IPersistIDList {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IPersistIDList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPersistIDList").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IPersistIDList {
    type Vtable = IPersistIDList_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IPersistIDList {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IPersistIDList {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x1079acfc_29bd_11d3_8e0d_00c04f6837d5);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IPersistIDList_Vtbl {
    pub base__: super::super::System::Com::IPersist_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub SetIDList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    SetIDList: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetIDList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetIDList: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IPreviewHandler(::windows_core::IUnknown);
impl IPreviewHandler {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetWindow<P0>(&self, hwnd: P0, prc: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).SetWindow)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), prc).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetRect(&self, prc: *const super::super::Foundation::RECT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetRect)(::windows_core::Interface::as_raw(self), prc).ok()
    }
    pub unsafe fn DoPreview(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).DoPreview)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Unload(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Unload)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetFocus(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFocus)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn QueryFocus(&self) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).QueryFocus)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn TranslateAccelerator(&self, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).TranslateAccelerator)(::windows_core::Interface::as_raw(self), pmsg).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IPreviewHandler, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IPreviewHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPreviewHandler {}
impl ::core::fmt::Debug for IPreviewHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPreviewHandler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IPreviewHandler {
    type Vtable = IPreviewHandler_Vtbl;
}
impl ::core::clone::Clone for IPreviewHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPreviewHandler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x8895b1c6_b41f_4c1c_a562_0d564250836f);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPreviewHandler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub SetWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, prc: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetWindow: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetRect: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prc: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetRect: usize,
    pub DoPreview: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Unload: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SetFocus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub QueryFocus: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phwnd: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    QueryFocus: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub TranslateAccelerator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))]
    TranslateAccelerator: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IPreviewHandlerFrame(::windows_core::IUnknown);
impl IPreviewHandlerFrame {
    #[doc = "*Required features: `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn GetWindowContext(&self) -> ::windows_core::Result<PREVIEWHANDLERFRAMEINFO> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetWindowContext)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn TranslateAccelerator(&self, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).TranslateAccelerator)(::windows_core::Interface::as_raw(self), pmsg).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IPreviewHandlerFrame, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IPreviewHandlerFrame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPreviewHandlerFrame {}
impl ::core::fmt::Debug for IPreviewHandlerFrame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPreviewHandlerFrame").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IPreviewHandlerFrame {
    type Vtable = IPreviewHandlerFrame_Vtbl;
}
impl ::core::clone::Clone for IPreviewHandlerFrame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPreviewHandlerFrame {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xfec87aaf_35f9_447a_adb7_20234491401a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPreviewHandlerFrame_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub GetWindowContext: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pinfo: *mut PREVIEWHANDLERFRAMEINFO) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_WindowsAndMessaging"))]
    GetWindowContext: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub TranslateAccelerator: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))]
    TranslateAccelerator: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IPreviewHandlerVisuals(::windows_core::IUnknown);
impl IPreviewHandlerVisuals {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetBackgroundColor<P0>(&self, color: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::COLORREF>,
    {
        (::windows_core::Interface::vtable(self).SetBackgroundColor)(::windows_core::Interface::as_raw(self), color.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn SetFont(&self, plf: *const super::super::Graphics::Gdi::LOGFONTW) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFont)(::windows_core::Interface::as_raw(self), plf).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetTextColor<P0>(&self, color: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::COLORREF>,
    {
        (::windows_core::Interface::vtable(self).SetTextColor)(::windows_core::Interface::as_raw(self), color.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IPreviewHandlerVisuals, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IPreviewHandlerVisuals {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPreviewHandlerVisuals {}
impl ::core::fmt::Debug for IPreviewHandlerVisuals {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPreviewHandlerVisuals").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IPreviewHandlerVisuals {
    type Vtable = IPreviewHandlerVisuals_Vtbl;
}
impl ::core::clone::Clone for IPreviewHandlerVisuals {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPreviewHandlerVisuals {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x196bf9a5_b346_4ef0_aa1e_5dcdb76768b1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPreviewHandlerVisuals_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub SetBackgroundColor: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, color: super::super::Foundation::COLORREF) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetBackgroundColor: usize,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub SetFont: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plf: *const super::super::Graphics::Gdi::LOGFONTW) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))]
    SetFont: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetTextColor: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, color: super::super::Foundation::COLORREF) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetTextColor: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IPreviewItem(::windows_core::IUnknown);
impl IPreviewItem {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetItemIDList(&self) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetItemIDList)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetItem(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetItem)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IPreviewItem, ::windows_core::IUnknown, IRelatedItem);
impl ::core::cmp::PartialEq for IPreviewItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPreviewItem {}
impl ::core::fmt::Debug for IPreviewItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPreviewItem").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IPreviewItem {
    type Vtable = IPreviewItem_Vtbl;
}
impl ::core::clone::Clone for IPreviewItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPreviewItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x36149969_0a8f_49c8_8b00_4aecb20222fb);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPreviewItem_Vtbl {
    pub base__: IRelatedItem_Vtbl,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IPreviousVersionsInfo(::windows_core::IUnknown);
impl IPreviousVersionsInfo {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn AreSnapshotsAvailable<P0, P1>(&self, pszpath: P0, foktobeslow: P1) -> ::windows_core::Result<super::super::Foundation::BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).AreSnapshotsAvailable)(::windows_core::Interface::as_raw(self), pszpath.into_param().abi(), foktobeslow.into_param().abi(), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IPreviousVersionsInfo, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IPreviousVersionsInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPreviousVersionsInfo {}
impl ::core::fmt::Debug for IPreviousVersionsInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPreviousVersionsInfo").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IPreviousVersionsInfo {
    type Vtable = IPreviousVersionsInfo_Vtbl;
}
impl ::core::clone::Clone for IPreviousVersionsInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPreviousVersionsInfo {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x76e54780_ad74_48e3_a695_3ba9a0aff10d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPreviousVersionsInfo_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub AreSnapshotsAvailable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszpath: ::windows_core::PCWSTR, foktobeslow: super::super::Foundation::BOOL, pfavailable: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    AreSnapshotsAvailable: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IProfferService(::windows_core::IUnknown);
impl IProfferService {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn ProfferService<P0>(&self, serviceid: *const ::windows_core::GUID, serviceprovider: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IServiceProvider>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ProfferService)(::windows_core::Interface::as_raw(self), serviceid, serviceprovider.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn RevokeService(&self, cookie: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RevokeService)(::windows_core::Interface::as_raw(self), cookie).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IProfferService, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IProfferService {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IProfferService {}
impl ::core::fmt::Debug for IProfferService {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IProfferService").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IProfferService {
    type Vtable = IProfferService_Vtbl;
}
impl ::core::clone::Clone for IProfferService {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IProfferService {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xcb728b20_f786_11ce_92ad_00aa00a74cd0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IProfferService_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub ProfferService: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, serviceid: *const ::windows_core::GUID, serviceprovider: *mut ::core::ffi::c_void, cookie: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    ProfferService: usize,
    pub RevokeService: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, cookie: u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IProgressDialog(::windows_core::IUnknown);
impl IProgressDialog {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn StartProgressDialog<P0, P1>(&self, hwndparent: P0, punkenablemodless: P1, dwflags: u32, pvresevered: ::core::option::Option<*const ::core::ffi::c_void>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).StartProgressDialog)(::windows_core::Interface::as_raw(self), hwndparent.into_param().abi(), punkenablemodless.into_param().abi(), dwflags, ::core::mem::transmute(pvresevered.unwrap_or(::std::ptr::null()))).ok()
    }
    pub unsafe fn StopProgressDialog(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).StopProgressDialog)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetTitle<P0>(&self, pwztitle: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetTitle)(::windows_core::Interface::as_raw(self), pwztitle.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetAnimation<P0>(&self, hinstanimation: P0, idanimation: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HINSTANCE>,
    {
        (::windows_core::Interface::vtable(self).SetAnimation)(::windows_core::Interface::as_raw(self), hinstanimation.into_param().abi(), idanimation).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn HasUserCancelled(&self) -> super::super::Foundation::BOOL {
        (::windows_core::Interface::vtable(self).HasUserCancelled)(::windows_core::Interface::as_raw(self))
    }
    pub unsafe fn SetProgress(&self, dwcompleted: u32, dwtotal: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetProgress)(::windows_core::Interface::as_raw(self), dwcompleted, dwtotal).ok()
    }
    pub unsafe fn SetProgress64(&self, ullcompleted: u64, ulltotal: u64) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetProgress64)(::windows_core::Interface::as_raw(self), ullcompleted, ulltotal).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetLine<P0, P1>(&self, dwlinenum: u32, pwzstring: P0, fcompactpath: P1, pvresevered: ::core::option::Option<*const ::core::ffi::c_void>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetLine)(::windows_core::Interface::as_raw(self), dwlinenum, pwzstring.into_param().abi(), fcompactpath.into_param().abi(), ::core::mem::transmute(pvresevered.unwrap_or(::std::ptr::null()))).ok()
    }
    pub unsafe fn SetCancelMsg<P0>(&self, pwzcancelmsg: P0, pvresevered: ::core::option::Option<*const ::core::ffi::c_void>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetCancelMsg)(::windows_core::Interface::as_raw(self), pwzcancelmsg.into_param().abi(), ::core::mem::transmute(pvresevered.unwrap_or(::std::ptr::null()))).ok()
    }
    pub unsafe fn Timer(&self, dwtimeraction: u32, pvresevered: ::core::option::Option<*const ::core::ffi::c_void>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Timer)(::windows_core::Interface::as_raw(self), dwtimeraction, ::core::mem::transmute(pvresevered.unwrap_or(::std::ptr::null()))).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IProgressDialog, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IProgressDialog {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IProgressDialog {}
impl ::core::fmt::Debug for IProgressDialog {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IProgressDialog").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IProgressDialog {
    type Vtable = IProgressDialog_Vtbl;
}
impl ::core::clone::Clone for IProgressDialog {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IProgressDialog {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xebbc7c04_315e_11d2_b62f_006097df5bd4);
}
#[repr(C)]
#[doc(hidden)]
pub struct IProgressDialog_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub StartProgressDialog: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND, punkenablemodless: *mut ::core::ffi::c_void, dwflags: u32, pvresevered: *const ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    StartProgressDialog: usize,
    pub StopProgressDialog: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SetTitle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwztitle: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetAnimation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hinstanimation: super::super::Foundation::HINSTANCE, idanimation: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetAnimation: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub HasUserCancelled: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL,
    #[cfg(not(feature = "Win32_Foundation"))]
    HasUserCancelled: usize,
    pub SetProgress: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwcompleted: u32, dwtotal: u32) -> ::windows_core::HRESULT,
    pub SetProgress64: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ullcompleted: u64, ulltotal: u64) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetLine: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwlinenum: u32, pwzstring: ::windows_core::PCWSTR, fcompactpath: super::super::Foundation::BOOL, pvresevered: *const ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetLine: usize,
    pub SetCancelMsg: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwzcancelmsg: ::windows_core::PCWSTR, pvresevered: *const ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Timer: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwtimeraction: u32, pvresevered: *const ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IPropertyKeyStore(::windows_core::IUnknown);
impl IPropertyKeyStore {
    pub unsafe fn GetKeyCount(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetKeyCount)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetKeyAt(&self, index: i32, pkey: *mut PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetKeyAt)(::windows_core::Interface::as_raw(self), index, pkey).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn AppendKey(&self, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).AppendKey)(::windows_core::Interface::as_raw(self), key).ok()
    }
    pub unsafe fn DeleteKey(&self, index: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).DeleteKey)(::windows_core::Interface::as_raw(self), index).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn IsKeyInStore(&self, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).IsKeyInStore)(::windows_core::Interface::as_raw(self), key).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn RemoveKey(&self, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RemoveKey)(::windows_core::Interface::as_raw(self), key).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IPropertyKeyStore, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IPropertyKeyStore {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPropertyKeyStore {}
impl ::core::fmt::Debug for IPropertyKeyStore {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPropertyKeyStore").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IPropertyKeyStore {
    type Vtable = IPropertyKeyStore_Vtbl;
}
impl ::core::clone::Clone for IPropertyKeyStore {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPropertyKeyStore {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x75bd59aa_f23b_4963_aba4_0b355752a91b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPropertyKeyStore_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetKeyCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, keycount: *mut i32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetKeyAt: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, index: i32, pkey: *mut PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetKeyAt: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub AppendKey: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    AppendKey: usize,
    pub DeleteKey: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub IsKeyInStore: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    IsKeyInStore: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub RemoveKey: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    RemoveKey: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IPublishedApp(::windows_core::IUnknown);
impl IPublishedApp {
    pub unsafe fn GetAppInfo(&self, pai: *mut APPINFODATA) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetAppInfo)(::windows_core::Interface::as_raw(self), pai).ok()
    }
    pub unsafe fn GetPossibleActions(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetPossibleActions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSlowAppInfo(&self, psaid: *mut SLOWAPPINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetSlowAppInfo)(::windows_core::Interface::as_raw(self), psaid).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetCachedSlowAppInfo(&self, psaid: *mut SLOWAPPINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetCachedSlowAppInfo)(::windows_core::Interface::as_raw(self), psaid).ok()
    }
    pub unsafe fn IsInstalled(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.IsInstalled)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Install(&self, pstinstall: *const super::super::Foundation::SYSTEMTIME) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Install)(::windows_core::Interface::as_raw(self), pstinstall).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetPublishedAppInfo(&self, ppai: *mut PUBAPPINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetPublishedAppInfo)(::windows_core::Interface::as_raw(self), ppai).ok()
    }
    pub unsafe fn Unschedule(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Unschedule)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IPublishedApp, ::windows_core::IUnknown, IShellApp);
impl ::core::cmp::PartialEq for IPublishedApp {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPublishedApp {}
impl ::core::fmt::Debug for IPublishedApp {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPublishedApp").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IPublishedApp {
    type Vtable = IPublishedApp_Vtbl;
}
impl ::core::clone::Clone for IPublishedApp {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPublishedApp {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x1bc752e0_9046_11d1_b8b3_006008059382);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPublishedApp_Vtbl {
    pub base__: IShellApp_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub Install: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pstinstall: *const super::super::Foundation::SYSTEMTIME) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Install: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetPublishedAppInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppai: *mut PUBAPPINFO) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetPublishedAppInfo: usize,
    pub Unschedule: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IPublishedApp2(::windows_core::IUnknown);
impl IPublishedApp2 {
    pub unsafe fn GetAppInfo(&self, pai: *mut APPINFODATA) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.GetAppInfo)(::windows_core::Interface::as_raw(self), pai).ok()
    }
    pub unsafe fn GetPossibleActions(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetPossibleActions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSlowAppInfo(&self, psaid: *mut SLOWAPPINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.GetSlowAppInfo)(::windows_core::Interface::as_raw(self), psaid).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetCachedSlowAppInfo(&self, psaid: *mut SLOWAPPINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.GetCachedSlowAppInfo)(::windows_core::Interface::as_raw(self), psaid).ok()
    }
    pub unsafe fn IsInstalled(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.IsInstalled)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Install(&self, pstinstall: *const super::super::Foundation::SYSTEMTIME) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Install)(::windows_core::Interface::as_raw(self), pstinstall).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetPublishedAppInfo(&self, ppai: *mut PUBAPPINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetPublishedAppInfo)(::windows_core::Interface::as_raw(self), ppai).ok()
    }
    pub unsafe fn Unschedule(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Unschedule)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Install2<P0>(&self, pstinstall: *const super::super::Foundation::SYSTEMTIME, hwndparent: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).Install2)(::windows_core::Interface::as_raw(self), pstinstall, hwndparent.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IPublishedApp2, ::windows_core::IUnknown, IShellApp, IPublishedApp);
impl ::core::cmp::PartialEq for IPublishedApp2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPublishedApp2 {}
impl ::core::fmt::Debug for IPublishedApp2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPublishedApp2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IPublishedApp2 {
    type Vtable = IPublishedApp2_Vtbl;
}
impl ::core::clone::Clone for IPublishedApp2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPublishedApp2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x12b81347_1b3a_4a04_aa61_3f768b67fd7e);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPublishedApp2_Vtbl {
    pub base__: IPublishedApp_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub Install2: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pstinstall: *const super::super::Foundation::SYSTEMTIME, hwndparent: super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Install2: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IPublishingWizard(::windows_core::IUnknown);
impl IPublishingWizard {
    #[doc = "*Required features: `\"Win32_UI_Controls\"`*"]
    #[cfg(feature = "Win32_UI_Controls")]
    pub unsafe fn AddPages(&self, apages: &mut [super::Controls::HPROPSHEETPAGE], pnpagesadded: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.AddPages)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(apages.as_ptr()), apages.len() as _, pnpagesadded).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Controls\"`*"]
    #[cfg(feature = "Win32_UI_Controls")]
    pub unsafe fn GetFirstPage(&self) -> ::windows_core::Result<super::Controls::HPROPSHEETPAGE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetFirstPage)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Controls\"`*"]
    #[cfg(feature = "Win32_UI_Controls")]
    pub unsafe fn GetLastPage(&self) -> ::windows_core::Result<super::Controls::HPROPSHEETPAGE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetLastPage)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Initialize<P0, P1>(&self, pdo: P0, dwoptions: u32, pszservicescope: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), pdo.into_param().abi(), dwoptions, pszservicescope.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Data_Xml_MsXml\"`, `\"Win32_System_Com\"`*"]
    #[cfg(all(feature = "Win32_Data_Xml_MsXml", feature = "Win32_System_Com"))]
    pub unsafe fn GetTransferManifest(&self, phrfromtransfer: ::core::option::Option<*mut ::windows_core::HRESULT>, pdocmanifest: ::core::option::Option<*mut ::core::option::Option<super::super::Data::Xml::MsXml::IXMLDOMDocument>>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetTransferManifest)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(phrfromtransfer.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pdocmanifest.unwrap_or(::std::ptr::null_mut()))).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IPublishingWizard, ::windows_core::IUnknown, IWizardExtension);
impl ::core::cmp::PartialEq for IPublishingWizard {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IPublishingWizard {}
impl ::core::fmt::Debug for IPublishingWizard {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IPublishingWizard").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IPublishingWizard {
    type Vtable = IPublishingWizard_Vtbl;
}
impl ::core::clone::Clone for IPublishingWizard {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IPublishingWizard {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xaa9198bb_ccec_472d_beed_19a4f6733f7a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IPublishingWizard_Vtbl {
    pub base__: IWizardExtension_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdo: *mut ::core::ffi::c_void, dwoptions: u32, pszservicescope: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Initialize: usize,
    #[cfg(all(feature = "Win32_Data_Xml_MsXml", feature = "Win32_System_Com"))]
    pub GetTransferManifest: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phrfromtransfer: *mut ::windows_core::HRESULT, pdocmanifest: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Data_Xml_MsXml", feature = "Win32_System_Com")))]
    GetTransferManifest: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IQueryAssociations(::windows_core::IUnknown);
impl IQueryAssociations {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
    pub unsafe fn Init<P0, P1, P2>(&self, flags: ASSOCF, pszassoc: P0, hkprogid: P1, hwnd: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
        P2: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).Init)(::windows_core::Interface::as_raw(self), flags, pszassoc.into_param().abi(), hkprogid.into_param().abi(), hwnd.into_param().abi()).ok()
    }
    pub unsafe fn GetString<P0>(&self, flags: ASSOCF, str: ASSOCSTR, pszextra: P0, pszout: ::windows_core::PWSTR, pcchout: *mut u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).GetString)(::windows_core::Interface::as_raw(self), flags, str, pszextra.into_param().abi(), ::core::mem::transmute(pszout), pcchout).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Registry\"`*"]
    #[cfg(feature = "Win32_System_Registry")]
    pub unsafe fn GetKey<P0>(&self, flags: ASSOCF, key: ASSOCKEY, pszextra: P0) -> ::windows_core::Result<super::super::System::Registry::HKEY>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetKey)(::windows_core::Interface::as_raw(self), flags, key, pszextra.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetData<P0>(&self, flags: ASSOCF, data: ASSOCDATA, pszextra: P0, pvout: ::core::option::Option<*mut ::core::ffi::c_void>, pcbout: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).GetData)(::windows_core::Interface::as_raw(self), flags, data, pszextra.into_param().abi(), ::core::mem::transmute(pvout.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pcbout.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    pub unsafe fn GetEnum<P0>(&self, flags: ASSOCF, assocenum: ASSOCENUM, pszextra: P0, riid: *const ::windows_core::GUID, ppvout: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).GetEnum)(::windows_core::Interface::as_raw(self), flags, assocenum, pszextra.into_param().abi(), riid, ppvout).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IQueryAssociations, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IQueryAssociations {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IQueryAssociations {}
impl ::core::fmt::Debug for IQueryAssociations {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IQueryAssociations").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IQueryAssociations {
    type Vtable = IQueryAssociations_Vtbl;
}
impl ::core::clone::Clone for IQueryAssociations {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IQueryAssociations {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xc46ca590_3c3f_11d2_bee6_0000f805ca57);
}
#[repr(C)]
#[doc(hidden)]
pub struct IQueryAssociations_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
    pub Init: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, flags: ASSOCF, pszassoc: ::windows_core::PCWSTR, hkprogid: super::super::System::Registry::HKEY, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Registry")))]
    Init: usize,
    pub GetString: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, flags: ASSOCF, str: ASSOCSTR, pszextra: ::windows_core::PCWSTR, pszout: ::windows_core::PWSTR, pcchout: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Registry")]
    pub GetKey: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, flags: ASSOCF, key: ASSOCKEY, pszextra: ::windows_core::PCWSTR, phkeyout: *mut super::super::System::Registry::HKEY) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Registry"))]
    GetKey: usize,
    pub GetData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, flags: ASSOCF, data: ASSOCDATA, pszextra: ::windows_core::PCWSTR, pvout: *mut ::core::ffi::c_void, pcbout: *mut u32) -> ::windows_core::HRESULT,
    pub GetEnum: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, flags: ASSOCF, assocenum: ASSOCENUM, pszextra: ::windows_core::PCWSTR, riid: *const ::windows_core::GUID, ppvout: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IQueryCancelAutoPlay(::windows_core::IUnknown);
impl IQueryCancelAutoPlay {
    pub unsafe fn AllowAutoPlay<P0, P1>(&self, pszpath: P0, dwcontenttype: u32, pszlabel: P1, dwserialnumber: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).AllowAutoPlay)(::windows_core::Interface::as_raw(self), pszpath.into_param().abi(), dwcontenttype, pszlabel.into_param().abi(), dwserialnumber).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IQueryCancelAutoPlay, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IQueryCancelAutoPlay {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IQueryCancelAutoPlay {}
impl ::core::fmt::Debug for IQueryCancelAutoPlay {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IQueryCancelAutoPlay").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IQueryCancelAutoPlay {
    type Vtable = IQueryCancelAutoPlay_Vtbl;
}
impl ::core::clone::Clone for IQueryCancelAutoPlay {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IQueryCancelAutoPlay {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xddefe873_6997_4e68_be26_39b633adbe12);
}
#[repr(C)]
#[doc(hidden)]
pub struct IQueryCancelAutoPlay_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub AllowAutoPlay: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszpath: ::windows_core::PCWSTR, dwcontenttype: u32, pszlabel: ::windows_core::PCWSTR, dwserialnumber: u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IQueryCodePage(::windows_core::IUnknown);
impl IQueryCodePage {
    pub unsafe fn GetCodePage(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCodePage)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCodePage(&self, uicodepage: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetCodePage)(::windows_core::Interface::as_raw(self), uicodepage).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IQueryCodePage, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IQueryCodePage {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IQueryCodePage {}
impl ::core::fmt::Debug for IQueryCodePage {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IQueryCodePage").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IQueryCodePage {
    type Vtable = IQueryCodePage_Vtbl;
}
impl ::core::clone::Clone for IQueryCodePage {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IQueryCodePage {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xc7b236ce_ee80_11d0_985f_006008059382);
}
#[repr(C)]
#[doc(hidden)]
pub struct IQueryCodePage_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetCodePage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, puicodepage: *mut u32) -> ::windows_core::HRESULT,
    pub SetCodePage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, uicodepage: u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IQueryContinue(::windows_core::IUnknown);
impl IQueryContinue {
    pub unsafe fn QueryContinue(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).QueryContinue)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IQueryContinue, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IQueryContinue {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IQueryContinue {}
impl ::core::fmt::Debug for IQueryContinue {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IQueryContinue").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IQueryContinue {
    type Vtable = IQueryContinue_Vtbl;
}
impl ::core::clone::Clone for IQueryContinue {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IQueryContinue {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x7307055c_b24a_486b_9f25_163e597a28a9);
}
#[repr(C)]
#[doc(hidden)]
pub struct IQueryContinue_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub QueryContinue: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IQueryContinueWithStatus(::windows_core::IUnknown);
impl IQueryContinueWithStatus {
    pub unsafe fn QueryContinue(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.QueryContinue)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetStatusMessage<P0>(&self, psz: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetStatusMessage)(::windows_core::Interface::as_raw(self), psz.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IQueryContinueWithStatus, ::windows_core::IUnknown, IQueryContinue);
impl ::core::cmp::PartialEq for IQueryContinueWithStatus {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IQueryContinueWithStatus {}
impl ::core::fmt::Debug for IQueryContinueWithStatus {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IQueryContinueWithStatus").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IQueryContinueWithStatus {
    type Vtable = IQueryContinueWithStatus_Vtbl;
}
impl ::core::clone::Clone for IQueryContinueWithStatus {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IQueryContinueWithStatus {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x9090be5b_502b_41fb_bccc_0049a6c7254b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IQueryContinueWithStatus_Vtbl {
    pub base__: IQueryContinue_Vtbl,
    pub SetStatusMessage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psz: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IQueryInfo(::windows_core::IUnknown);
impl IQueryInfo {
    pub unsafe fn GetInfoTip(&self, dwflags: QITIPF_FLAGS) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetInfoTip)(::windows_core::Interface::as_raw(self), dwflags.0 as _, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetInfoFlags(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetInfoFlags)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IQueryInfo, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IQueryInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IQueryInfo {}
impl ::core::fmt::Debug for IQueryInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IQueryInfo").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IQueryInfo {
    type Vtable = IQueryInfo_Vtbl;
}
impl ::core::clone::Clone for IQueryInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IQueryInfo {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x00021500_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct IQueryInfo_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetInfoTip: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, ppwsztip: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub GetInfoFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IRegTreeItem(::windows_core::IUnknown);
impl IRegTreeItem {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetCheckState(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCheckState)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetCheckState<P0>(&self, bcheck: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetCheckState)(::windows_core::Interface::as_raw(self), bcheck.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IRegTreeItem, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IRegTreeItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IRegTreeItem {}
impl ::core::fmt::Debug for IRegTreeItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IRegTreeItem").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IRegTreeItem {
    type Vtable = IRegTreeItem_Vtbl;
}
impl ::core::clone::Clone for IRegTreeItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRegTreeItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xa9521922_0812_4d44_9ec3_7fd38c726f3d);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRegTreeItem_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub GetCheckState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbcheck: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetCheckState: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetCheckState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bcheck: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetCheckState: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IRelatedItem(::windows_core::IUnknown);
impl IRelatedItem {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetItemIDList(&self) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetItemIDList)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetItem(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetItem)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IRelatedItem, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IRelatedItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IRelatedItem {}
impl ::core::fmt::Debug for IRelatedItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IRelatedItem").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IRelatedItem {
    type Vtable = IRelatedItem_Vtbl;
}
impl ::core::clone::Clone for IRelatedItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRelatedItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xa73ce67a_8ab1_44f1_8d43_d2fcbf6b1cd0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRelatedItem_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetItemIDList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetItemIDList: usize,
    pub GetItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppsi: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IRemoteComputer(::windows_core::IUnknown);
impl IRemoteComputer {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Initialize<P0, P1>(&self, pszmachine: P0, benumerating: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
        P1: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), pszmachine.into_param().abi(), benumerating.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IRemoteComputer, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IRemoteComputer {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IRemoteComputer {}
impl ::core::fmt::Debug for IRemoteComputer {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IRemoteComputer").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IRemoteComputer {
    type Vtable = IRemoteComputer_Vtbl;
}
impl ::core::clone::Clone for IRemoteComputer {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRemoteComputer {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214fe_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRemoteComputer_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszmachine: ::windows_core::PCWSTR, benumerating: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Initialize: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IResolveShellLink(::windows_core::IUnknown);
impl IResolveShellLink {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ResolveShellLink<P0, P1>(&self, punklink: P0, hwnd: P1, fflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        P1: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).ResolveShellLink)(::windows_core::Interface::as_raw(self), punklink.into_param().abi(), hwnd.into_param().abi(), fflags).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IResolveShellLink, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IResolveShellLink {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IResolveShellLink {}
impl ::core::fmt::Debug for IResolveShellLink {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IResolveShellLink").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IResolveShellLink {
    type Vtable = IResolveShellLink_Vtbl;
}
impl ::core::clone::Clone for IResolveShellLink {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IResolveShellLink {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x5cd52983_9449_11d2_963a_00c04f79adf0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IResolveShellLink_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub ResolveShellLink: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punklink: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, fflags: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ResolveShellLink: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IResultsFolder(::windows_core::IUnknown);
impl IResultsFolder {
    pub unsafe fn AddItem<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).AddItem)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn AddIDList(&self, pidl: *const Common::ITEMIDLIST, ppidladded: ::core::option::Option<*mut *mut Common::ITEMIDLIST>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).AddIDList)(::windows_core::Interface::as_raw(self), pidl, ::core::mem::transmute(ppidladded.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    pub unsafe fn RemoveItem<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).RemoveItem)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn RemoveIDList(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RemoveIDList)(::windows_core::Interface::as_raw(self), pidl).ok()
    }
    pub unsafe fn RemoveAll(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RemoveAll)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IResultsFolder, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IResultsFolder {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IResultsFolder {}
impl ::core::fmt::Debug for IResultsFolder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IResultsFolder").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IResultsFolder {
    type Vtable = IResultsFolder_Vtbl;
}
impl ::core::clone::Clone for IResultsFolder {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IResultsFolder {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x96e5ae6d_6ae1_4b1c_900c_c6480eaa8828);
}
#[repr(C)]
#[doc(hidden)]
pub struct IResultsFolder_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub AddItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub AddIDList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, ppidladded: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    AddIDList: usize,
    pub RemoveItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub RemoveIDList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    RemoveIDList: usize,
    pub RemoveAll: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IRunnableTask(::windows_core::IUnknown);
impl IRunnableTask {
    pub unsafe fn Run(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Run)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Kill<P0>(&self, bwait: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).Kill)(::windows_core::Interface::as_raw(self), bwait.into_param().abi()).ok()
    }
    pub unsafe fn Suspend(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Suspend)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Resume(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Resume)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn IsRunning(&self) -> u32 {
        (::windows_core::Interface::vtable(self).IsRunning)(::windows_core::Interface::as_raw(self))
    }
}
::windows_core::imp::interface_hierarchy!(IRunnableTask, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IRunnableTask {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IRunnableTask {}
impl ::core::fmt::Debug for IRunnableTask {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IRunnableTask").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IRunnableTask {
    type Vtable = IRunnableTask_Vtbl;
}
impl ::core::clone::Clone for IRunnableTask {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IRunnableTask {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x85788d00_6807_11d0_b810_00c04fd706ec);
}
#[repr(C)]
#[doc(hidden)]
pub struct IRunnableTask_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Run: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub Kill: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bwait: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Kill: usize,
    pub Suspend: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Resume: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub IsRunning: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> u32,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IScriptErrorList(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IScriptErrorList {
    pub unsafe fn advanceError(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).advanceError)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn retreatError(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).retreatError)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn canAdvanceError(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).canAdvanceError)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn canRetreatError(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).canRetreatError)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn getErrorLine(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).getErrorLine)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn getErrorChar(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).getErrorChar)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn getErrorCode(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).getErrorCode)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn getErrorMsg(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).getErrorMsg)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn getErrorUrl(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).getErrorUrl)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn getAlwaysShowLockState(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).getAlwaysShowLockState)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn getDetailsPaneOpen(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).getDetailsPaneOpen)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn setDetailsPaneOpen<P0>(&self, fdetailspaneopen: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).setDetailsPaneOpen)(::windows_core::Interface::as_raw(self), fdetailspaneopen.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn getPerErrorDisplay(&self) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).getPerErrorDisplay)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn setPerErrorDisplay<P0>(&self, fpererrordisplay: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).setPerErrorDisplay)(::windows_core::Interface::as_raw(self), fpererrordisplay.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IScriptErrorList, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IScriptErrorList {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IScriptErrorList {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IScriptErrorList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IScriptErrorList").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IScriptErrorList {
    type Vtable = IScriptErrorList_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IScriptErrorList {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IScriptErrorList {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xf3470f24_15fd_11d2_bb2e_00805ff7efca);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IScriptErrorList_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
    pub advanceError: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub retreatError: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub canAdvanceError: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfcanadvance: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    canAdvanceError: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub canRetreatError: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfcanretreat: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    canRetreatError: usize,
    pub getErrorLine: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plline: *mut i32) -> ::windows_core::HRESULT,
    pub getErrorChar: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plchar: *mut i32) -> ::windows_core::HRESULT,
    pub getErrorCode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plcode: *mut i32) -> ::windows_core::HRESULT,
    pub getErrorMsg: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pstr: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub getErrorUrl: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pstr: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub getAlwaysShowLockState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfalwaysshowlocked: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    getAlwaysShowLockState: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub getDetailsPaneOpen: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfdetailspaneopen: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    getDetailsPaneOpen: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub setDetailsPaneOpen: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fdetailspaneopen: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    setDetailsPaneOpen: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub getPerErrorDisplay: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfpererrordisplay: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    getPerErrorDisplay: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub setPerErrorDisplay: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fpererrordisplay: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    setPerErrorDisplay: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ISearchBoxInfo(::windows_core::IUnknown);
impl ISearchBoxInfo {
    pub unsafe fn GetCondition<T>(&self) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetCondition)(::windows_core::Interface::as_raw(self), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetText(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetText)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ISearchBoxInfo, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ISearchBoxInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISearchBoxInfo {}
impl ::core::fmt::Debug for ISearchBoxInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISearchBoxInfo").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ISearchBoxInfo {
    type Vtable = ISearchBoxInfo_Vtbl;
}
impl ::core::clone::Clone for ISearchBoxInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISearchBoxInfo {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x6af6e03f_d664_4ef4_9626_f7e0ed36755e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISearchBoxInfo_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetCondition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppsz: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ISearchContext(::windows_core::IUnknown);
impl ISearchContext {
    pub unsafe fn GetSearchUrl(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSearchUrl)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSearchText(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSearchText)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSearchStyle(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSearchStyle)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ISearchContext, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ISearchContext {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISearchContext {}
impl ::core::fmt::Debug for ISearchContext {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISearchContext").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ISearchContext {
    type Vtable = ISearchContext_Vtbl;
}
impl ::core::clone::Clone for ISearchContext {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISearchContext {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x09f656a2_41af_480c_88f7_16cc0d164615);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISearchContext_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetSearchUrl: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrsearchurl: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub GetSearchText: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrsearchtext: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub GetSearchStyle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwsearchstyle: *mut u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ISearchFolderItemFactory(::windows_core::IUnknown);
impl ISearchFolderItemFactory {
    pub unsafe fn SetDisplayName<P0>(&self, pszdisplayname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetDisplayName)(::windows_core::Interface::as_raw(self), pszdisplayname.into_param().abi()).ok()
    }
    pub unsafe fn SetFolderTypeID(&self, ftid: ::windows_core::GUID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFolderTypeID)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(ftid)).ok()
    }
    pub unsafe fn SetFolderLogicalViewMode(&self, flvm: FOLDERLOGICALVIEWMODE) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFolderLogicalViewMode)(::windows_core::Interface::as_raw(self), flvm).ok()
    }
    pub unsafe fn SetIconSize(&self, iiconsize: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetIconSize)(::windows_core::Interface::as_raw(self), iiconsize).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn SetVisibleColumns(&self, rgkey: &[PropertiesSystem::PROPERTYKEY]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetVisibleColumns)(::windows_core::Interface::as_raw(self), rgkey.len() as _, ::core::mem::transmute(rgkey.as_ptr())).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn SetSortColumns(&self, rgsortcolumns: &[SORTCOLUMN]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetSortColumns)(::windows_core::Interface::as_raw(self), rgsortcolumns.len() as _, ::core::mem::transmute(rgsortcolumns.as_ptr())).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn SetGroupColumn(&self, keygroup: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetGroupColumn)(::windows_core::Interface::as_raw(self), keygroup).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn SetStacks(&self, rgstackkeys: &[PropertiesSystem::PROPERTYKEY]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetStacks)(::windows_core::Interface::as_raw(self), rgstackkeys.len() as _, ::core::mem::transmute(rgstackkeys.as_ptr())).ok()
    }
    pub unsafe fn SetScope<P0>(&self, psiascope: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItemArray>,
    {
        (::windows_core::Interface::vtable(self).SetScope)(::windows_core::Interface::as_raw(self), psiascope.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Search\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Search"))]
    pub unsafe fn SetCondition<P0>(&self, pcondition: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Search::ICondition>,
    {
        (::windows_core::Interface::vtable(self).SetCondition)(::windows_core::Interface::as_raw(self), pcondition.into_param().abi()).ok()
    }
    pub unsafe fn GetShellItem<T>(&self) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetShellItem)(::windows_core::Interface::as_raw(self), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetIDList(&self) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetIDList)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ISearchFolderItemFactory, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ISearchFolderItemFactory {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISearchFolderItemFactory {}
impl ::core::fmt::Debug for ISearchFolderItemFactory {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISearchFolderItemFactory").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ISearchFolderItemFactory {
    type Vtable = ISearchFolderItemFactory_Vtbl;
}
impl ::core::clone::Clone for ISearchFolderItemFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISearchFolderItemFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xa0ffbc28_5482_4366_be27_3e81e78e06c2);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISearchFolderItemFactory_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetDisplayName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszdisplayname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub SetFolderTypeID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ftid: ::windows_core::GUID) -> ::windows_core::HRESULT,
    pub SetFolderLogicalViewMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, flvm: FOLDERLOGICALVIEWMODE) -> ::windows_core::HRESULT,
    pub SetIconSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, iiconsize: i32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub SetVisibleColumns: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, cvisiblecolumns: u32, rgkey: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    SetVisibleColumns: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub SetSortColumns: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, csortcolumns: u32, rgsortcolumns: *const SORTCOLUMN) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    SetSortColumns: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub SetGroupColumn: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, keygroup: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    SetGroupColumn: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub SetStacks: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, cstackkeys: u32, rgstackkeys: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    SetStacks: usize,
    pub SetScope: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psiascope: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Search"))]
    pub SetCondition: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcondition: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_System_Com", feature = "Win32_System_Search")))]
    SetCondition: usize,
    pub GetShellItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetIDList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetIDList: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ISharedBitmap(::windows_core::IUnknown);
impl ISharedBitmap {
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn GetSharedBitmap(&self) -> ::windows_core::Result<super::super::Graphics::Gdi::HBITMAP> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSharedBitmap)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSize(&self) -> ::windows_core::Result<super::super::Foundation::SIZE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSize)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetFormat(&self) -> ::windows_core::Result<WTS_ALPHATYPE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFormat)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn InitializeBitmap<P0>(&self, hbm: P0, wtsat: WTS_ALPHATYPE) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Graphics::Gdi::HBITMAP>,
    {
        (::windows_core::Interface::vtable(self).InitializeBitmap)(::windows_core::Interface::as_raw(self), hbm.into_param().abi(), wtsat).ok()
    }
    #[doc = "*Required features: `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub unsafe fn Detach(&self) -> ::windows_core::Result<super::super::Graphics::Gdi::HBITMAP> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Detach)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(ISharedBitmap, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ISharedBitmap {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISharedBitmap {}
impl ::core::fmt::Debug for ISharedBitmap {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISharedBitmap").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ISharedBitmap {
    type Vtable = ISharedBitmap_Vtbl;
}
impl ::core::clone::Clone for ISharedBitmap {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISharedBitmap {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x091162a4_bc96_411f_aae8_c5122cd03363);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISharedBitmap_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub GetSharedBitmap: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phbm: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))]
    GetSharedBitmap: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psize: *mut super::super::Foundation::SIZE) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetSize: usize,
    pub GetFormat: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pat: *mut WTS_ALPHATYPE) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub InitializeBitmap: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hbm: super::super::Graphics::Gdi::HBITMAP, wtsat: WTS_ALPHATYPE) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))]
    InitializeBitmap: usize,
    #[cfg(feature = "Win32_Graphics_Gdi")]
    pub Detach: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phbm: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Graphics_Gdi"))]
    Detach: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct ISharingConfigurationManager(::windows_core::IUnknown);
impl ISharingConfigurationManager {
    pub unsafe fn CreateShare(&self, dsid: DEF_SHARE_ID, role: SHARE_ROLE) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).CreateShare)(::windows_core::Interface::as_raw(self), dsid, role).ok()
    }
    pub unsafe fn DeleteShare(&self, dsid: DEF_SHARE_ID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).DeleteShare)(::windows_core::Interface::as_raw(self), dsid).ok()
    }
    pub unsafe fn ShareExists(&self, dsid: DEF_SHARE_ID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ShareExists)(::windows_core::Interface::as_raw(self), dsid).ok()
    }
    pub unsafe fn GetSharePermissions(&self, dsid: DEF_SHARE_ID) -> ::windows_core::Result<SHARE_ROLE> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSharePermissions)(::windows_core::Interface::as_raw(self), dsid, &mut result__).from_abi(result__)
    }
    pub unsafe fn SharePrinters(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SharePrinters)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn StopSharingPrinters(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).StopSharingPrinters)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ArePrintersShared(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ArePrintersShared)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(ISharingConfigurationManager, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for ISharingConfigurationManager {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ISharingConfigurationManager {}
impl ::core::fmt::Debug for ISharingConfigurationManager {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ISharingConfigurationManager").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for ISharingConfigurationManager {
    type Vtable = ISharingConfigurationManager_Vtbl;
}
impl ::core::clone::Clone for ISharingConfigurationManager {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for ISharingConfigurationManager {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xb4cd448a_9c86_4466_9201_2e62105b87ae);
}
#[repr(C)]
#[doc(hidden)]
pub struct ISharingConfigurationManager_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub CreateShare: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dsid: DEF_SHARE_ID, role: SHARE_ROLE) -> ::windows_core::HRESULT,
    pub DeleteShare: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dsid: DEF_SHARE_ID) -> ::windows_core::HRESULT,
    pub ShareExists: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dsid: DEF_SHARE_ID) -> ::windows_core::HRESULT,
    pub GetSharePermissions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dsid: DEF_SHARE_ID, prole: *mut SHARE_ROLE) -> ::windows_core::HRESULT,
    pub SharePrinters: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub StopSharingPrinters: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub ArePrintersShared: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellApp(::windows_core::IUnknown);
impl IShellApp {
    pub unsafe fn GetAppInfo(&self, pai: *mut APPINFODATA) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetAppInfo)(::windows_core::Interface::as_raw(self), pai).ok()
    }
    pub unsafe fn GetPossibleActions(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetPossibleActions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSlowAppInfo(&self, psaid: *mut SLOWAPPINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetSlowAppInfo)(::windows_core::Interface::as_raw(self), psaid).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetCachedSlowAppInfo(&self, psaid: *mut SLOWAPPINFO) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetCachedSlowAppInfo)(::windows_core::Interface::as_raw(self), psaid).ok()
    }
    pub unsafe fn IsInstalled(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).IsInstalled)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellApp, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellApp {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellApp {}
impl ::core::fmt::Debug for IShellApp {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellApp").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellApp {
    type Vtable = IShellApp_Vtbl;
}
impl ::core::clone::Clone for IShellApp {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellApp {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xa3e14960_935f_11d1_b8b8_006008059382);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellApp_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetAppInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pai: *mut APPINFODATA) -> ::windows_core::HRESULT,
    pub GetPossibleActions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwactions: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetSlowAppInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psaid: *mut SLOWAPPINFO) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetSlowAppInfo: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetCachedSlowAppInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psaid: *mut SLOWAPPINFO) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetCachedSlowAppInfo: usize,
    pub IsInstalled: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Ole\"`*"]
#[cfg(feature = "Win32_System_Ole")]
#[repr(transparent)]
pub struct IShellBrowser(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Ole")]
impl IShellBrowser {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn GetWindow(&self) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetWindow)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
    pub unsafe fn ContextSensitiveHelp<P0>(&self, fentermode: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.ContextSensitiveHelp)(::windows_core::Interface::as_raw(self), fentermode.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn InsertMenusSB<P0>(&self, hmenushared: P0, lpmenuwidths: *mut super::super::System::Ole::OLEMENUGROUPWIDTHS) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::WindowsAndMessaging::HMENU>,
    {
        (::windows_core::Interface::vtable(self).InsertMenusSB)(::windows_core::Interface::as_raw(self), hmenushared.into_param().abi(), lpmenuwidths).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn SetMenuSB<P0, P1>(&self, hmenushared: P0, holemenures: isize, hwndactiveobject: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::WindowsAndMessaging::HMENU>,
        P1: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).SetMenuSB)(::windows_core::Interface::as_raw(self), hmenushared.into_param().abi(), holemenures, hwndactiveobject.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn RemoveMenusSB<P0>(&self, hmenushared: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::WindowsAndMessaging::HMENU>,
    {
        (::windows_core::Interface::vtable(self).RemoveMenusSB)(::windows_core::Interface::as_raw(self), hmenushared.into_param().abi()).ok()
    }
    pub unsafe fn SetStatusTextSB<P0>(&self, pszstatustext: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetStatusTextSB)(::windows_core::Interface::as_raw(self), pszstatustext.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableModelessSB<P0>(&self, fenable: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).EnableModelessSB)(::windows_core::Interface::as_raw(self), fenable.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn TranslateAcceleratorSB(&self, pmsg: *const super::WindowsAndMessaging::MSG, wid: u16) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).TranslateAcceleratorSB)(::windows_core::Interface::as_raw(self), pmsg, wid).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn BrowseObject(&self, pidl: *const Common::ITEMIDLIST, wflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).BrowseObject)(::windows_core::Interface::as_raw(self), pidl, wflags).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn GetViewStateStream(&self, grfmode: u32) -> ::windows_core::Result<super::super::System::Com::IStream> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetViewStateStream)(::windows_core::Interface::as_raw(self), grfmode, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetControlWindow(&self, id: u32) -> ::windows_core::Result<super::super::Foundation::HWND> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetControlWindow)(::windows_core::Interface::as_raw(self), id, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SendControlMsg<P0, P1>(&self, id: u32, umsg: u32, wparam: P0, lparam: P1, pret: ::core::option::Option<*mut super::super::Foundation::LRESULT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).SendControlMsg)(::windows_core::Interface::as_raw(self), id, umsg, wparam.into_param().abi(), lparam.into_param().abi(), ::core::mem::transmute(pret.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn QueryActiveShellView(&self) -> ::windows_core::Result<IShellView> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).QueryActiveShellView)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn OnViewWindowActive<P0>(&self, pshv: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellView>,
    {
        (::windows_core::Interface::vtable(self).OnViewWindowActive)(::windows_core::Interface::as_raw(self), pshv.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Controls\"`*"]
    #[cfg(feature = "Win32_UI_Controls")]
    pub unsafe fn SetToolbarItems(&self, lpbuttons: ::core::option::Option<&[super::Controls::TBBUTTON]>, uflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetToolbarItems)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(lpbuttons.as_deref().map_or(::core::ptr::null(), |slice| slice.as_ptr())), lpbuttons.as_deref().map_or(0, |slice| slice.len() as _), uflags).ok()
    }
}
#[cfg(feature = "Win32_System_Ole")]
::windows_core::imp::interface_hierarchy!(IShellBrowser, ::windows_core::IUnknown, super::super::System::Ole::IOleWindow);
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::PartialEq for IShellBrowser {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::cmp::Eq for IShellBrowser {}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::fmt::Debug for IShellBrowser {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellBrowser").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::Interface for IShellBrowser {
    type Vtable = IShellBrowser_Vtbl;
}
#[cfg(feature = "Win32_System_Ole")]
impl ::core::clone::Clone for IShellBrowser {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Ole")]
unsafe impl ::windows_core::ComInterface for IShellBrowser {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214e2_0000_0000_c000_000000000046);
}
#[cfg(feature = "Win32_System_Ole")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellBrowser_Vtbl {
    pub base__: super::super::System::Ole::IOleWindow_Vtbl,
    #[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_WindowsAndMessaging"))]
    pub InsertMenusSB: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hmenushared: super::WindowsAndMessaging::HMENU, lpmenuwidths: *mut super::super::System::Ole::OLEMENUGROUPWIDTHS) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_System_Ole", feature = "Win32_UI_WindowsAndMessaging")))]
    InsertMenusSB: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub SetMenuSB: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hmenushared: super::WindowsAndMessaging::HMENU, holemenures: isize, hwndactiveobject: super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))]
    SetMenuSB: usize,
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub RemoveMenusSB: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hmenushared: super::WindowsAndMessaging::HMENU) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_WindowsAndMessaging"))]
    RemoveMenusSB: usize,
    pub SetStatusTextSB: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszstatustext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub EnableModelessSB: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    EnableModelessSB: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub TranslateAcceleratorSB: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG, wid: u16) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))]
    TranslateAcceleratorSB: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub BrowseObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, wflags: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    BrowseObject: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub GetViewStateStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, grfmode: u32, ppstrm: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    GetViewStateStream: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetControlWindow: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, id: u32, phwnd: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetControlWindow: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SendControlMsg: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, id: u32, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM, pret: *mut super::super::Foundation::LRESULT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SendControlMsg: usize,
    #[cfg(feature = "Win32_System_Ole")]
    pub QueryActiveShellView: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppshv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    QueryActiveShellView: usize,
    #[cfg(feature = "Win32_System_Ole")]
    pub OnViewWindowActive: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pshv: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    OnViewWindowActive: usize,
    #[cfg(feature = "Win32_UI_Controls")]
    pub SetToolbarItems: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lpbuttons: *const super::Controls::TBBUTTON, nbuttons: u32, uflags: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Controls"))]
    SetToolbarItems: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellChangeNotify(::windows_core::IUnknown);
impl IShellChangeNotify {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn OnChange(&self, levent: i32, pidl1: ::core::option::Option<*const Common::ITEMIDLIST>, pidl2: ::core::option::Option<*const Common::ITEMIDLIST>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).OnChange)(::windows_core::Interface::as_raw(self), levent, ::core::mem::transmute(pidl1.unwrap_or(::std::ptr::null())), ::core::mem::transmute(pidl2.unwrap_or(::std::ptr::null()))).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellChangeNotify, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellChangeNotify {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellChangeNotify {}
impl ::core::fmt::Debug for IShellChangeNotify {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellChangeNotify").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellChangeNotify {
    type Vtable = IShellChangeNotify_Vtbl;
}
impl ::core::clone::Clone for IShellChangeNotify {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellChangeNotify {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xd82be2b1_5764_11d0_a96e_00c04fd705a2);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellChangeNotify_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub OnChange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, levent: i32, pidl1: *const Common::ITEMIDLIST, pidl2: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    OnChange: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellDetails(::windows_core::IUnknown);
impl IShellDetails {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetDetailsOf(&self, pidl: ::core::option::Option<*const Common::ITEMIDLIST>, icolumn: u32, pdetails: *mut Common::SHELLDETAILS) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetDetailsOf)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pidl.unwrap_or(::std::ptr::null())), icolumn, pdetails).ok()
    }
    pub unsafe fn ColumnClick(&self, icolumn: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ColumnClick)(::windows_core::Interface::as_raw(self), icolumn).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellDetails, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellDetails {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellDetails {}
impl ::core::fmt::Debug for IShellDetails {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellDetails").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellDetails {
    type Vtable = IShellDetails_Vtbl;
}
impl ::core::clone::Clone for IShellDetails {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellDetails {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214ec_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellDetails_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetDetailsOf: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, icolumn: u32, pdetails: *mut Common::SHELLDETAILS) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetDetailsOf: usize,
    pub ColumnClick: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, icolumn: u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellDispatch(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellDispatch {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NameSpace(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<Folder> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).NameSpace)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn BrowseForFolder<P0>(&self, hwnd: i32, title: P0, options: i32, rootfolder: super::super::System::Variant::VARIANT) -> ::windows_core::Result<Folder>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).BrowseForFolder)(::windows_core::Interface::as_raw(self), hwnd, title.into_param().abi(), options, ::core::mem::transmute(rootfolder), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Windows(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Windows)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Open(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Open)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Explore(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Explore)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir)).ok()
    }
    pub unsafe fn MinimizeAll(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).MinimizeAll)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn UndoMinimizeALL(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).UndoMinimizeALL)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FileRun(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).FileRun)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn CascadeWindows(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).CascadeWindows)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TileVertically(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).TileVertically)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TileHorizontally(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).TileHorizontally)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ShutdownWindows(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ShutdownWindows)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Suspend(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Suspend)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn EjectPC(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).EjectPC)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetTime(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetTime)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TrayProperties(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).TrayProperties)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Help(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Help)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FindFiles(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).FindFiles)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FindComputer(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).FindComputer)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RefreshMenu(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RefreshMenu)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ControlPanelItem<P0>(&self, bstrdir: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).ControlPanelItem)(::windows_core::Interface::as_raw(self), bstrdir.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellDispatch, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellDispatch {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellDispatch {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellDispatch {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellDispatch").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellDispatch {
    type Vtable = IShellDispatch_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellDispatch {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellDispatch {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xd8f015c0_c278_11ce_a49e_444553540000);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellDispatch_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Application: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Application: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Parent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Parent: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub NameSpace: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, vdir: super::super::System::Variant::VARIANT, ppsdf: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    NameSpace: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub BrowseForFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: i32, title: ::std::mem::MaybeUninit<::windows_core::BSTR>, options: i32, rootfolder: super::super::System::Variant::VARIANT, ppsdf: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    BrowseForFolder: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Windows: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Windows: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub Open: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    Open: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub Explore: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    Explore: usize,
    pub MinimizeAll: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub UndoMinimizeALL: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub FileRun: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub CascadeWindows: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub TileVertically: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub TileHorizontally: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub ShutdownWindows: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Suspend: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub EjectPC: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SetTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub TrayProperties: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Help: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub FindFiles: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub FindComputer: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub RefreshMenu: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub ControlPanelItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrdir: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellDispatch2(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellDispatch2 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NameSpace(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<Folder> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.NameSpace)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn BrowseForFolder<P0>(&self, hwnd: i32, title: P0, options: i32, rootfolder: super::super::System::Variant::VARIANT) -> ::windows_core::Result<Folder>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.BrowseForFolder)(::windows_core::Interface::as_raw(self), hwnd, title.into_param().abi(), options, ::core::mem::transmute(rootfolder), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Windows(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Windows)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Open(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Open)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Explore(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Explore)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir)).ok()
    }
    pub unsafe fn MinimizeAll(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.MinimizeAll)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn UndoMinimizeALL(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.UndoMinimizeALL)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FileRun(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.FileRun)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn CascadeWindows(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.CascadeWindows)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TileVertically(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.TileVertically)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TileHorizontally(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.TileHorizontally)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ShutdownWindows(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.ShutdownWindows)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Suspend(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Suspend)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn EjectPC(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.EjectPC)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetTime(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetTime)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TrayProperties(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.TrayProperties)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Help(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Help)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FindFiles(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.FindFiles)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FindComputer(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.FindComputer)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RefreshMenu(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.RefreshMenu)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ControlPanelItem<P0>(&self, bstrdir: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.ControlPanelItem)(::windows_core::Interface::as_raw(self), bstrdir.into_param().abi()).ok()
    }
    pub unsafe fn IsRestricted<P0, P1>(&self, group: P0, restriction: P1) -> ::windows_core::Result<i32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IsRestricted)(::windows_core::Interface::as_raw(self), group.into_param().abi(), restriction.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShellExecute<P0>(&self, file: P0, vargs: super::super::System::Variant::VARIANT, vdir: super::super::System::Variant::VARIANT, voperation: super::super::System::Variant::VARIANT, vshow: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).ShellExecute)(::windows_core::Interface::as_raw(self), file.into_param().abi(), ::core::mem::transmute(vargs), ::core::mem::transmute(vdir), ::core::mem::transmute(voperation), ::core::mem::transmute(vshow)).ok()
    }
    pub unsafe fn FindPrinter<P0, P1, P2>(&self, name: P0, location: P1, model: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).FindPrinter)(::windows_core::Interface::as_raw(self), name.into_param().abi(), location.into_param().abi(), model.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn GetSystemInformation<P0>(&self, name: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSystemInformation)(::windows_core::Interface::as_raw(self), name.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ServiceStart<P0>(&self, servicename: P0, persistent: super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ServiceStart)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), ::core::mem::transmute(persistent), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ServiceStop<P0>(&self, servicename: P0, persistent: super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ServiceStop)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), ::core::mem::transmute(persistent), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn IsServiceRunning<P0>(&self, servicename: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IsServiceRunning)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn CanStartStopService<P0>(&self, servicename: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).CanStartStopService)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShowBrowserBar<P0>(&self, bstrclsid: P0, bshow: super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ShowBrowserBar)(::windows_core::Interface::as_raw(self), bstrclsid.into_param().abi(), ::core::mem::transmute(bshow), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellDispatch2, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IShellDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellDispatch2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellDispatch2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellDispatch2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellDispatch2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellDispatch2 {
    type Vtable = IShellDispatch2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellDispatch2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellDispatch2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xa4c6892c_3ba9_11d2_9dea_00c04fb16162);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellDispatch2_Vtbl {
    pub base__: IShellDispatch_Vtbl,
    pub IsRestricted: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, group: ::std::mem::MaybeUninit<::windows_core::BSTR>, restriction: ::std::mem::MaybeUninit<::windows_core::BSTR>, plrestrictvalue: *mut i32) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub ShellExecute: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, file: ::std::mem::MaybeUninit<::windows_core::BSTR>, vargs: super::super::System::Variant::VARIANT, vdir: super::super::System::Variant::VARIANT, voperation: super::super::System::Variant::VARIANT, vshow: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    ShellExecute: usize,
    pub FindPrinter: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, name: ::std::mem::MaybeUninit<::windows_core::BSTR>, location: ::std::mem::MaybeUninit<::windows_core::BSTR>, model: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub GetSystemInformation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, name: ::std::mem::MaybeUninit<::windows_core::BSTR>, pv: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    GetSystemInformation: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub ServiceStart: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, servicename: ::std::mem::MaybeUninit<::windows_core::BSTR>, persistent: super::super::System::Variant::VARIANT, psuccess: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    ServiceStart: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub ServiceStop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, servicename: ::std::mem::MaybeUninit<::windows_core::BSTR>, persistent: super::super::System::Variant::VARIANT, psuccess: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    ServiceStop: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub IsServiceRunning: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, servicename: ::std::mem::MaybeUninit<::windows_core::BSTR>, prunning: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    IsServiceRunning: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub CanStartStopService: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, servicename: ::std::mem::MaybeUninit<::windows_core::BSTR>, pcanstartstop: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    CanStartStopService: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub ShowBrowserBar: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrclsid: ::std::mem::MaybeUninit<::windows_core::BSTR>, bshow: super::super::System::Variant::VARIANT, psuccess: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    ShowBrowserBar: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellDispatch3(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellDispatch3 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NameSpace(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<Folder> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.NameSpace)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn BrowseForFolder<P0>(&self, hwnd: i32, title: P0, options: i32, rootfolder: super::super::System::Variant::VARIANT) -> ::windows_core::Result<Folder>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.BrowseForFolder)(::windows_core::Interface::as_raw(self), hwnd, title.into_param().abi(), options, ::core::mem::transmute(rootfolder), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Windows(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.Windows)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Open(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.Open)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Explore(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.Explore)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir)).ok()
    }
    pub unsafe fn MinimizeAll(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.MinimizeAll)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn UndoMinimizeALL(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.UndoMinimizeALL)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FileRun(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.FileRun)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn CascadeWindows(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.CascadeWindows)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TileVertically(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.TileVertically)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TileHorizontally(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.TileHorizontally)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ShutdownWindows(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.ShutdownWindows)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Suspend(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.Suspend)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn EjectPC(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.EjectPC)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetTime(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.SetTime)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TrayProperties(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.TrayProperties)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Help(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.Help)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FindFiles(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.FindFiles)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FindComputer(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.FindComputer)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RefreshMenu(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.RefreshMenu)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ControlPanelItem<P0>(&self, bstrdir: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.ControlPanelItem)(::windows_core::Interface::as_raw(self), bstrdir.into_param().abi()).ok()
    }
    pub unsafe fn IsRestricted<P0, P1>(&self, group: P0, restriction: P1) -> ::windows_core::Result<i32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.IsRestricted)(::windows_core::Interface::as_raw(self), group.into_param().abi(), restriction.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShellExecute<P0>(&self, file: P0, vargs: super::super::System::Variant::VARIANT, vdir: super::super::System::Variant::VARIANT, voperation: super::super::System::Variant::VARIANT, vshow: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.ShellExecute)(::windows_core::Interface::as_raw(self), file.into_param().abi(), ::core::mem::transmute(vargs), ::core::mem::transmute(vdir), ::core::mem::transmute(voperation), ::core::mem::transmute(vshow)).ok()
    }
    pub unsafe fn FindPrinter<P0, P1, P2>(&self, name: P0, location: P1, model: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.FindPrinter)(::windows_core::Interface::as_raw(self), name.into_param().abi(), location.into_param().abi(), model.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn GetSystemInformation<P0>(&self, name: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetSystemInformation)(::windows_core::Interface::as_raw(self), name.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ServiceStart<P0>(&self, servicename: P0, persistent: super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.ServiceStart)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), ::core::mem::transmute(persistent), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ServiceStop<P0>(&self, servicename: P0, persistent: super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.ServiceStop)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), ::core::mem::transmute(persistent), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn IsServiceRunning<P0>(&self, servicename: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.IsServiceRunning)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn CanStartStopService<P0>(&self, servicename: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.CanStartStopService)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShowBrowserBar<P0>(&self, bstrclsid: P0, bshow: super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.ShowBrowserBar)(::windows_core::Interface::as_raw(self), bstrclsid.into_param().abi(), ::core::mem::transmute(bshow), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddToRecent<P0>(&self, varfile: super::super::System::Variant::VARIANT, bstrcategory: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).AddToRecent)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(varfile), bstrcategory.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellDispatch3, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IShellDispatch, IShellDispatch2);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellDispatch3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellDispatch3 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellDispatch3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellDispatch3").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellDispatch3 {
    type Vtable = IShellDispatch3_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellDispatch3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellDispatch3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x177160ca_bb5a_411c_841d_bd38facdeaa0);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellDispatch3_Vtbl {
    pub base__: IShellDispatch2_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub AddToRecent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, varfile: super::super::System::Variant::VARIANT, bstrcategory: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    AddToRecent: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellDispatch4(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellDispatch4 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NameSpace(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<Folder> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.NameSpace)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn BrowseForFolder<P0>(&self, hwnd: i32, title: P0, options: i32, rootfolder: super::super::System::Variant::VARIANT) -> ::windows_core::Result<Folder>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.BrowseForFolder)(::windows_core::Interface::as_raw(self), hwnd, title.into_param().abi(), options, ::core::mem::transmute(rootfolder), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Windows(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.Windows)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Open(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.Open)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Explore(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.Explore)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir)).ok()
    }
    pub unsafe fn MinimizeAll(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.MinimizeAll)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn UndoMinimizeALL(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.UndoMinimizeALL)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FileRun(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.FileRun)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn CascadeWindows(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.CascadeWindows)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TileVertically(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.TileVertically)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TileHorizontally(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.TileHorizontally)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ShutdownWindows(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.ShutdownWindows)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Suspend(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.Suspend)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn EjectPC(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.EjectPC)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetTime(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.SetTime)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TrayProperties(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.TrayProperties)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Help(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.Help)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FindFiles(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.FindFiles)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FindComputer(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.FindComputer)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RefreshMenu(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.RefreshMenu)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ControlPanelItem<P0>(&self, bstrdir: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.ControlPanelItem)(::windows_core::Interface::as_raw(self), bstrdir.into_param().abi()).ok()
    }
    pub unsafe fn IsRestricted<P0, P1>(&self, group: P0, restriction: P1) -> ::windows_core::Result<i32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.IsRestricted)(::windows_core::Interface::as_raw(self), group.into_param().abi(), restriction.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShellExecute<P0>(&self, file: P0, vargs: super::super::System::Variant::VARIANT, vdir: super::super::System::Variant::VARIANT, voperation: super::super::System::Variant::VARIANT, vshow: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.ShellExecute)(::windows_core::Interface::as_raw(self), file.into_param().abi(), ::core::mem::transmute(vargs), ::core::mem::transmute(vdir), ::core::mem::transmute(voperation), ::core::mem::transmute(vshow)).ok()
    }
    pub unsafe fn FindPrinter<P0, P1, P2>(&self, name: P0, location: P1, model: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.FindPrinter)(::windows_core::Interface::as_raw(self), name.into_param().abi(), location.into_param().abi(), model.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn GetSystemInformation<P0>(&self, name: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetSystemInformation)(::windows_core::Interface::as_raw(self), name.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ServiceStart<P0>(&self, servicename: P0, persistent: super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.ServiceStart)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), ::core::mem::transmute(persistent), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ServiceStop<P0>(&self, servicename: P0, persistent: super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.ServiceStop)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), ::core::mem::transmute(persistent), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn IsServiceRunning<P0>(&self, servicename: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.IsServiceRunning)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn CanStartStopService<P0>(&self, servicename: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.CanStartStopService)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShowBrowserBar<P0>(&self, bstrclsid: P0, bshow: super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.ShowBrowserBar)(::windows_core::Interface::as_raw(self), bstrclsid.into_param().abi(), ::core::mem::transmute(bshow), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddToRecent<P0>(&self, varfile: super::super::System::Variant::VARIANT, bstrcategory: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.AddToRecent)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(varfile), bstrcategory.into_param().abi()).ok()
    }
    pub unsafe fn WindowsSecurity(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).WindowsSecurity)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ToggleDesktop(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ToggleDesktop)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ExplorerPolicy<P0>(&self, bstrpolicyname: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ExplorerPolicy)(::windows_core::Interface::as_raw(self), bstrpolicyname.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSetting(&self, lsetting: i32) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSetting)(::windows_core::Interface::as_raw(self), lsetting, &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellDispatch4, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IShellDispatch, IShellDispatch2, IShellDispatch3);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellDispatch4 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellDispatch4 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellDispatch4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellDispatch4").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellDispatch4 {
    type Vtable = IShellDispatch4_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellDispatch4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellDispatch4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xefd84b2d_4bcf_4298_be25_eb542a59fbda);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellDispatch4_Vtbl {
    pub base__: IShellDispatch3_Vtbl,
    pub WindowsSecurity: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub ToggleDesktop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub ExplorerPolicy: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrpolicyname: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvalue: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    ExplorerPolicy: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetSetting: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lsetting: i32, presult: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetSetting: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellDispatch5(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellDispatch5 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NameSpace(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<Folder> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.NameSpace)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn BrowseForFolder<P0>(&self, hwnd: i32, title: P0, options: i32, rootfolder: super::super::System::Variant::VARIANT) -> ::windows_core::Result<Folder>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.BrowseForFolder)(::windows_core::Interface::as_raw(self), hwnd, title.into_param().abi(), options, ::core::mem::transmute(rootfolder), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Windows(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.Windows)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Open(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.Open)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Explore(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.Explore)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir)).ok()
    }
    pub unsafe fn MinimizeAll(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.MinimizeAll)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn UndoMinimizeALL(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.UndoMinimizeALL)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FileRun(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.FileRun)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn CascadeWindows(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.CascadeWindows)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TileVertically(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.TileVertically)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TileHorizontally(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.TileHorizontally)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ShutdownWindows(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.ShutdownWindows)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Suspend(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.Suspend)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn EjectPC(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.EjectPC)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetTime(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.SetTime)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TrayProperties(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.TrayProperties)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Help(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.Help)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FindFiles(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.FindFiles)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FindComputer(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.FindComputer)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RefreshMenu(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.RefreshMenu)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ControlPanelItem<P0>(&self, bstrdir: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.ControlPanelItem)(::windows_core::Interface::as_raw(self), bstrdir.into_param().abi()).ok()
    }
    pub unsafe fn IsRestricted<P0, P1>(&self, group: P0, restriction: P1) -> ::windows_core::Result<i32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.IsRestricted)(::windows_core::Interface::as_raw(self), group.into_param().abi(), restriction.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShellExecute<P0>(&self, file: P0, vargs: super::super::System::Variant::VARIANT, vdir: super::super::System::Variant::VARIANT, voperation: super::super::System::Variant::VARIANT, vshow: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.ShellExecute)(::windows_core::Interface::as_raw(self), file.into_param().abi(), ::core::mem::transmute(vargs), ::core::mem::transmute(vdir), ::core::mem::transmute(voperation), ::core::mem::transmute(vshow)).ok()
    }
    pub unsafe fn FindPrinter<P0, P1, P2>(&self, name: P0, location: P1, model: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.FindPrinter)(::windows_core::Interface::as_raw(self), name.into_param().abi(), location.into_param().abi(), model.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn GetSystemInformation<P0>(&self, name: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.GetSystemInformation)(::windows_core::Interface::as_raw(self), name.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ServiceStart<P0>(&self, servicename: P0, persistent: super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.ServiceStart)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), ::core::mem::transmute(persistent), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ServiceStop<P0>(&self, servicename: P0, persistent: super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.ServiceStop)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), ::core::mem::transmute(persistent), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn IsServiceRunning<P0>(&self, servicename: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.IsServiceRunning)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn CanStartStopService<P0>(&self, servicename: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.CanStartStopService)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShowBrowserBar<P0>(&self, bstrclsid: P0, bshow: super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.ShowBrowserBar)(::windows_core::Interface::as_raw(self), bstrclsid.into_param().abi(), ::core::mem::transmute(bshow), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddToRecent<P0>(&self, varfile: super::super::System::Variant::VARIANT, bstrcategory: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.AddToRecent)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(varfile), bstrcategory.into_param().abi()).ok()
    }
    pub unsafe fn WindowsSecurity(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.WindowsSecurity)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ToggleDesktop(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.ToggleDesktop)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ExplorerPolicy<P0>(&self, bstrpolicyname: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.ExplorerPolicy)(::windows_core::Interface::as_raw(self), bstrpolicyname.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSetting(&self, lsetting: i32) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetSetting)(::windows_core::Interface::as_raw(self), lsetting, &mut result__).from_abi(result__)
    }
    pub unsafe fn WindowSwitcher(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).WindowSwitcher)(::windows_core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellDispatch5, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IShellDispatch, IShellDispatch2, IShellDispatch3, IShellDispatch4);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellDispatch5 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellDispatch5 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellDispatch5 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellDispatch5").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellDispatch5 {
    type Vtable = IShellDispatch5_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellDispatch5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellDispatch5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x866738b9_6cf2_4de8_8767_f794ebe74f4e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellDispatch5_Vtbl {
    pub base__: IShellDispatch4_Vtbl,
    pub WindowSwitcher: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellDispatch6(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellDispatch6 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NameSpace(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<Folder> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.NameSpace)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn BrowseForFolder<P0>(&self, hwnd: i32, title: P0, options: i32, rootfolder: super::super::System::Variant::VARIANT) -> ::windows_core::Result<Folder>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.BrowseForFolder)(::windows_core::Interface::as_raw(self), hwnd, title.into_param().abi(), options, ::core::mem::transmute(rootfolder), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Windows(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.Windows)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Open(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.Open)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Explore(&self, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.Explore)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vdir)).ok()
    }
    pub unsafe fn MinimizeAll(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.MinimizeAll)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn UndoMinimizeALL(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.UndoMinimizeALL)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FileRun(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.FileRun)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn CascadeWindows(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.CascadeWindows)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TileVertically(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.TileVertically)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TileHorizontally(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.TileHorizontally)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ShutdownWindows(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.ShutdownWindows)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Suspend(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.Suspend)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn EjectPC(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.EjectPC)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SetTime(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.SetTime)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn TrayProperties(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.TrayProperties)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Help(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.Help)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FindFiles(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.FindFiles)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn FindComputer(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.FindComputer)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RefreshMenu(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.RefreshMenu)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ControlPanelItem<P0>(&self, bstrdir: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.ControlPanelItem)(::windows_core::Interface::as_raw(self), bstrdir.into_param().abi()).ok()
    }
    pub unsafe fn IsRestricted<P0, P1>(&self, group: P0, restriction: P1) -> ::windows_core::Result<i32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.IsRestricted)(::windows_core::Interface::as_raw(self), group.into_param().abi(), restriction.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShellExecute<P0>(&self, file: P0, vargs: super::super::System::Variant::VARIANT, vdir: super::super::System::Variant::VARIANT, voperation: super::super::System::Variant::VARIANT, vshow: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.ShellExecute)(::windows_core::Interface::as_raw(self), file.into_param().abi(), ::core::mem::transmute(vargs), ::core::mem::transmute(vdir), ::core::mem::transmute(voperation), ::core::mem::transmute(vshow)).ok()
    }
    pub unsafe fn FindPrinter<P0, P1, P2>(&self, name: P0, location: P1, model: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.FindPrinter)(::windows_core::Interface::as_raw(self), name.into_param().abi(), location.into_param().abi(), model.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn GetSystemInformation<P0>(&self, name: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.GetSystemInformation)(::windows_core::Interface::as_raw(self), name.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ServiceStart<P0>(&self, servicename: P0, persistent: super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.ServiceStart)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), ::core::mem::transmute(persistent), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ServiceStop<P0>(&self, servicename: P0, persistent: super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.ServiceStop)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), ::core::mem::transmute(persistent), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn IsServiceRunning<P0>(&self, servicename: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.IsServiceRunning)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn CanStartStopService<P0>(&self, servicename: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.CanStartStopService)(::windows_core::Interface::as_raw(self), servicename.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShowBrowserBar<P0>(&self, bstrclsid: P0, bshow: super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.ShowBrowserBar)(::windows_core::Interface::as_raw(self), bstrclsid.into_param().abi(), ::core::mem::transmute(bshow), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddToRecent<P0>(&self, varfile: super::super::System::Variant::VARIANT, bstrcategory: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.AddToRecent)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(varfile), bstrcategory.into_param().abi()).ok()
    }
    pub unsafe fn WindowsSecurity(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.WindowsSecurity)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ToggleDesktop(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.ToggleDesktop)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ExplorerPolicy<P0>(&self, bstrpolicyname: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.ExplorerPolicy)(::windows_core::Interface::as_raw(self), bstrpolicyname.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSetting(&self, lsetting: i32) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetSetting)(::windows_core::Interface::as_raw(self), lsetting, &mut result__).from_abi(result__)
    }
    pub unsafe fn WindowSwitcher(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.WindowSwitcher)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SearchCommand(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SearchCommand)(::windows_core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellDispatch6, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IShellDispatch, IShellDispatch2, IShellDispatch3, IShellDispatch4, IShellDispatch5);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellDispatch6 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellDispatch6 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellDispatch6 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellDispatch6").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellDispatch6 {
    type Vtable = IShellDispatch6_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellDispatch6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellDispatch6 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x286e6f1b_7113_4355_9562_96b7e9d64c54);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellDispatch6_Vtbl {
    pub base__: IShellDispatch5_Vtbl,
    pub SearchCommand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellExtInit(::windows_core::IUnknown);
impl IShellExtInit {
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_System_Registry\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn Initialize<P0, P1>(&self, pidlfolder: ::core::option::Option<*const Common::ITEMIDLIST>, pdtobj: P0, hkeyprogid: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
        P1: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pidlfolder.unwrap_or(::std::ptr::null())), pdtobj.into_param().abi(), hkeyprogid.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellExtInit, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellExtInit {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellExtInit {}
impl ::core::fmt::Debug for IShellExtInit {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellExtInit").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellExtInit {
    type Vtable = IShellExtInit_Vtbl;
}
impl ::core::clone::Clone for IShellExtInit {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellExtInit {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214e8_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellExtInit_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common"))]
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST, pdtobj: *mut ::core::ffi::c_void, hkeyprogid: super::super::System::Registry::HKEY) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_System_Com", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common")))]
    Initialize: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellFavoritesNameSpace(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellFavoritesNameSpace {
    pub unsafe fn MoveSelectionUp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).MoveSelectionUp)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn MoveSelectionDown(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).MoveSelectionDown)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ResetSort(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ResetSort)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn NewFolder(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).NewFolder)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Synchronize(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Synchronize)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Import(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Import)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Export(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Export)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn InvokeContextMenuCommand<P0>(&self, strcommand: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).InvokeContextMenuCommand)(::windows_core::Interface::as_raw(self), strcommand.into_param().abi()).ok()
    }
    pub unsafe fn MoveSelectionTo(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).MoveSelectionTo)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SubscriptionsEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).SubscriptionsEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CreateSubscriptionForSelection(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).CreateSubscriptionForSelection)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn DeleteSubscriptionForSelection(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).DeleteSubscriptionForSelection)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetRoot<P0>(&self, bstrfullpath: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).SetRoot)(::windows_core::Interface::as_raw(self), bstrfullpath.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellFavoritesNameSpace, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellFavoritesNameSpace {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellFavoritesNameSpace {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellFavoritesNameSpace {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellFavoritesNameSpace").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellFavoritesNameSpace {
    type Vtable = IShellFavoritesNameSpace_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellFavoritesNameSpace {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellFavoritesNameSpace {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x55136804_b2de_11d1_b9f2_00a0c98bc547);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellFavoritesNameSpace_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
    pub MoveSelectionUp: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub MoveSelectionDown: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub ResetSort: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub NewFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Synchronize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Import: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Export: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub InvokeContextMenuCommand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, strcommand: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub MoveSelectionTo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SubscriptionsEnabled: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbool: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SubscriptionsEnabled: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub CreateSubscriptionForSelection: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbool: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    CreateSubscriptionForSelection: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub DeleteSubscriptionForSelection: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbool: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    DeleteSubscriptionForSelection: usize,
    pub SetRoot: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrfullpath: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellFolder(::windows_core::IUnknown);
impl IShellFolder {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn ParseDisplayName<P0, P1, P2>(&self, hwnd: P0, pbc: P1, pszdisplayname: P2, pcheaten: ::core::option::Option<*const u32>, ppidl: *mut *mut Common::ITEMIDLIST, pdwattributes: *mut u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).ParseDisplayName)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), pbc.into_param().abi(), pszdisplayname.into_param().abi(), ::core::mem::transmute(pcheaten.unwrap_or(::std::ptr::null())), ppidl, pdwattributes).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnumObjects<P0>(&self, hwnd: P0, grfflags: u32, ppenumidlist: *mut ::core::option::Option<IEnumIDList>) -> ::windows_core::HRESULT
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).EnumObjects)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), grfflags, ::core::mem::transmute(ppenumidlist))
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn BindToObject<P0, T>(&self, pidl: *const Common::ITEMIDLIST, pbc: P0) -> ::windows_core::Result<T>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).BindToObject)(::windows_core::Interface::as_raw(self), pidl, pbc.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn BindToStorage<P0, T>(&self, pidl: *const Common::ITEMIDLIST, pbc: P0) -> ::windows_core::Result<T>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).BindToStorage)(::windows_core::Interface::as_raw(self), pidl, pbc.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn CompareIDs<P0>(&self, lparam: P0, pidl1: *const Common::ITEMIDLIST, pidl2: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).CompareIDs)(::windows_core::Interface::as_raw(self), lparam.into_param().abi(), pidl1, pidl2).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CreateViewObject<P0, T>(&self, hwndowner: P0) -> ::windows_core::Result<T>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).CreateViewObject)(::windows_core::Interface::as_raw(self), hwndowner.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetAttributesOf(&self, apidl: &[*const Common::ITEMIDLIST], rgfinout: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetAttributesOf)(::windows_core::Interface::as_raw(self), apidl.len() as _, ::core::mem::transmute(apidl.as_ptr()), rgfinout).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn GetUIObjectOf<P0, T>(&self, hwndowner: P0, apidl: &[*const Common::ITEMIDLIST], rgfreserved: ::core::option::Option<*const u32>) -> ::windows_core::Result<T>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetUIObjectOf)(::windows_core::Interface::as_raw(self), hwndowner.into_param().abi(), apidl.len() as _, ::core::mem::transmute(apidl.as_ptr()), &<T as ::windows_core::ComInterface>::IID, ::core::mem::transmute(rgfreserved.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetDisplayNameOf(&self, pidl: *const Common::ITEMIDLIST, uflags: SHGDNF, pname: *mut Common::STRRET) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetDisplayNameOf)(::windows_core::Interface::as_raw(self), pidl, uflags, pname).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn SetNameOf<P0, P1>(&self, hwnd: P0, pidl: *const Common::ITEMIDLIST, pszname: P1, uflags: SHGDNF, ppidlout: ::core::option::Option<*mut *mut Common::ITEMIDLIST>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetNameOf)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), pidl, pszname.into_param().abi(), uflags, ::core::mem::transmute(ppidlout.unwrap_or(::std::ptr::null_mut()))).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellFolder, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellFolder {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellFolder {}
impl ::core::fmt::Debug for IShellFolder {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellFolder").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellFolder {
    type Vtable = IShellFolder_Vtbl;
}
impl ::core::clone::Clone for IShellFolder {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellFolder {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214e6_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellFolder_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
    pub ParseDisplayName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pbc: *mut ::core::ffi::c_void, pszdisplayname: ::windows_core::PCWSTR, pcheaten: *const u32, ppidl: *mut *mut Common::ITEMIDLIST, pdwattributes: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common")))]
    ParseDisplayName: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub EnumObjects: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, grfflags: u32, ppenumidlist: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    EnumObjects: usize,
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
    pub BindToObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pbc: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common")))]
    BindToObject: usize,
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
    pub BindToStorage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pbc: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common")))]
    BindToStorage: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub CompareIDs: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lparam: super::super::Foundation::LPARAM, pidl1: *const Common::ITEMIDLIST, pidl2: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common")))]
    CompareIDs: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub CreateViewObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    CreateViewObject: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetAttributesOf: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, cidl: u32, apidl: *const *const Common::ITEMIDLIST, rgfinout: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetAttributesOf: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub GetUIObjectOf: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND, cidl: u32, apidl: *const *const Common::ITEMIDLIST, riid: *const ::windows_core::GUID, rgfreserved: *const u32, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common")))]
    GetUIObjectOf: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetDisplayNameOf: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, uflags: SHGDNF, pname: *mut Common::STRRET) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetDisplayNameOf: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub SetNameOf: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pidl: *const Common::ITEMIDLIST, pszname: ::windows_core::PCWSTR, uflags: SHGDNF, ppidlout: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common")))]
    SetNameOf: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellFolder2(::windows_core::IUnknown);
impl IShellFolder2 {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn ParseDisplayName<P0, P1, P2>(&self, hwnd: P0, pbc: P1, pszdisplayname: P2, pcheaten: ::core::option::Option<*const u32>, ppidl: *mut *mut Common::ITEMIDLIST, pdwattributes: *mut u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
        P2: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.ParseDisplayName)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), pbc.into_param().abi(), pszdisplayname.into_param().abi(), ::core::mem::transmute(pcheaten.unwrap_or(::std::ptr::null())), ppidl, pdwattributes).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnumObjects<P0>(&self, hwnd: P0, grfflags: u32, ppenumidlist: *mut ::core::option::Option<IEnumIDList>) -> ::windows_core::HRESULT
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).base__.EnumObjects)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), grfflags, ::core::mem::transmute(ppenumidlist))
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn BindToObject<P0, T>(&self, pidl: *const Common::ITEMIDLIST, pbc: P0) -> ::windows_core::Result<T>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).base__.BindToObject)(::windows_core::Interface::as_raw(self), pidl, pbc.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn BindToStorage<P0, T>(&self, pidl: *const Common::ITEMIDLIST, pbc: P0) -> ::windows_core::Result<T>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).base__.BindToStorage)(::windows_core::Interface::as_raw(self), pidl, pbc.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn CompareIDs<P0>(&self, lparam: P0, pidl1: *const Common::ITEMIDLIST, pidl2: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).base__.CompareIDs)(::windows_core::Interface::as_raw(self), lparam.into_param().abi(), pidl1, pidl2).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CreateViewObject<P0, T>(&self, hwndowner: P0) -> ::windows_core::Result<T>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).base__.CreateViewObject)(::windows_core::Interface::as_raw(self), hwndowner.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetAttributesOf(&self, apidl: &[*const Common::ITEMIDLIST], rgfinout: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetAttributesOf)(::windows_core::Interface::as_raw(self), apidl.len() as _, ::core::mem::transmute(apidl.as_ptr()), rgfinout).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn GetUIObjectOf<P0, T>(&self, hwndowner: P0, apidl: &[*const Common::ITEMIDLIST], rgfreserved: ::core::option::Option<*const u32>) -> ::windows_core::Result<T>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).base__.GetUIObjectOf)(::windows_core::Interface::as_raw(self), hwndowner.into_param().abi(), apidl.len() as _, ::core::mem::transmute(apidl.as_ptr()), &<T as ::windows_core::ComInterface>::IID, ::core::mem::transmute(rgfreserved.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetDisplayNameOf(&self, pidl: *const Common::ITEMIDLIST, uflags: SHGDNF, pname: *mut Common::STRRET) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetDisplayNameOf)(::windows_core::Interface::as_raw(self), pidl, uflags, pname).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn SetNameOf<P0, P1>(&self, hwnd: P0, pidl: *const Common::ITEMIDLIST, pszname: P1, uflags: SHGDNF, ppidlout: ::core::option::Option<*mut *mut Common::ITEMIDLIST>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetNameOf)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), pidl, pszname.into_param().abi(), uflags, ::core::mem::transmute(ppidlout.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    pub unsafe fn GetDefaultSearchGUID(&self) -> ::windows_core::Result<::windows_core::GUID> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetDefaultSearchGUID)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn EnumSearches(&self) -> ::windows_core::Result<IEnumExtraSearch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).EnumSearches)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDefaultColumn(&self, dwres: u32, psort: *mut u32, pdisplay: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetDefaultColumn)(::windows_core::Interface::as_raw(self), dwres, psort, pdisplay).ok()
    }
    pub unsafe fn GetDefaultColumnState(&self, icolumn: u32) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetDefaultColumnState)(::windows_core::Interface::as_raw(self), icolumn, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub unsafe fn GetDetailsEx(&self, pidl: *const Common::ITEMIDLIST, pscid: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<super::super::System::Variant::VARIANT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetDetailsEx)(::windows_core::Interface::as_raw(self), pidl, pscid, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetDetailsOf(&self, pidl: *const Common::ITEMIDLIST, icolumn: u32, psd: *mut Common::SHELLDETAILS) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetDetailsOf)(::windows_core::Interface::as_raw(self), pidl, icolumn, psd).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn MapColumnToSCID(&self, icolumn: u32, pscid: *mut PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).MapColumnToSCID)(::windows_core::Interface::as_raw(self), icolumn, pscid).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellFolder2, ::windows_core::IUnknown, IShellFolder);
impl ::core::cmp::PartialEq for IShellFolder2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellFolder2 {}
impl ::core::fmt::Debug for IShellFolder2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellFolder2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellFolder2 {
    type Vtable = IShellFolder2_Vtbl;
}
impl ::core::clone::Clone for IShellFolder2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellFolder2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x93f2f68c_1d1b_11d3_a30e_00c04f79abd1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellFolder2_Vtbl {
    pub base__: IShellFolder_Vtbl,
    pub GetDefaultSearchGUID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pguid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT,
    pub EnumSearches: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetDefaultColumn: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwres: u32, psort: *mut u32, pdisplay: *mut u32) -> ::windows_core::HRESULT,
    pub GetDefaultColumnState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, icolumn: u32, pcsflags: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub GetDetailsEx: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pscid: *const PropertiesSystem::PROPERTYKEY, pv: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem")))]
    GetDetailsEx: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetDetailsOf: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, icolumn: u32, psd: *mut Common::SHELLDETAILS) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetDetailsOf: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub MapColumnToSCID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, icolumn: u32, pscid: *mut PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    MapColumnToSCID: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellFolderBand(::windows_core::IUnknown);
impl IShellFolderBand {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn InitializeSFB<P0>(&self, psf: P0, pidl: ::core::option::Option<*const Common::ITEMIDLIST>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellFolder>,
    {
        (::windows_core::Interface::vtable(self).InitializeSFB)(::windows_core::Interface::as_raw(self), psf.into_param().abi(), ::core::mem::transmute(pidl.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn SetBandInfoSFB(&self, pbi: *const BANDINFOSFB) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetBandInfoSFB)(::windows_core::Interface::as_raw(self), pbi).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn GetBandInfoSFB(&self, pbi: *mut BANDINFOSFB) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetBandInfoSFB)(::windows_core::Interface::as_raw(self), pbi).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellFolderBand, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellFolderBand {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellFolderBand {}
impl ::core::fmt::Debug for IShellFolderBand {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellFolderBand").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellFolderBand {
    type Vtable = IShellFolderBand_Vtbl;
}
impl ::core::clone::Clone for IShellFolderBand {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellFolderBand {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x7fe80cc8_c247_11d0_b93a_00a0c90312e1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellFolderBand_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub InitializeSFB: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psf: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    InitializeSFB: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub SetBandInfoSFB: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbi: *const BANDINFOSFB) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common")))]
    SetBandInfoSFB: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub GetBandInfoSFB: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbi: *mut BANDINFOSFB) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common")))]
    GetBandInfoSFB: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellFolderView(::windows_core::IUnknown);
impl IShellFolderView {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Rearrange<P0>(&self, lparamsort: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).Rearrange)(::windows_core::Interface::as_raw(self), lparamsort.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetArrangeParam(&self) -> ::windows_core::Result<super::super::Foundation::LPARAM> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetArrangeParam)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ArrangeGrid(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ArrangeGrid)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn AutoArrange(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).AutoArrange)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetAutoArrange(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetAutoArrange)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn AddObject(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).AddObject)(::windows_core::Interface::as_raw(self), pidl, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetObject(&self, ppidl: *mut *mut Common::ITEMIDLIST, uitem: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetObject)(::windows_core::Interface::as_raw(self), ppidl, uitem).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn RemoveObject(&self, pidl: ::core::option::Option<*const Common::ITEMIDLIST>) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).RemoveObject)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pidl.unwrap_or(::std::ptr::null())), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetObjectCount(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetObjectCount)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetObjectCount(&self, ucount: u32, dwflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetObjectCount)(::windows_core::Interface::as_raw(self), ucount, dwflags).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn UpdateObject(&self, pidlold: *const Common::ITEMIDLIST, pidlnew: *const Common::ITEMIDLIST) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).UpdateObject)(::windows_core::Interface::as_raw(self), pidlold, pidlnew, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn RefreshObject(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).RefreshObject)(::windows_core::Interface::as_raw(self), pidl, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetRedraw<P0>(&self, bredraw: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetRedraw)(::windows_core::Interface::as_raw(self), bredraw.into_param().abi()).ok()
    }
    pub unsafe fn GetSelectedCount(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSelectedCount)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetSelectedObjects(&self, pppidl: *mut *mut *mut Common::ITEMIDLIST, puitems: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetSelectedObjects)(::windows_core::Interface::as_raw(self), pppidl, puitems).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn IsDropOnSource<P0>(&self, pdroptarget: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Ole::IDropTarget>,
    {
        (::windows_core::Interface::vtable(self).IsDropOnSource)(::windows_core::Interface::as_raw(self), pdroptarget.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetDragPoint(&self) -> ::windows_core::Result<super::super::Foundation::POINT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetDragPoint)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetDropPoint(&self) -> ::windows_core::Result<super::super::Foundation::POINT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetDropPoint)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn MoveIcons<P0>(&self, pdataobject: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    {
        (::windows_core::Interface::vtable(self).MoveIcons)(::windows_core::Interface::as_raw(self), pdataobject.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn SetItemPos(&self, pidl: *const Common::ITEMIDLIST, ppt: *const super::super::Foundation::POINT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetItemPos)(::windows_core::Interface::as_raw(self), pidl, ppt).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Ole\"`*"]
    #[cfg(feature = "Win32_System_Ole")]
    pub unsafe fn IsBkDropTarget<P0>(&self, pdroptarget: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Ole::IDropTarget>,
    {
        (::windows_core::Interface::vtable(self).IsBkDropTarget)(::windows_core::Interface::as_raw(self), pdroptarget.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetClipboard<P0>(&self, bmove: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetClipboard)(::windows_core::Interface::as_raw(self), bmove.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetPoints<P0>(&self, pdataobject: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IDataObject>,
    {
        (::windows_core::Interface::vtable(self).SetPoints)(::windows_core::Interface::as_raw(self), pdataobject.into_param().abi()).ok()
    }
    pub unsafe fn GetItemSpacing(&self) -> ::windows_core::Result<ITEMSPACING> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetItemSpacing)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCallback<P0>(&self, pnewcb: P0) -> ::windows_core::Result<IShellFolderViewCB>
    where
        P0: ::windows_core::IntoParam<IShellFolderViewCB>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).SetCallback)(::windows_core::Interface::as_raw(self), pnewcb.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn Select(&self, dwflags: SFVS_SELECT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Select)(::windows_core::Interface::as_raw(self), dwflags.0 as _).ok()
    }
    pub unsafe fn QuerySupport(&self, pdwsupport: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).QuerySupport)(::windows_core::Interface::as_raw(self), pdwsupport).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetAutomationObject<P0>(&self, pdisp: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IDispatch>,
    {
        (::windows_core::Interface::vtable(self).SetAutomationObject)(::windows_core::Interface::as_raw(self), pdisp.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellFolderView, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellFolderView {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellFolderView {}
impl ::core::fmt::Debug for IShellFolderView {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellFolderView").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellFolderView {
    type Vtable = IShellFolderView_Vtbl;
}
impl ::core::clone::Clone for IShellFolderView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellFolderView {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x37a378c0_f82d_11ce_ae65_08002b2e1262);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellFolderView_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub Rearrange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lparamsort: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Rearrange: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetArrangeParam: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plparamsort: *mut super::super::Foundation::LPARAM) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetArrangeParam: usize,
    pub ArrangeGrid: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub AutoArrange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetAutoArrange: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub AddObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, puitem: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    AddObject: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST, uitem: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetObject: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub RemoveObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, puitem: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    RemoveObject: usize,
    pub GetObjectCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pucount: *mut u32) -> ::windows_core::HRESULT,
    pub SetObjectCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ucount: u32, dwflags: u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub UpdateObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidlold: *const Common::ITEMIDLIST, pidlnew: *const Common::ITEMIDLIST, puitem: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    UpdateObject: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub RefreshObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, puitem: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    RefreshObject: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetRedraw: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bredraw: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetRedraw: usize,
    pub GetSelectedCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, puselected: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetSelectedObjects: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pppidl: *mut *mut *mut Common::ITEMIDLIST, puitems: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetSelectedObjects: usize,
    #[cfg(feature = "Win32_System_Ole")]
    pub IsDropOnSource: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdroptarget: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    IsDropOnSource: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetDragPoint: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppt: *mut super::super::Foundation::POINT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetDragPoint: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetDropPoint: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppt: *mut super::super::Foundation::POINT) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetDropPoint: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub MoveIcons: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdataobject: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    MoveIcons: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
    pub SetItemPos: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, ppt: *const super::super::Foundation::POINT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common")))]
    SetItemPos: usize,
    #[cfg(feature = "Win32_System_Ole")]
    pub IsBkDropTarget: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdroptarget: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Ole"))]
    IsBkDropTarget: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetClipboard: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bmove: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetClipboard: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetPoints: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdataobject: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetPoints: usize,
    pub GetItemSpacing: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pspacing: *mut ITEMSPACING) -> ::windows_core::HRESULT,
    pub SetCallback: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pnewcb: *mut ::core::ffi::c_void, ppoldcb: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Select: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT,
    pub QuerySupport: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwsupport: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub SetAutomationObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdisp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetAutomationObject: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellFolderViewCB(::windows_core::IUnknown);
impl IShellFolderViewCB {
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn MessageSFVCB<P0, P1>(&self, umsg: SFVM_MESSAGE_ID, wparam: P0, lparam: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).MessageSFVCB)(::windows_core::Interface::as_raw(self), umsg.0 as _, wparam.into_param().abi(), lparam.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellFolderViewCB, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellFolderViewCB {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellFolderViewCB {}
impl ::core::fmt::Debug for IShellFolderViewCB {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellFolderViewCB").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellFolderViewCB {
    type Vtable = IShellFolderViewCB_Vtbl;
}
impl ::core::clone::Clone for IShellFolderViewCB {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellFolderViewCB {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x2047e320_f2a9_11ce_ae65_08002b2e1262);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellFolderViewCB_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub MessageSFVCB: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    MessageSFVCB: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellFolderViewDual(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellFolderViewDual {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Folder(&self) -> ::windows_core::Result<Folder> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Folder)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SelectedItems(&self) -> ::windows_core::Result<FolderItems> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).SelectedItems)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn FocusedItem(&self) -> ::windows_core::Result<FolderItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).FocusedItem)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn SelectItem(&self, pvfi: *const super::super::System::Variant::VARIANT, dwflags: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SelectItem)(::windows_core::Interface::as_raw(self), pvfi, dwflags).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn PopupItemMenu<P0>(&self, pfi: P0, vx: super::super::System::Variant::VARIANT, vy: super::super::System::Variant::VARIANT) -> ::windows_core::Result<::windows_core::BSTR>
    where
        P0: ::windows_core::IntoParam<FolderItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).PopupItemMenu)(::windows_core::Interface::as_raw(self), pfi.into_param().abi(), ::core::mem::transmute(vx), ::core::mem::transmute(vy), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Script(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Script)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ViewOptions(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ViewOptions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellFolderViewDual, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellFolderViewDual {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellFolderViewDual {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellFolderViewDual {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellFolderViewDual").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellFolderViewDual {
    type Vtable = IShellFolderViewDual_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellFolderViewDual {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellFolderViewDual {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xe7a1af80_4d96_11cf_960c_0080c7f4ee85);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellFolderViewDual_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Application: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Application: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Parent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Parent: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Folder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Folder: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SelectedItems: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SelectedItems: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub FocusedItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    FocusedItem: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub SelectItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pvfi: *const super::super::System::Variant::VARIANT, dwflags: i32) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    SelectItem: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub PopupItemMenu: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfi: *mut ::core::ffi::c_void, vx: super::super::System::Variant::VARIANT, vy: super::super::System::Variant::VARIANT, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    PopupItemMenu: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Script: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppdisp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Script: usize,
    pub ViewOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plviewoptions: *mut i32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellFolderViewDual2(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellFolderViewDual2 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Folder(&self) -> ::windows_core::Result<Folder> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Folder)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SelectedItems(&self) -> ::windows_core::Result<FolderItems> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.SelectedItems)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn FocusedItem(&self) -> ::windows_core::Result<FolderItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.FocusedItem)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn SelectItem(&self, pvfi: *const super::super::System::Variant::VARIANT, dwflags: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SelectItem)(::windows_core::Interface::as_raw(self), pvfi, dwflags).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn PopupItemMenu<P0>(&self, pfi: P0, vx: super::super::System::Variant::VARIANT, vy: super::super::System::Variant::VARIANT) -> ::windows_core::Result<::windows_core::BSTR>
    where
        P0: ::windows_core::IntoParam<FolderItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.PopupItemMenu)(::windows_core::Interface::as_raw(self), pfi.into_param().abi(), ::core::mem::transmute(vx), ::core::mem::transmute(vy), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Script(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Script)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ViewOptions(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.ViewOptions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentViewMode(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).CurrentViewMode)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentViewMode(&self, viewmode: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetCurrentViewMode)(::windows_core::Interface::as_raw(self), viewmode).ok()
    }
    pub unsafe fn SelectItemRelative(&self, irelative: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SelectItemRelative)(::windows_core::Interface::as_raw(self), irelative).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellFolderViewDual2, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IShellFolderViewDual);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellFolderViewDual2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellFolderViewDual2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellFolderViewDual2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellFolderViewDual2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellFolderViewDual2 {
    type Vtable = IShellFolderViewDual2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellFolderViewDual2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellFolderViewDual2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x31c147b6_0ade_4a3c_b514_ddf932ef6d17);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellFolderViewDual2_Vtbl {
    pub base__: IShellFolderViewDual_Vtbl,
    pub CurrentViewMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pviewmode: *mut u32) -> ::windows_core::HRESULT,
    pub SetCurrentViewMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, viewmode: u32) -> ::windows_core::HRESULT,
    pub SelectItemRelative: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, irelative: i32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellFolderViewDual3(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellFolderViewDual3 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Application(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.Application)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Parent(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.Parent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Folder(&self) -> ::windows_core::Result<Folder> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.Folder)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SelectedItems(&self) -> ::windows_core::Result<FolderItems> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.SelectedItems)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn FocusedItem(&self) -> ::windows_core::Result<FolderItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.FocusedItem)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn SelectItem(&self, pvfi: *const super::super::System::Variant::VARIANT, dwflags: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.SelectItem)(::windows_core::Interface::as_raw(self), pvfi, dwflags).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn PopupItemMenu<P0>(&self, pfi: P0, vx: super::super::System::Variant::VARIANT, vy: super::super::System::Variant::VARIANT) -> ::windows_core::Result<::windows_core::BSTR>
    where
        P0: ::windows_core::IntoParam<FolderItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.PopupItemMenu)(::windows_core::Interface::as_raw(self), pfi.into_param().abi(), ::core::mem::transmute(vx), ::core::mem::transmute(vy), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Script(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.Script)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn ViewOptions(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.ViewOptions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CurrentViewMode(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.CurrentViewMode)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetCurrentViewMode(&self, viewmode: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetCurrentViewMode)(::windows_core::Interface::as_raw(self), viewmode).ok()
    }
    pub unsafe fn SelectItemRelative(&self, irelative: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SelectItemRelative)(::windows_core::Interface::as_raw(self), irelative).ok()
    }
    pub unsafe fn GroupBy(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GroupBy)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetGroupBy<P0>(&self, bstrgroupby: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).SetGroupBy)(::windows_core::Interface::as_raw(self), bstrgroupby.into_param().abi()).ok()
    }
    pub unsafe fn FolderFlags(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).FolderFlags)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFolderFlags(&self, dwflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFolderFlags)(::windows_core::Interface::as_raw(self), dwflags).ok()
    }
    pub unsafe fn SortColumns(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).SortColumns)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetSortColumns<P0>(&self, bstrsortcolumns: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).SetSortColumns)(::windows_core::Interface::as_raw(self), bstrsortcolumns.into_param().abi()).ok()
    }
    pub unsafe fn SetIconSize(&self, iiconsize: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetIconSize)(::windows_core::Interface::as_raw(self), iiconsize).ok()
    }
    pub unsafe fn IconSize(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IconSize)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn FilterView<P0>(&self, bstrfiltertext: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).FilterView)(::windows_core::Interface::as_raw(self), bstrfiltertext.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellFolderViewDual3, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IShellFolderViewDual, IShellFolderViewDual2);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellFolderViewDual3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellFolderViewDual3 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellFolderViewDual3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellFolderViewDual3").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellFolderViewDual3 {
    type Vtable = IShellFolderViewDual3_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellFolderViewDual3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellFolderViewDual3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x29ec8e6c_46d3_411f_baaa_611a6c9cac66);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellFolderViewDual3_Vtbl {
    pub base__: IShellFolderViewDual2_Vtbl,
    pub GroupBy: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrgroupby: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub SetGroupBy: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrgroupby: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub FolderFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT,
    pub SetFolderFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT,
    pub SortColumns: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrsortcolumns: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub SetSortColumns: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrsortcolumns: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub SetIconSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, iiconsize: i32) -> ::windows_core::HRESULT,
    pub IconSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, piiconsize: *mut i32) -> ::windows_core::HRESULT,
    pub FilterView: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrfiltertext: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellIcon(::windows_core::IUnknown);
impl IShellIcon {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetIconOf(&self, pidl: *const Common::ITEMIDLIST, flags: u32) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetIconOf)(::windows_core::Interface::as_raw(self), pidl, flags, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IShellIcon, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellIcon {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellIcon {}
impl ::core::fmt::Debug for IShellIcon {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellIcon").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellIcon {
    type Vtable = IShellIcon_Vtbl;
}
impl ::core::clone::Clone for IShellIcon {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellIcon {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214e5_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellIcon_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetIconOf: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, flags: u32, piconindex: *mut i32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetIconOf: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellIconOverlay(::windows_core::IUnknown);
impl IShellIconOverlay {
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetOverlayIndex(&self, pidl: *const Common::ITEMIDLIST, pindex: *mut i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetOverlayIndex)(::windows_core::Interface::as_raw(self), pidl, pindex).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetOverlayIconIndex(&self, pidl: *const Common::ITEMIDLIST, piconindex: *mut i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetOverlayIconIndex)(::windows_core::Interface::as_raw(self), pidl, piconindex).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellIconOverlay, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellIconOverlay {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellIconOverlay {}
impl ::core::fmt::Debug for IShellIconOverlay {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellIconOverlay").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellIconOverlay {
    type Vtable = IShellIconOverlay_Vtbl;
}
impl ::core::clone::Clone for IShellIconOverlay {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellIconOverlay {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x7d688a70_c613_11d0_999b_00c04fd655e1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellIconOverlay_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetOverlayIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pindex: *mut i32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetOverlayIndex: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetOverlayIconIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, piconindex: *mut i32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetOverlayIconIndex: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellIconOverlayIdentifier(::windows_core::IUnknown);
impl IShellIconOverlayIdentifier {
    pub unsafe fn IsMemberOf<P0>(&self, pwszpath: P0, dwattrib: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).IsMemberOf)(::windows_core::Interface::as_raw(self), pwszpath.into_param().abi(), dwattrib).ok()
    }
    pub unsafe fn GetOverlayInfo(&self, pwsziconfile: &mut [u16], pindex: *mut i32, pdwflags: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetOverlayInfo)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pwsziconfile.as_ptr()), pwsziconfile.len() as _, pindex, pdwflags).ok()
    }
    pub unsafe fn GetPriority(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetPriority)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IShellIconOverlayIdentifier, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellIconOverlayIdentifier {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellIconOverlayIdentifier {}
impl ::core::fmt::Debug for IShellIconOverlayIdentifier {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellIconOverlayIdentifier").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellIconOverlayIdentifier {
    type Vtable = IShellIconOverlayIdentifier_Vtbl;
}
impl ::core::clone::Clone for IShellIconOverlayIdentifier {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellIconOverlayIdentifier {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x0c6c4200_c589_11d0_999a_00c04fd655e1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellIconOverlayIdentifier_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub IsMemberOf: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwszpath: ::windows_core::PCWSTR, dwattrib: u32) -> ::windows_core::HRESULT,
    pub GetOverlayInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwsziconfile: ::windows_core::PWSTR, cchmax: i32, pindex: *mut i32, pdwflags: *mut u32) -> ::windows_core::HRESULT,
    pub GetPriority: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppriority: *mut i32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellIconOverlayManager(::windows_core::IUnknown);
impl IShellIconOverlayManager {
    pub unsafe fn GetFileOverlayInfo<P0>(&self, pwszpath: P0, dwattrib: u32, pindex: *mut i32, dwflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).GetFileOverlayInfo)(::windows_core::Interface::as_raw(self), pwszpath.into_param().abi(), dwattrib, pindex, dwflags).ok()
    }
    pub unsafe fn GetReservedOverlayInfo<P0>(&self, pwszpath: P0, dwattrib: u32, pindex: *mut i32, dwflags: u32, ireservedid: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).GetReservedOverlayInfo)(::windows_core::Interface::as_raw(self), pwszpath.into_param().abi(), dwattrib, pindex, dwflags, ireservedid).ok()
    }
    pub unsafe fn RefreshOverlayImages(&self, dwflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RefreshOverlayImages)(::windows_core::Interface::as_raw(self), dwflags).ok()
    }
    pub unsafe fn LoadNonloadedOverlayIdentifiers(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).LoadNonloadedOverlayIdentifiers)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn OverlayIndexFromImageIndex<P0>(&self, iimage: i32, piindex: *mut i32, fadd: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).OverlayIndexFromImageIndex)(::windows_core::Interface::as_raw(self), iimage, piindex, fadd.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellIconOverlayManager, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellIconOverlayManager {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellIconOverlayManager {}
impl ::core::fmt::Debug for IShellIconOverlayManager {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellIconOverlayManager").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellIconOverlayManager {
    type Vtable = IShellIconOverlayManager_Vtbl;
}
impl ::core::clone::Clone for IShellIconOverlayManager {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellIconOverlayManager {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xf10b5e34_dd3b_42a7_aa7d_2f4ec54bb09b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellIconOverlayManager_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetFileOverlayInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwszpath: ::windows_core::PCWSTR, dwattrib: u32, pindex: *mut i32, dwflags: u32) -> ::windows_core::HRESULT,
    pub GetReservedOverlayInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwszpath: ::windows_core::PCWSTR, dwattrib: u32, pindex: *mut i32, dwflags: u32, ireservedid: i32) -> ::windows_core::HRESULT,
    pub RefreshOverlayImages: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT,
    pub LoadNonloadedOverlayIdentifiers: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub OverlayIndexFromImageIndex: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, iimage: i32, piindex: *mut i32, fadd: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    OverlayIndexFromImageIndex: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellImageData(::windows_core::IUnknown);
impl IShellImageData {
    pub unsafe fn Decode(&self, dwflags: u32, cxdesired: u32, cydesired: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Decode)(::windows_core::Interface::as_raw(self), dwflags, cxdesired, cydesired).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn Draw<P0>(&self, hdc: P0, prcdest: *mut super::super::Foundation::RECT, prcsrc: *mut super::super::Foundation::RECT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Graphics::Gdi::HDC>,
    {
        (::windows_core::Interface::vtable(self).Draw)(::windows_core::Interface::as_raw(self), hdc.into_param().abi(), prcdest, prcsrc).ok()
    }
    pub unsafe fn NextFrame(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).NextFrame)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn NextPage(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).NextPage)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn PrevPage(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).PrevPage)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn IsTransparent(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).IsTransparent)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn IsAnimated(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).IsAnimated)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn IsVector(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).IsVector)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn IsMultipage(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).IsMultipage)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn IsEditable(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).IsEditable)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn IsPrintable(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).IsPrintable)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn IsDecoded(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).IsDecoded)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn GetCurrentPage(&self, pnpage: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetCurrentPage)(::windows_core::Interface::as_raw(self), pnpage).ok()
    }
    pub unsafe fn GetPageCount(&self, pcpages: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetPageCount)(::windows_core::Interface::as_raw(self), pcpages).ok()
    }
    pub unsafe fn SelectPage(&self, ipage: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SelectPage)(::windows_core::Interface::as_raw(self), ipage).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetSize(&self, psize: *mut super::super::Foundation::SIZE) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetSize)(::windows_core::Interface::as_raw(self), psize).ok()
    }
    pub unsafe fn GetRawDataFormat(&self, pdataformat: *mut ::windows_core::GUID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetRawDataFormat)(::windows_core::Interface::as_raw(self), pdataformat).ok()
    }
    pub unsafe fn GetPixelFormat(&self, pformat: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetPixelFormat)(::windows_core::Interface::as_raw(self), pformat).ok()
    }
    pub unsafe fn GetDelay(&self, pdwdelay: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetDelay)(::windows_core::Interface::as_raw(self), pdwdelay).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com_StructuredStorage\"`*"]
    #[cfg(feature = "Win32_System_Com_StructuredStorage")]
    pub unsafe fn GetProperties(&self, dwmode: u32) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::IPropertySetStorage> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetProperties)(::windows_core::Interface::as_raw(self), dwmode, &mut result__).from_abi(result__)
    }
    pub unsafe fn Rotate(&self, dwangle: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Rotate)(::windows_core::Interface::as_raw(self), dwangle).ok()
    }
    pub unsafe fn Scale(&self, cx: u32, cy: u32, hints: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Scale)(::windows_core::Interface::as_raw(self), cx, cy, hints).ok()
    }
    pub unsafe fn DiscardEdit(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).DiscardEdit)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com_StructuredStorage\"`*"]
    #[cfg(feature = "Win32_System_Com_StructuredStorage")]
    pub unsafe fn SetEncoderParams<P0>(&self, pbagenc: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::StructuredStorage::IPropertyBag>,
    {
        (::windows_core::Interface::vtable(self).SetEncoderParams)(::windows_core::Interface::as_raw(self), pbagenc.into_param().abi()).ok()
    }
    pub unsafe fn DisplayName<P0>(&self, wszname: P0, cch: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).DisplayName)(::windows_core::Interface::as_raw(self), wszname.into_param().abi(), cch).ok()
    }
    pub unsafe fn GetResolution(&self, puresolutionx: *mut u32, puresolutiony: *mut u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetResolution)(::windows_core::Interface::as_raw(self), puresolutionx, puresolutiony).ok()
    }
    pub unsafe fn GetEncoderParams(&self, pguidfmt: *mut ::windows_core::GUID, ppencparams: *mut *mut u8) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetEncoderParams)(::windows_core::Interface::as_raw(self), pguidfmt, ppencparams).ok()
    }
    pub unsafe fn RegisterAbort<P0>(&self, pabort: P0) -> ::windows_core::Result<IShellImageDataAbort>
    where
        P0: ::windows_core::IntoParam<IShellImageDataAbort>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).RegisterAbort)(::windows_core::Interface::as_raw(self), pabort.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn CloneFrame(&self, ppimg: *mut *mut u8) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).CloneFrame)(::windows_core::Interface::as_raw(self), ppimg).ok()
    }
    pub unsafe fn ReplaceFrame(&self, pimg: *mut u8) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ReplaceFrame)(::windows_core::Interface::as_raw(self), pimg).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellImageData, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellImageData {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellImageData {}
impl ::core::fmt::Debug for IShellImageData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellImageData").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellImageData {
    type Vtable = IShellImageData_Vtbl;
}
impl ::core::clone::Clone for IShellImageData {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellImageData {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xbfdeec12_8040_4403_a5ea_9e07dafcf530);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellImageData_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Decode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32, cxdesired: u32, cydesired: u32) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub Draw: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hdc: super::super::Graphics::Gdi::HDC, prcdest: *mut super::super::Foundation::RECT, prcsrc: *mut super::super::Foundation::RECT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi")))]
    Draw: usize,
    pub NextFrame: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub NextPage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub PrevPage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub IsTransparent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub IsAnimated: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub IsVector: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub IsMultipage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub IsEditable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub IsPrintable: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub IsDecoded: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetCurrentPage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pnpage: *mut u32) -> ::windows_core::HRESULT,
    pub GetPageCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcpages: *mut u32) -> ::windows_core::HRESULT,
    pub SelectPage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ipage: u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psize: *mut super::super::Foundation::SIZE) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetSize: usize,
    pub GetRawDataFormat: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdataformat: *mut ::windows_core::GUID) -> ::windows_core::HRESULT,
    pub GetPixelFormat: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pformat: *mut u32) -> ::windows_core::HRESULT,
    pub GetDelay: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwdelay: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com_StructuredStorage")]
    pub GetProperties: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwmode: u32, pppropset: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com_StructuredStorage"))]
    GetProperties: usize,
    pub Rotate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwangle: u32) -> ::windows_core::HRESULT,
    pub Scale: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, cx: u32, cy: u32, hints: u32) -> ::windows_core::HRESULT,
    pub DiscardEdit: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com_StructuredStorage")]
    pub SetEncoderParams: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbagenc: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com_StructuredStorage"))]
    SetEncoderParams: usize,
    pub DisplayName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, wszname: ::windows_core::PCWSTR, cch: u32) -> ::windows_core::HRESULT,
    pub GetResolution: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, puresolutionx: *mut u32, puresolutiony: *mut u32) -> ::windows_core::HRESULT,
    pub GetEncoderParams: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pguidfmt: *mut ::windows_core::GUID, ppencparams: *mut *mut u8) -> ::windows_core::HRESULT,
    pub RegisterAbort: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pabort: *mut ::core::ffi::c_void, ppabortprev: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub CloneFrame: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppimg: *mut *mut u8) -> ::windows_core::HRESULT,
    pub ReplaceFrame: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pimg: *mut u8) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellImageDataAbort(::windows_core::IUnknown);
impl IShellImageDataAbort {
    pub unsafe fn QueryAbort(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).QueryAbort)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellImageDataAbort, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellImageDataAbort {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellImageDataAbort {}
impl ::core::fmt::Debug for IShellImageDataAbort {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellImageDataAbort").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellImageDataAbort {
    type Vtable = IShellImageDataAbort_Vtbl;
}
impl ::core::clone::Clone for IShellImageDataAbort {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellImageDataAbort {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x53fb8e58_50c0_4003_b4aa_0c8df28e7f3a);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellImageDataAbort_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub QueryAbort: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellImageDataFactory(::windows_core::IUnknown);
impl IShellImageDataFactory {
    pub unsafe fn CreateIShellImageData(&self) -> ::windows_core::Result<IShellImageData> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).CreateIShellImageData)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn CreateImageFromFile<P0>(&self, pszpath: P0) -> ::windows_core::Result<IShellImageData>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).CreateImageFromFile)(::windows_core::Interface::as_raw(self), pszpath.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn CreateImageFromStream<P0>(&self, pstream: P0) -> ::windows_core::Result<IShellImageData>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IStream>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).CreateImageFromStream)(::windows_core::Interface::as_raw(self), pstream.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDataFormatFromPath<P0>(&self, pszpath: P0) -> ::windows_core::Result<::windows_core::GUID>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetDataFormatFromPath)(::windows_core::Interface::as_raw(self), pszpath.into_param().abi(), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IShellImageDataFactory, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellImageDataFactory {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellImageDataFactory {}
impl ::core::fmt::Debug for IShellImageDataFactory {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellImageDataFactory").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellImageDataFactory {
    type Vtable = IShellImageDataFactory_Vtbl;
}
impl ::core::clone::Clone for IShellImageDataFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellImageDataFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x9be8ed5c_edab_4d75_90f3_bd5bdbb21c82);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellImageDataFactory_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub CreateIShellImageData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppshimg: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub CreateImageFromFile: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszpath: ::windows_core::PCWSTR, ppshimg: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub CreateImageFromStream: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pstream: *mut ::core::ffi::c_void, ppshimg: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    CreateImageFromStream: usize,
    pub GetDataFormatFromPath: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszpath: ::windows_core::PCWSTR, pdataformat: *mut ::windows_core::GUID) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellItem(::windows_core::IUnknown);
impl IShellItem {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn BindToHandler<P0, T>(&self, pbc: P0, bhid: *const ::windows_core::GUID) -> ::windows_core::Result<T>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).BindToHandler)(::windows_core::Interface::as_raw(self), pbc.into_param().abi(), bhid, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetParent(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetParent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDisplayName(&self, sigdnname: SIGDN) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetDisplayName)(::windows_core::Interface::as_raw(self), sigdnname, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_SystemServices\"`*"]
    #[cfg(feature = "Win32_System_SystemServices")]
    pub unsafe fn GetAttributes(&self, sfgaomask: super::super::System::SystemServices::SFGAO_FLAGS) -> ::windows_core::Result<super::super::System::SystemServices::SFGAO_FLAGS> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetAttributes)(::windows_core::Interface::as_raw(self), sfgaomask, &mut result__).from_abi(result__)
    }
    pub unsafe fn Compare<P0>(&self, psi: P0, hint: u32) -> ::windows_core::Result<i32>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Compare)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), hint, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IShellItem, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellItem {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellItem {}
impl ::core::fmt::Debug for IShellItem {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellItem").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellItem {
    type Vtable = IShellItem_Vtbl;
}
impl ::core::clone::Clone for IShellItem {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellItem {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x43826d1e_e718_42ee_bc55_a1e261c37bfe);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellItem_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub BindToHandler: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbc: *mut ::core::ffi::c_void, bhid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    BindToHandler: usize,
    pub GetParent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppsi: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetDisplayName: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, sigdnname: SIGDN, ppszname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_SystemServices")]
    pub GetAttributes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, sfgaomask: super::super::System::SystemServices::SFGAO_FLAGS, psfgaoattribs: *mut super::super::System::SystemServices::SFGAO_FLAGS) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_SystemServices"))]
    GetAttributes: usize,
    pub Compare: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, hint: u32, piorder: *mut i32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellItem2(::windows_core::IUnknown);
impl IShellItem2 {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn BindToHandler<P0, T>(&self, pbc: P0, bhid: *const ::windows_core::GUID) -> ::windows_core::Result<T>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).base__.BindToHandler)(::windows_core::Interface::as_raw(self), pbc.into_param().abi(), bhid, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetParent(&self) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetParent)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDisplayName(&self, sigdnname: SIGDN) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetDisplayName)(::windows_core::Interface::as_raw(self), sigdnname, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_SystemServices\"`*"]
    #[cfg(feature = "Win32_System_SystemServices")]
    pub unsafe fn GetAttributes(&self, sfgaomask: super::super::System::SystemServices::SFGAO_FLAGS) -> ::windows_core::Result<super::super::System::SystemServices::SFGAO_FLAGS> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetAttributes)(::windows_core::Interface::as_raw(self), sfgaomask, &mut result__).from_abi(result__)
    }
    pub unsafe fn Compare<P0>(&self, psi: P0, hint: u32) -> ::windows_core::Result<i32>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Compare)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), hint, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetPropertyStore<T>(&self, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetPropertyStore)(::windows_core::Interface::as_raw(self), flags, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetPropertyStoreWithCreateObject<P0, T>(&self, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS, punkcreateobject: P0) -> ::windows_core::Result<T>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetPropertyStoreWithCreateObject)(::windows_core::Interface::as_raw(self), flags, punkcreateobject.into_param().abi(), &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetPropertyStoreForKeys<T>(&self, rgkeys: &[PropertiesSystem::PROPERTYKEY], flags: PropertiesSystem::GETPROPERTYSTOREFLAGS) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetPropertyStoreForKeys)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(rgkeys.as_ptr()), rgkeys.len() as _, flags, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetPropertyDescriptionList<T>(&self, keytype: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetPropertyDescriptionList)(::windows_core::Interface::as_raw(self), keytype, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Update<P0>(&self, pbc: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
    {
        (::windows_core::Interface::vtable(self).Update)(::windows_core::Interface::as_raw(self), pbc.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub unsafe fn GetProperty(&self, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetProperty)(::windows_core::Interface::as_raw(self), key, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetCLSID(&self, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<::windows_core::GUID> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCLSID)(::windows_core::Interface::as_raw(self), key, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub unsafe fn GetFileTime(&self, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<super::super::Foundation::FILETIME> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFileTime)(::windows_core::Interface::as_raw(self), key, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetInt32(&self, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetInt32)(::windows_core::Interface::as_raw(self), key, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetString(&self, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetString)(::windows_core::Interface::as_raw(self), key, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetUInt32(&self, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetUInt32)(::windows_core::Interface::as_raw(self), key, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetUInt64(&self, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<u64> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetUInt64)(::windows_core::Interface::as_raw(self), key, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub unsafe fn GetBool(&self, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<super::super::Foundation::BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetBool)(::windows_core::Interface::as_raw(self), key, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IShellItem2, ::windows_core::IUnknown, IShellItem);
impl ::core::cmp::PartialEq for IShellItem2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellItem2 {}
impl ::core::fmt::Debug for IShellItem2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellItem2").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellItem2 {
    type Vtable = IShellItem2_Vtbl;
}
impl ::core::clone::Clone for IShellItem2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellItem2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x7e9fb0d3_919f_4307_ab2e_9b1860310c93);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellItem2_Vtbl {
    pub base__: IShellItem_Vtbl,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetPropertyStore: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetPropertyStore: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetPropertyStoreWithCreateObject: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS, punkcreateobject: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetPropertyStoreWithCreateObject: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetPropertyStoreForKeys: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rgkeys: *const PropertiesSystem::PROPERTYKEY, ckeys: u32, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetPropertyStoreForKeys: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetPropertyDescriptionList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, keytype: *const PropertiesSystem::PROPERTYKEY, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetPropertyDescriptionList: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub Update: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbc: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Update: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub GetProperty: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, ppropvar: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem")))]
    GetProperty: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetCLSID: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pclsid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetCLSID: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub GetFileTime: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pft: *mut super::super::Foundation::FILETIME) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem")))]
    GetFileTime: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetInt32: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pi: *mut i32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetInt32: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetString: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, ppsz: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetString: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetUInt32: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pui: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetUInt32: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetUInt64: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pull: *mut u64) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetUInt64: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
    pub GetBool: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pf: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem")))]
    GetBool: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellItemArray(::windows_core::IUnknown);
impl IShellItemArray {
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn BindToHandler<P0, T>(&self, pbc: P0, bhid: *const ::windows_core::GUID) -> ::windows_core::Result<T>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IBindCtx>,
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).BindToHandler)(::windows_core::Interface::as_raw(self), pbc.into_param().abi(), bhid, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetPropertyStore<T>(&self, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetPropertyStore)(::windows_core::Interface::as_raw(self), flags, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_PropertiesSystem\"`*"]
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub unsafe fn GetPropertyDescriptionList<T>(&self, keytype: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetPropertyDescriptionList)(::windows_core::Interface::as_raw(self), keytype, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_SystemServices\"`*"]
    #[cfg(feature = "Win32_System_SystemServices")]
    pub unsafe fn GetAttributes(&self, attribflags: SIATTRIBFLAGS, sfgaomask: super::super::System::SystemServices::SFGAO_FLAGS) -> ::windows_core::Result<super::super::System::SystemServices::SFGAO_FLAGS> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetAttributes)(::windows_core::Interface::as_raw(self), attribflags, sfgaomask, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCount(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCount)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetItemAt(&self, dwindex: u32) -> ::windows_core::Result<IShellItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetItemAt)(::windows_core::Interface::as_raw(self), dwindex, &mut result__).from_abi(result__)
    }
    pub unsafe fn EnumItems(&self) -> ::windows_core::Result<IEnumShellItems> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).EnumItems)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IShellItemArray, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellItemArray {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellItemArray {}
impl ::core::fmt::Debug for IShellItemArray {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellItemArray").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellItemArray {
    type Vtable = IShellItemArray_Vtbl;
}
impl ::core::clone::Clone for IShellItemArray {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellItemArray {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xb63ea76d_1f85_456f_a19c_48159efa858b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellItemArray_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub BindToHandler: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbc: *mut ::core::ffi::c_void, bhid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvout: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    BindToHandler: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetPropertyStore: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetPropertyStore: usize,
    #[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
    pub GetPropertyDescriptionList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, keytype: *const PropertiesSystem::PROPERTYKEY, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_PropertiesSystem"))]
    GetPropertyDescriptionList: usize,
    #[cfg(feature = "Win32_System_SystemServices")]
    pub GetAttributes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, attribflags: SIATTRIBFLAGS, sfgaomask: super::super::System::SystemServices::SFGAO_FLAGS, psfgaoattribs: *mut super::super::System::SystemServices::SFGAO_FLAGS) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_SystemServices"))]
    GetAttributes: usize,
    pub GetCount: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwnumitems: *mut u32) -> ::windows_core::HRESULT,
    pub GetItemAt: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwindex: u32, ppsi: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub EnumItems: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenumshellitems: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellItemFilter(::windows_core::IUnknown);
impl IShellItemFilter {
    pub unsafe fn IncludeItem<P0>(&self, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).IncludeItem)(::windows_core::Interface::as_raw(self), psi.into_param().abi()).ok()
    }
    pub unsafe fn GetEnumFlagsForItem<P0>(&self, psi: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetEnumFlagsForItem)(::windows_core::Interface::as_raw(self), psi.into_param().abi(), &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IShellItemFilter, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellItemFilter {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellItemFilter {}
impl ::core::fmt::Debug for IShellItemFilter {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellItemFilter").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellItemFilter {
    type Vtable = IShellItemFilter_Vtbl;
}
impl ::core::clone::Clone for IShellItemFilter {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellItemFilter {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x2659b475_eeb8_48b7_8f07_b378810f48cf);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellItemFilter_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub IncludeItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetEnumFlagsForItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, pgrfflags: *mut u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellItemImageFactory(::windows_core::IUnknown);
impl IShellItemImageFactory {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub unsafe fn GetImage(&self, size: super::super::Foundation::SIZE, flags: SIIGBF) -> ::windows_core::Result<super::super::Graphics::Gdi::HBITMAP> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetImage)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(size), flags, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IShellItemImageFactory, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellItemImageFactory {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellItemImageFactory {}
impl ::core::fmt::Debug for IShellItemImageFactory {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellItemImageFactory").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellItemImageFactory {
    type Vtable = IShellItemImageFactory_Vtbl;
}
impl ::core::clone::Clone for IShellItemImageFactory {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellItemImageFactory {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xbcc18b79_ba16_442f_80c4_8a59c30c463b);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellItemImageFactory_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
    pub GetImage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, size: super::super::Foundation::SIZE, flags: SIIGBF, phbm: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi")))]
    GetImage: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellItemResources(::windows_core::IUnknown);
impl IShellItemResources {
    pub unsafe fn GetAttributes(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetAttributes)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetSize(&self) -> ::windows_core::Result<u64> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetSize)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetTimes(&self, pftcreation: *mut super::super::Foundation::FILETIME, pftwrite: *mut super::super::Foundation::FILETIME, pftaccess: *mut super::super::Foundation::FILETIME) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetTimes)(::windows_core::Interface::as_raw(self), pftcreation, pftwrite, pftaccess).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetTimes(&self, pftcreation: *const super::super::Foundation::FILETIME, pftwrite: *const super::super::Foundation::FILETIME, pftaccess: *const super::super::Foundation::FILETIME) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetTimes)(::windows_core::Interface::as_raw(self), pftcreation, pftwrite, pftaccess).ok()
    }
    pub unsafe fn GetResourceDescription(&self, pcsir: *const SHELL_ITEM_RESOURCE) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetResourceDescription)(::windows_core::Interface::as_raw(self), pcsir, &mut result__).from_abi(result__)
    }
    pub unsafe fn EnumResources(&self) -> ::windows_core::Result<IEnumResources> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).EnumResources)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SupportsResource(&self, pcsir: *const SHELL_ITEM_RESOURCE) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SupportsResource)(::windows_core::Interface::as_raw(self), pcsir).ok()
    }
    pub unsafe fn OpenResource<T>(&self, pcsir: *const SHELL_ITEM_RESOURCE) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).OpenResource)(::windows_core::Interface::as_raw(self), pcsir, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    pub unsafe fn CreateResource<T>(&self, pcsir: *const SHELL_ITEM_RESOURCE) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).CreateResource)(::windows_core::Interface::as_raw(self), pcsir, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    pub unsafe fn MarkForDelete(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).MarkForDelete)(::windows_core::Interface::as_raw(self)).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellItemResources, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellItemResources {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellItemResources {}
impl ::core::fmt::Debug for IShellItemResources {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellItemResources").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellItemResources {
    type Vtable = IShellItemResources_Vtbl;
}
impl ::core::clone::Clone for IShellItemResources {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellItemResources {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xff5693be_2ce0_4d48_b5c5_40817d1acdb9);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellItemResources_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub GetAttributes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwattributes: *mut u32) -> ::windows_core::HRESULT,
    pub GetSize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pullsize: *mut u64) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetTimes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pftcreation: *mut super::super::Foundation::FILETIME, pftwrite: *mut super::super::Foundation::FILETIME, pftaccess: *mut super::super::Foundation::FILETIME) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetTimes: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetTimes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pftcreation: *const super::super::Foundation::FILETIME, pftwrite: *const super::super::Foundation::FILETIME, pftaccess: *const super::super::Foundation::FILETIME) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetTimes: usize,
    pub GetResourceDescription: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcsir: *const SHELL_ITEM_RESOURCE, ppszdescription: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub EnumResources: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppenumr: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SupportsResource: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcsir: *const SHELL_ITEM_RESOURCE) -> ::windows_core::HRESULT,
    pub OpenResource: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcsir: *const SHELL_ITEM_RESOURCE, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub CreateResource: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pcsir: *const SHELL_ITEM_RESOURCE, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub MarkForDelete: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellLibrary(::windows_core::IUnknown);
impl IShellLibrary {
    pub unsafe fn LoadLibraryFromItem<P0>(&self, psilibrary: P0, grfmode: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).LoadLibraryFromItem)(::windows_core::Interface::as_raw(self), psilibrary.into_param().abi(), grfmode).ok()
    }
    pub unsafe fn LoadLibraryFromKnownFolder(&self, kfidlibrary: *const ::windows_core::GUID, grfmode: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).LoadLibraryFromKnownFolder)(::windows_core::Interface::as_raw(self), kfidlibrary, grfmode).ok()
    }
    pub unsafe fn AddFolder<P0>(&self, psilocation: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).AddFolder)(::windows_core::Interface::as_raw(self), psilocation.into_param().abi()).ok()
    }
    pub unsafe fn RemoveFolder<P0>(&self, psilocation: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).RemoveFolder)(::windows_core::Interface::as_raw(self), psilocation.into_param().abi()).ok()
    }
    pub unsafe fn GetFolders<T>(&self, lff: LIBRARYFOLDERFILTER) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetFolders)(::windows_core::Interface::as_raw(self), lff, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    pub unsafe fn ResolveFolder<P0, T>(&self, psifoldertoresolve: P0, dwtimeout: u32) -> ::windows_core::Result<T>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).ResolveFolder)(::windows_core::Interface::as_raw(self), psifoldertoresolve.into_param().abi(), dwtimeout, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    pub unsafe fn GetDefaultSaveFolder<T>(&self, dsft: DEFAULTSAVEFOLDERTYPE) -> ::windows_core::Result<T>
    where
        T: ::windows_core::ComInterface,
    {
        let mut result__ = ::std::ptr::null_mut();
        (::windows_core::Interface::vtable(self).GetDefaultSaveFolder)(::windows_core::Interface::as_raw(self), dsft, &<T as ::windows_core::ComInterface>::IID, &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDefaultSaveFolder<P0>(&self, dsft: DEFAULTSAVEFOLDERTYPE, psi: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
    {
        (::windows_core::Interface::vtable(self).SetDefaultSaveFolder)(::windows_core::Interface::as_raw(self), dsft, psi.into_param().abi()).ok()
    }
    pub unsafe fn GetOptions(&self) -> ::windows_core::Result<LIBRARYOPTIONFLAGS> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetOptions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetOptions(&self, lofmask: LIBRARYOPTIONFLAGS, lofoptions: LIBRARYOPTIONFLAGS) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetOptions)(::windows_core::Interface::as_raw(self), lofmask, lofoptions).ok()
    }
    pub unsafe fn GetFolderType(&self) -> ::windows_core::Result<::windows_core::GUID> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFolderType)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFolderType(&self, ftid: *const ::windows_core::GUID) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFolderType)(::windows_core::Interface::as_raw(self), ftid).ok()
    }
    pub unsafe fn GetIcon(&self) -> ::windows_core::Result<::windows_core::PWSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetIcon)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetIcon<P0>(&self, pszicon: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetIcon)(::windows_core::Interface::as_raw(self), pszicon.into_param().abi()).ok()
    }
    pub unsafe fn Commit(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Commit)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Save<P0, P1>(&self, psifoldertosavein: P0, pszlibraryname: P1, lsf: LIBRARYSAVEFLAGS) -> ::windows_core::Result<IShellItem>
    where
        P0: ::windows_core::IntoParam<IShellItem>,
        P1: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Save)(::windows_core::Interface::as_raw(self), psifoldertosavein.into_param().abi(), pszlibraryname.into_param().abi(), lsf, &mut result__).from_abi(result__)
    }
    pub unsafe fn SaveInKnownFolder<P0>(&self, kfidtosavein: *const ::windows_core::GUID, pszlibraryname: P0, lsf: LIBRARYSAVEFLAGS) -> ::windows_core::Result<IShellItem>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).SaveInKnownFolder)(::windows_core::Interface::as_raw(self), kfidtosavein, pszlibraryname.into_param().abi(), lsf, &mut result__).from_abi(result__)
    }
}
::windows_core::imp::interface_hierarchy!(IShellLibrary, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellLibrary {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellLibrary {}
impl ::core::fmt::Debug for IShellLibrary {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellLibrary").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellLibrary {
    type Vtable = IShellLibrary_Vtbl;
}
impl ::core::clone::Clone for IShellLibrary {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellLibrary {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x11a66efa_382e_451a_9234_1e0e12ef3085);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellLibrary_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub LoadLibraryFromItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psilibrary: *mut ::core::ffi::c_void, grfmode: u32) -> ::windows_core::HRESULT,
    pub LoadLibraryFromKnownFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, kfidlibrary: *const ::windows_core::GUID, grfmode: u32) -> ::windows_core::HRESULT,
    pub AddFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psilocation: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub RemoveFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psilocation: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetFolders: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lff: LIBRARYFOLDERFILTER, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub ResolveFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psifoldertoresolve: *mut ::core::ffi::c_void, dwtimeout: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetDefaultSaveFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dsft: DEFAULTSAVEFOLDERTYPE, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SetDefaultSaveFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dsft: DEFAULTSAVEFOLDERTYPE, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub GetOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, plofoptions: *mut LIBRARYOPTIONFLAGS) -> ::windows_core::HRESULT,
    pub SetOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lofmask: LIBRARYOPTIONFLAGS, lofoptions: LIBRARYOPTIONFLAGS) -> ::windows_core::HRESULT,
    pub GetFolderType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pftid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT,
    pub SetFolderType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ftid: *const ::windows_core::GUID) -> ::windows_core::HRESULT,
    pub GetIcon: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppszicon: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT,
    pub SetIcon: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszicon: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub Commit: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub Save: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psifoldertosavein: *mut ::core::ffi::c_void, pszlibraryname: ::windows_core::PCWSTR, lsf: LIBRARYSAVEFLAGS, ppsisavedto: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SaveInKnownFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, kfidtosavein: *const ::windows_core::GUID, pszlibraryname: ::windows_core::PCWSTR, lsf: LIBRARYSAVEFLAGS, ppsisavedto: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellLinkA(::windows_core::IUnknown);
impl IShellLinkA {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Storage_FileSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
    pub unsafe fn GetPath(&self, pszfile: &mut [u8], pfd: *mut super::super::Storage::FileSystem::WIN32_FIND_DATAA, fflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetPath)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszfile.as_ptr()), pszfile.len() as _, pfd, fflags).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetIDList(&self) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetIDList)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn SetIDList(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetIDList)(::windows_core::Interface::as_raw(self), pidl).ok()
    }
    pub unsafe fn GetDescription(&self, pszname: &mut [u8]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetDescription)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszname.as_ptr()), pszname.len() as _).ok()
    }
    pub unsafe fn SetDescription<P0>(&self, pszname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    {
        (::windows_core::Interface::vtable(self).SetDescription)(::windows_core::Interface::as_raw(self), pszname.into_param().abi()).ok()
    }
    pub unsafe fn GetWorkingDirectory(&self, pszdir: &mut [u8]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetWorkingDirectory)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszdir.as_ptr()), pszdir.len() as _).ok()
    }
    pub unsafe fn SetWorkingDirectory<P0>(&self, pszdir: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    {
        (::windows_core::Interface::vtable(self).SetWorkingDirectory)(::windows_core::Interface::as_raw(self), pszdir.into_param().abi()).ok()
    }
    pub unsafe fn GetArguments(&self, pszargs: &mut [u8]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetArguments)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszargs.as_ptr()), pszargs.len() as _).ok()
    }
    pub unsafe fn SetArguments<P0>(&self, pszargs: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    {
        (::windows_core::Interface::vtable(self).SetArguments)(::windows_core::Interface::as_raw(self), pszargs.into_param().abi()).ok()
    }
    pub unsafe fn GetHotkey(&self) -> ::windows_core::Result<u16> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetHotkey)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetHotkey(&self, whotkey: u16) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetHotkey)(::windows_core::Interface::as_raw(self), whotkey).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn GetShowCmd(&self) -> ::windows_core::Result<super::WindowsAndMessaging::SHOW_WINDOW_CMD> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetShowCmd)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn SetShowCmd(&self, ishowcmd: super::WindowsAndMessaging::SHOW_WINDOW_CMD) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetShowCmd)(::windows_core::Interface::as_raw(self), ishowcmd).ok()
    }
    pub unsafe fn GetIconLocation(&self, psziconpath: &mut [u8], piicon: *mut i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetIconLocation)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(psziconpath.as_ptr()), psziconpath.len() as _, piicon).ok()
    }
    pub unsafe fn SetIconLocation<P0>(&self, psziconpath: P0, iicon: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    {
        (::windows_core::Interface::vtable(self).SetIconLocation)(::windows_core::Interface::as_raw(self), psziconpath.into_param().abi(), iicon).ok()
    }
    pub unsafe fn SetRelativePath<P0>(&self, pszpathrel: P0, dwreserved: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    {
        (::windows_core::Interface::vtable(self).SetRelativePath)(::windows_core::Interface::as_raw(self), pszpathrel.into_param().abi(), dwreserved).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Resolve<P0>(&self, hwnd: P0, fflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).Resolve)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), fflags).ok()
    }
    pub unsafe fn SetPath<P0>(&self, pszfile: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCSTR>,
    {
        (::windows_core::Interface::vtable(self).SetPath)(::windows_core::Interface::as_raw(self), pszfile.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellLinkA, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellLinkA {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellLinkA {}
impl ::core::fmt::Debug for IShellLinkA {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellLinkA").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellLinkA {
    type Vtable = IShellLinkA_Vtbl;
}
impl ::core::clone::Clone for IShellLinkA {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellLinkA {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214ee_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellLinkA_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
    pub GetPath: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PSTR, cch: i32, pfd: *mut super::super::Storage::FileSystem::WIN32_FIND_DATAA, fflags: u32) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem")))]
    GetPath: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetIDList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetIDList: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub SetIDList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    SetIDList: usize,
    pub GetDescription: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PSTR, cch: i32) -> ::windows_core::HRESULT,
    pub SetDescription: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCSTR) -> ::windows_core::HRESULT,
    pub GetWorkingDirectory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszdir: ::windows_core::PSTR, cch: i32) -> ::windows_core::HRESULT,
    pub SetWorkingDirectory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszdir: ::windows_core::PCSTR) -> ::windows_core::HRESULT,
    pub GetArguments: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszargs: ::windows_core::PSTR, cch: i32) -> ::windows_core::HRESULT,
    pub SetArguments: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszargs: ::windows_core::PCSTR) -> ::windows_core::HRESULT,
    pub GetHotkey: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwhotkey: *mut u16) -> ::windows_core::HRESULT,
    pub SetHotkey: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, whotkey: u16) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub GetShowCmd: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pishowcmd: *mut super::WindowsAndMessaging::SHOW_WINDOW_CMD) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_WindowsAndMessaging"))]
    GetShowCmd: usize,
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub SetShowCmd: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ishowcmd: super::WindowsAndMessaging::SHOW_WINDOW_CMD) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_WindowsAndMessaging"))]
    SetShowCmd: usize,
    pub GetIconLocation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psziconpath: ::windows_core::PSTR, cch: i32, piicon: *mut i32) -> ::windows_core::HRESULT,
    pub SetIconLocation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psziconpath: ::windows_core::PCSTR, iicon: i32) -> ::windows_core::HRESULT,
    pub SetRelativePath: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszpathrel: ::windows_core::PCSTR, dwreserved: u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub Resolve: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, fflags: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Resolve: usize,
    pub SetPath: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PCSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellLinkDataList(::windows_core::IUnknown);
impl IShellLinkDataList {
    pub unsafe fn AddDataBlock(&self, pdatablock: *const ::core::ffi::c_void) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).AddDataBlock)(::windows_core::Interface::as_raw(self), pdatablock).ok()
    }
    pub unsafe fn CopyDataBlock(&self, dwsig: u32, ppdatablock: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).CopyDataBlock)(::windows_core::Interface::as_raw(self), dwsig, ppdatablock).ok()
    }
    pub unsafe fn RemoveDataBlock(&self, dwsig: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RemoveDataBlock)(::windows_core::Interface::as_raw(self), dwsig).ok()
    }
    pub unsafe fn GetFlags(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetFlags)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFlags(&self, dwflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFlags)(::windows_core::Interface::as_raw(self), dwflags).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellLinkDataList, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellLinkDataList {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellLinkDataList {}
impl ::core::fmt::Debug for IShellLinkDataList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellLinkDataList").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellLinkDataList {
    type Vtable = IShellLinkDataList_Vtbl;
}
impl ::core::clone::Clone for IShellLinkDataList {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellLinkDataList {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x45e2b4ae_b1c3_11d0_b92f_00a0c90312e1);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellLinkDataList_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub AddDataBlock: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdatablock: *const ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub CopyDataBlock: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwsig: u32, ppdatablock: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub RemoveDataBlock: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwsig: u32) -> ::windows_core::HRESULT,
    pub GetFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT,
    pub SetFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellLinkDual(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellLinkDual {
    pub unsafe fn Path(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Path)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPath<P0>(&self, bs: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).SetPath)(::windows_core::Interface::as_raw(self), bs.into_param().abi()).ok()
    }
    pub unsafe fn Description(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Description)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDescription<P0>(&self, bs: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).SetDescription)(::windows_core::Interface::as_raw(self), bs.into_param().abi()).ok()
    }
    pub unsafe fn WorkingDirectory(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).WorkingDirectory)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetWorkingDirectory<P0>(&self, bs: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).SetWorkingDirectory)(::windows_core::Interface::as_raw(self), bs.into_param().abi()).ok()
    }
    pub unsafe fn Arguments(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Arguments)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetArguments<P0>(&self, bs: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).SetArguments)(::windows_core::Interface::as_raw(self), bs.into_param().abi()).ok()
    }
    pub unsafe fn Hotkey(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Hotkey)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetHotkey(&self, ihk: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetHotkey)(::windows_core::Interface::as_raw(self), ihk).ok()
    }
    pub unsafe fn ShowCommand(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ShowCommand)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetShowCommand(&self, ishowcommand: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetShowCommand)(::windows_core::Interface::as_raw(self), ishowcommand).ok()
    }
    pub unsafe fn Resolve(&self, fflags: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Resolve)(::windows_core::Interface::as_raw(self), fflags).ok()
    }
    pub unsafe fn GetIconLocation(&self, pbs: *mut ::windows_core::BSTR, piicon: *mut i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetIconLocation)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pbs), piicon).ok()
    }
    pub unsafe fn SetIconLocation<P0>(&self, bs: P0, iicon: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).SetIconLocation)(::windows_core::Interface::as_raw(self), bs.into_param().abi(), iicon).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Save(&self, vwhere: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Save)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vwhere)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellLinkDual, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellLinkDual {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellLinkDual {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellLinkDual {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellLinkDual").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellLinkDual {
    type Vtable = IShellLinkDual_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellLinkDual {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellLinkDual {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x88a05c00_f000_11ce_8350_444553540000);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellLinkDual_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
    pub Path: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub SetPath: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bs: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub Description: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub SetDescription: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bs: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub WorkingDirectory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub SetWorkingDirectory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bs: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub Arguments: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub SetArguments: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bs: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub Hotkey: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pihk: *mut i32) -> ::windows_core::HRESULT,
    pub SetHotkey: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ihk: i32) -> ::windows_core::HRESULT,
    pub ShowCommand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pishowcommand: *mut i32) -> ::windows_core::HRESULT,
    pub SetShowCommand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ishowcommand: i32) -> ::windows_core::HRESULT,
    pub Resolve: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fflags: i32) -> ::windows_core::HRESULT,
    pub GetIconLocation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>, piicon: *mut i32) -> ::windows_core::HRESULT,
    pub SetIconLocation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bs: ::std::mem::MaybeUninit<::windows_core::BSTR>, iicon: i32) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub Save: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, vwhere: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    Save: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellLinkDual2(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellLinkDual2 {
    pub unsafe fn Path(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Path)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetPath<P0>(&self, bs: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetPath)(::windows_core::Interface::as_raw(self), bs.into_param().abi()).ok()
    }
    pub unsafe fn Description(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Description)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDescription<P0>(&self, bs: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetDescription)(::windows_core::Interface::as_raw(self), bs.into_param().abi()).ok()
    }
    pub unsafe fn WorkingDirectory(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.WorkingDirectory)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetWorkingDirectory<P0>(&self, bs: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetWorkingDirectory)(::windows_core::Interface::as_raw(self), bs.into_param().abi()).ok()
    }
    pub unsafe fn Arguments(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Arguments)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetArguments<P0>(&self, bs: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetArguments)(::windows_core::Interface::as_raw(self), bs.into_param().abi()).ok()
    }
    pub unsafe fn Hotkey(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.Hotkey)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetHotkey(&self, ihk: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetHotkey)(::windows_core::Interface::as_raw(self), ihk).ok()
    }
    pub unsafe fn ShowCommand(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.ShowCommand)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetShowCommand(&self, ishowcommand: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SetShowCommand)(::windows_core::Interface::as_raw(self), ishowcommand).ok()
    }
    pub unsafe fn Resolve(&self, fflags: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Resolve)(::windows_core::Interface::as_raw(self), fflags).ok()
    }
    pub unsafe fn GetIconLocation(&self, pbs: *mut ::windows_core::BSTR, piicon: *mut i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.GetIconLocation)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pbs), piicon).ok()
    }
    pub unsafe fn SetIconLocation<P0>(&self, bs: P0, iicon: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetIconLocation)(::windows_core::Interface::as_raw(self), bs.into_param().abi(), iicon).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Save(&self, vwhere: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Save)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(vwhere)).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn Target(&self) -> ::windows_core::Result<FolderItem> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Target)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellLinkDual2, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IShellLinkDual);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellLinkDual2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellLinkDual2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellLinkDual2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellLinkDual2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellLinkDual2 {
    type Vtable = IShellLinkDual2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellLinkDual2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellLinkDual2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x317ee249_f12e_11d2_b1e4_00c04f8eeb3e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellLinkDual2_Vtbl {
    pub base__: IShellLinkDual_Vtbl,
    #[cfg(feature = "Win32_System_Com")]
    pub Target: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppfi: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    Target: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellLinkW(::windows_core::IUnknown);
impl IShellLinkW {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_Storage_FileSystem\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
    pub unsafe fn GetPath(&self, pszfile: &mut [u16], pfd: *mut super::super::Storage::FileSystem::WIN32_FIND_DATAW, fflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetPath)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszfile.as_ptr()), pszfile.len() as _, pfd, fflags).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetIDList(&self) -> ::windows_core::Result<*mut Common::ITEMIDLIST> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetIDList)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn SetIDList(&self, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetIDList)(::windows_core::Interface::as_raw(self), pidl).ok()
    }
    pub unsafe fn GetDescription(&self, pszname: &mut [u16]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetDescription)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszname.as_ptr()), pszname.len() as _).ok()
    }
    pub unsafe fn SetDescription<P0>(&self, pszname: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetDescription)(::windows_core::Interface::as_raw(self), pszname.into_param().abi()).ok()
    }
    pub unsafe fn GetWorkingDirectory(&self, pszdir: &mut [u16]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetWorkingDirectory)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszdir.as_ptr()), pszdir.len() as _).ok()
    }
    pub unsafe fn SetWorkingDirectory<P0>(&self, pszdir: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetWorkingDirectory)(::windows_core::Interface::as_raw(self), pszdir.into_param().abi()).ok()
    }
    pub unsafe fn GetArguments(&self, pszargs: &mut [u16]) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetArguments)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pszargs.as_ptr()), pszargs.len() as _).ok()
    }
    pub unsafe fn SetArguments<P0>(&self, pszargs: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetArguments)(::windows_core::Interface::as_raw(self), pszargs.into_param().abi()).ok()
    }
    pub unsafe fn GetHotkey(&self) -> ::windows_core::Result<u16> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetHotkey)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetHotkey(&self, whotkey: u16) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetHotkey)(::windows_core::Interface::as_raw(self), whotkey).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn GetShowCmd(&self) -> ::windows_core::Result<super::WindowsAndMessaging::SHOW_WINDOW_CMD> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetShowCmd)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub unsafe fn SetShowCmd(&self, ishowcmd: super::WindowsAndMessaging::SHOW_WINDOW_CMD) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetShowCmd)(::windows_core::Interface::as_raw(self), ishowcmd).ok()
    }
    pub unsafe fn GetIconLocation(&self, psziconpath: &mut [u16], piicon: *mut i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetIconLocation)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(psziconpath.as_ptr()), psziconpath.len() as _, piicon).ok()
    }
    pub unsafe fn SetIconLocation<P0>(&self, psziconpath: P0, iicon: i32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetIconLocation)(::windows_core::Interface::as_raw(self), psziconpath.into_param().abi(), iicon).ok()
    }
    pub unsafe fn SetRelativePath<P0>(&self, pszpathrel: P0, dwreserved: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetRelativePath)(::windows_core::Interface::as_raw(self), pszpathrel.into_param().abi(), dwreserved).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn Resolve<P0>(&self, hwnd: P0, fflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).Resolve)(::windows_core::Interface::as_raw(self), hwnd.into_param().abi(), fflags).ok()
    }
    pub unsafe fn SetPath<P0>(&self, pszfile: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).SetPath)(::windows_core::Interface::as_raw(self), pszfile.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellLinkW, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellLinkW {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellLinkW {}
impl ::core::fmt::Debug for IShellLinkW {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellLinkW").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellLinkW {
    type Vtable = IShellLinkW_Vtbl;
}
impl ::core::clone::Clone for IShellLinkW {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellLinkW {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214f9_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellLinkW_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
    pub GetPath: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PWSTR, cch: i32, pfd: *mut super::super::Storage::FileSystem::WIN32_FIND_DATAW, fflags: u32) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem")))]
    GetPath: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetIDList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetIDList: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub SetIDList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    SetIDList: usize,
    pub GetDescription: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PWSTR, cch: i32) -> ::windows_core::HRESULT,
    pub SetDescription: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub GetWorkingDirectory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszdir: ::windows_core::PWSTR, cch: i32) -> ::windows_core::HRESULT,
    pub SetWorkingDirectory: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszdir: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub GetArguments: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszargs: ::windows_core::PWSTR, cch: i32) -> ::windows_core::HRESULT,
    pub SetArguments: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszargs: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
    pub GetHotkey: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pwhotkey: *mut u16) -> ::windows_core::HRESULT,
    pub SetHotkey: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, whotkey: u16) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub GetShowCmd: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pishowcmd: *mut super::WindowsAndMessaging::SHOW_WINDOW_CMD) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_WindowsAndMessaging"))]
    GetShowCmd: usize,
    #[cfg(feature = "Win32_UI_WindowsAndMessaging")]
    pub SetShowCmd: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ishowcmd: super::WindowsAndMessaging::SHOW_WINDOW_CMD) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_WindowsAndMessaging"))]
    SetShowCmd: usize,
    pub GetIconLocation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psziconpath: ::windows_core::PWSTR, cch: i32, piicon: *mut i32) -> ::windows_core::HRESULT,
    pub SetIconLocation: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psziconpath: ::windows_core::PCWSTR, iicon: i32) -> ::windows_core::HRESULT,
    pub SetRelativePath: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszpathrel: ::windows_core::PCWSTR, dwreserved: u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub Resolve: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, fflags: u32) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    Resolve: usize,
    pub SetPath: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellMenu(::windows_core::IUnknown);
impl IShellMenu {
    pub unsafe fn Initialize<P0>(&self, psmc: P0, uid: u32, uidancestor: u32, dwflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellMenuCallback>,
    {
        (::windows_core::Interface::vtable(self).Initialize)(::windows_core::Interface::as_raw(self), psmc.into_param().abi(), uid, uidancestor, dwflags).ok()
    }
    pub unsafe fn GetMenuInfo(&self, ppsmc: ::core::option::Option<*mut ::core::option::Option<IShellMenuCallback>>, puid: ::core::option::Option<*mut u32>, puidancestor: ::core::option::Option<*mut u32>, pdwflags: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetMenuInfo)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(ppsmc.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(puid.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(puidancestor.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pdwflags.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Registry\"`, `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(all(feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common"))]
    pub unsafe fn SetShellFolder<P0, P1>(&self, psf: P0, pidlfolder: ::core::option::Option<*const Common::ITEMIDLIST>, hkey: P1, dwflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IShellFolder>,
        P1: ::windows_core::IntoParam<super::super::System::Registry::HKEY>,
    {
        (::windows_core::Interface::vtable(self).SetShellFolder)(::windows_core::Interface::as_raw(self), psf.into_param().abi(), ::core::mem::transmute(pidlfolder.unwrap_or(::std::ptr::null())), hkey.into_param().abi(), dwflags).ok()
    }
    #[doc = "*Required features: `\"Win32_UI_Shell_Common\"`*"]
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub unsafe fn GetShellFolder(&self, pdwflags: *mut u32, ppidl: *mut *mut Common::ITEMIDLIST, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetShellFolder)(::windows_core::Interface::as_raw(self), pdwflags, ppidl, riid, ppv).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn SetMenu<P0, P1>(&self, hmenu: P0, hwnd: P1, dwflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::WindowsAndMessaging::HMENU>,
        P1: ::windows_core::IntoParam<super::super::Foundation::HWND>,
    {
        (::windows_core::Interface::vtable(self).SetMenu)(::windows_core::Interface::as_raw(self), hmenu.into_param().abi(), hwnd.into_param().abi(), dwflags).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn GetMenu(&self, phmenu: ::core::option::Option<*mut super::WindowsAndMessaging::HMENU>, phwnd: ::core::option::Option<*mut super::super::Foundation::HWND>, pdwflags: ::core::option::Option<*mut u32>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetMenu)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(phmenu.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(phwnd.unwrap_or(::std::ptr::null_mut())), ::core::mem::transmute(pdwflags.unwrap_or(::std::ptr::null_mut()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn InvalidateItem(&self, psmd: ::core::option::Option<*const SMDATA>, dwflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).InvalidateItem)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(psmd.unwrap_or(::std::ptr::null())), dwflags).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn GetState(&self, psmd: *mut SMDATA) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).GetState)(::windows_core::Interface::as_raw(self), psmd).ok()
    }
    pub unsafe fn SetMenuToolbar<P0>(&self, punk: P0, dwflags: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).SetMenuToolbar)(::windows_core::Interface::as_raw(self), punk.into_param().abi(), dwflags).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellMenu, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellMenu {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellMenu {}
impl ::core::fmt::Debug for IShellMenu {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellMenu").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellMenu {
    type Vtable = IShellMenu_Vtbl;
}
impl ::core::clone::Clone for IShellMenu {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellMenu {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xee1f7637_e138_11d1_8379_00c04fd918d0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellMenu_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Initialize: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psmc: *mut ::core::ffi::c_void, uid: u32, uidancestor: u32, dwflags: u32) -> ::windows_core::HRESULT,
    pub GetMenuInfo: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppsmc: *mut *mut ::core::ffi::c_void, puid: *mut u32, puidancestor: *mut u32, pdwflags: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common"))]
    pub SetShellFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psf: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST, hkey: super::super::System::Registry::HKEY, dwflags: u32) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common")))]
    SetShellFolder: usize,
    #[cfg(feature = "Win32_UI_Shell_Common")]
    pub GetShellFolder: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwflags: *mut u32, ppidl: *mut *mut Common::ITEMIDLIST, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_UI_Shell_Common"))]
    GetShellFolder: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub SetMenu: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, hmenu: super::WindowsAndMessaging::HMENU, hwnd: super::super::Foundation::HWND, dwflags: u32) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))]
    SetMenu: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
    pub GetMenu: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, phmenu: *mut super::WindowsAndMessaging::HMENU, phwnd: *mut super::super::Foundation::HWND, pdwflags: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging")))]
    GetMenu: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
    pub InvalidateItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psmd: *const SMDATA, dwflags: u32) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging")))]
    InvalidateItem: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
    pub GetState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psmd: *mut SMDATA) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging")))]
    GetState: usize,
    pub SetMenuToolbar: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellMenuCallback(::windows_core::IUnknown);
impl IShellMenuCallback {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_WindowsAndMessaging\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
    pub unsafe fn CallbackSM<P0, P1>(&self, psmd: *mut SMDATA, umsg: u32, wparam: P0, lparam: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::WPARAM>,
        P1: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).CallbackSM)(::windows_core::Interface::as_raw(self), psmd, umsg, wparam.into_param().abi(), lparam.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellMenuCallback, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellMenuCallback {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellMenuCallback {}
impl ::core::fmt::Debug for IShellMenuCallback {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellMenuCallback").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellMenuCallback {
    type Vtable = IShellMenuCallback_Vtbl;
}
impl ::core::clone::Clone for IShellMenuCallback {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellMenuCallback {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x4ca300a1_9b8d_11d1_8b22_00c04fd918d0);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellMenuCallback_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
    pub CallbackSM: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, psmd: *mut SMDATA, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging")))]
    CallbackSM: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellNameSpace(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellNameSpace {
    pub unsafe fn MoveSelectionUp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.MoveSelectionUp)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn MoveSelectionDown(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.MoveSelectionDown)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ResetSort(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.ResetSort)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn NewFolder(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.NewFolder)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Synchronize(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Synchronize)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Import(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Import)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn Export(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.Export)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn InvokeContextMenuCommand<P0>(&self, strcommand: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.InvokeContextMenuCommand)(::windows_core::Interface::as_raw(self), strcommand.into_param().abi()).ok()
    }
    pub unsafe fn MoveSelectionTo(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.MoveSelectionTo)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SubscriptionsEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.SubscriptionsEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CreateSubscriptionForSelection(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.CreateSubscriptionForSelection)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn DeleteSubscriptionForSelection(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.DeleteSubscriptionForSelection)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetRoot<P0>(&self, bstrfullpath: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetRoot)(::windows_core::Interface::as_raw(self), bstrfullpath.into_param().abi()).ok()
    }
    pub unsafe fn EnumOptions(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).EnumOptions)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetEnumOptions(&self, lval: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetEnumOptions)(::windows_core::Interface::as_raw(self), lval).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SelectedItem(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).SelectedItem)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SetSelectedItem<P0>(&self, pitem: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::System::Com::IDispatch>,
    {
        (::windows_core::Interface::vtable(self).SetSelectedItem)(::windows_core::Interface::as_raw(self), pitem.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Root(&self) -> ::windows_core::Result<super::super::System::Variant::VARIANT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Root)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn SetRoot2(&self, var: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetRoot2)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(var)).ok()
    }
    pub unsafe fn Depth(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Depth)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetDepth(&self, idepth: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetDepth)(::windows_core::Interface::as_raw(self), idepth).ok()
    }
    pub unsafe fn Mode(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Mode)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetMode(&self, umode: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetMode)(::windows_core::Interface::as_raw(self), umode).ok()
    }
    pub unsafe fn Flags(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Flags)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetFlags(&self, dwflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetFlags)(::windows_core::Interface::as_raw(self), dwflags).ok()
    }
    pub unsafe fn SetTVFlags(&self, dwflags: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetTVFlags)(::windows_core::Interface::as_raw(self), dwflags).ok()
    }
    pub unsafe fn TVFlags(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).TVFlags)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn Columns(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).Columns)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetColumns<P0>(&self, bstrcolumns: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).SetColumns)(::windows_core::Interface::as_raw(self), bstrcolumns.into_param().abi()).ok()
    }
    pub unsafe fn CountViewTypes(&self) -> ::windows_core::Result<i32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).CountViewTypes)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetViewType(&self, itype: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SetViewType)(::windows_core::Interface::as_raw(self), itype).ok()
    }
    #[doc = "*Required features: `\"Win32_System_Com\"`*"]
    #[cfg(feature = "Win32_System_Com")]
    pub unsafe fn SelectedItems(&self) -> ::windows_core::Result<super::super::System::Com::IDispatch> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).SelectedItems)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn Expand(&self, var: super::super::System::Variant::VARIANT, idepth: i32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Expand)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(var), idepth).ok()
    }
    pub unsafe fn UnselectAll(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).UnselectAll)(::windows_core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellNameSpace, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IShellFavoritesNameSpace);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellNameSpace {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellNameSpace {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellNameSpace {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellNameSpace").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellNameSpace {
    type Vtable = IShellNameSpace_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellNameSpace {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellNameSpace {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xe572d3c9_37be_4ae2_825d_d521763e3108);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellNameSpace_Vtbl {
    pub base__: IShellFavoritesNameSpace_Vtbl,
    pub EnumOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pgrfenumflags: *mut i32) -> ::windows_core::HRESULT,
    pub SetEnumOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, lval: i32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub SelectedItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pitem: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SelectedItem: usize,
    #[cfg(feature = "Win32_System_Com")]
    pub SetSelectedItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SetSelectedItem: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub Root: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pvar: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    Root: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub SetRoot2: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, var: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    SetRoot2: usize,
    pub Depth: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pidepth: *mut i32) -> ::windows_core::HRESULT,
    pub SetDepth: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, idepth: i32) -> ::windows_core::HRESULT,
    pub Mode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pumode: *mut u32) -> ::windows_core::HRESULT,
    pub SetMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, umode: u32) -> ::windows_core::HRESULT,
    pub Flags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT,
    pub SetFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT,
    pub SetTVFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT,
    pub TVFlags: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwflags: *mut u32) -> ::windows_core::HRESULT,
    pub Columns: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrcolumns: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub SetColumns: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrcolumns: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub CountViewTypes: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pitypes: *mut i32) -> ::windows_core::HRESULT,
    pub SetViewType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, itype: i32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_System_Com")]
    pub SelectedItems: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_System_Com"))]
    SelectedItems: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub Expand: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, var: super::super::System::Variant::VARIANT, idepth: i32) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    Expand: usize,
    pub UnselectAll: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellPropSheetExt(::windows_core::IUnknown);
impl IShellPropSheetExt {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Controls\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls"))]
    pub unsafe fn AddPages<P0>(&self, pfnaddpage: super::Controls::LPFNSVADDPROPSHEETPAGE, lparam: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).AddPages)(::windows_core::Interface::as_raw(self), pfnaddpage, lparam.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Controls\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls"))]
    pub unsafe fn ReplacePage<P0>(&self, upageid: u32, pfnreplacewith: super::Controls::LPFNSVADDPROPSHEETPAGE, lparam: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::LPARAM>,
    {
        (::windows_core::Interface::vtable(self).ReplacePage)(::windows_core::Interface::as_raw(self), upageid, pfnreplacewith, lparam.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellPropSheetExt, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellPropSheetExt {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellPropSheetExt {}
impl ::core::fmt::Debug for IShellPropSheetExt {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellPropSheetExt").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellPropSheetExt {
    type Vtable = IShellPropSheetExt_Vtbl;
}
impl ::core::clone::Clone for IShellPropSheetExt {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellPropSheetExt {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x000214e9_0000_0000_c000_000000000046);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellPropSheetExt_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls"))]
    pub AddPages: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfnaddpage: super::Controls::LPFNSVADDPROPSHEETPAGE, lparam: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls")))]
    AddPages: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls"))]
    pub ReplacePage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, upageid: u32, pfnreplacewith: super::Controls::LPFNSVADDPROPSHEETPAGE, lparam: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls")))]
    ReplacePage: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellRunDll(::windows_core::IUnknown);
impl IShellRunDll {
    pub unsafe fn Run<P0>(&self, pszargs: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::PCWSTR>,
    {
        (::windows_core::Interface::vtable(self).Run)(::windows_core::Interface::as_raw(self), pszargs.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellRunDll, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellRunDll {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellRunDll {}
impl ::core::fmt::Debug for IShellRunDll {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellRunDll").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellRunDll {
    type Vtable = IShellRunDll_Vtbl;
}
impl ::core::clone::Clone for IShellRunDll {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellRunDll {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xfce4bde0_4b68_4b80_8e9c_7426315a7388);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellRunDll_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub Run: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pszargs: ::windows_core::PCWSTR) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellService(::windows_core::IUnknown);
impl IShellService {
    pub unsafe fn SetOwner<P0>(&self, punkowner: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::IUnknown>,
    {
        (::windows_core::Interface::vtable(self).SetOwner)(::windows_core::Interface::as_raw(self), punkowner.into_param().abi()).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellService, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellService {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellService {}
impl ::core::fmt::Debug for IShellService {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellService").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellService {
    type Vtable = IShellService_Vtbl;
}
impl ::core::clone::Clone for IShellService {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellService {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x5836fb00_8187_11cf_a12b_00aa004ae837);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellService_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub SetOwner: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, punkowner: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`*"]
#[repr(transparent)]
pub struct IShellTaskScheduler(::windows_core::IUnknown);
impl IShellTaskScheduler {
    pub unsafe fn AddTask<P0>(&self, prt: P0, rtoid: *const ::windows_core::GUID, lparam: usize, dwpriority: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<IRunnableTask>,
    {
        (::windows_core::Interface::vtable(self).AddTask)(::windows_core::Interface::as_raw(self), prt.into_param().abi(), rtoid, lparam, dwpriority).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RemoveTasks<P0>(&self, rtoid: *const ::windows_core::GUID, lparam: usize, bwaitifrunning: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::BOOL>,
    {
        (::windows_core::Interface::vtable(self).RemoveTasks)(::windows_core::Interface::as_raw(self), rtoid, lparam, bwaitifrunning.into_param().abi()).ok()
    }
    pub unsafe fn CountTasks(&self, rtoid: *const ::windows_core::GUID) -> u32 {
        (::windows_core::Interface::vtable(self).CountTasks)(::windows_core::Interface::as_raw(self), rtoid)
    }
    pub unsafe fn Status(&self, dwreleasestatus: u32, dwthreadtimeout: u32) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).Status)(::windows_core::Interface::as_raw(self), dwreleasestatus, dwthreadtimeout).ok()
    }
}
::windows_core::imp::interface_hierarchy!(IShellTaskScheduler, ::windows_core::IUnknown);
impl ::core::cmp::PartialEq for IShellTaskScheduler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for IShellTaskScheduler {}
impl ::core::fmt::Debug for IShellTaskScheduler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellTaskScheduler").field(&self.0).finish()
    }
}
unsafe impl ::windows_core::Interface for IShellTaskScheduler {
    type Vtable = IShellTaskScheduler_Vtbl;
}
impl ::core::clone::Clone for IShellTaskScheduler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
unsafe impl ::windows_core::ComInterface for IShellTaskScheduler {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x6ccb7be0_6807_11d0_b810_00c04fd706ec);
}
#[repr(C)]
#[doc(hidden)]
pub struct IShellTaskScheduler_Vtbl {
    pub base__: ::windows_core::IUnknown_Vtbl,
    pub AddTask: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, prt: *mut ::core::ffi::c_void, rtoid: *const ::windows_core::GUID, lparam: usize, dwpriority: u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RemoveTasks: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rtoid: *const ::windows_core::GUID, lparam: usize, bwaitifrunning: super::super::Foundation::BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RemoveTasks: usize,
    pub CountTasks: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, rtoid: *const ::windows_core::GUID) -> u32,
    pub Status: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, dwreleasestatus: u32, dwthreadtimeout: u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellUIHelper(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelper {
    pub unsafe fn ResetFirstBootMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ResetFirstBootMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ResetSafeMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ResetSafeMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RefreshOfflineDesktop(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RefreshOfflineDesktop)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddFavorite<P0>(&self, url: P0, title: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).AddFavorite)(::windows_core::Interface::as_raw(self), url.into_param().abi(), ::core::mem::transmute(title.unwrap_or(::std::ptr::null()))).ok()
    }
    pub unsafe fn AddChannel<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).AddChannel)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddDesktopComponent<P0, P1>(&self, url: P0, r#type: P1, left: ::core::option::Option<*const super::super::System::Variant::VARIANT>, top: ::core::option::Option<*const super::super::System::Variant::VARIANT>, width: ::core::option::Option<*const super::super::System::Variant::VARIANT>, height: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).AddDesktopComponent)(::windows_core::Interface::as_raw(self), url.into_param().abi(), r#type.into_param().abi(), ::core::mem::transmute(left.unwrap_or(::std::ptr::null())), ::core::mem::transmute(top.unwrap_or(::std::ptr::null())), ::core::mem::transmute(width.unwrap_or(::std::ptr::null())), ::core::mem::transmute(height.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSubscribed<P0>(&self, url: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IsSubscribed)(::windows_core::Interface::as_raw(self), url.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NavigateAndFind<P0, P1>(&self, url: P0, strquery: P1, vartargetframe: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).NavigateAndFind)(::windows_core::Interface::as_raw(self), url.into_param().abi(), strquery.into_param().abi(), vartargetframe).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ImportExportFavorites<P0, P1>(&self, fimport: P0, strimpexppath: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).ImportExportFavorites)(::windows_core::Interface::as_raw(self), fimport.into_param().abi(), strimpexppath.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteSaveForm(&self, form: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).AutoCompleteSaveForm)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(form.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoScan<P0, P1>(&self, strsearch: P0, strfailureurl: P1, pvartargetframe: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).AutoScan)(::windows_core::Interface::as_raw(self), strsearch.into_param().abi(), strfailureurl.into_param().abi(), ::core::mem::transmute(pvartargetframe.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteAttach(&self, reserved: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).AutoCompleteAttach)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(reserved.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShowBrowserUI<P0>(&self, bstrname: P0, pvarin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).ShowBrowserUI)(::windows_core::Interface::as_raw(self), bstrname.into_param().abi(), pvarin, &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellUIHelper, ::windows_core::IUnknown, super::super::System::Com::IDispatch);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellUIHelper {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellUIHelper {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellUIHelper {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellUIHelper").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellUIHelper {
    type Vtable = IShellUIHelper_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellUIHelper {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellUIHelper {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x729fe2f8_1ea8_11d1_8f85_00c04fc2fbe1);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellUIHelper_Vtbl {
    pub base__: super::super::System::Com::IDispatch_Vtbl,
    pub ResetFirstBootMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub ResetSafeMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub RefreshOfflineDesktop: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub AddFavorite: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>, title: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    AddFavorite: usize,
    pub AddChannel: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub AddDesktopComponent: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>, r#type: ::std::mem::MaybeUninit<::windows_core::BSTR>, left: *const super::super::System::Variant::VARIANT, top: *const super::super::System::Variant::VARIANT, width: *const super::super::System::Variant::VARIANT, height: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    AddDesktopComponent: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub IsSubscribed: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>, pbool: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    IsSubscribed: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub NavigateAndFind: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>, strquery: ::std::mem::MaybeUninit<::windows_core::BSTR>, vartargetframe: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    NavigateAndFind: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub ImportExportFavorites: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fimport: super::super::Foundation::VARIANT_BOOL, strimpexppath: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    ImportExportFavorites: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub AutoCompleteSaveForm: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, form: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    AutoCompleteSaveForm: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub AutoScan: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, strsearch: ::std::mem::MaybeUninit<::windows_core::BSTR>, strfailureurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvartargetframe: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    AutoScan: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub AutoCompleteAttach: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, reserved: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    AutoCompleteAttach: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub ShowBrowserUI: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrname: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvarin: *const super::super::System::Variant::VARIANT, pvarout: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    ShowBrowserUI: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellUIHelper2(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelper2 {
    pub unsafe fn ResetFirstBootMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.ResetFirstBootMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ResetSafeMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.ResetSafeMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RefreshOfflineDesktop(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.RefreshOfflineDesktop)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddFavorite<P0>(&self, url: P0, title: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.AddFavorite)(::windows_core::Interface::as_raw(self), url.into_param().abi(), ::core::mem::transmute(title.unwrap_or(::std::ptr::null()))).ok()
    }
    pub unsafe fn AddChannel<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.AddChannel)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddDesktopComponent<P0, P1>(&self, url: P0, r#type: P1, left: ::core::option::Option<*const super::super::System::Variant::VARIANT>, top: ::core::option::Option<*const super::super::System::Variant::VARIANT>, width: ::core::option::Option<*const super::super::System::Variant::VARIANT>, height: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.AddDesktopComponent)(::windows_core::Interface::as_raw(self), url.into_param().abi(), r#type.into_param().abi(), ::core::mem::transmute(left.unwrap_or(::std::ptr::null())), ::core::mem::transmute(top.unwrap_or(::std::ptr::null())), ::core::mem::transmute(width.unwrap_or(::std::ptr::null())), ::core::mem::transmute(height.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSubscribed<P0>(&self, url: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.IsSubscribed)(::windows_core::Interface::as_raw(self), url.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NavigateAndFind<P0, P1>(&self, url: P0, strquery: P1, vartargetframe: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.NavigateAndFind)(::windows_core::Interface::as_raw(self), url.into_param().abi(), strquery.into_param().abi(), vartargetframe).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ImportExportFavorites<P0, P1>(&self, fimport: P0, strimpexppath: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.ImportExportFavorites)(::windows_core::Interface::as_raw(self), fimport.into_param().abi(), strimpexppath.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteSaveForm(&self, form: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.AutoCompleteSaveForm)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(form.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoScan<P0, P1>(&self, strsearch: P0, strfailureurl: P1, pvartargetframe: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.AutoScan)(::windows_core::Interface::as_raw(self), strsearch.into_param().abi(), strfailureurl.into_param().abi(), ::core::mem::transmute(pvartargetframe.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteAttach(&self, reserved: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.AutoCompleteAttach)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(reserved.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShowBrowserUI<P0>(&self, bstrname: P0, pvarin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.ShowBrowserUI)(::windows_core::Interface::as_raw(self), bstrname.into_param().abi(), pvarin, &mut result__).from_abi(result__)
    }
    pub unsafe fn AddSearchProvider<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).AddSearchProvider)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    pub unsafe fn RunOnceShown(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).RunOnceShown)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SkipRunOnce(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SkipRunOnce)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CustomizeSettings<P0, P1, P2>(&self, fsqm: P0, fphishing: P1, bstrlocale: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).CustomizeSettings)(::windows_core::Interface::as_raw(self), fsqm.into_param().abi(), fphishing.into_param().abi(), bstrlocale.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SqmEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).SqmEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PhishingEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).PhishingEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn BrandImageUri(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).BrandImageUri)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SkipTabsWelcome(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).SkipTabsWelcome)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn DiagnoseConnection(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).DiagnoseConnection)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CustomizeClearType<P0>(&self, fset: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).CustomizeClearType)(::windows_core::Interface::as_raw(self), fset.into_param().abi()).ok()
    }
    pub unsafe fn IsSearchProviderInstalled<P0>(&self, url: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IsSearchProviderInstalled)(::windows_core::Interface::as_raw(self), url.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSearchMigrated(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IsSearchMigrated)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DefaultSearchProvider(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).DefaultSearchProvider)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RunOnceRequiredSettingsComplete<P0>(&self, fcomplete: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).RunOnceRequiredSettingsComplete)(::windows_core::Interface::as_raw(self), fcomplete.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RunOnceHasShown(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).RunOnceHasShown)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SearchGuideUrl(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).SearchGuideUrl)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellUIHelper2, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IShellUIHelper);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellUIHelper2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellUIHelper2 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellUIHelper2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellUIHelper2").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellUIHelper2 {
    type Vtable = IShellUIHelper2_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellUIHelper2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellUIHelper2 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xa7fe6eda_1932_4281_b881_87b31b8bc52c);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellUIHelper2_Vtbl {
    pub base__: IShellUIHelper_Vtbl,
    pub AddSearchProvider: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub RunOnceShown: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub SkipRunOnce: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub CustomizeSettings: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fsqm: super::super::Foundation::VARIANT_BOOL, fphishing: super::super::Foundation::VARIANT_BOOL, bstrlocale: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    CustomizeSettings: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SqmEnabled: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfenabled: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SqmEnabled: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub PhishingEnabled: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfenabled: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    PhishingEnabled: usize,
    pub BrandImageUri: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstruri: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub SkipTabsWelcome: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub DiagnoseConnection: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub CustomizeClearType: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fset: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    CustomizeClearType: usize,
    pub IsSearchProviderInstalled: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>, pdwresult: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub IsSearchMigrated: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfmigrated: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    IsSearchMigrated: usize,
    pub DefaultSearchProvider: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub RunOnceRequiredSettingsComplete: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fcomplete: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RunOnceRequiredSettingsComplete: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub RunOnceHasShown: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfshown: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    RunOnceHasShown: usize,
    pub SearchGuideUrl: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrurl: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellUIHelper3(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelper3 {
    pub unsafe fn ResetFirstBootMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.ResetFirstBootMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ResetSafeMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.ResetSafeMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RefreshOfflineDesktop(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.RefreshOfflineDesktop)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddFavorite<P0>(&self, url: P0, title: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.AddFavorite)(::windows_core::Interface::as_raw(self), url.into_param().abi(), ::core::mem::transmute(title.unwrap_or(::std::ptr::null()))).ok()
    }
    pub unsafe fn AddChannel<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.AddChannel)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddDesktopComponent<P0, P1>(&self, url: P0, r#type: P1, left: ::core::option::Option<*const super::super::System::Variant::VARIANT>, top: ::core::option::Option<*const super::super::System::Variant::VARIANT>, width: ::core::option::Option<*const super::super::System::Variant::VARIANT>, height: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.AddDesktopComponent)(::windows_core::Interface::as_raw(self), url.into_param().abi(), r#type.into_param().abi(), ::core::mem::transmute(left.unwrap_or(::std::ptr::null())), ::core::mem::transmute(top.unwrap_or(::std::ptr::null())), ::core::mem::transmute(width.unwrap_or(::std::ptr::null())), ::core::mem::transmute(height.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSubscribed<P0>(&self, url: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.IsSubscribed)(::windows_core::Interface::as_raw(self), url.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NavigateAndFind<P0, P1>(&self, url: P0, strquery: P1, vartargetframe: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.NavigateAndFind)(::windows_core::Interface::as_raw(self), url.into_param().abi(), strquery.into_param().abi(), vartargetframe).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ImportExportFavorites<P0, P1>(&self, fimport: P0, strimpexppath: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.ImportExportFavorites)(::windows_core::Interface::as_raw(self), fimport.into_param().abi(), strimpexppath.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteSaveForm(&self, form: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.AutoCompleteSaveForm)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(form.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoScan<P0, P1>(&self, strsearch: P0, strfailureurl: P1, pvartargetframe: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.AutoScan)(::windows_core::Interface::as_raw(self), strsearch.into_param().abi(), strfailureurl.into_param().abi(), ::core::mem::transmute(pvartargetframe.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteAttach(&self, reserved: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.AutoCompleteAttach)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(reserved.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShowBrowserUI<P0>(&self, bstrname: P0, pvarin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.ShowBrowserUI)(::windows_core::Interface::as_raw(self), bstrname.into_param().abi(), pvarin, &mut result__).from_abi(result__)
    }
    pub unsafe fn AddSearchProvider<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.AddSearchProvider)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    pub unsafe fn RunOnceShown(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.RunOnceShown)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SkipRunOnce(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SkipRunOnce)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CustomizeSettings<P0, P1, P2>(&self, fsqm: P0, fphishing: P1, bstrlocale: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.CustomizeSettings)(::windows_core::Interface::as_raw(self), fsqm.into_param().abi(), fphishing.into_param().abi(), bstrlocale.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SqmEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.SqmEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PhishingEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.PhishingEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn BrandImageUri(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.BrandImageUri)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SkipTabsWelcome(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.SkipTabsWelcome)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn DiagnoseConnection(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.DiagnoseConnection)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CustomizeClearType<P0>(&self, fset: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.CustomizeClearType)(::windows_core::Interface::as_raw(self), fset.into_param().abi()).ok()
    }
    pub unsafe fn IsSearchProviderInstalled<P0>(&self, url: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.IsSearchProviderInstalled)(::windows_core::Interface::as_raw(self), url.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSearchMigrated(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.IsSearchMigrated)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DefaultSearchProvider(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.DefaultSearchProvider)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RunOnceRequiredSettingsComplete<P0>(&self, fcomplete: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.RunOnceRequiredSettingsComplete)(::windows_core::Interface::as_raw(self), fcomplete.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RunOnceHasShown(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.RunOnceHasShown)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SearchGuideUrl(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.SearchGuideUrl)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AddService<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).AddService)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    pub unsafe fn IsServiceInstalled<P0, P1>(&self, url: P0, verb: P1) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IsServiceInstalled)(::windows_core::Interface::as_raw(self), url.into_param().abi(), verb.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn InPrivateFilteringEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).InPrivateFilteringEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddToFavoritesBar<P0, P1>(&self, url: P0, title: P1, r#type: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).AddToFavoritesBar)(::windows_core::Interface::as_raw(self), url.into_param().abi(), title.into_param().abi(), r#type).ok()
    }
    pub unsafe fn BuildNewTabPage(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).BuildNewTabPage)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetRecentlyClosedVisible<P0>(&self, fvisible: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetRecentlyClosedVisible)(::windows_core::Interface::as_raw(self), fvisible.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetActivitiesVisible<P0>(&self, fvisible: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetActivitiesVisible)(::windows_core::Interface::as_raw(self), fvisible.into_param().abi()).ok()
    }
    pub unsafe fn ContentDiscoveryReset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ContentDiscoveryReset)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSuggestedSitesEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).IsSuggestedSitesEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableSuggestedSites<P0>(&self, fenable: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).EnableSuggestedSites)(::windows_core::Interface::as_raw(self), fenable.into_param().abi()).ok()
    }
    pub unsafe fn NavigateToSuggestedSites<P0>(&self, bstrrelativeurl: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).NavigateToSuggestedSites)(::windows_core::Interface::as_raw(self), bstrrelativeurl.into_param().abi()).ok()
    }
    pub unsafe fn ShowTabsHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ShowTabsHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ShowInPrivateHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ShowInPrivateHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellUIHelper3, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IShellUIHelper, IShellUIHelper2);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellUIHelper3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellUIHelper3 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellUIHelper3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellUIHelper3").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellUIHelper3 {
    type Vtable = IShellUIHelper3_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellUIHelper3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellUIHelper3 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x528df2ec_d419_40bc_9b6d_dcdbf9c1b25d);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellUIHelper3_Vtbl {
    pub base__: IShellUIHelper2_Vtbl,
    pub AddService: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub IsServiceInstalled: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>, verb: ::std::mem::MaybeUninit<::windows_core::BSTR>, pdwresult: *mut u32) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub InPrivateFilteringEnabled: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfenabled: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    InPrivateFilteringEnabled: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub AddToFavoritesBar: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>, title: ::std::mem::MaybeUninit<::windows_core::BSTR>, r#type: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    AddToFavoritesBar: usize,
    pub BuildNewTabPage: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub SetRecentlyClosedVisible: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fvisible: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetRecentlyClosedVisible: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetActivitiesVisible: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fvisible: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetActivitiesVisible: usize,
    pub ContentDiscoveryReset: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub IsSuggestedSitesEnabled: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfenabled: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    IsSuggestedSitesEnabled: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub EnableSuggestedSites: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    EnableSuggestedSites: usize,
    pub NavigateToSuggestedSites: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrrelativeurl: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub ShowTabsHelp: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub ShowInPrivateHelp: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellUIHelper4(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelper4 {
    pub unsafe fn ResetFirstBootMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.ResetFirstBootMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ResetSafeMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.ResetSafeMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RefreshOfflineDesktop(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.RefreshOfflineDesktop)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddFavorite<P0>(&self, url: P0, title: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.AddFavorite)(::windows_core::Interface::as_raw(self), url.into_param().abi(), ::core::mem::transmute(title.unwrap_or(::std::ptr::null()))).ok()
    }
    pub unsafe fn AddChannel<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.AddChannel)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddDesktopComponent<P0, P1>(&self, url: P0, r#type: P1, left: ::core::option::Option<*const super::super::System::Variant::VARIANT>, top: ::core::option::Option<*const super::super::System::Variant::VARIANT>, width: ::core::option::Option<*const super::super::System::Variant::VARIANT>, height: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.AddDesktopComponent)(::windows_core::Interface::as_raw(self), url.into_param().abi(), r#type.into_param().abi(), ::core::mem::transmute(left.unwrap_or(::std::ptr::null())), ::core::mem::transmute(top.unwrap_or(::std::ptr::null())), ::core::mem::transmute(width.unwrap_or(::std::ptr::null())), ::core::mem::transmute(height.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSubscribed<P0>(&self, url: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.IsSubscribed)(::windows_core::Interface::as_raw(self), url.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NavigateAndFind<P0, P1>(&self, url: P0, strquery: P1, vartargetframe: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.NavigateAndFind)(::windows_core::Interface::as_raw(self), url.into_param().abi(), strquery.into_param().abi(), vartargetframe).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ImportExportFavorites<P0, P1>(&self, fimport: P0, strimpexppath: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.ImportExportFavorites)(::windows_core::Interface::as_raw(self), fimport.into_param().abi(), strimpexppath.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteSaveForm(&self, form: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.AutoCompleteSaveForm)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(form.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoScan<P0, P1>(&self, strsearch: P0, strfailureurl: P1, pvartargetframe: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.AutoScan)(::windows_core::Interface::as_raw(self), strsearch.into_param().abi(), strfailureurl.into_param().abi(), ::core::mem::transmute(pvartargetframe.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteAttach(&self, reserved: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.AutoCompleteAttach)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(reserved.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShowBrowserUI<P0>(&self, bstrname: P0, pvarin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.ShowBrowserUI)(::windows_core::Interface::as_raw(self), bstrname.into_param().abi(), pvarin, &mut result__).from_abi(result__)
    }
    pub unsafe fn AddSearchProvider<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.AddSearchProvider)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    pub unsafe fn RunOnceShown(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.RunOnceShown)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SkipRunOnce(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.SkipRunOnce)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CustomizeSettings<P0, P1, P2>(&self, fsqm: P0, fphishing: P1, bstrlocale: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.CustomizeSettings)(::windows_core::Interface::as_raw(self), fsqm.into_param().abi(), fphishing.into_param().abi(), bstrlocale.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SqmEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.SqmEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PhishingEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.PhishingEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn BrandImageUri(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.BrandImageUri)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SkipTabsWelcome(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.SkipTabsWelcome)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn DiagnoseConnection(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.DiagnoseConnection)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CustomizeClearType<P0>(&self, fset: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.CustomizeClearType)(::windows_core::Interface::as_raw(self), fset.into_param().abi()).ok()
    }
    pub unsafe fn IsSearchProviderInstalled<P0>(&self, url: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.IsSearchProviderInstalled)(::windows_core::Interface::as_raw(self), url.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSearchMigrated(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.IsSearchMigrated)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DefaultSearchProvider(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.DefaultSearchProvider)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RunOnceRequiredSettingsComplete<P0>(&self, fcomplete: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.RunOnceRequiredSettingsComplete)(::windows_core::Interface::as_raw(self), fcomplete.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RunOnceHasShown(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.RunOnceHasShown)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SearchGuideUrl(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.SearchGuideUrl)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AddService<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.AddService)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    pub unsafe fn IsServiceInstalled<P0, P1>(&self, url: P0, verb: P1) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.IsServiceInstalled)(::windows_core::Interface::as_raw(self), url.into_param().abi(), verb.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn InPrivateFilteringEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.InPrivateFilteringEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddToFavoritesBar<P0, P1>(&self, url: P0, title: P1, r#type: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.AddToFavoritesBar)(::windows_core::Interface::as_raw(self), url.into_param().abi(), title.into_param().abi(), r#type).ok()
    }
    pub unsafe fn BuildNewTabPage(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.BuildNewTabPage)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetRecentlyClosedVisible<P0>(&self, fvisible: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.SetRecentlyClosedVisible)(::windows_core::Interface::as_raw(self), fvisible.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetActivitiesVisible<P0>(&self, fvisible: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.SetActivitiesVisible)(::windows_core::Interface::as_raw(self), fvisible.into_param().abi()).ok()
    }
    pub unsafe fn ContentDiscoveryReset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.ContentDiscoveryReset)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSuggestedSitesEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.IsSuggestedSitesEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableSuggestedSites<P0>(&self, fenable: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.EnableSuggestedSites)(::windows_core::Interface::as_raw(self), fenable.into_param().abi()).ok()
    }
    pub unsafe fn NavigateToSuggestedSites<P0>(&self, bstrrelativeurl: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.NavigateToSuggestedSites)(::windows_core::Interface::as_raw(self), bstrrelativeurl.into_param().abi()).ok()
    }
    pub unsafe fn ShowTabsHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.ShowTabsHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ShowInPrivateHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.ShowInPrivateHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msIsSiteMode(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).msIsSiteMode)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn msSiteModeShowThumbBar(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msSiteModeShowThumbBar)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddThumbBarButton<P0, P1>(&self, bstriconurl: P0, bstrtooltip: P1) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).msSiteModeAddThumbBarButton)(::windows_core::Interface::as_raw(self), bstriconurl.into_param().abi(), bstrtooltip.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeUpdateThumbBarButton<P0, P1>(&self, buttonid: super::super::System::Variant::VARIANT, fenabled: P0, fvisible: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).msSiteModeUpdateThumbBarButton)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(buttonid), fenabled.into_param().abi(), fvisible.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeSetIconOverlay<P0>(&self, iconurl: P0, pvardescription: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).msSiteModeSetIconOverlay)(::windows_core::Interface::as_raw(self), iconurl.into_param().abi(), pvardescription).ok()
    }
    pub unsafe fn msSiteModeClearIconOverlay(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msSiteModeClearIconOverlay)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msAddSiteMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msAddSiteMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeCreateJumpList<P0>(&self, bstrheader: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).msSiteModeCreateJumpList)(::windows_core::Interface::as_raw(self), bstrheader.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddJumpListItem<P0, P1, P2>(&self, bstrname: P0, bstractionuri: P1, bstriconuri: P2, pvarwindowtype: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).msSiteModeAddJumpListItem)(::windows_core::Interface::as_raw(self), bstrname.into_param().abi(), bstractionuri.into_param().abi(), bstriconuri.into_param().abi(), pvarwindowtype).ok()
    }
    pub unsafe fn msSiteModeClearJumpList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msSiteModeClearJumpList)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeShowJumpList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msSiteModeShowJumpList)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddButtonStyle<P0, P1>(&self, uibuttonid: super::super::System::Variant::VARIANT, bstriconurl: P0, bstrtooltip: P1) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).msSiteModeAddButtonStyle)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(uibuttonid), bstriconurl.into_param().abi(), bstrtooltip.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeShowButtonStyle(&self, uibuttonid: super::super::System::Variant::VARIANT, uistyleid: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msSiteModeShowButtonStyle)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(uibuttonid), ::core::mem::transmute(uistyleid)).ok()
    }
    pub unsafe fn msSiteModeActivate(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msSiteModeActivate)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msIsSiteModeFirstRun<P0>(&self, fpreservestate: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).msIsSiteModeFirstRun)(::windows_core::Interface::as_raw(self), fpreservestate.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn msAddTrackingProtectionList<P0, P1>(&self, url: P0, bstrfiltername: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).msAddTrackingProtectionList)(::windows_core::Interface::as_raw(self), url.into_param().abi(), bstrfiltername.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msTrackingProtectionEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).msTrackingProtectionEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msActiveXFilteringEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).msActiveXFilteringEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellUIHelper4, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IShellUIHelper, IShellUIHelper2, IShellUIHelper3);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellUIHelper4 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellUIHelper4 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellUIHelper4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellUIHelper4").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellUIHelper4 {
    type Vtable = IShellUIHelper4_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellUIHelper4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellUIHelper4 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xb36e6a53_8073_499e_824c_d776330a333e);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellUIHelper4_Vtbl {
    pub base__: IShellUIHelper3_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub msIsSiteMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfsitemode: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    msIsSiteMode: usize,
    pub msSiteModeShowThumbBar: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub msSiteModeAddThumbBarButton: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstriconurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstrtooltip: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvarbuttonid: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    msSiteModeAddThumbBarButton: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub msSiteModeUpdateThumbBarButton: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, buttonid: super::super::System::Variant::VARIANT, fenabled: super::super::Foundation::VARIANT_BOOL, fvisible: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    msSiteModeUpdateThumbBarButton: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub msSiteModeSetIconOverlay: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, iconurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvardescription: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    msSiteModeSetIconOverlay: usize,
    pub msSiteModeClearIconOverlay: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub msAddSiteMode: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub msSiteModeCreateJumpList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrheader: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub msSiteModeAddJumpListItem: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrname: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstractionuri: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstriconuri: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvarwindowtype: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    msSiteModeAddJumpListItem: usize,
    pub msSiteModeClearJumpList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub msSiteModeShowJumpList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub msSiteModeAddButtonStyle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, uibuttonid: super::super::System::Variant::VARIANT, bstriconurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstrtooltip: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvarstyleid: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    msSiteModeAddButtonStyle: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub msSiteModeShowButtonStyle: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, uibuttonid: super::super::System::Variant::VARIANT, uistyleid: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    msSiteModeShowButtonStyle: usize,
    pub msSiteModeActivate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub msIsSiteModeFirstRun: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fpreservestate: super::super::Foundation::VARIANT_BOOL, puifirstrun: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    msIsSiteModeFirstRun: usize,
    pub msAddTrackingProtectionList: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstrfiltername: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub msTrackingProtectionEnabled: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfenabled: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    msTrackingProtectionEnabled: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub msActiveXFilteringEnabled: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pfenabled: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    msActiveXFilteringEnabled: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellUIHelper5(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelper5 {
    pub unsafe fn ResetFirstBootMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.ResetFirstBootMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ResetSafeMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.ResetSafeMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RefreshOfflineDesktop(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.RefreshOfflineDesktop)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddFavorite<P0>(&self, url: P0, title: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.AddFavorite)(::windows_core::Interface::as_raw(self), url.into_param().abi(), ::core::mem::transmute(title.unwrap_or(::std::ptr::null()))).ok()
    }
    pub unsafe fn AddChannel<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.AddChannel)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddDesktopComponent<P0, P1>(&self, url: P0, r#type: P1, left: ::core::option::Option<*const super::super::System::Variant::VARIANT>, top: ::core::option::Option<*const super::super::System::Variant::VARIANT>, width: ::core::option::Option<*const super::super::System::Variant::VARIANT>, height: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.AddDesktopComponent)(::windows_core::Interface::as_raw(self), url.into_param().abi(), r#type.into_param().abi(), ::core::mem::transmute(left.unwrap_or(::std::ptr::null())), ::core::mem::transmute(top.unwrap_or(::std::ptr::null())), ::core::mem::transmute(width.unwrap_or(::std::ptr::null())), ::core::mem::transmute(height.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSubscribed<P0>(&self, url: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.IsSubscribed)(::windows_core::Interface::as_raw(self), url.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NavigateAndFind<P0, P1>(&self, url: P0, strquery: P1, vartargetframe: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.NavigateAndFind)(::windows_core::Interface::as_raw(self), url.into_param().abi(), strquery.into_param().abi(), vartargetframe).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ImportExportFavorites<P0, P1>(&self, fimport: P0, strimpexppath: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.ImportExportFavorites)(::windows_core::Interface::as_raw(self), fimport.into_param().abi(), strimpexppath.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteSaveForm(&self, form: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.AutoCompleteSaveForm)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(form.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoScan<P0, P1>(&self, strsearch: P0, strfailureurl: P1, pvartargetframe: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.AutoScan)(::windows_core::Interface::as_raw(self), strsearch.into_param().abi(), strfailureurl.into_param().abi(), ::core::mem::transmute(pvartargetframe.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteAttach(&self, reserved: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.AutoCompleteAttach)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(reserved.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShowBrowserUI<P0>(&self, bstrname: P0, pvarin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.ShowBrowserUI)(::windows_core::Interface::as_raw(self), bstrname.into_param().abi(), pvarin, &mut result__).from_abi(result__)
    }
    pub unsafe fn AddSearchProvider<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.AddSearchProvider)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    pub unsafe fn RunOnceShown(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.RunOnceShown)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SkipRunOnce(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.SkipRunOnce)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CustomizeSettings<P0, P1, P2>(&self, fsqm: P0, fphishing: P1, bstrlocale: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.CustomizeSettings)(::windows_core::Interface::as_raw(self), fsqm.into_param().abi(), fphishing.into_param().abi(), bstrlocale.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SqmEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.SqmEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PhishingEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.PhishingEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn BrandImageUri(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.BrandImageUri)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SkipTabsWelcome(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.SkipTabsWelcome)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn DiagnoseConnection(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.DiagnoseConnection)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CustomizeClearType<P0>(&self, fset: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.CustomizeClearType)(::windows_core::Interface::as_raw(self), fset.into_param().abi()).ok()
    }
    pub unsafe fn IsSearchProviderInstalled<P0>(&self, url: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.IsSearchProviderInstalled)(::windows_core::Interface::as_raw(self), url.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSearchMigrated(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.IsSearchMigrated)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DefaultSearchProvider(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.DefaultSearchProvider)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RunOnceRequiredSettingsComplete<P0>(&self, fcomplete: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.RunOnceRequiredSettingsComplete)(::windows_core::Interface::as_raw(self), fcomplete.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RunOnceHasShown(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.RunOnceHasShown)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SearchGuideUrl(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.SearchGuideUrl)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AddService<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.AddService)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    pub unsafe fn IsServiceInstalled<P0, P1>(&self, url: P0, verb: P1) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.IsServiceInstalled)(::windows_core::Interface::as_raw(self), url.into_param().abi(), verb.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn InPrivateFilteringEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.InPrivateFilteringEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddToFavoritesBar<P0, P1>(&self, url: P0, title: P1, r#type: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.AddToFavoritesBar)(::windows_core::Interface::as_raw(self), url.into_param().abi(), title.into_param().abi(), r#type).ok()
    }
    pub unsafe fn BuildNewTabPage(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.BuildNewTabPage)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetRecentlyClosedVisible<P0>(&self, fvisible: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.SetRecentlyClosedVisible)(::windows_core::Interface::as_raw(self), fvisible.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetActivitiesVisible<P0>(&self, fvisible: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.SetActivitiesVisible)(::windows_core::Interface::as_raw(self), fvisible.into_param().abi()).ok()
    }
    pub unsafe fn ContentDiscoveryReset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.ContentDiscoveryReset)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSuggestedSitesEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.IsSuggestedSitesEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableSuggestedSites<P0>(&self, fenable: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.EnableSuggestedSites)(::windows_core::Interface::as_raw(self), fenable.into_param().abi()).ok()
    }
    pub unsafe fn NavigateToSuggestedSites<P0>(&self, bstrrelativeurl: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.NavigateToSuggestedSites)(::windows_core::Interface::as_raw(self), bstrrelativeurl.into_param().abi()).ok()
    }
    pub unsafe fn ShowTabsHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.ShowTabsHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ShowInPrivateHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.ShowInPrivateHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msIsSiteMode(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.msIsSiteMode)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn msSiteModeShowThumbBar(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msSiteModeShowThumbBar)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddThumbBarButton<P0, P1>(&self, bstriconurl: P0, bstrtooltip: P1) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.msSiteModeAddThumbBarButton)(::windows_core::Interface::as_raw(self), bstriconurl.into_param().abi(), bstrtooltip.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeUpdateThumbBarButton<P0, P1>(&self, buttonid: super::super::System::Variant::VARIANT, fenabled: P0, fvisible: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.msSiteModeUpdateThumbBarButton)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(buttonid), fenabled.into_param().abi(), fvisible.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeSetIconOverlay<P0>(&self, iconurl: P0, pvardescription: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.msSiteModeSetIconOverlay)(::windows_core::Interface::as_raw(self), iconurl.into_param().abi(), pvardescription).ok()
    }
    pub unsafe fn msSiteModeClearIconOverlay(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msSiteModeClearIconOverlay)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msAddSiteMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msAddSiteMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeCreateJumpList<P0>(&self, bstrheader: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.msSiteModeCreateJumpList)(::windows_core::Interface::as_raw(self), bstrheader.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddJumpListItem<P0, P1, P2>(&self, bstrname: P0, bstractionuri: P1, bstriconuri: P2, pvarwindowtype: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.msSiteModeAddJumpListItem)(::windows_core::Interface::as_raw(self), bstrname.into_param().abi(), bstractionuri.into_param().abi(), bstriconuri.into_param().abi(), pvarwindowtype).ok()
    }
    pub unsafe fn msSiteModeClearJumpList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msSiteModeClearJumpList)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeShowJumpList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msSiteModeShowJumpList)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddButtonStyle<P0, P1>(&self, uibuttonid: super::super::System::Variant::VARIANT, bstriconurl: P0, bstrtooltip: P1) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.msSiteModeAddButtonStyle)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(uibuttonid), bstriconurl.into_param().abi(), bstrtooltip.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeShowButtonStyle(&self, uibuttonid: super::super::System::Variant::VARIANT, uistyleid: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msSiteModeShowButtonStyle)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(uibuttonid), ::core::mem::transmute(uistyleid)).ok()
    }
    pub unsafe fn msSiteModeActivate(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msSiteModeActivate)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msIsSiteModeFirstRun<P0>(&self, fpreservestate: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.msIsSiteModeFirstRun)(::windows_core::Interface::as_raw(self), fpreservestate.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn msAddTrackingProtectionList<P0, P1>(&self, url: P0, bstrfiltername: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.msAddTrackingProtectionList)(::windows_core::Interface::as_raw(self), url.into_param().abi(), bstrfiltername.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msTrackingProtectionEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.msTrackingProtectionEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msActiveXFilteringEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.msActiveXFilteringEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msProvisionNetworks<P0>(&self, bstrprovisioningxml: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).msProvisionNetworks)(::windows_core::Interface::as_raw(self), bstrprovisioningxml.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn msReportSafeUrl(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msReportSafeUrl)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeRefreshBadge(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msSiteModeRefreshBadge)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeClearBadge(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msSiteModeClearBadge)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msDiagnoseConnectionUILess(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msDiagnoseConnectionUILess)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msLaunchNetworkClientHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msLaunchNetworkClientHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msChangeDefaultBrowser<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).msChangeDefaultBrowser)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellUIHelper5, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IShellUIHelper, IShellUIHelper2, IShellUIHelper3, IShellUIHelper4);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellUIHelper5 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellUIHelper5 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellUIHelper5 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellUIHelper5").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellUIHelper5 {
    type Vtable = IShellUIHelper5_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellUIHelper5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellUIHelper5 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0xa2a08b09_103d_4d3f_b91c_ea455ca82efa);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellUIHelper5_Vtbl {
    pub base__: IShellUIHelper4_Vtbl,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub msProvisionNetworks: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrprovisioningxml: ::std::mem::MaybeUninit<::windows_core::BSTR>, puiresult: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    msProvisionNetworks: usize,
    pub msReportSafeUrl: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub msSiteModeRefreshBadge: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub msSiteModeClearBadge: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub msDiagnoseConnectionUILess: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub msLaunchNetworkClientHelp: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub msChangeDefaultBrowser: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fchange: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    msChangeDefaultBrowser: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellUIHelper6(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelper6 {
    pub unsafe fn ResetFirstBootMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.ResetFirstBootMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ResetSafeMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.ResetSafeMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RefreshOfflineDesktop(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.RefreshOfflineDesktop)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddFavorite<P0>(&self, url: P0, title: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.AddFavorite)(::windows_core::Interface::as_raw(self), url.into_param().abi(), ::core::mem::transmute(title.unwrap_or(::std::ptr::null()))).ok()
    }
    pub unsafe fn AddChannel<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.AddChannel)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddDesktopComponent<P0, P1>(&self, url: P0, r#type: P1, left: ::core::option::Option<*const super::super::System::Variant::VARIANT>, top: ::core::option::Option<*const super::super::System::Variant::VARIANT>, width: ::core::option::Option<*const super::super::System::Variant::VARIANT>, height: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.AddDesktopComponent)(::windows_core::Interface::as_raw(self), url.into_param().abi(), r#type.into_param().abi(), ::core::mem::transmute(left.unwrap_or(::std::ptr::null())), ::core::mem::transmute(top.unwrap_or(::std::ptr::null())), ::core::mem::transmute(width.unwrap_or(::std::ptr::null())), ::core::mem::transmute(height.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSubscribed<P0>(&self, url: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.IsSubscribed)(::windows_core::Interface::as_raw(self), url.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NavigateAndFind<P0, P1>(&self, url: P0, strquery: P1, vartargetframe: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.NavigateAndFind)(::windows_core::Interface::as_raw(self), url.into_param().abi(), strquery.into_param().abi(), vartargetframe).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ImportExportFavorites<P0, P1>(&self, fimport: P0, strimpexppath: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.ImportExportFavorites)(::windows_core::Interface::as_raw(self), fimport.into_param().abi(), strimpexppath.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteSaveForm(&self, form: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.AutoCompleteSaveForm)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(form.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoScan<P0, P1>(&self, strsearch: P0, strfailureurl: P1, pvartargetframe: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.AutoScan)(::windows_core::Interface::as_raw(self), strsearch.into_param().abi(), strfailureurl.into_param().abi(), ::core::mem::transmute(pvartargetframe.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteAttach(&self, reserved: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.AutoCompleteAttach)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(reserved.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShowBrowserUI<P0>(&self, bstrname: P0, pvarin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.ShowBrowserUI)(::windows_core::Interface::as_raw(self), bstrname.into_param().abi(), pvarin, &mut result__).from_abi(result__)
    }
    pub unsafe fn AddSearchProvider<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.AddSearchProvider)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    pub unsafe fn RunOnceShown(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.RunOnceShown)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SkipRunOnce(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.SkipRunOnce)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CustomizeSettings<P0, P1, P2>(&self, fsqm: P0, fphishing: P1, bstrlocale: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.CustomizeSettings)(::windows_core::Interface::as_raw(self), fsqm.into_param().abi(), fphishing.into_param().abi(), bstrlocale.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SqmEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.SqmEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PhishingEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.PhishingEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn BrandImageUri(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.BrandImageUri)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SkipTabsWelcome(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.SkipTabsWelcome)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn DiagnoseConnection(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.DiagnoseConnection)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CustomizeClearType<P0>(&self, fset: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.CustomizeClearType)(::windows_core::Interface::as_raw(self), fset.into_param().abi()).ok()
    }
    pub unsafe fn IsSearchProviderInstalled<P0>(&self, url: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.IsSearchProviderInstalled)(::windows_core::Interface::as_raw(self), url.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSearchMigrated(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.IsSearchMigrated)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DefaultSearchProvider(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.DefaultSearchProvider)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RunOnceRequiredSettingsComplete<P0>(&self, fcomplete: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.RunOnceRequiredSettingsComplete)(::windows_core::Interface::as_raw(self), fcomplete.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RunOnceHasShown(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.RunOnceHasShown)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SearchGuideUrl(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.SearchGuideUrl)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AddService<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.AddService)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    pub unsafe fn IsServiceInstalled<P0, P1>(&self, url: P0, verb: P1) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.IsServiceInstalled)(::windows_core::Interface::as_raw(self), url.into_param().abi(), verb.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn InPrivateFilteringEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.InPrivateFilteringEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddToFavoritesBar<P0, P1>(&self, url: P0, title: P1, r#type: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.AddToFavoritesBar)(::windows_core::Interface::as_raw(self), url.into_param().abi(), title.into_param().abi(), r#type).ok()
    }
    pub unsafe fn BuildNewTabPage(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.BuildNewTabPage)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetRecentlyClosedVisible<P0>(&self, fvisible: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.SetRecentlyClosedVisible)(::windows_core::Interface::as_raw(self), fvisible.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetActivitiesVisible<P0>(&self, fvisible: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.SetActivitiesVisible)(::windows_core::Interface::as_raw(self), fvisible.into_param().abi()).ok()
    }
    pub unsafe fn ContentDiscoveryReset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.ContentDiscoveryReset)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSuggestedSitesEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.IsSuggestedSitesEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableSuggestedSites<P0>(&self, fenable: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.EnableSuggestedSites)(::windows_core::Interface::as_raw(self), fenable.into_param().abi()).ok()
    }
    pub unsafe fn NavigateToSuggestedSites<P0>(&self, bstrrelativeurl: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.NavigateToSuggestedSites)(::windows_core::Interface::as_raw(self), bstrrelativeurl.into_param().abi()).ok()
    }
    pub unsafe fn ShowTabsHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.ShowTabsHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ShowInPrivateHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.ShowInPrivateHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msIsSiteMode(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.msIsSiteMode)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn msSiteModeShowThumbBar(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msSiteModeShowThumbBar)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddThumbBarButton<P0, P1>(&self, bstriconurl: P0, bstrtooltip: P1) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.msSiteModeAddThumbBarButton)(::windows_core::Interface::as_raw(self), bstriconurl.into_param().abi(), bstrtooltip.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeUpdateThumbBarButton<P0, P1>(&self, buttonid: super::super::System::Variant::VARIANT, fenabled: P0, fvisible: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.msSiteModeUpdateThumbBarButton)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(buttonid), fenabled.into_param().abi(), fvisible.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeSetIconOverlay<P0>(&self, iconurl: P0, pvardescription: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.msSiteModeSetIconOverlay)(::windows_core::Interface::as_raw(self), iconurl.into_param().abi(), pvardescription).ok()
    }
    pub unsafe fn msSiteModeClearIconOverlay(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msSiteModeClearIconOverlay)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msAddSiteMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msAddSiteMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeCreateJumpList<P0>(&self, bstrheader: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.msSiteModeCreateJumpList)(::windows_core::Interface::as_raw(self), bstrheader.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddJumpListItem<P0, P1, P2>(&self, bstrname: P0, bstractionuri: P1, bstriconuri: P2, pvarwindowtype: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.msSiteModeAddJumpListItem)(::windows_core::Interface::as_raw(self), bstrname.into_param().abi(), bstractionuri.into_param().abi(), bstriconuri.into_param().abi(), pvarwindowtype).ok()
    }
    pub unsafe fn msSiteModeClearJumpList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msSiteModeClearJumpList)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeShowJumpList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msSiteModeShowJumpList)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddButtonStyle<P0, P1>(&self, uibuttonid: super::super::System::Variant::VARIANT, bstriconurl: P0, bstrtooltip: P1) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.msSiteModeAddButtonStyle)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(uibuttonid), bstriconurl.into_param().abi(), bstrtooltip.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeShowButtonStyle(&self, uibuttonid: super::super::System::Variant::VARIANT, uistyleid: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msSiteModeShowButtonStyle)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(uibuttonid), ::core::mem::transmute(uistyleid)).ok()
    }
    pub unsafe fn msSiteModeActivate(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msSiteModeActivate)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msIsSiteModeFirstRun<P0>(&self, fpreservestate: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.msIsSiteModeFirstRun)(::windows_core::Interface::as_raw(self), fpreservestate.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn msAddTrackingProtectionList<P0, P1>(&self, url: P0, bstrfiltername: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.msAddTrackingProtectionList)(::windows_core::Interface::as_raw(self), url.into_param().abi(), bstrfiltername.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msTrackingProtectionEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.msTrackingProtectionEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msActiveXFilteringEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.msActiveXFilteringEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msProvisionNetworks<P0>(&self, bstrprovisioningxml: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.msProvisionNetworks)(::windows_core::Interface::as_raw(self), bstrprovisioningxml.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn msReportSafeUrl(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msReportSafeUrl)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeRefreshBadge(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msSiteModeRefreshBadge)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeClearBadge(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msSiteModeClearBadge)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msDiagnoseConnectionUILess(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msDiagnoseConnectionUILess)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msLaunchNetworkClientHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msLaunchNetworkClientHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msChangeDefaultBrowser<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.msChangeDefaultBrowser)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    pub unsafe fn msStopPeriodicTileUpdate(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msStopPeriodicTileUpdate)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msStartPeriodicTileUpdate(&self, pollinguris: super::super::System::Variant::VARIANT, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msStartPeriodicTileUpdate)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pollinguris), ::core::mem::transmute(starttime), ::core::mem::transmute(uiupdaterecurrence)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msStartPeriodicTileUpdateBatch(&self, pollinguris: super::super::System::Variant::VARIANT, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msStartPeriodicTileUpdateBatch)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pollinguris), ::core::mem::transmute(starttime), ::core::mem::transmute(uiupdaterecurrence)).ok()
    }
    pub unsafe fn msClearTile(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msClearTile)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msEnableTileNotificationQueue<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).msEnableTileNotificationQueue)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msPinnedSiteState(&self) -> ::windows_core::Result<super::super::System::Variant::VARIANT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).msPinnedSiteState)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msEnableTileNotificationQueueForSquare150x150<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).msEnableTileNotificationQueueForSquare150x150)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msEnableTileNotificationQueueForWide310x150<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).msEnableTileNotificationQueueForWide310x150)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msEnableTileNotificationQueueForSquare310x310<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).msEnableTileNotificationQueueForSquare310x310)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msScheduledTileNotification<P0, P1, P2>(&self, bstrnotificationxml: P0, bstrnotificationid: P1, bstrnotificationtag: P2, starttime: super::super::System::Variant::VARIANT, expirationtime: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).msScheduledTileNotification)(::windows_core::Interface::as_raw(self), bstrnotificationxml.into_param().abi(), bstrnotificationid.into_param().abi(), bstrnotificationtag.into_param().abi(), ::core::mem::transmute(starttime), ::core::mem::transmute(expirationtime)).ok()
    }
    pub unsafe fn msRemoveScheduledTileNotification<P0>(&self, bstrnotificationid: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).msRemoveScheduledTileNotification)(::windows_core::Interface::as_raw(self), bstrnotificationid.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msStartPeriodicBadgeUpdate<P0>(&self, pollinguri: P0, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).msStartPeriodicBadgeUpdate)(::windows_core::Interface::as_raw(self), pollinguri.into_param().abi(), ::core::mem::transmute(starttime), ::core::mem::transmute(uiupdaterecurrence)).ok()
    }
    pub unsafe fn msStopPeriodicBadgeUpdate(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msStopPeriodicBadgeUpdate)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msLaunchInternetOptions(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).msLaunchInternetOptions)(::windows_core::Interface::as_raw(self)).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellUIHelper6, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IShellUIHelper, IShellUIHelper2, IShellUIHelper3, IShellUIHelper4, IShellUIHelper5);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellUIHelper6 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellUIHelper6 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellUIHelper6 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellUIHelper6").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellUIHelper6 {
    type Vtable = IShellUIHelper6_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellUIHelper6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellUIHelper6 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x987a573e_46ee_4e89_96ab_ddf7f8fdc98c);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellUIHelper6_Vtbl {
    pub base__: IShellUIHelper5_Vtbl,
    pub msStopPeriodicTileUpdate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub msStartPeriodicTileUpdate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pollinguris: super::super::System::Variant::VARIANT, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    msStartPeriodicTileUpdate: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub msStartPeriodicTileUpdateBatch: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pollinguris: super::super::System::Variant::VARIANT, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    msStartPeriodicTileUpdateBatch: usize,
    pub msClearTile: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub msEnableTileNotificationQueue: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fchange: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    msEnableTileNotificationQueue: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub msPinnedSiteState: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pvarsitestate: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    msPinnedSiteState: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub msEnableTileNotificationQueueForSquare150x150: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fchange: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    msEnableTileNotificationQueueForSquare150x150: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub msEnableTileNotificationQueueForWide310x150: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fchange: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    msEnableTileNotificationQueueForWide310x150: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub msEnableTileNotificationQueueForSquare310x310: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, fchange: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    msEnableTileNotificationQueueForSquare310x310: usize,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub msScheduledTileNotification: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrnotificationxml: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstrnotificationid: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstrnotificationtag: ::std::mem::MaybeUninit<::windows_core::BSTR>, starttime: super::super::System::Variant::VARIANT, expirationtime: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    msScheduledTileNotification: usize,
    pub msRemoveScheduledTileNotification: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrnotificationid: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub msStartPeriodicBadgeUpdate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pollinguri: ::std::mem::MaybeUninit<::windows_core::BSTR>, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT,
    #[cfg(not(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant")))]
    msStartPeriodicBadgeUpdate: usize,
    pub msStopPeriodicBadgeUpdate: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub msLaunchInternetOptions: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellUIHelper7(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelper7 {
    pub unsafe fn ResetFirstBootMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.ResetFirstBootMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ResetSafeMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.ResetSafeMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RefreshOfflineDesktop(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.RefreshOfflineDesktop)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddFavorite<P0>(&self, url: P0, title: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.AddFavorite)(::windows_core::Interface::as_raw(self), url.into_param().abi(), ::core::mem::transmute(title.unwrap_or(::std::ptr::null()))).ok()
    }
    pub unsafe fn AddChannel<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.AddChannel)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddDesktopComponent<P0, P1>(&self, url: P0, r#type: P1, left: ::core::option::Option<*const super::super::System::Variant::VARIANT>, top: ::core::option::Option<*const super::super::System::Variant::VARIANT>, width: ::core::option::Option<*const super::super::System::Variant::VARIANT>, height: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.AddDesktopComponent)(::windows_core::Interface::as_raw(self), url.into_param().abi(), r#type.into_param().abi(), ::core::mem::transmute(left.unwrap_or(::std::ptr::null())), ::core::mem::transmute(top.unwrap_or(::std::ptr::null())), ::core::mem::transmute(width.unwrap_or(::std::ptr::null())), ::core::mem::transmute(height.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSubscribed<P0>(&self, url: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.IsSubscribed)(::windows_core::Interface::as_raw(self), url.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NavigateAndFind<P0, P1>(&self, url: P0, strquery: P1, vartargetframe: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.NavigateAndFind)(::windows_core::Interface::as_raw(self), url.into_param().abi(), strquery.into_param().abi(), vartargetframe).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ImportExportFavorites<P0, P1>(&self, fimport: P0, strimpexppath: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.ImportExportFavorites)(::windows_core::Interface::as_raw(self), fimport.into_param().abi(), strimpexppath.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteSaveForm(&self, form: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.AutoCompleteSaveForm)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(form.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoScan<P0, P1>(&self, strsearch: P0, strfailureurl: P1, pvartargetframe: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.AutoScan)(::windows_core::Interface::as_raw(self), strsearch.into_param().abi(), strfailureurl.into_param().abi(), ::core::mem::transmute(pvartargetframe.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteAttach(&self, reserved: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.AutoCompleteAttach)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(reserved.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShowBrowserUI<P0>(&self, bstrname: P0, pvarin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.ShowBrowserUI)(::windows_core::Interface::as_raw(self), bstrname.into_param().abi(), pvarin, &mut result__).from_abi(result__)
    }
    pub unsafe fn AddSearchProvider<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.AddSearchProvider)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    pub unsafe fn RunOnceShown(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.RunOnceShown)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SkipRunOnce(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.SkipRunOnce)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CustomizeSettings<P0, P1, P2>(&self, fsqm: P0, fphishing: P1, bstrlocale: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.CustomizeSettings)(::windows_core::Interface::as_raw(self), fsqm.into_param().abi(), fphishing.into_param().abi(), bstrlocale.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SqmEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.SqmEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PhishingEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.PhishingEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn BrandImageUri(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.BrandImageUri)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SkipTabsWelcome(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.SkipTabsWelcome)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn DiagnoseConnection(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.DiagnoseConnection)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CustomizeClearType<P0>(&self, fset: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.CustomizeClearType)(::windows_core::Interface::as_raw(self), fset.into_param().abi()).ok()
    }
    pub unsafe fn IsSearchProviderInstalled<P0>(&self, url: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.IsSearchProviderInstalled)(::windows_core::Interface::as_raw(self), url.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSearchMigrated(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.IsSearchMigrated)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DefaultSearchProvider(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.DefaultSearchProvider)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RunOnceRequiredSettingsComplete<P0>(&self, fcomplete: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.RunOnceRequiredSettingsComplete)(::windows_core::Interface::as_raw(self), fcomplete.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RunOnceHasShown(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.RunOnceHasShown)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SearchGuideUrl(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.SearchGuideUrl)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AddService<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.AddService)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    pub unsafe fn IsServiceInstalled<P0, P1>(&self, url: P0, verb: P1) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.IsServiceInstalled)(::windows_core::Interface::as_raw(self), url.into_param().abi(), verb.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn InPrivateFilteringEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.InPrivateFilteringEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddToFavoritesBar<P0, P1>(&self, url: P0, title: P1, r#type: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.AddToFavoritesBar)(::windows_core::Interface::as_raw(self), url.into_param().abi(), title.into_param().abi(), r#type).ok()
    }
    pub unsafe fn BuildNewTabPage(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.BuildNewTabPage)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetRecentlyClosedVisible<P0>(&self, fvisible: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.SetRecentlyClosedVisible)(::windows_core::Interface::as_raw(self), fvisible.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetActivitiesVisible<P0>(&self, fvisible: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.SetActivitiesVisible)(::windows_core::Interface::as_raw(self), fvisible.into_param().abi()).ok()
    }
    pub unsafe fn ContentDiscoveryReset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.ContentDiscoveryReset)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSuggestedSitesEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.IsSuggestedSitesEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableSuggestedSites<P0>(&self, fenable: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.EnableSuggestedSites)(::windows_core::Interface::as_raw(self), fenable.into_param().abi()).ok()
    }
    pub unsafe fn NavigateToSuggestedSites<P0>(&self, bstrrelativeurl: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.NavigateToSuggestedSites)(::windows_core::Interface::as_raw(self), bstrrelativeurl.into_param().abi()).ok()
    }
    pub unsafe fn ShowTabsHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.ShowTabsHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ShowInPrivateHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.ShowInPrivateHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msIsSiteMode(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.msIsSiteMode)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn msSiteModeShowThumbBar(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msSiteModeShowThumbBar)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddThumbBarButton<P0, P1>(&self, bstriconurl: P0, bstrtooltip: P1) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.msSiteModeAddThumbBarButton)(::windows_core::Interface::as_raw(self), bstriconurl.into_param().abi(), bstrtooltip.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeUpdateThumbBarButton<P0, P1>(&self, buttonid: super::super::System::Variant::VARIANT, fenabled: P0, fvisible: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msSiteModeUpdateThumbBarButton)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(buttonid), fenabled.into_param().abi(), fvisible.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeSetIconOverlay<P0>(&self, iconurl: P0, pvardescription: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msSiteModeSetIconOverlay)(::windows_core::Interface::as_raw(self), iconurl.into_param().abi(), pvardescription).ok()
    }
    pub unsafe fn msSiteModeClearIconOverlay(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msSiteModeClearIconOverlay)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msAddSiteMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msAddSiteMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeCreateJumpList<P0>(&self, bstrheader: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msSiteModeCreateJumpList)(::windows_core::Interface::as_raw(self), bstrheader.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddJumpListItem<P0, P1, P2>(&self, bstrname: P0, bstractionuri: P1, bstriconuri: P2, pvarwindowtype: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msSiteModeAddJumpListItem)(::windows_core::Interface::as_raw(self), bstrname.into_param().abi(), bstractionuri.into_param().abi(), bstriconuri.into_param().abi(), pvarwindowtype).ok()
    }
    pub unsafe fn msSiteModeClearJumpList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msSiteModeClearJumpList)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeShowJumpList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msSiteModeShowJumpList)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddButtonStyle<P0, P1>(&self, uibuttonid: super::super::System::Variant::VARIANT, bstriconurl: P0, bstrtooltip: P1) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.msSiteModeAddButtonStyle)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(uibuttonid), bstriconurl.into_param().abi(), bstrtooltip.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeShowButtonStyle(&self, uibuttonid: super::super::System::Variant::VARIANT, uistyleid: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msSiteModeShowButtonStyle)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(uibuttonid), ::core::mem::transmute(uistyleid)).ok()
    }
    pub unsafe fn msSiteModeActivate(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msSiteModeActivate)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msIsSiteModeFirstRun<P0>(&self, fpreservestate: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.msIsSiteModeFirstRun)(::windows_core::Interface::as_raw(self), fpreservestate.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn msAddTrackingProtectionList<P0, P1>(&self, url: P0, bstrfiltername: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msAddTrackingProtectionList)(::windows_core::Interface::as_raw(self), url.into_param().abi(), bstrfiltername.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msTrackingProtectionEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.msTrackingProtectionEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msActiveXFilteringEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.msActiveXFilteringEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msProvisionNetworks<P0>(&self, bstrprovisioningxml: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.msProvisionNetworks)(::windows_core::Interface::as_raw(self), bstrprovisioningxml.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn msReportSafeUrl(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msReportSafeUrl)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeRefreshBadge(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msSiteModeRefreshBadge)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeClearBadge(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msSiteModeClearBadge)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msDiagnoseConnectionUILess(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msDiagnoseConnectionUILess)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msLaunchNetworkClientHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msLaunchNetworkClientHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msChangeDefaultBrowser<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.msChangeDefaultBrowser)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    pub unsafe fn msStopPeriodicTileUpdate(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msStopPeriodicTileUpdate)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msStartPeriodicTileUpdate(&self, pollinguris: super::super::System::Variant::VARIANT, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msStartPeriodicTileUpdate)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pollinguris), ::core::mem::transmute(starttime), ::core::mem::transmute(uiupdaterecurrence)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msStartPeriodicTileUpdateBatch(&self, pollinguris: super::super::System::Variant::VARIANT, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msStartPeriodicTileUpdateBatch)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pollinguris), ::core::mem::transmute(starttime), ::core::mem::transmute(uiupdaterecurrence)).ok()
    }
    pub unsafe fn msClearTile(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msClearTile)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msEnableTileNotificationQueue<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.msEnableTileNotificationQueue)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msPinnedSiteState(&self) -> ::windows_core::Result<super::super::System::Variant::VARIANT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.msPinnedSiteState)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msEnableTileNotificationQueueForSquare150x150<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.msEnableTileNotificationQueueForSquare150x150)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msEnableTileNotificationQueueForWide310x150<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.msEnableTileNotificationQueueForWide310x150)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msEnableTileNotificationQueueForSquare310x310<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.msEnableTileNotificationQueueForSquare310x310)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msScheduledTileNotification<P0, P1, P2>(&self, bstrnotificationxml: P0, bstrnotificationid: P1, bstrnotificationtag: P2, starttime: super::super::System::Variant::VARIANT, expirationtime: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.msScheduledTileNotification)(::windows_core::Interface::as_raw(self), bstrnotificationxml.into_param().abi(), bstrnotificationid.into_param().abi(), bstrnotificationtag.into_param().abi(), ::core::mem::transmute(starttime), ::core::mem::transmute(expirationtime)).ok()
    }
    pub unsafe fn msRemoveScheduledTileNotification<P0>(&self, bstrnotificationid: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.msRemoveScheduledTileNotification)(::windows_core::Interface::as_raw(self), bstrnotificationid.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msStartPeriodicBadgeUpdate<P0>(&self, pollinguri: P0, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.msStartPeriodicBadgeUpdate)(::windows_core::Interface::as_raw(self), pollinguri.into_param().abi(), ::core::mem::transmute(starttime), ::core::mem::transmute(uiupdaterecurrence)).ok()
    }
    pub unsafe fn msStopPeriodicBadgeUpdate(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msStopPeriodicBadgeUpdate)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msLaunchInternetOptions(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.msLaunchInternetOptions)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetExperimentalFlag<P0, P1>(&self, bstrflagstring: P0, vfflag: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetExperimentalFlag)(::windows_core::Interface::as_raw(self), bstrflagstring.into_param().abi(), vfflag.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetExperimentalFlag<P0>(&self, bstrflagstring: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetExperimentalFlag)(::windows_core::Interface::as_raw(self), bstrflagstring.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetExperimentalValue<P0>(&self, bstrvaluestring: P0, dwvalue: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).SetExperimentalValue)(::windows_core::Interface::as_raw(self), bstrvaluestring.into_param().abi(), dwvalue).ok()
    }
    pub unsafe fn GetExperimentalValue<P0>(&self, bstrvaluestring: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetExperimentalValue)(::windows_core::Interface::as_raw(self), bstrvaluestring.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn ResetAllExperimentalFlagsAndValues(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).ResetAllExperimentalFlagsAndValues)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetNeedIEAutoLaunchFlag<P0>(&self, bstrurl: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetNeedIEAutoLaunchFlag)(::windows_core::Interface::as_raw(self), bstrurl.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetNeedIEAutoLaunchFlag<P0, P1>(&self, bstrurl: P0, flag: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).SetNeedIEAutoLaunchFlag)(::windows_core::Interface::as_raw(self), bstrurl.into_param().abi(), flag.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn HasNeedIEAutoLaunchFlag<P0>(&self, bstrurl: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).HasNeedIEAutoLaunchFlag)(::windows_core::Interface::as_raw(self), bstrurl.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn LaunchIE<P0, P1>(&self, bstrurl: P0, automated: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).LaunchIE)(::windows_core::Interface::as_raw(self), bstrurl.into_param().abi(), automated.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellUIHelper7, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IShellUIHelper, IShellUIHelper2, IShellUIHelper3, IShellUIHelper4, IShellUIHelper5, IShellUIHelper6);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellUIHelper7 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellUIHelper7 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellUIHelper7 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellUIHelper7").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellUIHelper7 {
    type Vtable = IShellUIHelper7_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellUIHelper7 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellUIHelper7 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x60e567c8_9573_4ab2_a264_637c6c161cb1);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellUIHelper7_Vtbl {
    pub base__: IShellUIHelper6_Vtbl,
    #[cfg(feature = "Win32_Foundation")]
    pub SetExperimentalFlag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrflagstring: ::std::mem::MaybeUninit<::windows_core::BSTR>, vfflag: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetExperimentalFlag: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub GetExperimentalFlag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrflagstring: ::std::mem::MaybeUninit<::windows_core::BSTR>, vfflag: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetExperimentalFlag: usize,
    pub SetExperimentalValue: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrvaluestring: ::std::mem::MaybeUninit<::windows_core::BSTR>, dwvalue: u32) -> ::windows_core::HRESULT,
    pub GetExperimentalValue: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrvaluestring: ::std::mem::MaybeUninit<::windows_core::BSTR>, pdwvalue: *mut u32) -> ::windows_core::HRESULT,
    pub ResetAllExperimentalFlagsAndValues: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    #[cfg(feature = "Win32_Foundation")]
    pub GetNeedIEAutoLaunchFlag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, flag: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    GetNeedIEAutoLaunchFlag: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub SetNeedIEAutoLaunchFlag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, flag: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    SetNeedIEAutoLaunchFlag: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub HasNeedIEAutoLaunchFlag: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, exists: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    HasNeedIEAutoLaunchFlag: usize,
    #[cfg(feature = "Win32_Foundation")]
    pub LaunchIE: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, automated: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT,
    #[cfg(not(feature = "Win32_Foundation"))]
    LaunchIE: usize,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellUIHelper8(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelper8 {
    pub unsafe fn ResetFirstBootMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.ResetFirstBootMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ResetSafeMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.ResetSafeMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RefreshOfflineDesktop(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.RefreshOfflineDesktop)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddFavorite<P0>(&self, url: P0, title: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.AddFavorite)(::windows_core::Interface::as_raw(self), url.into_param().abi(), ::core::mem::transmute(title.unwrap_or(::std::ptr::null()))).ok()
    }
    pub unsafe fn AddChannel<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.AddChannel)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddDesktopComponent<P0, P1>(&self, url: P0, r#type: P1, left: ::core::option::Option<*const super::super::System::Variant::VARIANT>, top: ::core::option::Option<*const super::super::System::Variant::VARIANT>, width: ::core::option::Option<*const super::super::System::Variant::VARIANT>, height: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.AddDesktopComponent)(::windows_core::Interface::as_raw(self), url.into_param().abi(), r#type.into_param().abi(), ::core::mem::transmute(left.unwrap_or(::std::ptr::null())), ::core::mem::transmute(top.unwrap_or(::std::ptr::null())), ::core::mem::transmute(width.unwrap_or(::std::ptr::null())), ::core::mem::transmute(height.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSubscribed<P0>(&self, url: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.IsSubscribed)(::windows_core::Interface::as_raw(self), url.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NavigateAndFind<P0, P1>(&self, url: P0, strquery: P1, vartargetframe: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.NavigateAndFind)(::windows_core::Interface::as_raw(self), url.into_param().abi(), strquery.into_param().abi(), vartargetframe).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ImportExportFavorites<P0, P1>(&self, fimport: P0, strimpexppath: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.ImportExportFavorites)(::windows_core::Interface::as_raw(self), fimport.into_param().abi(), strimpexppath.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteSaveForm(&self, form: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.AutoCompleteSaveForm)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(form.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoScan<P0, P1>(&self, strsearch: P0, strfailureurl: P1, pvartargetframe: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.AutoScan)(::windows_core::Interface::as_raw(self), strsearch.into_param().abi(), strfailureurl.into_param().abi(), ::core::mem::transmute(pvartargetframe.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteAttach(&self, reserved: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.AutoCompleteAttach)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(reserved.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShowBrowserUI<P0>(&self, bstrname: P0, pvarin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.ShowBrowserUI)(::windows_core::Interface::as_raw(self), bstrname.into_param().abi(), pvarin, &mut result__).from_abi(result__)
    }
    pub unsafe fn AddSearchProvider<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.AddSearchProvider)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    pub unsafe fn RunOnceShown(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.RunOnceShown)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SkipRunOnce(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.SkipRunOnce)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CustomizeSettings<P0, P1, P2>(&self, fsqm: P0, fphishing: P1, bstrlocale: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.CustomizeSettings)(::windows_core::Interface::as_raw(self), fsqm.into_param().abi(), fphishing.into_param().abi(), bstrlocale.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SqmEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.SqmEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PhishingEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.PhishingEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn BrandImageUri(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.BrandImageUri)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SkipTabsWelcome(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.SkipTabsWelcome)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn DiagnoseConnection(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.DiagnoseConnection)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CustomizeClearType<P0>(&self, fset: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.CustomizeClearType)(::windows_core::Interface::as_raw(self), fset.into_param().abi()).ok()
    }
    pub unsafe fn IsSearchProviderInstalled<P0>(&self, url: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.IsSearchProviderInstalled)(::windows_core::Interface::as_raw(self), url.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSearchMigrated(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.IsSearchMigrated)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DefaultSearchProvider(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.DefaultSearchProvider)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RunOnceRequiredSettingsComplete<P0>(&self, fcomplete: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.RunOnceRequiredSettingsComplete)(::windows_core::Interface::as_raw(self), fcomplete.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RunOnceHasShown(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.RunOnceHasShown)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SearchGuideUrl(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.SearchGuideUrl)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AddService<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.AddService)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    pub unsafe fn IsServiceInstalled<P0, P1>(&self, url: P0, verb: P1) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.IsServiceInstalled)(::windows_core::Interface::as_raw(self), url.into_param().abi(), verb.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn InPrivateFilteringEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.InPrivateFilteringEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddToFavoritesBar<P0, P1>(&self, url: P0, title: P1, r#type: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.AddToFavoritesBar)(::windows_core::Interface::as_raw(self), url.into_param().abi(), title.into_param().abi(), r#type).ok()
    }
    pub unsafe fn BuildNewTabPage(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.BuildNewTabPage)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetRecentlyClosedVisible<P0>(&self, fvisible: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.SetRecentlyClosedVisible)(::windows_core::Interface::as_raw(self), fvisible.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetActivitiesVisible<P0>(&self, fvisible: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.SetActivitiesVisible)(::windows_core::Interface::as_raw(self), fvisible.into_param().abi()).ok()
    }
    pub unsafe fn ContentDiscoveryReset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.ContentDiscoveryReset)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSuggestedSitesEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.IsSuggestedSitesEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableSuggestedSites<P0>(&self, fenable: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.EnableSuggestedSites)(::windows_core::Interface::as_raw(self), fenable.into_param().abi()).ok()
    }
    pub unsafe fn NavigateToSuggestedSites<P0>(&self, bstrrelativeurl: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.NavigateToSuggestedSites)(::windows_core::Interface::as_raw(self), bstrrelativeurl.into_param().abi()).ok()
    }
    pub unsafe fn ShowTabsHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.ShowTabsHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ShowInPrivateHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.ShowInPrivateHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msIsSiteMode(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msIsSiteMode)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn msSiteModeShowThumbBar(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msSiteModeShowThumbBar)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddThumbBarButton<P0, P1>(&self, bstriconurl: P0, bstrtooltip: P1) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msSiteModeAddThumbBarButton)(::windows_core::Interface::as_raw(self), bstriconurl.into_param().abi(), bstrtooltip.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeUpdateThumbBarButton<P0, P1>(&self, buttonid: super::super::System::Variant::VARIANT, fenabled: P0, fvisible: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msSiteModeUpdateThumbBarButton)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(buttonid), fenabled.into_param().abi(), fvisible.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeSetIconOverlay<P0>(&self, iconurl: P0, pvardescription: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msSiteModeSetIconOverlay)(::windows_core::Interface::as_raw(self), iconurl.into_param().abi(), pvardescription).ok()
    }
    pub unsafe fn msSiteModeClearIconOverlay(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msSiteModeClearIconOverlay)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msAddSiteMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msAddSiteMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeCreateJumpList<P0>(&self, bstrheader: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msSiteModeCreateJumpList)(::windows_core::Interface::as_raw(self), bstrheader.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddJumpListItem<P0, P1, P2>(&self, bstrname: P0, bstractionuri: P1, bstriconuri: P2, pvarwindowtype: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msSiteModeAddJumpListItem)(::windows_core::Interface::as_raw(self), bstrname.into_param().abi(), bstractionuri.into_param().abi(), bstriconuri.into_param().abi(), pvarwindowtype).ok()
    }
    pub unsafe fn msSiteModeClearJumpList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msSiteModeClearJumpList)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeShowJumpList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msSiteModeShowJumpList)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddButtonStyle<P0, P1>(&self, uibuttonid: super::super::System::Variant::VARIANT, bstriconurl: P0, bstrtooltip: P1) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msSiteModeAddButtonStyle)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(uibuttonid), bstriconurl.into_param().abi(), bstrtooltip.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeShowButtonStyle(&self, uibuttonid: super::super::System::Variant::VARIANT, uistyleid: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msSiteModeShowButtonStyle)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(uibuttonid), ::core::mem::transmute(uistyleid)).ok()
    }
    pub unsafe fn msSiteModeActivate(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msSiteModeActivate)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msIsSiteModeFirstRun<P0>(&self, fpreservestate: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msIsSiteModeFirstRun)(::windows_core::Interface::as_raw(self), fpreservestate.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn msAddTrackingProtectionList<P0, P1>(&self, url: P0, bstrfiltername: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msAddTrackingProtectionList)(::windows_core::Interface::as_raw(self), url.into_param().abi(), bstrfiltername.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msTrackingProtectionEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msTrackingProtectionEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msActiveXFilteringEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msActiveXFilteringEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msProvisionNetworks<P0>(&self, bstrprovisioningxml: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.msProvisionNetworks)(::windows_core::Interface::as_raw(self), bstrprovisioningxml.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn msReportSafeUrl(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msReportSafeUrl)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeRefreshBadge(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msSiteModeRefreshBadge)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeClearBadge(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msSiteModeClearBadge)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msDiagnoseConnectionUILess(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msDiagnoseConnectionUILess)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msLaunchNetworkClientHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msLaunchNetworkClientHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msChangeDefaultBrowser<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msChangeDefaultBrowser)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    pub unsafe fn msStopPeriodicTileUpdate(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msStopPeriodicTileUpdate)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msStartPeriodicTileUpdate(&self, pollinguris: super::super::System::Variant::VARIANT, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msStartPeriodicTileUpdate)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pollinguris), ::core::mem::transmute(starttime), ::core::mem::transmute(uiupdaterecurrence)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msStartPeriodicTileUpdateBatch(&self, pollinguris: super::super::System::Variant::VARIANT, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msStartPeriodicTileUpdateBatch)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pollinguris), ::core::mem::transmute(starttime), ::core::mem::transmute(uiupdaterecurrence)).ok()
    }
    pub unsafe fn msClearTile(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msClearTile)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msEnableTileNotificationQueue<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.msEnableTileNotificationQueue)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msPinnedSiteState(&self) -> ::windows_core::Result<super::super::System::Variant::VARIANT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.msPinnedSiteState)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msEnableTileNotificationQueueForSquare150x150<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.msEnableTileNotificationQueueForSquare150x150)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msEnableTileNotificationQueueForWide310x150<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.msEnableTileNotificationQueueForWide310x150)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msEnableTileNotificationQueueForSquare310x310<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.msEnableTileNotificationQueueForSquare310x310)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msScheduledTileNotification<P0, P1, P2>(&self, bstrnotificationxml: P0, bstrnotificationid: P1, bstrnotificationtag: P2, starttime: super::super::System::Variant::VARIANT, expirationtime: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.msScheduledTileNotification)(::windows_core::Interface::as_raw(self), bstrnotificationxml.into_param().abi(), bstrnotificationid.into_param().abi(), bstrnotificationtag.into_param().abi(), ::core::mem::transmute(starttime), ::core::mem::transmute(expirationtime)).ok()
    }
    pub unsafe fn msRemoveScheduledTileNotification<P0>(&self, bstrnotificationid: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.msRemoveScheduledTileNotification)(::windows_core::Interface::as_raw(self), bstrnotificationid.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msStartPeriodicBadgeUpdate<P0>(&self, pollinguri: P0, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.msStartPeriodicBadgeUpdate)(::windows_core::Interface::as_raw(self), pollinguri.into_param().abi(), ::core::mem::transmute(starttime), ::core::mem::transmute(uiupdaterecurrence)).ok()
    }
    pub unsafe fn msStopPeriodicBadgeUpdate(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msStopPeriodicBadgeUpdate)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msLaunchInternetOptions(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.msLaunchInternetOptions)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetExperimentalFlag<P0, P1>(&self, bstrflagstring: P0, vfflag: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.SetExperimentalFlag)(::windows_core::Interface::as_raw(self), bstrflagstring.into_param().abi(), vfflag.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetExperimentalFlag<P0>(&self, bstrflagstring: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetExperimentalFlag)(::windows_core::Interface::as_raw(self), bstrflagstring.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetExperimentalValue<P0>(&self, bstrvaluestring: P0, dwvalue: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.SetExperimentalValue)(::windows_core::Interface::as_raw(self), bstrvaluestring.into_param().abi(), dwvalue).ok()
    }
    pub unsafe fn GetExperimentalValue<P0>(&self, bstrvaluestring: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetExperimentalValue)(::windows_core::Interface::as_raw(self), bstrvaluestring.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn ResetAllExperimentalFlagsAndValues(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.ResetAllExperimentalFlagsAndValues)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetNeedIEAutoLaunchFlag<P0>(&self, bstrurl: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetNeedIEAutoLaunchFlag)(::windows_core::Interface::as_raw(self), bstrurl.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetNeedIEAutoLaunchFlag<P0, P1>(&self, bstrurl: P0, flag: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.SetNeedIEAutoLaunchFlag)(::windows_core::Interface::as_raw(self), bstrurl.into_param().abi(), flag.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn HasNeedIEAutoLaunchFlag<P0>(&self, bstrurl: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.HasNeedIEAutoLaunchFlag)(::windows_core::Interface::as_raw(self), bstrurl.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn LaunchIE<P0, P1>(&self, bstrurl: P0, automated: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.LaunchIE)(::windows_core::Interface::as_raw(self), bstrurl.into_param().abi(), automated.into_param().abi()).ok()
    }
    pub unsafe fn GetCVListData(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCVListData)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCVListLocalData(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetCVListLocalData)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEMIEListData(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetEMIEListData)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEMIEListLocalData(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetEMIEListLocalData)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn OpenFavoritesPane(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).OpenFavoritesPane)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn OpenFavoritesSettings(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).OpenFavoritesSettings)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn LaunchInHVSI<P0>(&self, bstrurl: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).LaunchInHVSI)(::windows_core::Interface::as_raw(self), bstrurl.into_param().abi()).ok()
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellUIHelper8, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IShellUIHelper, IShellUIHelper2, IShellUIHelper3, IShellUIHelper4, IShellUIHelper5, IShellUIHelper6, IShellUIHelper7);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellUIHelper8 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellUIHelper8 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellUIHelper8 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellUIHelper8").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellUIHelper8 {
    type Vtable = IShellUIHelper8_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellUIHelper8 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellUIHelper8 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x66debcf2_05b0_4f07_b49b_b96241a65db2);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellUIHelper8_Vtbl {
    pub base__: IShellUIHelper7_Vtbl,
    pub GetCVListData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrresult: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub GetCVListLocalData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrresult: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub GetEMIEListData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrresult: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub GetEMIEListLocalData: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pbstrresult: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
    pub OpenFavoritesPane: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub OpenFavoritesSettings: unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT,
    pub LaunchInHVSI: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, bstrurl: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Com\"`*"]
#[cfg(feature = "Win32_System_Com")]
#[repr(transparent)]
pub struct IShellUIHelper9(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Com")]
impl IShellUIHelper9 {
    pub unsafe fn ResetFirstBootMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.base__.ResetFirstBootMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ResetSafeMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.base__.ResetSafeMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn RefreshOfflineDesktop(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.base__.RefreshOfflineDesktop)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddFavorite<P0>(&self, url: P0, title: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.base__.AddFavorite)(::windows_core::Interface::as_raw(self), url.into_param().abi(), ::core::mem::transmute(title.unwrap_or(::std::ptr::null()))).ok()
    }
    pub unsafe fn AddChannel<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.base__.AddChannel)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddDesktopComponent<P0, P1>(&self, url: P0, r#type: P1, left: ::core::option::Option<*const super::super::System::Variant::VARIANT>, top: ::core::option::Option<*const super::super::System::Variant::VARIANT>, width: ::core::option::Option<*const super::super::System::Variant::VARIANT>, height: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.base__.AddDesktopComponent)(::windows_core::Interface::as_raw(self), url.into_param().abi(), r#type.into_param().abi(), ::core::mem::transmute(left.unwrap_or(::std::ptr::null())), ::core::mem::transmute(top.unwrap_or(::std::ptr::null())), ::core::mem::transmute(width.unwrap_or(::std::ptr::null())), ::core::mem::transmute(height.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSubscribed<P0>(&self, url: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.base__.IsSubscribed)(::windows_core::Interface::as_raw(self), url.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn NavigateAndFind<P0, P1>(&self, url: P0, strquery: P1, vartargetframe: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.base__.NavigateAndFind)(::windows_core::Interface::as_raw(self), url.into_param().abi(), strquery.into_param().abi(), vartargetframe).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn ImportExportFavorites<P0, P1>(&self, fimport: P0, strimpexppath: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.base__.ImportExportFavorites)(::windows_core::Interface::as_raw(self), fimport.into_param().abi(), strimpexppath.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteSaveForm(&self, form: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.base__.AutoCompleteSaveForm)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(form.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoScan<P0, P1>(&self, strsearch: P0, strfailureurl: P1, pvartargetframe: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.base__.AutoScan)(::windows_core::Interface::as_raw(self), strsearch.into_param().abi(), strfailureurl.into_param().abi(), ::core::mem::transmute(pvartargetframe.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AutoCompleteAttach(&self, reserved: ::core::option::Option<*const super::super::System::Variant::VARIANT>) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.base__.AutoCompleteAttach)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(reserved.unwrap_or(::std::ptr::null()))).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn ShowBrowserUI<P0>(&self, bstrname: P0, pvarin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.base__.ShowBrowserUI)(::windows_core::Interface::as_raw(self), bstrname.into_param().abi(), pvarin, &mut result__).from_abi(result__)
    }
    pub unsafe fn AddSearchProvider<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.AddSearchProvider)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    pub unsafe fn RunOnceShown(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.RunOnceShown)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn SkipRunOnce(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.SkipRunOnce)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CustomizeSettings<P0, P1, P2>(&self, fsqm: P0, fphishing: P1, bstrlocale: P2) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.CustomizeSettings)(::windows_core::Interface::as_raw(self), fsqm.into_param().abi(), fphishing.into_param().abi(), bstrlocale.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SqmEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.SqmEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn PhishingEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.PhishingEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn BrandImageUri(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.BrandImageUri)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SkipTabsWelcome(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.SkipTabsWelcome)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn DiagnoseConnection(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.DiagnoseConnection)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn CustomizeClearType<P0>(&self, fset: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.CustomizeClearType)(::windows_core::Interface::as_raw(self), fset.into_param().abi()).ok()
    }
    pub unsafe fn IsSearchProviderInstalled<P0>(&self, url: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.IsSearchProviderInstalled)(::windows_core::Interface::as_raw(self), url.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSearchMigrated(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.IsSearchMigrated)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn DefaultSearchProvider(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.DefaultSearchProvider)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RunOnceRequiredSettingsComplete<P0>(&self, fcomplete: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.RunOnceRequiredSettingsComplete)(::windows_core::Interface::as_raw(self), fcomplete.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn RunOnceHasShown(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.RunOnceHasShown)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn SearchGuideUrl(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.base__.SearchGuideUrl)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn AddService<P0>(&self, url: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.AddService)(::windows_core::Interface::as_raw(self), url.into_param().abi()).ok()
    }
    pub unsafe fn IsServiceInstalled<P0, P1>(&self, url: P0, verb: P1) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.IsServiceInstalled)(::windows_core::Interface::as_raw(self), url.into_param().abi(), verb.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn InPrivateFilteringEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.InPrivateFilteringEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn AddToFavoritesBar<P0, P1>(&self, url: P0, title: P1, r#type: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.AddToFavoritesBar)(::windows_core::Interface::as_raw(self), url.into_param().abi(), title.into_param().abi(), r#type).ok()
    }
    pub unsafe fn BuildNewTabPage(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.BuildNewTabPage)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetRecentlyClosedVisible<P0>(&self, fvisible: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.SetRecentlyClosedVisible)(::windows_core::Interface::as_raw(self), fvisible.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetActivitiesVisible<P0>(&self, fvisible: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.SetActivitiesVisible)(::windows_core::Interface::as_raw(self), fvisible.into_param().abi()).ok()
    }
    pub unsafe fn ContentDiscoveryReset(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.ContentDiscoveryReset)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn IsSuggestedSitesEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.IsSuggestedSitesEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn EnableSuggestedSites<P0>(&self, fenable: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.EnableSuggestedSites)(::windows_core::Interface::as_raw(self), fenable.into_param().abi()).ok()
    }
    pub unsafe fn NavigateToSuggestedSites<P0>(&self, bstrrelativeurl: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.NavigateToSuggestedSites)(::windows_core::Interface::as_raw(self), bstrrelativeurl.into_param().abi()).ok()
    }
    pub unsafe fn ShowTabsHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.ShowTabsHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn ShowInPrivateHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.base__.ShowInPrivateHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msIsSiteMode(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msIsSiteMode)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn msSiteModeShowThumbBar(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msSiteModeShowThumbBar)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddThumbBarButton<P0, P1>(&self, bstriconurl: P0, bstrtooltip: P1) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msSiteModeAddThumbBarButton)(::windows_core::Interface::as_raw(self), bstriconurl.into_param().abi(), bstrtooltip.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeUpdateThumbBarButton<P0, P1>(&self, buttonid: super::super::System::Variant::VARIANT, fenabled: P0, fvisible: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msSiteModeUpdateThumbBarButton)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(buttonid), fenabled.into_param().abi(), fvisible.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeSetIconOverlay<P0>(&self, iconurl: P0, pvardescription: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msSiteModeSetIconOverlay)(::windows_core::Interface::as_raw(self), iconurl.into_param().abi(), pvardescription).ok()
    }
    pub unsafe fn msSiteModeClearIconOverlay(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msSiteModeClearIconOverlay)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msAddSiteMode(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msAddSiteMode)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeCreateJumpList<P0>(&self, bstrheader: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msSiteModeCreateJumpList)(::windows_core::Interface::as_raw(self), bstrheader.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddJumpListItem<P0, P1, P2>(&self, bstrname: P0, bstractionuri: P1, bstriconuri: P2, pvarwindowtype: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msSiteModeAddJumpListItem)(::windows_core::Interface::as_raw(self), bstrname.into_param().abi(), bstractionuri.into_param().abi(), bstriconuri.into_param().abi(), pvarwindowtype).ok()
    }
    pub unsafe fn msSiteModeClearJumpList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msSiteModeClearJumpList)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeShowJumpList(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msSiteModeShowJumpList)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeAddButtonStyle<P0, P1>(&self, uibuttonid: super::super::System::Variant::VARIANT, bstriconurl: P0, bstrtooltip: P1) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msSiteModeAddButtonStyle)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(uibuttonid), bstriconurl.into_param().abi(), bstrtooltip.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msSiteModeShowButtonStyle(&self, uibuttonid: super::super::System::Variant::VARIANT, uistyleid: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msSiteModeShowButtonStyle)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(uibuttonid), ::core::mem::transmute(uistyleid)).ok()
    }
    pub unsafe fn msSiteModeActivate(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msSiteModeActivate)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msIsSiteModeFirstRun<P0>(&self, fpreservestate: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msIsSiteModeFirstRun)(::windows_core::Interface::as_raw(self), fpreservestate.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn msAddTrackingProtectionList<P0, P1>(&self, url: P0, bstrfiltername: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msAddTrackingProtectionList)(::windows_core::Interface::as_raw(self), url.into_param().abi(), bstrfiltername.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msTrackingProtectionEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msTrackingProtectionEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msActiveXFilteringEnabled(&self) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.base__.msActiveXFilteringEnabled)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msProvisionNetworks<P0>(&self, bstrprovisioningxml: P0) -> ::windows_core::Result<super::super::System::Variant::VARIANT>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msProvisionNetworks)(::windows_core::Interface::as_raw(self), bstrprovisioningxml.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn msReportSafeUrl(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msReportSafeUrl)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeRefreshBadge(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msSiteModeRefreshBadge)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msSiteModeClearBadge(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msSiteModeClearBadge)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msDiagnoseConnectionUILess(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msDiagnoseConnectionUILess)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msLaunchNetworkClientHelp(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msLaunchNetworkClientHelp)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msChangeDefaultBrowser<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.base__.msChangeDefaultBrowser)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    pub unsafe fn msStopPeriodicTileUpdate(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msStopPeriodicTileUpdate)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msStartPeriodicTileUpdate(&self, pollinguris: super::super::System::Variant::VARIANT, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msStartPeriodicTileUpdate)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pollinguris), ::core::mem::transmute(starttime), ::core::mem::transmute(uiupdaterecurrence)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msStartPeriodicTileUpdateBatch(&self, pollinguris: super::super::System::Variant::VARIANT, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msStartPeriodicTileUpdateBatch)(::windows_core::Interface::as_raw(self), ::core::mem::transmute(pollinguris), ::core::mem::transmute(starttime), ::core::mem::transmute(uiupdaterecurrence)).ok()
    }
    pub unsafe fn msClearTile(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msClearTile)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msEnableTileNotificationQueue<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msEnableTileNotificationQueue)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msPinnedSiteState(&self) -> ::windows_core::Result<super::super::System::Variant::VARIANT> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.base__.msPinnedSiteState)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msEnableTileNotificationQueueForSquare150x150<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msEnableTileNotificationQueueForSquare150x150)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msEnableTileNotificationQueueForWide310x150<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msEnableTileNotificationQueueForWide310x150)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn msEnableTileNotificationQueueForSquare310x310<P0>(&self, fchange: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msEnableTileNotificationQueueForSquare310x310)(::windows_core::Interface::as_raw(self), fchange.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msScheduledTileNotification<P0, P1, P2>(&self, bstrnotificationxml: P0, bstrnotificationid: P1, bstrnotificationtag: P2, starttime: super::super::System::Variant::VARIANT, expirationtime: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<::windows_core::BSTR>,
        P2: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msScheduledTileNotification)(::windows_core::Interface::as_raw(self), bstrnotificationxml.into_param().abi(), bstrnotificationid.into_param().abi(), bstrnotificationtag.into_param().abi(), ::core::mem::transmute(starttime), ::core::mem::transmute(expirationtime)).ok()
    }
    pub unsafe fn msRemoveScheduledTileNotification<P0>(&self, bstrnotificationid: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msRemoveScheduledTileNotification)(::windows_core::Interface::as_raw(self), bstrnotificationid.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
    pub unsafe fn msStartPeriodicBadgeUpdate<P0>(&self, pollinguri: P0, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msStartPeriodicBadgeUpdate)(::windows_core::Interface::as_raw(self), pollinguri.into_param().abi(), ::core::mem::transmute(starttime), ::core::mem::transmute(uiupdaterecurrence)).ok()
    }
    pub unsafe fn msStopPeriodicBadgeUpdate(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msStopPeriodicBadgeUpdate)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn msLaunchInternetOptions(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.base__.msLaunchInternetOptions)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetExperimentalFlag<P0, P1>(&self, bstrflagstring: P0, vfflag: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.SetExperimentalFlag)(::windows_core::Interface::as_raw(self), bstrflagstring.into_param().abi(), vfflag.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetExperimentalFlag<P0>(&self, bstrflagstring: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetExperimentalFlag)(::windows_core::Interface::as_raw(self), bstrflagstring.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn SetExperimentalValue<P0>(&self, bstrvaluestring: P0, dwvalue: u32) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.SetExperimentalValue)(::windows_core::Interface::as_raw(self), bstrvaluestring.into_param().abi(), dwvalue).ok()
    }
    pub unsafe fn GetExperimentalValue<P0>(&self, bstrvaluestring: P0) -> ::windows_core::Result<u32>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetExperimentalValue)(::windows_core::Interface::as_raw(self), bstrvaluestring.into_param().abi(), &mut result__).from_abi(result__)
    }
    pub unsafe fn ResetAllExperimentalFlagsAndValues(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.base__.ResetAllExperimentalFlagsAndValues)(::windows_core::Interface::as_raw(self)).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn GetNeedIEAutoLaunchFlag<P0>(&self, bstrurl: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.GetNeedIEAutoLaunchFlag)(::windows_core::Interface::as_raw(self), bstrurl.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn SetNeedIEAutoLaunchFlag<P0, P1>(&self, bstrurl: P0, flag: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.SetNeedIEAutoLaunchFlag)(::windows_core::Interface::as_raw(self), bstrurl.into_param().abi(), flag.into_param().abi()).ok()
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn HasNeedIEAutoLaunchFlag<P0>(&self, bstrurl: P0) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.base__.HasNeedIEAutoLaunchFlag)(::windows_core::Interface::as_raw(self), bstrurl.into_param().abi(), &mut result__).from_abi(result__)
    }
    #[doc = "*Required features: `\"Win32_Foundation\"`*"]
    #[cfg(feature = "Win32_Foundation")]
    pub unsafe fn LaunchIE<P0, P1>(&self, bstrurl: P0, automated: P1) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
        P1: ::windows_core::IntoParam<super::super::Foundation::VARIANT_BOOL>,
    {
        (::windows_core::Interface::vtable(self).base__.base__.LaunchIE)(::windows_core::Interface::as_raw(self), bstrurl.into_param().abi(), automated.into_param().abi()).ok()
    }
    pub unsafe fn GetCVListData(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetCVListData)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetCVListLocalData(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetCVListLocalData)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEMIEListData(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetEMIEListData)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn GetEMIEListLocalData(&self) -> ::windows_core::Result<::windows_core::BSTR> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).base__.GetEMIEListLocalData)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
    pub unsafe fn OpenFavoritesPane(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.OpenFavoritesPane)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn OpenFavoritesSettings(&self) -> ::windows_core::Result<()> {
        (::windows_core::Interface::vtable(self).base__.OpenFavoritesSettings)(::windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn LaunchInHVSI<P0>(&self, bstrurl: P0) -> ::windows_core::Result<()>
    where
        P0: ::windows_core::IntoParam<::windows_core::BSTR>,
    {
        (::windows_core::Interface::vtable(self).base__.LaunchInHVSI)(::windows_core::Interface::as_raw(self), bstrurl.into_param().abi()).ok()
    }
    pub unsafe fn GetOSSku(&self) -> ::windows_core::Result<u32> {
        let mut result__ = ::std::mem::zeroed();
        (::windows_core::Interface::vtable(self).GetOSSku)(::windows_core::Interface::as_raw(self), &mut result__).from_abi(result__)
    }
}
#[cfg(feature = "Win32_System_Com")]
::windows_core::imp::interface_hierarchy!(IShellUIHelper9, ::windows_core::IUnknown, super::super::System::Com::IDispatch, IShellUIHelper, IShellUIHelper2, IShellUIHelper3, IShellUIHelper4, IShellUIHelper5, IShellUIHelper6, IShellUIHelper7, IShellUIHelper8);
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::PartialEq for IShellUIHelper9 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::cmp::Eq for IShellUIHelper9 {}
#[cfg(feature = "Win32_System_Com")]
impl ::core::fmt::Debug for IShellUIHelper9 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("IShellUIHelper9").field(&self.0).finish()
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::Interface for IShellUIHelper9 {
    type Vtable = IShellUIHelper9_Vtbl;
}
#[cfg(feature = "Win32_System_Com")]
impl ::core::clone::Clone for IShellUIHelper9 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
#[cfg(feature = "Win32_System_Com")]
unsafe impl ::windows_core::ComInterface for IShellUIHelper9 {
    const IID: ::windows_core::GUID = ::windows_core::GUID::from_u128(0x6cdf73b0_7f2f_451f_bc0f_63e0f3284e54);
}
#[cfg(feature = "Win32_System_Com")]
#[repr(C)]
#[doc(hidden)]
pub struct IShellUIHelper9_Vtbl {
    pub base__: IShellUIHelper8_Vtbl,
    pub GetOSSku: unsafe extern "system" fn(this: *mut ::core::ffi::c_void, pdwresult: *mut u32) -> ::windows_core::HRESULT,
}
#[doc = "*Required features: `\"Win32_UI_Shell\"`, `\"Win32_System_Ole\"`*"]
#[cfg(feature = "Win32_System_Ole")]
#[repr(transparent)]
pub struct IShellView(::windows_core::IUnknown);
#[cfg(feature = "Win32_System_Ole")]
impl IShellView {
    #[doc = "*Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`*"]
    #[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
 