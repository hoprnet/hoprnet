//! Generated by generate.py located at the repository root
//! ./generate.py > src/generated.rs
pub mod alloc {
    pub use __core::alloc::*;
    #[cfg(feature = "alloc")] pub use __alloc::alloc::*;
}
pub mod any {
    pub use __core::any::*;
}
pub mod arch {
    pub use __core::arch::*;
}
pub mod array {
    pub use __core::array::*;
}
pub mod ascii {
    pub use __core::ascii::*;
}
pub mod borrow {
    pub use __core::borrow::*;
    #[cfg(feature = "alloc")] pub use __alloc::borrow::*;
}
pub mod boxed {
    #[cfg(feature = "alloc")] pub use __alloc::boxed::*;
}
pub mod cell {
    pub use __core::cell::*;
}
pub mod char {
    pub use __core::char::*;
}
pub mod clone {
    pub use __core::clone::*;
}
pub mod cmp {
    pub use __core::cmp::*;
}
pub mod collections {
    #[cfg(feature = "alloc")] pub use __alloc::collections::*;
    #[cfg(all(feature = "alloc", feature = "compat_hash"))] pub use hashbrown::HashMap;
    #[cfg(all(feature = "alloc", feature = "compat_hash"))] pub use hashbrown::HashSet;
}
pub mod convert {
    pub use __core::convert::*;
}
pub mod default {
    pub use __core::default::*;
}
pub mod f32 {
    pub use __core::f32::*;
}
pub mod f64 {
    pub use __core::f64::*;
}
pub mod ffi {
    pub use __core::ffi::*;
}
pub mod fmt {
    pub use __core::fmt::*;
    #[cfg(feature = "alloc")] pub use __alloc::fmt::*;
}
pub mod future {
    pub use __core::future::*;
}
pub mod hash {
    pub use __core::hash::*;
}
pub mod hint {
    pub use __core::hint::*;
}
pub mod i128 {
    pub use __core::i128::*;
}
pub mod i16 {
    pub use __core::i16::*;
}
pub mod i32 {
    pub use __core::i32::*;
}
pub mod i64 {
    pub use __core::i64::*;
}
pub mod i8 {
    pub use __core::i8::*;
}
pub mod intrinsics {
    #[cfg(feature = "unstable")] pub use __core::intrinsics::*;
}
pub mod isize {
    pub use __core::isize::*;
}
pub mod iter {
    pub use __core::iter::*;
}
pub mod marker {
    pub use __core::marker::*;
}
pub mod mem {
    pub use __core::mem::*;
}
pub mod num {
    pub use __core::num::*;
}
pub mod ops {
    pub use __core::ops::*;
}
pub mod option {
    pub use __core::option::*;
}
pub mod panic {
    #[cfg(feature = "unstable")] pub use __core::panic::*;
}
pub mod panicking {
    #[cfg(feature = "unstable")] pub use __core::panicking::*;
}
pub mod pin {
    pub use __core::pin::*;
}
pub mod prelude {
    pub mod v1 {
        // Prelude
        pub use __core::prelude::v1::*;
        #[cfg(all(feature = "alloc", feature = "unstable"))]
        pub use __alloc::prelude::v1::*;
        #[cfg(all(feature = "alloc", not(feature = "unstable")))]
        pub use __alloc::{
            borrow::ToOwned,
            boxed::Box,
            // UNSTABLE: slice::SliceConcatExt,
            string::String,
            string::ToString,
            vec::Vec,
        };

        // Other imports
        #[cfg(feature = "alloc")]
        pub use __alloc::{format, vec};
        #[cfg(feature = "compat_macros")]
        pub use crate::{print, println, eprint, eprintln, dbg};
    }
}
pub mod primitive {
    pub use __core::primitive::*;
}
pub mod ptr {
    pub use __core::ptr::*;
}
pub mod raw {
    #[cfg(feature = "unstable")] pub use __core::raw::*;
}
pub mod raw_vec {
    #[cfg(all(feature = "alloc", feature = "unstable"))] pub use __alloc::raw_vec::*;
}
pub mod rc {
    #[cfg(feature = "alloc")] pub use __alloc::rc::*;
}
pub mod result {
    pub use __core::result::*;
}
pub mod slice {
    pub use __core::slice::*;
    #[cfg(feature = "alloc")] pub use __alloc::slice::*;
}
pub mod str {
    pub use __core::str::*;
    #[cfg(feature = "alloc")] pub use __alloc::str::*;
}
pub mod string {
    #[cfg(feature = "alloc")] pub use __alloc::string::*;
}
pub mod sync {
    pub use __core::sync::*;
    #[cfg(feature = "alloc")] pub use __alloc::sync::*;
    #[cfg(all(feature = "alloc", feature = "compat_sync"))] pub use spin::Mutex;
    #[cfg(all(feature = "alloc", feature = "compat_sync"))] pub use spin::MutexGuard;
    #[cfg(all(feature = "alloc", feature = "compat_sync"))] pub use spin::Once;
    #[cfg(all(feature = "alloc", feature = "compat_sync"))] pub use spin::RwLock;
    #[cfg(all(feature = "alloc", feature = "compat_sync"))] pub use spin::RwLockReadGuard;
    #[cfg(all(feature = "alloc", feature = "compat_sync"))] pub use spin::RwLockWriteGuard;
}
pub mod task {
    pub use __core::task::*;
    #[cfg(all(feature = "alloc", feature = "unstable"))] pub use __alloc::task::*;
}
pub mod time {
    pub use __core::time::*;
}
pub mod u128 {
    pub use __core::u128::*;
}
pub mod u16 {
    pub use __core::u16::*;
}
pub mod u32 {
    pub use __core::u32::*;
}
pub mod u64 {
    pub use __core::u64::*;
}
pub mod u8 {
    pub use __core::u8::*;
}
pub mod unicode {
    #[cfg(feature = "unstable")] pub use __core::unicode::*;
}
pub mod usize {
    pub use __core::usize::*;
}
pub mod vec {
    #[cfg(feature = "alloc")] pub use __alloc::vec::*;
}
