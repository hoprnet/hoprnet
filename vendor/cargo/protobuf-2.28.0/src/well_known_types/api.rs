// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/protobuf/api.proto`

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Api {
    // message fields
    pub name: ::std::string::String,
    pub methods: crate::RepeatedField<Method>,
    pub options: crate::RepeatedField<crate::well_known_types::Option>,
    pub version: ::std::string::String,
    pub source_context: crate::SingularPtrField<crate::well_known_types::SourceContext>,
    pub mixins: crate::RepeatedField<Mixin>,
    pub syntax: crate::well_known_types::Syntax,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: crate::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: crate::CachedSize,
}

impl<'a> ::std::default::Default for &'a Api {
    fn default() -> &'a Api {
        <Api as crate::Message>::default_instance()
    }
}

impl Api {
    pub fn new() -> Api {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .google.protobuf.Method methods = 2;


    pub fn get_methods(&self) -> &[Method] {
        &self.methods
    }
    pub fn clear_methods(&mut self) {
        self.methods.clear();
    }

    // Param is passed by value, moved
    pub fn set_methods(&mut self, v: crate::RepeatedField<Method>) {
        self.methods = v;
    }

    // Mutable pointer to the field.
    pub fn mut_methods(&mut self) -> &mut crate::RepeatedField<Method> {
        &mut self.methods
    }

    // Take field
    pub fn take_methods(&mut self) -> crate::RepeatedField<Method> {
        ::std::mem::replace(&mut self.methods, crate::RepeatedField::new())
    }

    // repeated .google.protobuf.Option options = 3;


    pub fn get_options(&self) -> &[crate::well_known_types::Option] {
        &self.options
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: crate::RepeatedField<crate::well_known_types::Option>) {
        self.options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_options(&mut self) -> &mut crate::RepeatedField<crate::well_known_types::Option> {
        &mut self.options
    }

    // Take field
    pub fn take_options(&mut self) -> crate::RepeatedField<crate::well_known_types::Option> {
        ::std::mem::replace(&mut self.options, crate::RepeatedField::new())
    }

    // string version = 4;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // .google.protobuf.SourceContext source_context = 5;


    pub fn get_source_context(&self) -> &crate::well_known_types::SourceContext {
        self.source_context.as_ref().unwrap_or_else(|| <crate::well_known_types::SourceContext as crate::Message>::default_instance())
    }
    pub fn clear_source_context(&mut self) {
        self.source_context.clear();
    }

    pub fn has_source_context(&self) -> bool {
        self.source_context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_context(&mut self, v: crate::well_known_types::SourceContext) {
        self.source_context = crate::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_context(&mut self) -> &mut crate::well_known_types::SourceContext {
        if self.source_context.is_none() {
            self.source_context.set_default();
        }
        self.source_context.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_context(&mut self) -> crate::well_known_types::SourceContext {
        self.source_context.take().unwrap_or_else(|| crate::well_known_types::SourceContext::new())
    }

    // repeated .google.protobuf.Mixin mixins = 6;


    pub fn get_mixins(&self) -> &[Mixin] {
        &self.mixins
    }
    pub fn clear_mixins(&mut self) {
        self.mixins.clear();
    }

    // Param is passed by value, moved
    pub fn set_mixins(&mut self, v: crate::RepeatedField<Mixin>) {
        self.mixins = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mixins(&mut self) -> &mut crate::RepeatedField<Mixin> {
        &mut self.mixins
    }

    // Take field
    pub fn take_mixins(&mut self) -> crate::RepeatedField<Mixin> {
        ::std::mem::replace(&mut self.mixins, crate::RepeatedField::new())
    }

    // .google.protobuf.Syntax syntax = 7;


    pub fn get_syntax(&self) -> crate::well_known_types::Syntax {
        self.syntax
    }
    pub fn clear_syntax(&mut self) {
        self.syntax = crate::well_known_types::Syntax::SYNTAX_PROTO2;
    }

    // Param is passed by value, moved
    pub fn set_syntax(&mut self, v: crate::well_known_types::Syntax) {
        self.syntax = v;
    }
}

impl crate::Message for Api {
    fn is_initialized(&self) -> bool {
        for v in &self.methods {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.source_context {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.mixins {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    crate::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    crate::rt::read_repeated_message_into(wire_type, is, &mut self.methods)?;
                },
                3 => {
                    crate::rt::read_repeated_message_into(wire_type, is, &mut self.options)?;
                },
                4 => {
                    crate::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                5 => {
                    crate::rt::read_singular_message_into(wire_type, is, &mut self.source_context)?;
                },
                6 => {
                    crate::rt::read_repeated_message_into(wire_type, is, &mut self.mixins)?;
                },
                7 => {
                    crate::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.syntax, 7, &mut self.unknown_fields)?
                },
                _ => {
                    crate::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += crate::rt::string_size(1, &self.name);
        }
        for value in &self.methods {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.options {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.version.is_empty() {
            my_size += crate::rt::string_size(4, &self.version);
        }
        if let Some(ref v) = self.source_context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.mixins {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint32_size(len) + len;
        };
        if self.syntax != crate::well_known_types::Syntax::SYNTAX_PROTO2 {
            my_size += crate::rt::enum_size(7, self.syntax);
        }
        my_size += crate::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.methods {
            os.write_tag(2, crate::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.options {
            os.write_tag(3, crate::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.version.is_empty() {
            os.write_string(4, &self.version)?;
        }
        if let Some(ref v) = self.source_context.as_ref() {
            os.write_tag(5, crate::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.mixins {
            os.write_tag(6, crate::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.syntax != crate::well_known_types::Syntax::SYNTAX_PROTO2 {
            os.write_enum(7, crate::ProtobufEnum::value(&self.syntax))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &crate::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut crate::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static crate::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Api {
        Api::new()
    }

    fn descriptor_static() -> &'static crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::LazyV2<crate::reflect::MessageDescriptor> = crate::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(crate::reflect::accessor::make_simple_field_accessor::<_, crate::types::ProtobufTypeString>(
                "name",
                |m: &Api| { &m.name },
                |m: &mut Api| { &mut m.name },
            ));
            fields.push(crate::reflect::accessor::make_repeated_field_accessor::<_, crate::types::ProtobufTypeMessage<Method>>(
                "methods",
                |m: &Api| { &m.methods },
                |m: &mut Api| { &mut m.methods },
            ));
            fields.push(crate::reflect::accessor::make_repeated_field_accessor::<_, crate::types::ProtobufTypeMessage<crate::well_known_types::Option>>(
                "options",
                |m: &Api| { &m.options },
                |m: &mut Api| { &mut m.options },
            ));
            fields.push(crate::reflect::accessor::make_simple_field_accessor::<_, crate::types::ProtobufTypeString>(
                "version",
                |m: &Api| { &m.version },
                |m: &mut Api| { &mut m.version },
            ));
            fields.push(crate::reflect::accessor::make_singular_ptr_field_accessor::<_, crate::types::ProtobufTypeMessage<crate::well_known_types::SourceContext>>(
                "source_context",
                |m: &Api| { &m.source_context },
                |m: &mut Api| { &mut m.source_context },
            ));
            fields.push(crate::reflect::accessor::make_repeated_field_accessor::<_, crate::types::ProtobufTypeMessage<Mixin>>(
                "mixins",
                |m: &Api| { &m.mixins },
                |m: &mut Api| { &mut m.mixins },
            ));
            fields.push(crate::reflect::accessor::make_simple_field_accessor::<_, crate::types::ProtobufTypeEnum<crate::well_known_types::Syntax>>(
                "syntax",
                |m: &Api| { &m.syntax },
                |m: &mut Api| { &mut m.syntax },
            ));
            crate::reflect::MessageDescriptor::new_pb_name::<Api>(
                "Api",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Api {
        static instance: crate::rt::LazyV2<Api> = crate::rt::LazyV2::INIT;
        instance.get(Api::new)
    }
}

impl crate::Clear for Api {
    fn clear(&mut self) {
        self.name.clear();
        self.methods.clear();
        self.options.clear();
        self.version.clear();
        self.source_context.clear();
        self.mixins.clear();
        self.syntax = crate::well_known_types::Syntax::SYNTAX_PROTO2;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Api {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for Api {
    fn as_ref(&self) -> crate::reflect::ReflectValueRef {
        crate::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Method {
    // message fields
    pub name: ::std::string::String,
    pub request_type_url: ::std::string::String,
    pub request_streaming: bool,
    pub response_type_url: ::std::string::String,
    pub response_streaming: bool,
    pub options: crate::RepeatedField<crate::well_known_types::Option>,
    pub syntax: crate::well_known_types::Syntax,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: crate::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: crate::CachedSize,
}

impl<'a> ::std::default::Default for &'a Method {
    fn default() -> &'a Method {
        <Method as crate::Message>::default_instance()
    }
}

impl Method {
    pub fn new() -> Method {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string request_type_url = 2;


    pub fn get_request_type_url(&self) -> &str {
        &self.request_type_url
    }
    pub fn clear_request_type_url(&mut self) {
        self.request_type_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_type_url(&mut self, v: ::std::string::String) {
        self.request_type_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_type_url(&mut self) -> &mut ::std::string::String {
        &mut self.request_type_url
    }

    // Take field
    pub fn take_request_type_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.request_type_url, ::std::string::String::new())
    }

    // bool request_streaming = 3;


    pub fn get_request_streaming(&self) -> bool {
        self.request_streaming
    }
    pub fn clear_request_streaming(&mut self) {
        self.request_streaming = false;
    }

    // Param is passed by value, moved
    pub fn set_request_streaming(&mut self, v: bool) {
        self.request_streaming = v;
    }

    // string response_type_url = 4;


    pub fn get_response_type_url(&self) -> &str {
        &self.response_type_url
    }
    pub fn clear_response_type_url(&mut self) {
        self.response_type_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_response_type_url(&mut self, v: ::std::string::String) {
        self.response_type_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response_type_url(&mut self) -> &mut ::std::string::String {
        &mut self.response_type_url
    }

    // Take field
    pub fn take_response_type_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.response_type_url, ::std::string::String::new())
    }

    // bool response_streaming = 5;


    pub fn get_response_streaming(&self) -> bool {
        self.response_streaming
    }
    pub fn clear_response_streaming(&mut self) {
        self.response_streaming = false;
    }

    // Param is passed by value, moved
    pub fn set_response_streaming(&mut self, v: bool) {
        self.response_streaming = v;
    }

    // repeated .google.protobuf.Option options = 6;


    pub fn get_options(&self) -> &[crate::well_known_types::Option] {
        &self.options
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: crate::RepeatedField<crate::well_known_types::Option>) {
        self.options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_options(&mut self) -> &mut crate::RepeatedField<crate::well_known_types::Option> {
        &mut self.options
    }

    // Take field
    pub fn take_options(&mut self) -> crate::RepeatedField<crate::well_known_types::Option> {
        ::std::mem::replace(&mut self.options, crate::RepeatedField::new())
    }

    // .google.protobuf.Syntax syntax = 7;


    pub fn get_syntax(&self) -> crate::well_known_types::Syntax {
        self.syntax
    }
    pub fn clear_syntax(&mut self) {
        self.syntax = crate::well_known_types::Syntax::SYNTAX_PROTO2;
    }

    // Param is passed by value, moved
    pub fn set_syntax(&mut self, v: crate::well_known_types::Syntax) {
        self.syntax = v;
    }
}

impl crate::Message for Method {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    crate::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    crate::rt::read_singular_proto3_string_into(wire_type, is, &mut self.request_type_url)?;
                },
                3 => {
                    if wire_type != crate::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(crate::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.request_streaming = tmp;
                },
                4 => {
                    crate::rt::read_singular_proto3_string_into(wire_type, is, &mut self.response_type_url)?;
                },
                5 => {
                    if wire_type != crate::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(crate::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.response_streaming = tmp;
                },
                6 => {
                    crate::rt::read_repeated_message_into(wire_type, is, &mut self.options)?;
                },
                7 => {
                    crate::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.syntax, 7, &mut self.unknown_fields)?
                },
                _ => {
                    crate::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += crate::rt::string_size(1, &self.name);
        }
        if !self.request_type_url.is_empty() {
            my_size += crate::rt::string_size(2, &self.request_type_url);
        }
        if self.request_streaming != false {
            my_size += 2;
        }
        if !self.response_type_url.is_empty() {
            my_size += crate::rt::string_size(4, &self.response_type_url);
        }
        if self.response_streaming != false {
            my_size += 2;
        }
        for value in &self.options {
            let len = value.compute_size();
            my_size += 1 + crate::rt::compute_raw_varint32_size(len) + len;
        };
        if self.syntax != crate::well_known_types::Syntax::SYNTAX_PROTO2 {
            my_size += crate::rt::enum_size(7, self.syntax);
        }
        my_size += crate::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.request_type_url.is_empty() {
            os.write_string(2, &self.request_type_url)?;
        }
        if self.request_streaming != false {
            os.write_bool(3, self.request_streaming)?;
        }
        if !self.response_type_url.is_empty() {
            os.write_string(4, &self.response_type_url)?;
        }
        if self.response_streaming != false {
            os.write_bool(5, self.response_streaming)?;
        }
        for v in &self.options {
            os.write_tag(6, crate::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.syntax != crate::well_known_types::Syntax::SYNTAX_PROTO2 {
            os.write_enum(7, crate::ProtobufEnum::value(&self.syntax))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &crate::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut crate::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static crate::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Method {
        Method::new()
    }

    fn descriptor_static() -> &'static crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::LazyV2<crate::reflect::MessageDescriptor> = crate::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(crate::reflect::accessor::make_simple_field_accessor::<_, crate::types::ProtobufTypeString>(
                "name",
                |m: &Method| { &m.name },
                |m: &mut Method| { &mut m.name },
            ));
            fields.push(crate::reflect::accessor::make_simple_field_accessor::<_, crate::types::ProtobufTypeString>(
                "request_type_url",
                |m: &Method| { &m.request_type_url },
                |m: &mut Method| { &mut m.request_type_url },
            ));
            fields.push(crate::reflect::accessor::make_simple_field_accessor::<_, crate::types::ProtobufTypeBool>(
                "request_streaming",
                |m: &Method| { &m.request_streaming },
                |m: &mut Method| { &mut m.request_streaming },
            ));
            fields.push(crate::reflect::accessor::make_simple_field_accessor::<_, crate::types::ProtobufTypeString>(
                "response_type_url",
                |m: &Method| { &m.response_type_url },
                |m: &mut Method| { &mut m.response_type_url },
            ));
            fields.push(crate::reflect::accessor::make_simple_field_accessor::<_, crate::types::ProtobufTypeBool>(
                "response_streaming",
                |m: &Method| { &m.response_streaming },
                |m: &mut Method| { &mut m.response_streaming },
            ));
            fields.push(crate::reflect::accessor::make_repeated_field_accessor::<_, crate::types::ProtobufTypeMessage<crate::well_known_types::Option>>(
                "options",
                |m: &Method| { &m.options },
                |m: &mut Method| { &mut m.options },
            ));
            fields.push(crate::reflect::accessor::make_simple_field_accessor::<_, crate::types::ProtobufTypeEnum<crate::well_known_types::Syntax>>(
                "syntax",
                |m: &Method| { &m.syntax },
                |m: &mut Method| { &mut m.syntax },
            ));
            crate::reflect::MessageDescriptor::new_pb_name::<Method>(
                "Method",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Method {
        static instance: crate::rt::LazyV2<Method> = crate::rt::LazyV2::INIT;
        instance.get(Method::new)
    }
}

impl crate::Clear for Method {
    fn clear(&mut self) {
        self.name.clear();
        self.request_type_url.clear();
        self.request_streaming = false;
        self.response_type_url.clear();
        self.response_streaming = false;
        self.options.clear();
        self.syntax = crate::well_known_types::Syntax::SYNTAX_PROTO2;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Method {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for Method {
    fn as_ref(&self) -> crate::reflect::ReflectValueRef {
        crate::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Mixin {
    // message fields
    pub name: ::std::string::String,
    pub root: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: crate::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: crate::CachedSize,
}

impl<'a> ::std::default::Default for &'a Mixin {
    fn default() -> &'a Mixin {
        <Mixin as crate::Message>::default_instance()
    }
}

impl Mixin {
    pub fn new() -> Mixin {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string root = 2;


    pub fn get_root(&self) -> &str {
        &self.root
    }
    pub fn clear_root(&mut self) {
        self.root.clear();
    }

    // Param is passed by value, moved
    pub fn set_root(&mut self, v: ::std::string::String) {
        self.root = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_root(&mut self) -> &mut ::std::string::String {
        &mut self.root
    }

    // Take field
    pub fn take_root(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.root, ::std::string::String::new())
    }
}

impl crate::Message for Mixin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut crate::CodedInputStream<'_>) -> crate::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    crate::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    crate::rt::read_singular_proto3_string_into(wire_type, is, &mut self.root)?;
                },
                _ => {
                    crate::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += crate::rt::string_size(1, &self.name);
        }
        if !self.root.is_empty() {
            my_size += crate::rt::string_size(2, &self.root);
        }
        my_size += crate::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut crate::CodedOutputStream<'_>) -> crate::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.root.is_empty() {
            os.write_string(2, &self.root)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &crate::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut crate::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static crate::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Mixin {
        Mixin::new()
    }

    fn descriptor_static() -> &'static crate::reflect::MessageDescriptor {
        static descriptor: crate::rt::LazyV2<crate::reflect::MessageDescriptor> = crate::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(crate::reflect::accessor::make_simple_field_accessor::<_, crate::types::ProtobufTypeString>(
                "name",
                |m: &Mixin| { &m.name },
                |m: &mut Mixin| { &mut m.name },
            ));
            fields.push(crate::reflect::accessor::make_simple_field_accessor::<_, crate::types::ProtobufTypeString>(
                "root",
                |m: &Mixin| { &m.root },
                |m: &mut Mixin| { &mut m.root },
            ));
            crate::reflect::MessageDescriptor::new_pb_name::<Mixin>(
                "Mixin",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Mixin {
        static instance: crate::rt::LazyV2<Mixin> = crate::rt::LazyV2::INIT;
        instance.get(Mixin::new)
    }
}

impl crate::Clear for Mixin {
    fn clear(&mut self) {
        self.name.clear();
        self.root.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Mixin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        crate::text_format::fmt(self, f)
    }
}

impl crate::reflect::ProtobufValue for Mixin {
    fn as_ref(&self) -> crate::reflect::ReflectValueRef {
        crate::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19google/protobuf/api.proto\x12\x0fgoogle.protobuf\x1a$google/protob\
    uf/source_context.proto\x1a\x1agoogle/protobuf/type.proto\"\xc1\x02\n\
    \x03Api\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x121\n\x07methods\
    \x18\x02\x20\x03(\x0b2\x17.google.protobuf.MethodR\x07methods\x121\n\x07\
    options\x18\x03\x20\x03(\x0b2\x17.google.protobuf.OptionR\x07options\x12\
    \x18\n\x07version\x18\x04\x20\x01(\tR\x07version\x12E\n\x0esource_contex\
    t\x18\x05\x20\x01(\x0b2\x1e.google.protobuf.SourceContextR\rsourceContex\
    t\x12.\n\x06mixins\x18\x06\x20\x03(\x0b2\x16.google.protobuf.MixinR\x06m\
    ixins\x12/\n\x06syntax\x18\x07\x20\x01(\x0e2\x17.google.protobuf.SyntaxR\
    \x06syntax\"\xb2\x02\n\x06Method\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\x12(\n\x10request_type_url\x18\x02\x20\x01(\tR\x0erequestTypeUr\
    l\x12+\n\x11request_streaming\x18\x03\x20\x01(\x08R\x10requestStreaming\
    \x12*\n\x11response_type_url\x18\x04\x20\x01(\tR\x0fresponseTypeUrl\x12-\
    \n\x12response_streaming\x18\x05\x20\x01(\x08R\x11responseStreaming\x121\
    \n\x07options\x18\x06\x20\x03(\x0b2\x17.google.protobuf.OptionR\x07optio\
    ns\x12/\n\x06syntax\x18\x07\x20\x01(\x0e2\x17.google.protobuf.SyntaxR\
    \x06syntax\"/\n\x05Mixin\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\
    \x12\x12\n\x04root\x18\x02\x20\x01(\tR\x04rootBv\n\x13com.google.protobu\
    fB\x08ApiProtoP\x01Z,google.golang.org/protobuf/types/known/apipb\xa2\
    \x02\x03GPB\xaa\x02\x1eGoogle.Protobuf.WellKnownTypesJ\x81<\n\x07\x12\
    \x05\x1e\0\xcf\x01\x01\n\xcc\x0c\n\x01\x0c\x12\x03\x1e\0\x122\xc1\x0c\
    \x20Protocol\x20Buffers\x20-\x20Google's\x20data\x20interchange\x20forma\
    t\n\x20Copyright\x202008\x20Google\x20Inc.\x20\x20All\x20rights\x20reser\
    ved.\n\x20https://developers.google.com/protocol-buffers/\n\n\x20Redistr\
    ibution\x20and\x20use\x20in\x20source\x20and\x20binary\x20forms,\x20with\
    \x20or\x20without\n\x20modification,\x20are\x20permitted\x20provided\x20\
    that\x20the\x20following\x20conditions\x20are\n\x20met:\n\n\x20\x20\x20\
    \x20\x20*\x20Redistributions\x20of\x20source\x20code\x20must\x20retain\
    \x20the\x20above\x20copyright\n\x20notice,\x20this\x20list\x20of\x20cond\
    itions\x20and\x20the\x20following\x20disclaimer.\n\x20\x20\x20\x20\x20*\
    \x20Redistributions\x20in\x20binary\x20form\x20must\x20reproduce\x20the\
    \x20above\n\x20copyright\x20notice,\x20this\x20list\x20of\x20conditions\
    \x20and\x20the\x20following\x20disclaimer\n\x20in\x20the\x20documentatio\
    n\x20and/or\x20other\x20materials\x20provided\x20with\x20the\n\x20distri\
    bution.\n\x20\x20\x20\x20\x20*\x20Neither\x20the\x20name\x20of\x20Google\
    \x20Inc.\x20nor\x20the\x20names\x20of\x20its\n\x20contributors\x20may\
    \x20be\x20used\x20to\x20endorse\x20or\x20promote\x20products\x20derived\
    \x20from\n\x20this\x20software\x20without\x20specific\x20prior\x20writte\
    n\x20permission.\n\n\x20THIS\x20SOFTWARE\x20IS\x20PROVIDED\x20BY\x20THE\
    \x20COPYRIGHT\x20HOLDERS\x20AND\x20CONTRIBUTORS\n\x20\"AS\x20IS\"\x20AND\
    \x20ANY\x20EXPRESS\x20OR\x20IMPLIED\x20WARRANTIES,\x20INCLUDING,\x20BUT\
    \x20NOT\n\x20LIMITED\x20TO,\x20THE\x20IMPLIED\x20WARRANTIES\x20OF\x20MER\
    CHANTABILITY\x20AND\x20FITNESS\x20FOR\n\x20A\x20PARTICULAR\x20PURPOSE\
    \x20ARE\x20DISCLAIMED.\x20IN\x20NO\x20EVENT\x20SHALL\x20THE\x20COPYRIGHT\
    \n\x20OWNER\x20OR\x20CONTRIBUTORS\x20BE\x20LIABLE\x20FOR\x20ANY\x20DIREC\
    T,\x20INDIRECT,\x20INCIDENTAL,\n\x20SPECIAL,\x20EXEMPLARY,\x20OR\x20CONS\
    EQUENTIAL\x20DAMAGES\x20(INCLUDING,\x20BUT\x20NOT\n\x20LIMITED\x20TO,\
    \x20PROCUREMENT\x20OF\x20SUBSTITUTE\x20GOODS\x20OR\x20SERVICES;\x20LOSS\
    \x20OF\x20USE,\n\x20DATA,\x20OR\x20PROFITS;\x20OR\x20BUSINESS\x20INTERRU\
    PTION)\x20HOWEVER\x20CAUSED\x20AND\x20ON\x20ANY\n\x20THEORY\x20OF\x20LIA\
    BILITY,\x20WHETHER\x20IN\x20CONTRACT,\x20STRICT\x20LIABILITY,\x20OR\x20T\
    ORT\n\x20(INCLUDING\x20NEGLIGENCE\x20OR\x20OTHERWISE)\x20ARISING\x20IN\
    \x20ANY\x20WAY\x20OUT\x20OF\x20THE\x20USE\n\x20OF\x20THIS\x20SOFTWARE,\
    \x20EVEN\x20IF\x20ADVISED\x20OF\x20THE\x20POSSIBILITY\x20OF\x20SUCH\x20D\
    AMAGE.\n\n\x08\n\x01\x02\x12\x03\x20\0\x18\n\t\n\x02\x03\0\x12\x03\"\0.\
    \n\t\n\x02\x03\x01\x12\x03#\0$\n\x08\n\x01\x08\x12\x03%\0;\n\t\n\x02\x08\
    %\x12\x03%\0;\n\x08\n\x01\x08\x12\x03&\0,\n\t\n\x02\x08\x01\x12\x03&\0,\
    \n\x08\n\x01\x08\x12\x03'\0)\n\t\n\x02\x08\x08\x12\x03'\0)\n\x08\n\x01\
    \x08\x12\x03(\0\"\n\t\n\x02\x08\n\x12\x03(\0\"\n\x08\n\x01\x08\x12\x03)\
    \0!\n\t\n\x02\x08$\x12\x03)\0!\n\x08\n\x01\x08\x12\x03*\0C\n\t\n\x02\x08\
    \x0b\x12\x03*\0C\n\xab\x04\n\x02\x04\0\x12\x045\0`\x01\x1a\x9e\x04\x20Ap\
    i\x20is\x20a\x20light-weight\x20descriptor\x20for\x20an\x20API\x20Interf\
    ace.\n\n\x20Interfaces\x20are\x20also\x20described\x20as\x20\"protocol\
    \x20buffer\x20services\"\x20in\x20some\x20contexts,\n\x20such\x20as\x20b\
    y\x20the\x20\"service\"\x20keyword\x20in\x20a\x20.proto\x20file,\x20but\
    \x20they\x20are\x20different\n\x20from\x20API\x20Services,\x20which\x20r\
    epresent\x20a\x20concrete\x20implementation\x20of\x20an\x20interface\n\
    \x20as\x20opposed\x20to\x20simply\x20a\x20description\x20of\x20methods\
    \x20and\x20bindings.\x20They\x20are\x20also\n\x20sometimes\x20simply\x20\
    referred\x20to\x20as\x20\"APIs\"\x20in\x20other\x20contexts,\x20such\x20\
    as\x20the\x20name\x20of\n\x20this\x20message\x20itself.\x20See\x20https:\
    //cloud.google.com/apis/design/glossary\x20for\n\x20detailed\x20terminol\
    ogy.\n\n\n\n\x03\x04\0\x01\x12\x035\x08\x0b\n{\n\x04\x04\0\x02\0\x12\x03\
    8\x02\x12\x1an\x20The\x20fully\x20qualified\x20name\x20of\x20this\x20int\
    erface,\x20including\x20package\x20name\n\x20followed\x20by\x20the\x20in\
    terface's\x20simple\x20name.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x038\x02\
    \x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x038\t\r\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x038\x10\x11\nC\n\x04\x04\0\x02\x01\x12\x03;\x02\x1e\x1a6\x20Th\
    e\x20methods\x20of\x20this\x20interface,\x20in\x20unspecified\x20order.\
    \n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03;\x02\n\n\x0c\n\x05\x04\0\x02\
    \x01\x06\x12\x03;\x0b\x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03;\x12\x19\
    \n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03;\x1c\x1d\n6\n\x04\x04\0\x02\x02\
    \x12\x03>\x02\x1e\x1a)\x20Any\x20metadata\x20attached\x20to\x20the\x20in\
    terface.\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03>\x02\n\n\x0c\n\x05\x04\
    \0\x02\x02\x06\x12\x03>\x0b\x11\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03>\
    \x12\x19\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03>\x1c\x1d\n\x82\x08\n\x04\
    \x04\0\x02\x03\x12\x03U\x02\x15\x1a\xf4\x07\x20A\x20version\x20string\
    \x20for\x20this\x20interface.\x20If\x20specified,\x20must\x20have\x20the\
    \x20form\n\x20`major-version.minor-version`,\x20as\x20in\x20`1.10`.\x20I\
    f\x20the\x20minor\x20version\x20is\n\x20omitted,\x20it\x20defaults\x20to\
    \x20zero.\x20If\x20the\x20entire\x20version\x20field\x20is\x20empty,\x20\
    the\n\x20major\x20version\x20is\x20derived\x20from\x20the\x20package\x20\
    name,\x20as\x20outlined\x20below.\x20If\x20the\n\x20field\x20is\x20not\
    \x20empty,\x20the\x20version\x20in\x20the\x20package\x20name\x20will\x20\
    be\x20verified\x20to\x20be\n\x20consistent\x20with\x20what\x20is\x20prov\
    ided\x20here.\n\n\x20The\x20versioning\x20schema\x20uses\x20[semantic\n\
    \x20versioning](http://semver.org)\x20where\x20the\x20major\x20version\
    \x20number\n\x20indicates\x20a\x20breaking\x20change\x20and\x20the\x20mi\
    nor\x20version\x20an\x20additive,\n\x20non-breaking\x20change.\x20Both\
    \x20version\x20numbers\x20are\x20signals\x20to\x20users\n\x20what\x20to\
    \x20expect\x20from\x20different\x20versions,\x20and\x20should\x20be\x20c\
    arefully\n\x20chosen\x20based\x20on\x20the\x20product\x20plan.\n\n\x20Th\
    e\x20major\x20version\x20is\x20also\x20reflected\x20in\x20the\x20package\
    \x20name\x20of\x20the\n\x20interface,\x20which\x20must\x20end\x20in\x20`\
    v<major-version>`,\x20as\x20in\n\x20`google.feature.v1`.\x20For\x20major\
    \x20versions\x200\x20and\x201,\x20the\x20suffix\x20can\n\x20be\x20omitte\
    d.\x20Zero\x20major\x20versions\x20must\x20only\x20be\x20used\x20for\n\
    \x20experimental,\x20non-GA\x20interfaces.\n\n\n\n\x0c\n\x05\x04\0\x02\
    \x03\x05\x12\x03U\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03U\t\x10\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03U\x13\x14\n[\n\x04\x04\0\x02\x04\x12\
    \x03Y\x02#\x1aN\x20Source\x20context\x20for\x20the\x20protocol\x20buffer\
    \x20service\x20represented\x20by\x20this\n\x20message.\n\n\x0c\n\x05\x04\
    \0\x02\x04\x06\x12\x03Y\x02\x0f\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03Y\
    \x10\x1e\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03Y!\"\n2\n\x04\x04\0\x02\
    \x05\x12\x03\\\x02\x1c\x1a%\x20Included\x20interfaces.\x20See\x20[Mixin]\
    [].\n\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03\\\x02\n\n\x0c\n\x05\x04\0\
    \x02\x05\x06\x12\x03\\\x0b\x10\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\\\
    \x11\x17\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\\\x1a\x1b\n0\n\x04\x04\0\
    \x02\x06\x12\x03_\x02\x14\x1a#\x20The\x20source\x20syntax\x20of\x20the\
    \x20service.\n\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03_\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x06\x01\x12\x03_\t\x0f\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x03_\x12\x13\n=\n\x02\x04\x01\x12\x04c\0x\x01\x1a1\x20Method\x20represe\
    nts\x20a\x20method\x20of\x20an\x20API\x20interface.\n\n\n\n\x03\x04\x01\
    \x01\x12\x03c\x08\x0e\n.\n\x04\x04\x01\x02\0\x12\x03e\x02\x12\x1a!\x20Th\
    e\x20simple\x20name\x20of\x20this\x20method.\n\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03e\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03e\t\r\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03e\x10\x11\n/\n\x04\x04\x01\x02\x01\x12\x03\
    h\x02\x1e\x1a\"\x20A\x20URL\x20of\x20the\x20input\x20message\x20type.\n\
    \n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03h\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03h\t\x19\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03h\x1c\
    \x1d\n0\n\x04\x04\x01\x02\x02\x12\x03k\x02\x1d\x1a#\x20If\x20true,\x20th\
    e\x20request\x20is\x20streamed.\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\
    \x03k\x02\x06\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03k\x07\x18\n\x0c\n\
    \x05\x04\x01\x02\x02\x03\x12\x03k\x1b\x1c\n2\n\x04\x04\x01\x02\x03\x12\
    \x03n\x02\x1f\x1a%\x20The\x20URL\x20of\x20the\x20output\x20message\x20ty\
    pe.\n\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03n\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\x03\x01\x12\x03n\t\x1a\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03n\
    \x1d\x1e\n1\n\x04\x04\x01\x02\x04\x12\x03q\x02\x1e\x1a$\x20If\x20true,\
    \x20the\x20response\x20is\x20streamed.\n\n\x0c\n\x05\x04\x01\x02\x04\x05\
    \x12\x03q\x02\x06\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03q\x07\x19\n\x0c\
    \n\x05\x04\x01\x02\x04\x03\x12\x03q\x1c\x1d\n3\n\x04\x04\x01\x02\x05\x12\
    \x03t\x02\x1e\x1a&\x20Any\x20metadata\x20attached\x20to\x20the\x20method\
    .\n\n\x0c\n\x05\x04\x01\x02\x05\x04\x12\x03t\x02\n\n\x0c\n\x05\x04\x01\
    \x02\x05\x06\x12\x03t\x0b\x11\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03t\
    \x12\x19\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03t\x1c\x1d\n0\n\x04\x04\
    \x01\x02\x06\x12\x03w\x02\x14\x1a#\x20The\x20source\x20syntax\x20of\x20t\
    his\x20method.\n\n\x0c\n\x05\x04\x01\x02\x06\x06\x12\x03w\x02\x08\n\x0c\
    \n\x05\x04\x01\x02\x06\x01\x12\x03w\t\x0f\n\x0c\n\x05\x04\x01\x02\x06\
    \x03\x12\x03w\x12\x13\n\xca\x13\n\x02\x04\x02\x12\x06\xc8\x01\0\xcf\x01\
    \x01\x1a\xbb\x13\x20Declares\x20an\x20API\x20Interface\x20to\x20be\x20in\
    cluded\x20in\x20this\x20interface.\x20The\x20including\n\x20interface\
    \x20must\x20redeclare\x20all\x20the\x20methods\x20from\x20the\x20include\
    d\x20interface,\x20but\n\x20documentation\x20and\x20options\x20are\x20in\
    herited\x20as\x20follows:\n\n\x20-\x20If\x20after\x20comment\x20and\x20w\
    hitespace\x20stripping,\x20the\x20documentation\n\x20\x20\x20string\x20o\
    f\x20the\x20redeclared\x20method\x20is\x20empty,\x20it\x20will\x20be\x20\
    inherited\n\x20\x20\x20from\x20the\x20original\x20method.\n\n\x20-\x20Ea\
    ch\x20annotation\x20belonging\x20to\x20the\x20service\x20config\x20(http\
    ,\n\x20\x20\x20visibility)\x20which\x20is\x20not\x20set\x20in\x20the\x20\
    redeclared\x20method\x20will\x20be\n\x20\x20\x20inherited.\n\n\x20-\x20I\
    f\x20an\x20http\x20annotation\x20is\x20inherited,\x20the\x20path\x20patt\
    ern\x20will\x20be\n\x20\x20\x20modified\x20as\x20follows.\x20Any\x20vers\
    ion\x20prefix\x20will\x20be\x20replaced\x20by\x20the\n\x20\x20\x20versio\
    n\x20of\x20the\x20including\x20interface\x20plus\x20the\x20[root][]\x20p\
    ath\x20if\n\x20\x20\x20specified.\n\n\x20Example\x20of\x20a\x20simple\
    \x20mixin:\n\n\x20\x20\x20\x20\x20package\x20google.acl.v1;\n\x20\x20\
    \x20\x20\x20service\x20AccessControl\x20{\n\x20\x20\x20\x20\x20\x20\x20/\
    /\x20Get\x20the\x20underlying\x20ACL\x20object.\n\x20\x20\x20\x20\x20\
    \x20\x20rpc\x20GetAcl(GetAclRequest)\x20returns\x20(Acl)\x20{\n\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20option\x20(google.api.http).get\x20=\x20\"/v\
    1/{resource=**}:getAcl\";\n\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\
    \x20\x20}\n\n\x20\x20\x20\x20\x20package\x20google.storage.v2;\n\x20\x20\
    \x20\x20\x20service\x20Storage\x20{\n\x20\x20\x20\x20\x20\x20\x20rpc\x20\
    GetAcl(GetAclRequest)\x20returns\x20(Acl);\n\n\x20\x20\x20\x20\x20\x20\
    \x20//\x20Get\x20a\x20data\x20record.\n\x20\x20\x20\x20\x20\x20\x20rpc\
    \x20GetData(GetDataRequest)\x20returns\x20(Data)\x20{\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20option\x20(google.api.http).get\x20=\x20\"/v2/{resou\
    rce=**}\";\n\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20}\n\n\x20\
    Example\x20of\x20a\x20mixin\x20configuration:\n\n\x20\x20\x20\x20\x20api\
    s:\n\x20\x20\x20\x20\x20-\x20name:\x20google.storage.v2.Storage\n\x20\
    \x20\x20\x20\x20\x20\x20mixins:\n\x20\x20\x20\x20\x20\x20\x20-\x20name:\
    \x20google.acl.v1.AccessControl\n\n\x20The\x20mixin\x20construct\x20impl\
    ies\x20that\x20all\x20methods\x20in\x20`AccessControl`\x20are\n\x20also\
    \x20declared\x20with\x20same\x20name\x20and\x20request/response\x20types\
    \x20in\n\x20`Storage`.\x20A\x20documentation\x20generator\x20or\x20annot\
    ation\x20processor\x20will\n\x20see\x20the\x20effective\x20`Storage.GetA\
    cl`\x20method\x20after\x20inheriting\n\x20documentation\x20and\x20annota\
    tions\x20as\x20follows:\n\n\x20\x20\x20\x20\x20service\x20Storage\x20{\n\
    \x20\x20\x20\x20\x20\x20\x20//\x20Get\x20the\x20underlying\x20ACL\x20obj\
    ect.\n\x20\x20\x20\x20\x20\x20\x20rpc\x20GetAcl(GetAclRequest)\x20return\
    s\x20(Acl)\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20option\x20(google.a\
    pi.http).get\x20=\x20\"/v2/{resource=**}:getAcl\";\n\x20\x20\x20\x20\x20\
    \x20\x20}\n\x20\x20\x20\x20\x20\x20\x20...\n\x20\x20\x20\x20\x20}\n\n\
    \x20Note\x20how\x20the\x20version\x20in\x20the\x20path\x20pattern\x20cha\
    nged\x20from\x20`v1`\x20to\x20`v2`.\n\n\x20If\x20the\x20`root`\x20field\
    \x20in\x20the\x20mixin\x20is\x20specified,\x20it\x20should\x20be\x20a\n\
    \x20relative\x20path\x20under\x20which\x20inherited\x20HTTP\x20paths\x20\
    are\x20placed.\x20Example:\n\n\x20\x20\x20\x20\x20apis:\n\x20\x20\x20\
    \x20\x20-\x20name:\x20google.storage.v2.Storage\n\x20\x20\x20\x20\x20\
    \x20\x20mixins:\n\x20\x20\x20\x20\x20\x20\x20-\x20name:\x20google.acl.v1\
    .AccessControl\n\x20\x20\x20\x20\x20\x20\x20\x20\x20root:\x20acls\n\n\
    \x20This\x20implies\x20the\x20following\x20inherited\x20HTTP\x20annotati\
    on:\n\n\x20\x20\x20\x20\x20service\x20Storage\x20{\n\x20\x20\x20\x20\x20\
    \x20\x20//\x20Get\x20the\x20underlying\x20ACL\x20object.\n\x20\x20\x20\
    \x20\x20\x20\x20rpc\x20GetAcl(GetAclRequest)\x20returns\x20(Acl)\x20{\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20option\x20(google.api.http).get\x20=\
    \x20\"/v2/acls/{resource=**}:getAcl\";\n\x20\x20\x20\x20\x20\x20\x20}\n\
    \x20\x20\x20\x20\x20\x20\x20...\n\x20\x20\x20\x20\x20}\n\n\x0b\n\x03\x04\
    \x02\x01\x12\x04\xc8\x01\x08\r\nL\n\x04\x04\x02\x02\0\x12\x04\xca\x01\
    \x02\x12\x1a>\x20The\x20fully\x20qualified\x20name\x20of\x20the\x20inter\
    face\x20which\x20is\x20included.\n\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\
    \xca\x01\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\xca\x01\t\r\n\r\n\
    \x05\x04\x02\x02\0\x03\x12\x04\xca\x01\x10\x11\n[\n\x04\x04\x02\x02\x01\
    \x12\x04\xce\x01\x02\x12\x1aM\x20If\x20non-empty\x20specifies\x20a\x20pa\
    th\x20under\x20which\x20inherited\x20HTTP\x20paths\n\x20are\x20rooted.\n\
    \n\r\n\x05\x04\x02\x02\x01\x05\x12\x04\xce\x01\x02\x08\n\r\n\x05\x04\x02\
    \x02\x01\x01\x12\x04\xce\x01\t\r\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\
    \xce\x01\x10\x11b\x06proto3\
";

static file_descriptor_proto_lazy: crate::rt::LazyV2<crate::descriptor::FileDescriptorProto> = crate::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> crate::descriptor::FileDescriptorProto {
    crate::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static crate::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
