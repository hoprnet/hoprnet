# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
#
# When uploading crates to the registry Cargo will automatically
# "normalize" Cargo.toml files for maximal compatibility
# with all versions of Cargo and also rewrite `path` dependencies
# to registry (e.g., crates.io) dependencies.
#
# If you are reading this file be aware that the original Cargo.toml
# will likely look very different (and much more reasonable).
# See Cargo.toml.orig for the original contents.

[package]
edition = "2021"
rust-version = "1.65"
name = "sea-orm"
version = "0.12.15"
authors = ["Chris Tsang <chris.2y3@outlook.com>"]
description = "üêö An async & dynamic ORM for Rust"
homepage = "https://www.sea-ql.org/SeaORM"
documentation = "https://docs.rs/sea-orm"
readme = "README.md"
keywords = [
    "async",
    "orm",
    "mysql",
    "postgres",
    "sqlite",
]
categories = ["database"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/SeaQL/sea-orm"

[package.metadata.docs.rs]
features = [
    "default",
    "sqlx-all",
    "mock",
    "proxy",
    "runtime-async-std-native-tls",
    "postgres-array",
    "sea-orm-internal",
]
rustdoc-args = [
    "--cfg",
    "docsrs",
]

[lib]
name = "sea_orm"
path = "src/lib.rs"

[dependencies.async-stream]
version = "0.3"
default-features = false

[dependencies.async-trait]
version = "0.1"
default-features = false

[dependencies.bigdecimal]
version = "0.3"
optional = true
default-features = false

[dependencies.chrono]
version = "0.4.30"
optional = true
default-features = false

[dependencies.futures]
version = "0.3"
features = ["std"]
default-features = false

[dependencies.log]
version = "0.4"
default-features = false

[dependencies.ouroboros]
version = "0.17"
default-features = false

[dependencies.rust_decimal]
version = "1"
optional = true
default-features = false

[dependencies.sea-orm-macros]
version = "0.12.15"
features = ["strum"]
default-features = false

[dependencies.sea-query]
version = "0.30.4"
features = [
    "thread-safe",
    "hashable-value",
    "backend-mysql",
    "backend-postgres",
    "backend-sqlite",
]
default-features = false

[dependencies.sea-query-binder]
version = "0.5.0"
optional = true
default-features = false

[dependencies.serde]
version = "1.0"
default-features = false

[dependencies.serde_json]
version = "1.0"
optional = true
default-features = false

[dependencies.sqlx]
version = "0.7"
optional = true
default-features = false

[dependencies.strum]
version = "0.25"
default-features = false

[dependencies.thiserror]
version = "1"
default-features = false

[dependencies.time]
version = "0.3"
optional = true
default-features = false

[dependencies.tracing]
version = "0.1"
features = [
    "attributes",
    "log",
]
default-features = false

[dependencies.url]
version = "2.2"
default-features = false

[dependencies.uuid]
version = "1"
optional = true
default-features = false

[dev-dependencies.actix-rt]
version = "2.2.0"

[dev-dependencies.arraystring]
version = "0.3"

[dev-dependencies.async-std]
version = "1"
features = [
    "attributes",
    "tokio1",
]

[dev-dependencies.dotenv]
version = "0.15"

[dev-dependencies.futures]
version = "0.3"

[dev-dependencies.maplit]
version = "1"

[dev-dependencies.once_cell]
version = "1.8"

[dev-dependencies.pretty_assertions]
version = "0.7"

[dev-dependencies.smol]
version = "1.2"

[dev-dependencies.smol-potat]
version = "1.1"

[dev-dependencies.time]
version = "0.3"
features = ["macros"]

[dev-dependencies.tokio]
version = "1.6"
features = ["full"]

[dev-dependencies.tracing-subscriber]
version = "0.3.17"
features = ["env-filter"]

[dev-dependencies.uuid]
version = "1"
features = ["v4"]

[features]
debug-print = []
default = [
    "macros",
    "with-json",
    "with-chrono",
    "with-rust_decimal",
    "with-bigdecimal",
    "with-uuid",
    "with-time",
]
json-array = ["postgres-array"]
macros = ["sea-orm-macros/derive"]
mock = []
postgres-array = [
    "sea-query/postgres-array",
    "sea-query-binder?/postgres-array",
    "sea-orm-macros/postgres-array",
]
proxy = [
    "serde_json",
    "serde/derive",
]
runtime-actix = []
runtime-actix-native-tls = [
    "sqlx?/runtime-tokio-native-tls",
    "sea-query-binder?/runtime-actix-native-tls",
    "runtime-actix",
]
runtime-actix-rustls = [
    "sqlx?/runtime-tokio-rustls",
    "sea-query-binder?/runtime-actix-rustls",
    "runtime-actix",
]
runtime-async-std = []
runtime-async-std-native-tls = [
    "sqlx?/runtime-async-std-native-tls",
    "sea-query-binder?/runtime-async-std-native-tls",
    "runtime-async-std",
]
runtime-async-std-rustls = [
    "sqlx?/runtime-async-std-rustls",
    "sea-query-binder?/runtime-async-std-rustls",
    "runtime-async-std",
]
runtime-tokio = []
runtime-tokio-native-tls = [
    "sqlx?/runtime-tokio-native-tls",
    "sea-query-binder?/runtime-tokio-native-tls",
    "runtime-tokio",
]
runtime-tokio-rustls = [
    "sqlx?/runtime-tokio-rustls",
    "sea-query-binder?/runtime-tokio-rustls",
    "runtime-tokio",
]
sea-orm-internal = []
seaography = ["sea-orm-macros/seaography"]
sqlite-use-returning-for-3_35 = []
sqlx-all = [
    "sqlx-mysql",
    "sqlx-postgres",
    "sqlx-sqlite",
]
sqlx-dep = []
sqlx-mysql = [
    "sqlx-dep",
    "sea-query-binder/sqlx-mysql",
    "sqlx/mysql",
]
sqlx-postgres = [
    "sqlx-dep",
    "sea-query-binder/sqlx-postgres",
    "sqlx/postgres",
    "postgres-array",
]
sqlx-sqlite = [
    "sqlx-dep",
    "sea-query-binder/sqlx-sqlite",
    "sqlx/sqlite",
]
tests-cfg = ["serde/derive"]
with-bigdecimal = [
    "bigdecimal",
    "sea-query/with-bigdecimal",
    "sea-query-binder?/with-bigdecimal",
    "sqlx?/bigdecimal",
]
with-chrono = [
    "chrono",
    "sea-query/with-chrono",
    "sea-query-binder?/with-chrono",
    "sqlx?/chrono",
]
with-json = [
    "serde_json",
    "sea-query/with-json",
    "chrono?/serde",
    "time?/serde",
    "uuid?/serde",
    "sea-query-binder?/with-json",
    "sqlx?/json",
]
with-rust_decimal = [
    "rust_decimal",
    "sea-query/with-rust_decimal",
    "sea-query-binder?/with-rust_decimal",
    "sqlx?/rust_decimal",
]
with-time = [
    "time",
    "sea-query/with-time",
    "sea-query-binder?/with-time",
    "sqlx?/time",
]
with-uuid = [
    "uuid",
    "sea-query/with-uuid",
    "sea-query-binder?/with-uuid",
    "sqlx?/uuid",
]
