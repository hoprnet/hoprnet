(function() {
    var type_impls = Object.fromEntries([["hopr_api",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%3CF+as+Flags%3E::Type%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-AsRef%3C%3CF+as+Flags%3E::Type%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;&lt;F as Flags&gt;::Type&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;&lt;F as Flags&gt;::Type</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<<F as Flags>::Type>","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitAnd%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the intersection of the current set and the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"attr\">#[derive(PartialOrd, Ord)]\n    </span><span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 &amp; set1, Flag::Bar);\n<span class=\"macro\">assert_eq!</span>(set0 &amp; Flag::Foo, Flag::Foo);\n<span class=\"macro\">assert_eq!</span>(set1 &amp; Flag::Baz, Flag::Baz);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details></div></details>","BitAnd<R>","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitAndAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the intersection of the current set and the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u64 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set1 = Flag::Baz | Flag::Bar;\n\nset0 &amp;= set1;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Bar);\n\nset1 &amp;= Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Bar);</code></pre></div></div></details></div></details>","BitAndAssign<R>","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitOr%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the union of the current set with the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"attr\">#[derive(PartialOrd, Ord)]\n    </span><span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 | set1, FlagSet::full());</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details></div></details>","BitOr<R>","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitOrAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the union of the current set with the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u64 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set1 = Flag::Bar | Flag::Baz;\n\nset0 |= set1;\n<span class=\"macro\">assert_eq!</span>(set0, FlagSet::full());\n\nset1 |= Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set1, Flag::Bar | Flag::Baz);</code></pre></div></div></details></div></details>","BitOrAssign<R>","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitXor%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the current set with the specified flags toggled.</p>\n<p>This is commonly known as toggling the presence</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u32 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 ^ set1, Flag::Foo | Flag::Baz);\n<span class=\"macro\">assert_eq!</span>(set0 ^ Flag::Foo, Flag::Bar);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details></div></details>","BitXor<R>","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitXorAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the current set with the specified flags toggled.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set1 = Flag::Baz | Flag::Bar;\n\nset0 ^= set1;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Foo | Flag::Baz);\n\nset1 ^= Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set1, Flag::Bar);</code></pre></div></div></details></div></details>","BitXorAssign<R>","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Clone-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#245-247\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Debug-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Default-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new, empty FlagSet.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::&lt;Flag&gt;::default();\n<span class=\"macro\">assert!</span>(set.is_empty());\n<span class=\"macro\">assert!</span>(!set.is_full());\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Baz));</code></pre></div></div></details></div></details>","Default","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Deserialize%3C'de%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, F&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;FlagSet&lt;F&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde_core::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Extend%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = R&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Add values by iterating over some collection.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>flag_vec = <span class=\"macro\">vec!</span>[Flag::Bar, Flag::Baz];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>some_extended_flags = FlagSet::from(Flag::Foo);\nsome_extended_flags.extend(flag_vec);\n<span class=\"macro\">assert_eq!</span>(some_extended_flags, Flag::Foo | Flag::Bar | Flag::Baz);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<R>","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(bits: &lt;F as Flags&gt;::Type) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;FlagSet&lt;F&gt;, InvalidBits&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new set from bits; returning <code>Err(InvalidBits)</code> on invalid/unknown bits.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n        Qux = <span class=\"number\">0b1010</span>, <span class=\"comment\">// Implies Bar\n    </span>}\n}\n\n<span class=\"macro\">assert_eq!</span>(FlagSet::&lt;Flag&gt;::new(<span class=\"number\">0b00101</span>), <span class=\"prelude-val\">Ok</span>(Flag::Foo | Flag::Baz));\n<span class=\"macro\">assert_eq!</span>(FlagSet::&lt;Flag&gt;::new(<span class=\"number\">0b01101</span>), <span class=\"prelude-val\">Err</span>(flagset::InvalidBits)); <span class=\"comment\">// Invalid\n</span><span class=\"macro\">assert_eq!</span>(FlagSet::&lt;Flag&gt;::new(<span class=\"number\">0b10101</span>), <span class=\"prelude-val\">Err</span>(flagset::InvalidBits)); <span class=\"comment\">// Unknown</span></code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_truncated\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_truncated</a>(bits: &lt;F as Flags&gt;::Type) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new set from bits; truncating invalid/unknown bits.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n        Qux = <span class=\"number\">0b1010</span>, <span class=\"comment\">// Implies Bar\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::new_truncated(<span class=\"number\">0b11101</span>);  <span class=\"comment\">// Has invalid and unknown.\n</span><span class=\"macro\">assert_eq!</span>(set, Flag::Foo | Flag::Baz);\n<span class=\"macro\">assert_eq!</span>(set.bits(), <span class=\"number\">0b00101</span>);            <span class=\"comment\">// Has neither.</span></code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unchecked\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a class=\"fn\">new_unchecked</a>(bits: &lt;F as Flags&gt;::Type) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new set from bits; use of invalid/unknown bits is undefined.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n        Qux = <span class=\"number\">0b1010</span>, <span class=\"comment\">// Implies Bar\n    </span>}\n}\n\n<span class=\"comment\">// Unknown and invalid bits are retained. Behavior is undefined.\n</span><span class=\"kw\">const </span>set: FlagSet&lt;Flag&gt; = <span class=\"kw\">unsafe </span>{ FlagSet::&lt;Flag&gt;::new_unchecked(<span class=\"number\">0b11101</span>) };\n<span class=\"macro\">assert_eq!</span>(set.bits(), <span class=\"number\">0b11101</span>);</code></pre></div><h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This constructor doesn’t check that the bits are valid. If you pass\nundefined flags, undefined behavior may result.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.empty\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">empty</a>() -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new, empty FlagSet.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::&lt;Flag&gt;::empty();\n<span class=\"macro\">assert!</span>(set.is_empty());\n<span class=\"macro\">assert!</span>(!set.is_full());\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.full\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">full</a>() -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new FlagSet containing all possible flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::full();\n<span class=\"macro\">assert!</span>(!set.is_empty());\n<span class=\"macro\">assert!</span>(set.is_full());\n<span class=\"macro\">assert!</span>(set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bits\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">bits</a>(self) -&gt; &lt;F as Flags&gt;::Type</h4></section></summary><div class=\"docblock\"><p>Returns the raw bits of the set.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n    }\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set.bits(), <span class=\"number\">0b0101u16</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the FlagSet contains no flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_empty());\n\nset &amp;= Flag::Baz;\n<span class=\"macro\">assert!</span>(set.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_full</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the FlagSet contains all possible flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_full());\n\nset |= Flag::Baz;\n<span class=\"macro\">assert!</span>(set.is_full());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_disjoint\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_disjoint</a>(self, rhs: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the two <code>FlagSet</code>s do not share any flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_disjoint(Flag::Foo));\n<span class=\"macro\">assert!</span>(!set.is_disjoint(Flag::Foo | Flag::Baz));\n<span class=\"macro\">assert!</span>(set.is_disjoint(Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">contains</a>(self, rhs: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if this FlagSet is a superset of the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Foo | Flag::Bar));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo | Flag::Bar | Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes all flags from the FlagSet.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_empty());\n\nset.clear();\n<span class=\"macro\">assert!</span>(set.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">drain</a>(&amp;mut self) -&gt; Iter&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Clears the current set and returns an iterator of all removed flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = set.drain();\n<span class=\"macro\">assert!</span>(set.is_empty());\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Foo));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Bar));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">retain</a>(&amp;mut self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Retain only the flags flags specified by the predicate.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\nset0.retain(|f| f != Flag::Foo);\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Bar);</code></pre></div></div></details></div></details>",0,"hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3COption%3CFlagSet%3CF%3E%3E%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-From%3COption%3CFlagSet%3CF%3E%3E%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;FlagSet&lt;F&gt;&gt;&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;FlagSet&lt;F&gt;&gt;) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;FlagSet&lt;F&gt;&gt;</code> to <code>FlagSet&lt;F&gt;</code>.</p>\n<p>Most notably, this allows for the use of <code>None</code> in many places to\nsubstitute for manually creating an empty <code>FlagSet&lt;F&gt;</code>. See below.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">fn </span>convert(v: <span class=\"kw\">impl </span>Into&lt;FlagSet&lt;Flag&gt;&gt;) -&gt; u8 {\n    v.into().bits()\n}\n\n<span class=\"macro\">assert_eq!</span>(convert(Flag::Foo | Flag::Bar), <span class=\"number\">0b011</span>);\n<span class=\"macro\">assert_eq!</span>(convert(Flag::Foo), <span class=\"number\">0b001</span>);\n<span class=\"macro\">assert_eq!</span>(convert(<span class=\"prelude-val\">None</span>), <span class=\"number\">0b000</span>);</code></pre></div></div></details></div></details>","From<Option<FlagSet<F>>>","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CPacketSignal%3E-for-FlagSet%3CPacketSignal%3E\" class=\"impl\"><a href=\"#impl-From%3CPacketSignal%3E-for-FlagSet%3CPacketSignal%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;PacketSignal&gt; for FlagSet&lt;PacketSignal&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: PacketSignal) -&gt; FlagSet&lt;PacketSignal&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<PacketSignal>","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Hash-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-IntoIterator-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;FlagSet&lt;F&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class=\"docblock\"><p>Iterate over the flags in the set.</p>\n<p><strong>NOTE</strong>: The order in which the flags are iterated is undefined.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = set.into_iter();\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Foo));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Bar));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = F</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = Iter&lt;F&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Not-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method trait-impl\"><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the complement of the current set.</p>\n<p>In common parlance, this returns the set of all possible flags that are\nnot in the current set.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"attr\">#[derive(PartialOrd, Ord)]\n    </span><span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">0</span>,\n        Bar = <span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">1</span>,\n        Baz = <span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">2\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = !FlagSet::from(Flag::Foo);\n<span class=\"macro\">assert!</span>(!set.is_empty());\n<span class=\"macro\">assert!</span>(!set.is_full());\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Baz));</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details></div></details>","Not","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;R</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<R>","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Rem%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the symmetric difference between two sets.</p>\n<p>The symmetric difference between two sets is the set of all flags\nthat appear in one set or the other, but not both.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 % set1, Flag::Foo | Flag::Baz);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details></div></details>","Rem<R>","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-RemAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the symmetric difference between two sets.</p>\n<p>The symmetric difference between two sets is the set of all flags\nthat appear in one set or the other, but not both.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\nset0 %= set1;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Foo | Flag::Baz);</code></pre></div></div></details></div></details>","RemAssign<R>","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Serialize-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde_core::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde_core::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Sub%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates set difference (the current set without the specified flags).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 - set1, Flag::Foo);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Sub<R>","hopr_api::db::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-SubAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns set difference (the current set without the specified flags).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\nset0 -= Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Foo);</code></pre></div></div></details></div></details>","SubAssign<R>","hopr_api::db::PacketSignals"],["<section id=\"impl-Copy-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Copy-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","hopr_api::db::PacketSignals"],["<section id=\"impl-Eq-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Eq-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","hopr_api::db::PacketSignals"]]],["hopr_crypto_packet",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%3CF+as+Flags%3E::Type%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-AsRef%3C%3CF+as+Flags%3E::Type%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;&lt;F as Flags&gt;::Type&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;&lt;F as Flags&gt;::Type</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<<F as Flags>::Type>","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitAnd%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the intersection of the current set and the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"attr\">#[derive(PartialOrd, Ord)]\n    </span><span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 &amp; set1, Flag::Bar);\n<span class=\"macro\">assert_eq!</span>(set0 &amp; Flag::Foo, Flag::Foo);\n<span class=\"macro\">assert_eq!</span>(set1 &amp; Flag::Baz, Flag::Baz);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details></div></details>","BitAnd<R>","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitAndAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the intersection of the current set and the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u64 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set1 = Flag::Baz | Flag::Bar;\n\nset0 &amp;= set1;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Bar);\n\nset1 &amp;= Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Bar);</code></pre></div></div></details></div></details>","BitAndAssign<R>","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitOr%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the union of the current set with the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"attr\">#[derive(PartialOrd, Ord)]\n    </span><span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 | set1, FlagSet::full());</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details></div></details>","BitOr<R>","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitOrAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the union of the current set with the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u64 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set1 = Flag::Bar | Flag::Baz;\n\nset0 |= set1;\n<span class=\"macro\">assert_eq!</span>(set0, FlagSet::full());\n\nset1 |= Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set1, Flag::Bar | Flag::Baz);</code></pre></div></div></details></div></details>","BitOrAssign<R>","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitXor%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the current set with the specified flags toggled.</p>\n<p>This is commonly known as toggling the presence</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u32 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 ^ set1, Flag::Foo | Flag::Baz);\n<span class=\"macro\">assert_eq!</span>(set0 ^ Flag::Foo, Flag::Bar);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details></div></details>","BitXor<R>","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitXorAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the current set with the specified flags toggled.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set1 = Flag::Baz | Flag::Bar;\n\nset0 ^= set1;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Foo | Flag::Baz);\n\nset1 ^= Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set1, Flag::Bar);</code></pre></div></div></details></div></details>","BitXorAssign<R>","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Clone-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#245-247\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Debug-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Default-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new, empty FlagSet.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::&lt;Flag&gt;::default();\n<span class=\"macro\">assert!</span>(set.is_empty());\n<span class=\"macro\">assert!</span>(!set.is_full());\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Baz));</code></pre></div></div></details></div></details>","Default","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Deserialize%3C'de%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, F&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;FlagSet&lt;F&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde_core::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Extend%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = R&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Add values by iterating over some collection.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>flag_vec = <span class=\"macro\">vec!</span>[Flag::Bar, Flag::Baz];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>some_extended_flags = FlagSet::from(Flag::Foo);\nsome_extended_flags.extend(flag_vec);\n<span class=\"macro\">assert_eq!</span>(some_extended_flags, Flag::Foo | Flag::Bar | Flag::Baz);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<R>","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(bits: &lt;F as Flags&gt;::Type) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;FlagSet&lt;F&gt;, InvalidBits&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new set from bits; returning <code>Err(InvalidBits)</code> on invalid/unknown bits.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n        Qux = <span class=\"number\">0b1010</span>, <span class=\"comment\">// Implies Bar\n    </span>}\n}\n\n<span class=\"macro\">assert_eq!</span>(FlagSet::&lt;Flag&gt;::new(<span class=\"number\">0b00101</span>), <span class=\"prelude-val\">Ok</span>(Flag::Foo | Flag::Baz));\n<span class=\"macro\">assert_eq!</span>(FlagSet::&lt;Flag&gt;::new(<span class=\"number\">0b01101</span>), <span class=\"prelude-val\">Err</span>(flagset::InvalidBits)); <span class=\"comment\">// Invalid\n</span><span class=\"macro\">assert_eq!</span>(FlagSet::&lt;Flag&gt;::new(<span class=\"number\">0b10101</span>), <span class=\"prelude-val\">Err</span>(flagset::InvalidBits)); <span class=\"comment\">// Unknown</span></code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_truncated\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_truncated</a>(bits: &lt;F as Flags&gt;::Type) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new set from bits; truncating invalid/unknown bits.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n        Qux = <span class=\"number\">0b1010</span>, <span class=\"comment\">// Implies Bar\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::new_truncated(<span class=\"number\">0b11101</span>);  <span class=\"comment\">// Has invalid and unknown.\n</span><span class=\"macro\">assert_eq!</span>(set, Flag::Foo | Flag::Baz);\n<span class=\"macro\">assert_eq!</span>(set.bits(), <span class=\"number\">0b00101</span>);            <span class=\"comment\">// Has neither.</span></code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unchecked\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a class=\"fn\">new_unchecked</a>(bits: &lt;F as Flags&gt;::Type) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new set from bits; use of invalid/unknown bits is undefined.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n        Qux = <span class=\"number\">0b1010</span>, <span class=\"comment\">// Implies Bar\n    </span>}\n}\n\n<span class=\"comment\">// Unknown and invalid bits are retained. Behavior is undefined.\n</span><span class=\"kw\">const </span>set: FlagSet&lt;Flag&gt; = <span class=\"kw\">unsafe </span>{ FlagSet::&lt;Flag&gt;::new_unchecked(<span class=\"number\">0b11101</span>) };\n<span class=\"macro\">assert_eq!</span>(set.bits(), <span class=\"number\">0b11101</span>);</code></pre></div><h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This constructor doesn’t check that the bits are valid. If you pass\nundefined flags, undefined behavior may result.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.empty\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">empty</a>() -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new, empty FlagSet.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::&lt;Flag&gt;::empty();\n<span class=\"macro\">assert!</span>(set.is_empty());\n<span class=\"macro\">assert!</span>(!set.is_full());\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.full\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">full</a>() -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new FlagSet containing all possible flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::full();\n<span class=\"macro\">assert!</span>(!set.is_empty());\n<span class=\"macro\">assert!</span>(set.is_full());\n<span class=\"macro\">assert!</span>(set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bits\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">bits</a>(self) -&gt; &lt;F as Flags&gt;::Type</h4></section></summary><div class=\"docblock\"><p>Returns the raw bits of the set.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n    }\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set.bits(), <span class=\"number\">0b0101u16</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the FlagSet contains no flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_empty());\n\nset &amp;= Flag::Baz;\n<span class=\"macro\">assert!</span>(set.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_full</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the FlagSet contains all possible flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_full());\n\nset |= Flag::Baz;\n<span class=\"macro\">assert!</span>(set.is_full());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_disjoint\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_disjoint</a>(self, rhs: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the two <code>FlagSet</code>s do not share any flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_disjoint(Flag::Foo));\n<span class=\"macro\">assert!</span>(!set.is_disjoint(Flag::Foo | Flag::Baz));\n<span class=\"macro\">assert!</span>(set.is_disjoint(Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">contains</a>(self, rhs: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if this FlagSet is a superset of the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Foo | Flag::Bar));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo | Flag::Bar | Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes all flags from the FlagSet.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_empty());\n\nset.clear();\n<span class=\"macro\">assert!</span>(set.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">drain</a>(&amp;mut self) -&gt; Iter&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Clears the current set and returns an iterator of all removed flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = set.drain();\n<span class=\"macro\">assert!</span>(set.is_empty());\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Foo));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Bar));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">retain</a>(&amp;mut self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Retain only the flags flags specified by the predicate.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\nset0.retain(|f| f != Flag::Foo);\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Bar);</code></pre></div></div></details></div></details>",0,"hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3COption%3CFlagSet%3CF%3E%3E%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-From%3COption%3CFlagSet%3CF%3E%3E%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;FlagSet&lt;F&gt;&gt;&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;FlagSet&lt;F&gt;&gt;) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;FlagSet&lt;F&gt;&gt;</code> to <code>FlagSet&lt;F&gt;</code>.</p>\n<p>Most notably, this allows for the use of <code>None</code> in many places to\nsubstitute for manually creating an empty <code>FlagSet&lt;F&gt;</code>. See below.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">fn </span>convert(v: <span class=\"kw\">impl </span>Into&lt;FlagSet&lt;Flag&gt;&gt;) -&gt; u8 {\n    v.into().bits()\n}\n\n<span class=\"macro\">assert_eq!</span>(convert(Flag::Foo | Flag::Bar), <span class=\"number\">0b011</span>);\n<span class=\"macro\">assert_eq!</span>(convert(Flag::Foo), <span class=\"number\">0b001</span>);\n<span class=\"macro\">assert_eq!</span>(convert(<span class=\"prelude-val\">None</span>), <span class=\"number\">0b000</span>);</code></pre></div></div></details></div></details>","From<Option<FlagSet<F>>>","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Hash-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-IntoIterator-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;FlagSet&lt;F&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class=\"docblock\"><p>Iterate over the flags in the set.</p>\n<p><strong>NOTE</strong>: The order in which the flags are iterated is undefined.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = set.into_iter();\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Foo));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Bar));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = F</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = Iter&lt;F&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Not-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method trait-impl\"><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the complement of the current set.</p>\n<p>In common parlance, this returns the set of all possible flags that are\nnot in the current set.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"attr\">#[derive(PartialOrd, Ord)]\n    </span><span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">0</span>,\n        Bar = <span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">1</span>,\n        Baz = <span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">2\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = !FlagSet::from(Flag::Foo);\n<span class=\"macro\">assert!</span>(!set.is_empty());\n<span class=\"macro\">assert!</span>(!set.is_full());\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Baz));</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details></div></details>","Not","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;R</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<R>","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Rem%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the symmetric difference between two sets.</p>\n<p>The symmetric difference between two sets is the set of all flags\nthat appear in one set or the other, but not both.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 % set1, Flag::Foo | Flag::Baz);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details></div></details>","Rem<R>","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-RemAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the symmetric difference between two sets.</p>\n<p>The symmetric difference between two sets is the set of all flags\nthat appear in one set or the other, but not both.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\nset0 %= set1;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Foo | Flag::Baz);</code></pre></div></div></details></div></details>","RemAssign<R>","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Serialize-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde_core::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde_core::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Sub%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates set difference (the current set without the specified flags).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 - set1, Flag::Foo);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Sub<R>","hopr_crypto_packet::types::PacketSignals"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-SubAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns set difference (the current set without the specified flags).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\nset0 -= Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Foo);</code></pre></div></div></details></div></details>","SubAssign<R>","hopr_crypto_packet::types::PacketSignals"],["<section id=\"impl-Copy-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Copy-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","hopr_crypto_packet::types::PacketSignals"],["<section id=\"impl-Eq-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Eq-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","hopr_crypto_packet::types::PacketSignals"]]],["hopr_lib",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%3CF+as+Flags%3E::Type%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-AsRef%3C%3CF+as+Flags%3E::Type%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;&lt;F as Flags&gt;::Type&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;&lt;F as Flags&gt;::Type</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<<F as Flags>::Type>","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitAnd%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the intersection of the current set and the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"attr\">#[derive(PartialOrd, Ord)]\n    </span><span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 &amp; set1, Flag::Bar);\n<span class=\"macro\">assert_eq!</span>(set0 &amp; Flag::Foo, Flag::Foo);\n<span class=\"macro\">assert_eq!</span>(set1 &amp; Flag::Baz, Flag::Baz);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details></div></details>","BitAnd<R>","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitAndAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the intersection of the current set and the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u64 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set1 = Flag::Baz | Flag::Bar;\n\nset0 &amp;= set1;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Bar);\n\nset1 &amp;= Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Bar);</code></pre></div></div></details></div></details>","BitAndAssign<R>","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitOr%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the union of the current set with the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"attr\">#[derive(PartialOrd, Ord)]\n    </span><span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 | set1, FlagSet::full());</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details></div></details>","BitOr<R>","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitOrAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the union of the current set with the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u64 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set1 = Flag::Bar | Flag::Baz;\n\nset0 |= set1;\n<span class=\"macro\">assert_eq!</span>(set0, FlagSet::full());\n\nset1 |= Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set1, Flag::Bar | Flag::Baz);</code></pre></div></div></details></div></details>","BitOrAssign<R>","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitXor%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the current set with the specified flags toggled.</p>\n<p>This is commonly known as toggling the presence</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u32 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 ^ set1, Flag::Foo | Flag::Baz);\n<span class=\"macro\">assert_eq!</span>(set0 ^ Flag::Foo, Flag::Bar);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details></div></details>","BitXor<R>","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitXorAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the current set with the specified flags toggled.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set1 = Flag::Baz | Flag::Bar;\n\nset0 ^= set1;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Foo | Flag::Baz);\n\nset1 ^= Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set1, Flag::Bar);</code></pre></div></div></details></div></details>","BitXorAssign<R>","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Clone-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#245-247\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Debug-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Default-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new, empty FlagSet.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::&lt;Flag&gt;::default();\n<span class=\"macro\">assert!</span>(set.is_empty());\n<span class=\"macro\">assert!</span>(!set.is_full());\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Baz));</code></pre></div></div></details></div></details>","Default","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Deserialize%3C'de%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, F&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;FlagSet&lt;F&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde_core::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Extend%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = R&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Add values by iterating over some collection.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>flag_vec = <span class=\"macro\">vec!</span>[Flag::Bar, Flag::Baz];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>some_extended_flags = FlagSet::from(Flag::Foo);\nsome_extended_flags.extend(flag_vec);\n<span class=\"macro\">assert_eq!</span>(some_extended_flags, Flag::Foo | Flag::Bar | Flag::Baz);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<R>","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(bits: &lt;F as Flags&gt;::Type) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;FlagSet&lt;F&gt;, InvalidBits&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new set from bits; returning <code>Err(InvalidBits)</code> on invalid/unknown bits.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n        Qux = <span class=\"number\">0b1010</span>, <span class=\"comment\">// Implies Bar\n    </span>}\n}\n\n<span class=\"macro\">assert_eq!</span>(FlagSet::&lt;Flag&gt;::new(<span class=\"number\">0b00101</span>), <span class=\"prelude-val\">Ok</span>(Flag::Foo | Flag::Baz));\n<span class=\"macro\">assert_eq!</span>(FlagSet::&lt;Flag&gt;::new(<span class=\"number\">0b01101</span>), <span class=\"prelude-val\">Err</span>(flagset::InvalidBits)); <span class=\"comment\">// Invalid\n</span><span class=\"macro\">assert_eq!</span>(FlagSet::&lt;Flag&gt;::new(<span class=\"number\">0b10101</span>), <span class=\"prelude-val\">Err</span>(flagset::InvalidBits)); <span class=\"comment\">// Unknown</span></code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_truncated\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_truncated</a>(bits: &lt;F as Flags&gt;::Type) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new set from bits; truncating invalid/unknown bits.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n        Qux = <span class=\"number\">0b1010</span>, <span class=\"comment\">// Implies Bar\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::new_truncated(<span class=\"number\">0b11101</span>);  <span class=\"comment\">// Has invalid and unknown.\n</span><span class=\"macro\">assert_eq!</span>(set, Flag::Foo | Flag::Baz);\n<span class=\"macro\">assert_eq!</span>(set.bits(), <span class=\"number\">0b00101</span>);            <span class=\"comment\">// Has neither.</span></code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unchecked\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a class=\"fn\">new_unchecked</a>(bits: &lt;F as Flags&gt;::Type) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new set from bits; use of invalid/unknown bits is undefined.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n        Qux = <span class=\"number\">0b1010</span>, <span class=\"comment\">// Implies Bar\n    </span>}\n}\n\n<span class=\"comment\">// Unknown and invalid bits are retained. Behavior is undefined.\n</span><span class=\"kw\">const </span>set: FlagSet&lt;Flag&gt; = <span class=\"kw\">unsafe </span>{ FlagSet::&lt;Flag&gt;::new_unchecked(<span class=\"number\">0b11101</span>) };\n<span class=\"macro\">assert_eq!</span>(set.bits(), <span class=\"number\">0b11101</span>);</code></pre></div><h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This constructor doesn’t check that the bits are valid. If you pass\nundefined flags, undefined behavior may result.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.empty\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">empty</a>() -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new, empty FlagSet.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::&lt;Flag&gt;::empty();\n<span class=\"macro\">assert!</span>(set.is_empty());\n<span class=\"macro\">assert!</span>(!set.is_full());\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.full\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">full</a>() -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new FlagSet containing all possible flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::full();\n<span class=\"macro\">assert!</span>(!set.is_empty());\n<span class=\"macro\">assert!</span>(set.is_full());\n<span class=\"macro\">assert!</span>(set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bits\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">bits</a>(self) -&gt; &lt;F as Flags&gt;::Type</h4></section></summary><div class=\"docblock\"><p>Returns the raw bits of the set.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n    }\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set.bits(), <span class=\"number\">0b0101u16</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the FlagSet contains no flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_empty());\n\nset &amp;= Flag::Baz;\n<span class=\"macro\">assert!</span>(set.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_full</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the FlagSet contains all possible flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_full());\n\nset |= Flag::Baz;\n<span class=\"macro\">assert!</span>(set.is_full());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_disjoint\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_disjoint</a>(self, rhs: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the two <code>FlagSet</code>s do not share any flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_disjoint(Flag::Foo));\n<span class=\"macro\">assert!</span>(!set.is_disjoint(Flag::Foo | Flag::Baz));\n<span class=\"macro\">assert!</span>(set.is_disjoint(Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">contains</a>(self, rhs: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if this FlagSet is a superset of the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Foo | Flag::Bar));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo | Flag::Bar | Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes all flags from the FlagSet.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_empty());\n\nset.clear();\n<span class=\"macro\">assert!</span>(set.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">drain</a>(&amp;mut self) -&gt; Iter&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Clears the current set and returns an iterator of all removed flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = set.drain();\n<span class=\"macro\">assert!</span>(set.is_empty());\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Foo));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Bar));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">retain</a>(&amp;mut self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Retain only the flags flags specified by the predicate.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\nset0.retain(|f| f != Flag::Foo);\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Bar);</code></pre></div></div></details></div></details>",0,"hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CByteCapabilities%3E-for-FlagSet%3CSessionCapability%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hopr_transport_session/types.rs.html#50\">Source</a><a href=\"#impl-From%3CByteCapabilities%3E-for-FlagSet%3CSessionCapability%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"hopr_transport_session/types/struct.ByteCapabilities.html\" title=\"struct hopr_transport_session::types::ByteCapabilities\">ByteCapabilities</a>&gt; for FlagSet&lt;<a class=\"enum\" href=\"hopr_lib/enum.SessionCapability.html\" title=\"enum hopr_lib::SessionCapability\">Capability</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hopr_transport_session/types.rs.html#51\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"hopr_transport_session/types/struct.ByteCapabilities.html\" title=\"struct hopr_transport_session::types::ByteCapabilities\">ByteCapabilities</a>) -&gt; FlagSet&lt;<a class=\"enum\" href=\"hopr_lib/enum.SessionCapability.html\" title=\"enum hopr_lib::SessionCapability\">Capability</a>&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ByteCapabilities>","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3COption%3CFlagSet%3CF%3E%3E%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-From%3COption%3CFlagSet%3CF%3E%3E%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;FlagSet&lt;F&gt;&gt;&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;FlagSet&lt;F&gt;&gt;) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;FlagSet&lt;F&gt;&gt;</code> to <code>FlagSet&lt;F&gt;</code>.</p>\n<p>Most notably, this allows for the use of <code>None</code> in many places to\nsubstitute for manually creating an empty <code>FlagSet&lt;F&gt;</code>. See below.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">fn </span>convert(v: <span class=\"kw\">impl </span>Into&lt;FlagSet&lt;Flag&gt;&gt;) -&gt; u8 {\n    v.into().bits()\n}\n\n<span class=\"macro\">assert_eq!</span>(convert(Flag::Foo | Flag::Bar), <span class=\"number\">0b011</span>);\n<span class=\"macro\">assert_eq!</span>(convert(Flag::Foo), <span class=\"number\">0b001</span>);\n<span class=\"macro\">assert_eq!</span>(convert(<span class=\"prelude-val\">None</span>), <span class=\"number\">0b000</span>);</code></pre></div></div></details></div></details>","From<Option<FlagSet<F>>>","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSessionCapability%3E-for-FlagSet%3CSessionCapability%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hopr_transport_session/lib.rs.html#38-62\">Source</a><a href=\"#impl-From%3CSessionCapability%3E-for-FlagSet%3CSessionCapability%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"hopr_lib/enum.SessionCapability.html\" title=\"enum hopr_lib::SessionCapability\">Capability</a>&gt; for FlagSet&lt;<a class=\"enum\" href=\"hopr_lib/enum.SessionCapability.html\" title=\"enum hopr_lib::SessionCapability\">Capability</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hopr_transport_session/lib.rs.html#38-62\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"enum\" href=\"hopr_lib/enum.SessionCapability.html\" title=\"enum hopr_lib::SessionCapability\">Capability</a>) -&gt; FlagSet&lt;<a class=\"enum\" href=\"hopr_lib/enum.SessionCapability.html\" title=\"enum hopr_lib::SessionCapability\">Capability</a>&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Capability>","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Hash-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-IntoIterator-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;FlagSet&lt;F&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class=\"docblock\"><p>Iterate over the flags in the set.</p>\n<p><strong>NOTE</strong>: The order in which the flags are iterated is undefined.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = set.into_iter();\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Foo));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Bar));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = F</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = Iter&lt;F&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Not-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method trait-impl\"><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the complement of the current set.</p>\n<p>In common parlance, this returns the set of all possible flags that are\nnot in the current set.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"attr\">#[derive(PartialOrd, Ord)]\n    </span><span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">0</span>,\n        Bar = <span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">1</span>,\n        Baz = <span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">2\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = !FlagSet::from(Flag::Foo);\n<span class=\"macro\">assert!</span>(!set.is_empty());\n<span class=\"macro\">assert!</span>(!set.is_full());\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Baz));</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details></div></details>","Not","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;R</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<R>","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Rem%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the symmetric difference between two sets.</p>\n<p>The symmetric difference between two sets is the set of all flags\nthat appear in one set or the other, but not both.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 % set1, Flag::Foo | Flag::Baz);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details></div></details>","Rem<R>","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-RemAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the symmetric difference between two sets.</p>\n<p>The symmetric difference between two sets is the set of all flags\nthat appear in one set or the other, but not both.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\nset0 %= set1;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Foo | Flag::Baz);</code></pre></div></div></details></div></details>","RemAssign<R>","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Serialize-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde_core::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde_core::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Sub%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates set difference (the current set without the specified flags).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 - set1, Flag::Foo);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Sub<R>","hopr_lib::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-SubAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns set difference (the current set without the specified flags).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\nset0 -= Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Foo);</code></pre></div></div></details></div></details>","SubAssign<R>","hopr_lib::SessionCapabilities"],["<section id=\"impl-Copy-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Copy-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","hopr_lib::SessionCapabilities"],["<section id=\"impl-Eq-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Eq-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","hopr_lib::SessionCapabilities"]]],["hopr_transport",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%3CF+as+Flags%3E::Type%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-AsRef%3C%3CF+as+Flags%3E::Type%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;&lt;F as Flags&gt;::Type&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;&lt;F as Flags&gt;::Type</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<<F as Flags>::Type>","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitAnd%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the intersection of the current set and the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"attr\">#[derive(PartialOrd, Ord)]\n    </span><span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 &amp; set1, Flag::Bar);\n<span class=\"macro\">assert_eq!</span>(set0 &amp; Flag::Foo, Flag::Foo);\n<span class=\"macro\">assert_eq!</span>(set1 &amp; Flag::Baz, Flag::Baz);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details></div></details>","BitAnd<R>","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitAndAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the intersection of the current set and the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u64 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set1 = Flag::Baz | Flag::Bar;\n\nset0 &amp;= set1;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Bar);\n\nset1 &amp;= Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Bar);</code></pre></div></div></details></div></details>","BitAndAssign<R>","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitOr%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the union of the current set with the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"attr\">#[derive(PartialOrd, Ord)]\n    </span><span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 | set1, FlagSet::full());</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details></div></details>","BitOr<R>","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitOrAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the union of the current set with the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u64 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set1 = Flag::Bar | Flag::Baz;\n\nset0 |= set1;\n<span class=\"macro\">assert_eq!</span>(set0, FlagSet::full());\n\nset1 |= Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set1, Flag::Bar | Flag::Baz);</code></pre></div></div></details></div></details>","BitOrAssign<R>","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitXor%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the current set with the specified flags toggled.</p>\n<p>This is commonly known as toggling the presence</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u32 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 ^ set1, Flag::Foo | Flag::Baz);\n<span class=\"macro\">assert_eq!</span>(set0 ^ Flag::Foo, Flag::Bar);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details></div></details>","BitXor<R>","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitXorAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the current set with the specified flags toggled.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set1 = Flag::Baz | Flag::Bar;\n\nset0 ^= set1;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Foo | Flag::Baz);\n\nset1 ^= Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set1, Flag::Bar);</code></pre></div></div></details></div></details>","BitXorAssign<R>","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Clone-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#245-247\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Debug-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Default-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new, empty FlagSet.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::&lt;Flag&gt;::default();\n<span class=\"macro\">assert!</span>(set.is_empty());\n<span class=\"macro\">assert!</span>(!set.is_full());\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Baz));</code></pre></div></div></details></div></details>","Default","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Deserialize%3C'de%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, F&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;FlagSet&lt;F&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde_core::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Extend%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = R&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Add values by iterating over some collection.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>flag_vec = <span class=\"macro\">vec!</span>[Flag::Bar, Flag::Baz];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>some_extended_flags = FlagSet::from(Flag::Foo);\nsome_extended_flags.extend(flag_vec);\n<span class=\"macro\">assert_eq!</span>(some_extended_flags, Flag::Foo | Flag::Bar | Flag::Baz);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<R>","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(bits: &lt;F as Flags&gt;::Type) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;FlagSet&lt;F&gt;, InvalidBits&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new set from bits; returning <code>Err(InvalidBits)</code> on invalid/unknown bits.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n        Qux = <span class=\"number\">0b1010</span>, <span class=\"comment\">// Implies Bar\n    </span>}\n}\n\n<span class=\"macro\">assert_eq!</span>(FlagSet::&lt;Flag&gt;::new(<span class=\"number\">0b00101</span>), <span class=\"prelude-val\">Ok</span>(Flag::Foo | Flag::Baz));\n<span class=\"macro\">assert_eq!</span>(FlagSet::&lt;Flag&gt;::new(<span class=\"number\">0b01101</span>), <span class=\"prelude-val\">Err</span>(flagset::InvalidBits)); <span class=\"comment\">// Invalid\n</span><span class=\"macro\">assert_eq!</span>(FlagSet::&lt;Flag&gt;::new(<span class=\"number\">0b10101</span>), <span class=\"prelude-val\">Err</span>(flagset::InvalidBits)); <span class=\"comment\">// Unknown</span></code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_truncated\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_truncated</a>(bits: &lt;F as Flags&gt;::Type) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new set from bits; truncating invalid/unknown bits.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n        Qux = <span class=\"number\">0b1010</span>, <span class=\"comment\">// Implies Bar\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::new_truncated(<span class=\"number\">0b11101</span>);  <span class=\"comment\">// Has invalid and unknown.\n</span><span class=\"macro\">assert_eq!</span>(set, Flag::Foo | Flag::Baz);\n<span class=\"macro\">assert_eq!</span>(set.bits(), <span class=\"number\">0b00101</span>);            <span class=\"comment\">// Has neither.</span></code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unchecked\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a class=\"fn\">new_unchecked</a>(bits: &lt;F as Flags&gt;::Type) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new set from bits; use of invalid/unknown bits is undefined.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n        Qux = <span class=\"number\">0b1010</span>, <span class=\"comment\">// Implies Bar\n    </span>}\n}\n\n<span class=\"comment\">// Unknown and invalid bits are retained. Behavior is undefined.\n</span><span class=\"kw\">const </span>set: FlagSet&lt;Flag&gt; = <span class=\"kw\">unsafe </span>{ FlagSet::&lt;Flag&gt;::new_unchecked(<span class=\"number\">0b11101</span>) };\n<span class=\"macro\">assert_eq!</span>(set.bits(), <span class=\"number\">0b11101</span>);</code></pre></div><h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This constructor doesn’t check that the bits are valid. If you pass\nundefined flags, undefined behavior may result.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.empty\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">empty</a>() -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new, empty FlagSet.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::&lt;Flag&gt;::empty();\n<span class=\"macro\">assert!</span>(set.is_empty());\n<span class=\"macro\">assert!</span>(!set.is_full());\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.full\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">full</a>() -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new FlagSet containing all possible flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::full();\n<span class=\"macro\">assert!</span>(!set.is_empty());\n<span class=\"macro\">assert!</span>(set.is_full());\n<span class=\"macro\">assert!</span>(set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bits\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">bits</a>(self) -&gt; &lt;F as Flags&gt;::Type</h4></section></summary><div class=\"docblock\"><p>Returns the raw bits of the set.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n    }\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set.bits(), <span class=\"number\">0b0101u16</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the FlagSet contains no flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_empty());\n\nset &amp;= Flag::Baz;\n<span class=\"macro\">assert!</span>(set.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_full</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the FlagSet contains all possible flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_full());\n\nset |= Flag::Baz;\n<span class=\"macro\">assert!</span>(set.is_full());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_disjoint\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_disjoint</a>(self, rhs: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the two <code>FlagSet</code>s do not share any flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_disjoint(Flag::Foo));\n<span class=\"macro\">assert!</span>(!set.is_disjoint(Flag::Foo | Flag::Baz));\n<span class=\"macro\">assert!</span>(set.is_disjoint(Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">contains</a>(self, rhs: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if this FlagSet is a superset of the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Foo | Flag::Bar));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo | Flag::Bar | Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes all flags from the FlagSet.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_empty());\n\nset.clear();\n<span class=\"macro\">assert!</span>(set.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">drain</a>(&amp;mut self) -&gt; Iter&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Clears the current set and returns an iterator of all removed flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = set.drain();\n<span class=\"macro\">assert!</span>(set.is_empty());\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Foo));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Bar));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">retain</a>(&amp;mut self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Retain only the flags flags specified by the predicate.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\nset0.retain(|f| f != Flag::Foo);\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Bar);</code></pre></div></div></details></div></details>",0,"hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CByteCapabilities%3E-for-FlagSet%3CCapability%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hopr_transport_session/types.rs.html#50\">Source</a><a href=\"#impl-From%3CByteCapabilities%3E-for-FlagSet%3CCapability%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"hopr_transport_session/types/struct.ByteCapabilities.html\" title=\"struct hopr_transport_session::types::ByteCapabilities\">ByteCapabilities</a>&gt; for FlagSet&lt;<a class=\"enum\" href=\"hopr_transport/enum.SessionCapability.html\" title=\"enum hopr_transport::SessionCapability\">Capability</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hopr_transport_session/types.rs.html#51\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"hopr_transport_session/types/struct.ByteCapabilities.html\" title=\"struct hopr_transport_session::types::ByteCapabilities\">ByteCapabilities</a>) -&gt; FlagSet&lt;<a class=\"enum\" href=\"hopr_transport/enum.SessionCapability.html\" title=\"enum hopr_transport::SessionCapability\">Capability</a>&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ByteCapabilities>","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCapability%3E-for-FlagSet%3CCapability%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hopr_transport_session/lib.rs.html#38-62\">Source</a><a href=\"#impl-From%3CCapability%3E-for-FlagSet%3CCapability%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"hopr_transport/enum.SessionCapability.html\" title=\"enum hopr_transport::SessionCapability\">Capability</a>&gt; for FlagSet&lt;<a class=\"enum\" href=\"hopr_transport/enum.SessionCapability.html\" title=\"enum hopr_transport::SessionCapability\">Capability</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hopr_transport_session/lib.rs.html#38-62\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"enum\" href=\"hopr_transport/enum.SessionCapability.html\" title=\"enum hopr_transport::SessionCapability\">Capability</a>) -&gt; FlagSet&lt;<a class=\"enum\" href=\"hopr_transport/enum.SessionCapability.html\" title=\"enum hopr_transport::SessionCapability\">Capability</a>&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Capability>","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3COption%3CFlagSet%3CF%3E%3E%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-From%3COption%3CFlagSet%3CF%3E%3E%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;FlagSet&lt;F&gt;&gt;&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;FlagSet&lt;F&gt;&gt;) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;FlagSet&lt;F&gt;&gt;</code> to <code>FlagSet&lt;F&gt;</code>.</p>\n<p>Most notably, this allows for the use of <code>None</code> in many places to\nsubstitute for manually creating an empty <code>FlagSet&lt;F&gt;</code>. See below.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">fn </span>convert(v: <span class=\"kw\">impl </span>Into&lt;FlagSet&lt;Flag&gt;&gt;) -&gt; u8 {\n    v.into().bits()\n}\n\n<span class=\"macro\">assert_eq!</span>(convert(Flag::Foo | Flag::Bar), <span class=\"number\">0b011</span>);\n<span class=\"macro\">assert_eq!</span>(convert(Flag::Foo), <span class=\"number\">0b001</span>);\n<span class=\"macro\">assert_eq!</span>(convert(<span class=\"prelude-val\">None</span>), <span class=\"number\">0b000</span>);</code></pre></div></div></details></div></details>","From<Option<FlagSet<F>>>","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Hash-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-IntoIterator-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;FlagSet&lt;F&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class=\"docblock\"><p>Iterate over the flags in the set.</p>\n<p><strong>NOTE</strong>: The order in which the flags are iterated is undefined.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = set.into_iter();\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Foo));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Bar));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = F</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = Iter&lt;F&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Not-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method trait-impl\"><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the complement of the current set.</p>\n<p>In common parlance, this returns the set of all possible flags that are\nnot in the current set.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"attr\">#[derive(PartialOrd, Ord)]\n    </span><span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">0</span>,\n        Bar = <span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">1</span>,\n        Baz = <span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">2\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = !FlagSet::from(Flag::Foo);\n<span class=\"macro\">assert!</span>(!set.is_empty());\n<span class=\"macro\">assert!</span>(!set.is_full());\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Baz));</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details></div></details>","Not","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;R</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<R>","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Rem%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the symmetric difference between two sets.</p>\n<p>The symmetric difference between two sets is the set of all flags\nthat appear in one set or the other, but not both.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 % set1, Flag::Foo | Flag::Baz);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details></div></details>","Rem<R>","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-RemAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the symmetric difference between two sets.</p>\n<p>The symmetric difference between two sets is the set of all flags\nthat appear in one set or the other, but not both.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\nset0 %= set1;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Foo | Flag::Baz);</code></pre></div></div></details></div></details>","RemAssign<R>","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Serialize-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde_core::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde_core::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Sub%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates set difference (the current set without the specified flags).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 - set1, Flag::Foo);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Sub<R>","hopr_transport::SessionCapabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-SubAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns set difference (the current set without the specified flags).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\nset0 -= Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Foo);</code></pre></div></div></details></div></details>","SubAssign<R>","hopr_transport::SessionCapabilities"],["<section id=\"impl-Copy-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Copy-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","hopr_transport::SessionCapabilities"],["<section id=\"impl-Eq-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Eq-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","hopr_transport::SessionCapabilities"]]],["hopr_transport_session",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%3CF+as+Flags%3E::Type%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-AsRef%3C%3CF+as+Flags%3E::Type%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;&lt;F as Flags&gt;::Type&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;&lt;F as Flags&gt;::Type</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<<F as Flags>::Type>","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitAnd%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the intersection of the current set and the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"attr\">#[derive(PartialOrd, Ord)]\n    </span><span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 &amp; set1, Flag::Bar);\n<span class=\"macro\">assert_eq!</span>(set0 &amp; Flag::Foo, Flag::Foo);\n<span class=\"macro\">assert_eq!</span>(set1 &amp; Flag::Baz, Flag::Baz);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details></div></details>","BitAnd<R>","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitAndAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the intersection of the current set and the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u64 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set1 = Flag::Baz | Flag::Bar;\n\nset0 &amp;= set1;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Bar);\n\nset1 &amp;= Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Bar);</code></pre></div></div></details></div></details>","BitAndAssign<R>","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitOr%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the union of the current set with the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"attr\">#[derive(PartialOrd, Ord)]\n    </span><span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 | set1, FlagSet::full());</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details></div></details>","BitOr<R>","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitOrAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the union of the current set with the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u64 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set1 = Flag::Bar | Flag::Baz;\n\nset0 |= set1;\n<span class=\"macro\">assert_eq!</span>(set0, FlagSet::full());\n\nset1 |= Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set1, Flag::Bar | Flag::Baz);</code></pre></div></div></details></div></details>","BitOrAssign<R>","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitXor%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the current set with the specified flags toggled.</p>\n<p>This is commonly known as toggling the presence</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u32 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 ^ set1, Flag::Foo | Flag::Baz);\n<span class=\"macro\">assert_eq!</span>(set0 ^ Flag::Foo, Flag::Bar);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details></div></details>","BitXor<R>","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-BitXorAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the current set with the specified flags toggled.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set1 = Flag::Baz | Flag::Bar;\n\nset0 ^= set1;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Foo | Flag::Baz);\n\nset1 ^= Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set1, Flag::Bar);</code></pre></div></div></details></div></details>","BitXorAssign<R>","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Clone-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#245-247\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Debug-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Default-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new, empty FlagSet.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::&lt;Flag&gt;::default();\n<span class=\"macro\">assert!</span>(set.is_empty());\n<span class=\"macro\">assert!</span>(!set.is_full());\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Baz));</code></pre></div></div></details></div></details>","Default","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Deserialize%3C'de%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, F&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html\" title=\"trait serde_core::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;FlagSet&lt;F&gt;, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde_core::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserializer.html\" title=\"trait serde_core::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Extend%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = R&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Add values by iterating over some collection.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>flag_vec = <span class=\"macro\">vec!</span>[Flag::Bar, Flag::Baz];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>some_extended_flags = FlagSet::from(Flag::Foo);\nsome_extended_flags.extend(flag_vec);\n<span class=\"macro\">assert_eq!</span>(some_extended_flags, Flag::Foo | Flag::Bar | Flag::Baz);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#417\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#425\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<R>","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(bits: &lt;F as Flags&gt;::Type) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;FlagSet&lt;F&gt;, InvalidBits&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new set from bits; returning <code>Err(InvalidBits)</code> on invalid/unknown bits.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n        Qux = <span class=\"number\">0b1010</span>, <span class=\"comment\">// Implies Bar\n    </span>}\n}\n\n<span class=\"macro\">assert_eq!</span>(FlagSet::&lt;Flag&gt;::new(<span class=\"number\">0b00101</span>), <span class=\"prelude-val\">Ok</span>(Flag::Foo | Flag::Baz));\n<span class=\"macro\">assert_eq!</span>(FlagSet::&lt;Flag&gt;::new(<span class=\"number\">0b01101</span>), <span class=\"prelude-val\">Err</span>(flagset::InvalidBits)); <span class=\"comment\">// Invalid\n</span><span class=\"macro\">assert_eq!</span>(FlagSet::&lt;Flag&gt;::new(<span class=\"number\">0b10101</span>), <span class=\"prelude-val\">Err</span>(flagset::InvalidBits)); <span class=\"comment\">// Unknown</span></code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_truncated\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_truncated</a>(bits: &lt;F as Flags&gt;::Type) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new set from bits; truncating invalid/unknown bits.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n        Qux = <span class=\"number\">0b1010</span>, <span class=\"comment\">// Implies Bar\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::new_truncated(<span class=\"number\">0b11101</span>);  <span class=\"comment\">// Has invalid and unknown.\n</span><span class=\"macro\">assert_eq!</span>(set, Flag::Foo | Flag::Baz);\n<span class=\"macro\">assert_eq!</span>(set.bits(), <span class=\"number\">0b00101</span>);            <span class=\"comment\">// Has neither.</span></code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unchecked\" class=\"method\"><h4 class=\"code-header\">pub const unsafe fn <a class=\"fn\">new_unchecked</a>(bits: &lt;F as Flags&gt;::Type) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new set from bits; use of invalid/unknown bits is undefined.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n        Qux = <span class=\"number\">0b1010</span>, <span class=\"comment\">// Implies Bar\n    </span>}\n}\n\n<span class=\"comment\">// Unknown and invalid bits are retained. Behavior is undefined.\n</span><span class=\"kw\">const </span>set: FlagSet&lt;Flag&gt; = <span class=\"kw\">unsafe </span>{ FlagSet::&lt;Flag&gt;::new_unchecked(<span class=\"number\">0b11101</span>) };\n<span class=\"macro\">assert_eq!</span>(set.bits(), <span class=\"number\">0b11101</span>);</code></pre></div><h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This constructor doesn’t check that the bits are valid. If you pass\nundefined flags, undefined behavior may result.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.empty\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">empty</a>() -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new, empty FlagSet.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::&lt;Flag&gt;::empty();\n<span class=\"macro\">assert!</span>(set.is_empty());\n<span class=\"macro\">assert!</span>(!set.is_full());\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.full\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">full</a>() -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new FlagSet containing all possible flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = FlagSet::full();\n<span class=\"macro\">assert!</span>(!set.is_empty());\n<span class=\"macro\">assert!</span>(set.is_full());\n<span class=\"macro\">assert!</span>(set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bits\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">bits</a>(self) -&gt; &lt;F as Flags&gt;::Type</h4></section></summary><div class=\"docblock\"><p>Returns the raw bits of the set.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u16 {\n        Foo = <span class=\"number\">0b0001</span>,\n        Bar = <span class=\"number\">0b0010</span>,\n        Baz = <span class=\"number\">0b0100</span>,\n    }\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Baz;\n<span class=\"macro\">assert_eq!</span>(set.bits(), <span class=\"number\">0b0101u16</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the FlagSet contains no flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_empty());\n\nset &amp;= Flag::Baz;\n<span class=\"macro\">assert!</span>(set.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_full</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the FlagSet contains all possible flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_full());\n\nset |= Flag::Baz;\n<span class=\"macro\">assert!</span>(set.is_full());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_disjoint\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_disjoint</a>(self, rhs: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the two <code>FlagSet</code>s do not share any flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_disjoint(Flag::Foo));\n<span class=\"macro\">assert!</span>(!set.is_disjoint(Flag::Foo | Flag::Baz));\n<span class=\"macro\">assert!</span>(set.is_disjoint(Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">contains</a>(self, rhs: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if this FlagSet is a superset of the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Foo | Flag::Bar));\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo | Flag::Bar | Flag::Baz));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes all flags from the FlagSet.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"macro\">assert!</span>(!set.is_empty());\n\nset.clear();\n<span class=\"macro\">assert!</span>(set.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">drain</a>(&amp;mut self) -&gt; Iter&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Clears the current set and returns an iterator of all removed flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = set.drain();\n<span class=\"macro\">assert!</span>(set.is_empty());\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Foo));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Bar));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">retain</a>(&amp;mut self, func: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Retain only the flags flags specified by the predicate.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\nset0.retain(|f| f != Flag::Foo);\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Bar);</code></pre></div></div></details></div></details>",0,"hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCapability%3E-for-FlagSet%3CCapability%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/hopr_transport_session/lib.rs.html#38-62\">Source</a><a href=\"#impl-From%3CCapability%3E-for-FlagSet%3CCapability%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"hopr_transport_session/enum.Capability.html\" title=\"enum hopr_transport_session::Capability\">Capability</a>&gt; for FlagSet&lt;<a class=\"enum\" href=\"hopr_transport_session/enum.Capability.html\" title=\"enum hopr_transport_session::Capability\">Capability</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/hopr_transport_session/lib.rs.html#38-62\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"enum\" href=\"hopr_transport_session/enum.Capability.html\" title=\"enum hopr_transport_session::Capability\">Capability</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Capability>","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3COption%3CFlagSet%3CF%3E%3E%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-From%3COption%3CFlagSet%3CF%3E%3E%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;FlagSet&lt;F&gt;&gt;&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;FlagSet&lt;F&gt;&gt;) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Converts from <code>Option&lt;FlagSet&lt;F&gt;&gt;</code> to <code>FlagSet&lt;F&gt;</code>.</p>\n<p>Most notably, this allows for the use of <code>None</code> in many places to\nsubstitute for manually creating an empty <code>FlagSet&lt;F&gt;</code>. See below.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">fn </span>convert(v: <span class=\"kw\">impl </span>Into&lt;FlagSet&lt;Flag&gt;&gt;) -&gt; u8 {\n    v.into().bits()\n}\n\n<span class=\"macro\">assert_eq!</span>(convert(Flag::Foo | Flag::Bar), <span class=\"number\">0b011</span>);\n<span class=\"macro\">assert_eq!</span>(convert(Flag::Foo), <span class=\"number\">0b001</span>);\n<span class=\"macro\">assert_eq!</span>(convert(<span class=\"prelude-val\">None</span>), <span class=\"number\">0b000</span>);</code></pre></div></div></details></div></details>","From<Option<FlagSet<F>>>","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Hash-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-IntoIterator-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;FlagSet&lt;F&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class=\"docblock\"><p>Iterate over the flags in the set.</p>\n<p><strong>NOTE</strong>: The order in which the flags are iterated is undefined.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">0b001</span>,\n        Bar = <span class=\"number\">0b010</span>,\n        Baz = <span class=\"number\">0b100\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = set.into_iter();\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Foo));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(Flag::Bar));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = F</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = Iter&lt;F&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details></div></details>","IntoIterator","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Not-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method trait-impl\"><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the complement of the current set.</p>\n<p>In common parlance, this returns the set of all possible flags that are\nnot in the current set.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"attr\">#[derive(PartialOrd, Ord)]\n    </span><span class=\"kw\">enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">0</span>,\n        Bar = <span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">1</span>,\n        Baz = <span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">2\n    </span>}\n}\n\n<span class=\"kw\">let </span>set = !FlagSet::from(Flag::Foo);\n<span class=\"macro\">assert!</span>(!set.is_empty());\n<span class=\"macro\">assert!</span>(!set.is_full());\n<span class=\"macro\">assert!</span>(!set.contains(Flag::Foo));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Bar));\n<span class=\"macro\">assert!</span>(set.contains(Flag::Baz));</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details></div></details>","Not","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;R</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<R>","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Rem%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the symmetric difference between two sets.</p>\n<p>The symmetric difference between two sets is the set of all flags\nthat appear in one set or the other, but not both.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 % set1, Flag::Foo | Flag::Baz);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details></div></details>","Rem<R>","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-RemAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns the symmetric difference between two sets.</p>\n<p>The symmetric difference between two sets is the set of all flags\nthat appear in one set or the other, but not both.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\nset0 %= set1;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Foo | Flag::Baz);</code></pre></div></div></details></div></details>","RemAssign<R>","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Serialize-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html\" title=\"trait serde_core::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde_core::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde_core::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serializer.html\" title=\"trait serde_core::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde_core/1.0.227/serde_core/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Sub%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: R) -&gt; FlagSet&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates set difference (the current set without the specified flags).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span>set0 = Flag::Foo | Flag::Bar;\n<span class=\"kw\">let </span>set1 = Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0 - set1, Flag::Foo);</code></pre></div></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = FlagSet&lt;F&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Sub<R>","hopr_transport_session::Capabilities"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-SubAssign%3CR%3E-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;R&gt; for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: Flags,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;FlagSet&lt;F&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: R)</h4></section></summary><div class=\"docblock\"><p>Assigns set difference (the current set without the specified flags).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>flagset::{FlagSet, flags};\n\n<span class=\"macro\">flags!</span> {\n    <span class=\"kw\">pub enum </span>Flag: u8 {\n        Foo = <span class=\"number\">1</span>,\n        Bar = <span class=\"number\">2</span>,\n        Baz = <span class=\"number\">4\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>set0 = Flag::Foo | Flag::Bar;\nset0 -= Flag::Baz | Flag::Bar;\n<span class=\"macro\">assert_eq!</span>(set0, Flag::Foo);</code></pre></div></div></details></div></details>","SubAssign<R>","hopr_transport_session::Capabilities"],["<section id=\"impl-Copy-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Copy-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","hopr_transport_session::Capabilities"],["<section id=\"impl-Eq-for-FlagSet%3CF%3E\" class=\"impl\"><a href=\"#impl-Eq-for-FlagSet%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for FlagSet&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + Flags,\n    &lt;F as Flags&gt;::Type: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","hopr_transport_session::Capabilities"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[69547,68842,72019,72217,70314]}