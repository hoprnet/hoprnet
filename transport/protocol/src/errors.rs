use std::fmt::Formatter;
use hopr_internal_types::errors::CoreTypesError;
use hopr_primitive_types::errors::GeneralError;
use thiserror::Error;
use hopr_crypto_types::prelude::HalfKeyChallenge;
use hopr_internal_types::prelude::Ticket;
use hopr_primitive_types::prelude::{Address, HoprBalance};

/// Errors generated by the crate.
#[derive(Error, Debug)]
pub enum ProtocolError {
    #[error("timeout on protocol operation")]
    Timeout,

    #[error(transparent)]
    Other(Box<dyn std::error::Error + Send + Sync + 'static>),

    #[error("db error: {0}")]
    DatabaseError(#[from] hopr_db_node::errors::NodeDbError),

    #[error("General error {0}")]
    GeneralError(#[from] GeneralError),

    #[error("Core error {0}")]
    CoreError(#[from] CoreTypesError),

    #[error("Failed on a logical error: {0}")]
    Logic(String),
}

#[derive(Error, Debug)]
pub enum PacketProcessorError<D, R> {
    #[error("packet is in invalid state: {0}")]
    InvalidState(&'static str),

    #[error("failed to resolve chain key or packet key")]
    KeyNotFound,

    #[error("channel with counterparty {0} is below {1}")]
    OutOfFunds(Address, HoprBalance),

    #[error("failed to find channel {0} -> {1}")]
    ChannelNotFound(Address, Address),

    #[error("ticket validation error for {}: {}", .0.0, .0.1)]
    TicketValidationError(Box<(Ticket, String)>),
    
    #[error("could not find unacknowledged ticket for challenge {0}")]
    UnacknowledgedTicketNotFound(HalfKeyChallenge),
    
    #[error(transparent)]
    PacketError(#[from] hopr_crypto_packet::errors::PacketError),

    #[error(transparent)]
    GeneralError(#[from] GeneralError),
    
    #[error(transparent)]
    ResolverError(#[from] R),

    #[error(transparent)]
    DatabaseError(#[from] D)
}

/// Error that can occur when processing an incoming packet.
#[derive(Debug, strum::EnumIs, strum::EnumTryAs)]
pub enum IncomingPacketError<E> {
    /// Packet is not decodable.
    ///
    /// Such errors are fatal and therefore the packet cannot be acknowledged.
    Undecodable(E),
    /// Packet is decodable but cannot be processed due to other reasons.
    ///
    /// Such errors are protocol-related and packets must be acknowledged.
    ProcessingError(E),
}

impl<E: std::fmt::Display> std::fmt::Display for IncomingPacketError<E> {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self {
            IncomingPacketError::Undecodable(e) => write!(f, "undecodable packet: {e}"),
            IncomingPacketError::ProcessingError(e) => write!(f, "packet processing error: {e}"),
        }
    }
}

impl<E: std::error::Error> std::error::Error for IncomingPacketError<E> {}

/// Result used by the crate, based on the [ProtocolError] error type.
pub type Result<T> = core::result::Result<T, ProtocolError>;
