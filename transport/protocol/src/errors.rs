use hopr_internal_types::errors::CoreTypesError;
use hopr_primitive_types::errors::GeneralError;
use thiserror::Error;
use hopr_primitive_types::prelude::{Address, HoprBalance};

/// Errors generated by the crate.
#[derive(Error, Debug)]
pub enum ProtocolError {
    #[error("timeout on protocol operation")]
    Timeout,

    #[error(transparent)]
    Other(Box<dyn std::error::Error + Send + Sync + 'static>),

    #[error("db error: {0}")]
    DatabaseError(#[from] hopr_db_node::errors::NodeDbError),

    #[error("General error {0}")]
    GeneralError(#[from] GeneralError),

    #[error("Core error {0}")]
    CoreError(#[from] CoreTypesError),

    #[error("Failed on a logical error: {0}")]
    Logic(String),
}

#[derive(Error, Debug)]
pub enum PacketProcessorError<D, R> {
    #[error("packet is in invalid state")]
    InvalidState,

    #[error("failed to resolve chain key or packet key")]
    KeyNotFound,

    #[error("channel with counterparty {0} is below {1}")]
    OutOfFunds(Address, HoprBalance),

    #[error("failed to find channel {0} -> {1}")]
    ChannelNotFound(Address, Address),

    #[error(transparent)]
    PacketError(#[from] hopr_crypto_packet::errors::PacketError),

    #[error(transparent)]
    GeneralError(#[from] GeneralError),

    #[error(transparent)]
    ResolverError(#[from] R),

    #[error(transparent)]
    DatabaseError(#[from] D)
}

/// Result used by the crate, based on the [ProtocolError] error type.
pub type Result<T> = core::result::Result<T, ProtocolError>;
