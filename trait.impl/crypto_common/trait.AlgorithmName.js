(function() {
    var implementors = Object.fromEntries([["hopr_crypto_types",[["impl&lt;H: <a class=\"trait\" href=\"hopr_crypto_types/crypto_traits/trait.KeySizeUser.html\" title=\"trait hopr_crypto_types::crypto_traits::KeySizeUser\">KeySizeUser</a> + <a class=\"trait\" href=\"hopr_crypto_types/crypto_traits/trait.OutputSizeUser.html\" title=\"trait hopr_crypto_types::crypto_traits::OutputSizeUser\">OutputSizeUser</a> + AlgorithmName, S: AlgorithmName + <a class=\"trait\" href=\"hopr_crypto_types/crypto_traits/trait.KeySizeUser.html\" title=\"trait hopr_crypto_types::crypto_traits::KeySizeUser\">KeySizeUser</a> + <a class=\"trait\" href=\"hopr_crypto_types/crypto_traits/trait.IvSizeUser.html\" title=\"trait hopr_crypto_types::crypto_traits::IvSizeUser\">IvSizeUser</a>, B&gt; AlgorithmName for <a class=\"struct\" href=\"hopr_crypto_types/lioness/struct.Lioness.html\" title=\"struct hopr_crypto_types::lioness::Lioness\">Lioness</a>&lt;H, S, B&gt;<div class=\"where\">where\n    H::<a class=\"associatedtype\" href=\"hopr_crypto_types/crypto_traits/trait.OutputSizeUser.html#associatedtype.OutputSize\" title=\"type hopr_crypto_types::crypto_traits::OutputSizeUser::OutputSize\">OutputSize</a>: <a class=\"trait\" href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.IsEqual.html\" title=\"trait typenum::type_operators::IsEqual\">IsEqual</a>&lt;&lt;S as <a class=\"trait\" href=\"hopr_crypto_types/crypto_traits/trait.KeySizeUser.html\" title=\"trait hopr_crypto_types::crypto_traits::KeySizeUser\">KeySizeUser</a>&gt;::<a class=\"associatedtype\" href=\"hopr_crypto_types/crypto_traits/trait.KeySizeUser.html#associatedtype.KeySize\" title=\"type hopr_crypto_types::crypto_traits::KeySizeUser::KeySize\">KeySize</a>, Output = <a class=\"struct\" href=\"https://docs.rs/typenum/1.18.0/typenum/bit/struct.B1.html\" title=\"struct typenum::bit::B1\">B1</a>&gt;,\n    H::<a class=\"associatedtype\" href=\"hopr_crypto_types/crypto_traits/trait.KeySizeUser.html#associatedtype.KeySize\" title=\"type hopr_crypto_types::crypto_traits::KeySizeUser::KeySize\">KeySize</a>: <a class=\"trait\" href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.IsEqual.html\" title=\"trait typenum::type_operators::IsEqual\">IsEqual</a>&lt;S::<a class=\"associatedtype\" href=\"hopr_crypto_types/crypto_traits/trait.KeySizeUser.html#associatedtype.KeySize\" title=\"type hopr_crypto_types::crypto_traits::KeySizeUser::KeySize\">KeySize</a>, Output = <a class=\"struct\" href=\"https://docs.rs/typenum/1.18.0/typenum/bit/struct.B1.html\" title=\"struct typenum::bit::B1\">B1</a>&gt;,\n    B: <a class=\"trait\" href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.IsGreater.html\" title=\"trait typenum::type_operators::IsGreater\">IsGreater</a>&lt;&lt;S as <a class=\"trait\" href=\"hopr_crypto_types/crypto_traits/trait.KeySizeUser.html\" title=\"trait hopr_crypto_types::crypto_traits::KeySizeUser\">KeySizeUser</a>&gt;::<a class=\"associatedtype\" href=\"hopr_crypto_types/crypto_traits/trait.KeySizeUser.html#associatedtype.KeySize\" title=\"type hopr_crypto_types::crypto_traits::KeySizeUser::KeySize\">KeySize</a>, Output = <a class=\"struct\" href=\"https://docs.rs/typenum/1.18.0/typenum/bit/struct.B1.html\" title=\"struct typenum::bit::B1\">B1</a>&gt; + ArrayLength&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;,</div>"]]]]);
    if (window.register_implementors) {
        window.register_implementors(implementors);
    } else {
        window.pending_implementors = implementors;
    }
})()
//{"start":57,"fragment_lengths":[3365]}