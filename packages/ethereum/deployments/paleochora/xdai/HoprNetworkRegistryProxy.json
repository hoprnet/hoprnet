{
  "address": "0x15e068Ef1f76319b1848b1fcB3e49D68724AEE07",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAllowed",
          "type": "bool"
        }
      ],
      "name": "AllowAllAccountsEligible",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "isAllAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isRequirementFulfilled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ownerAddAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "ownerBatchAddAccounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "ownerBatchRemoveAccounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ownerRemoveAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_updatedAllow",
          "type": "bool"
        }
      ],
      "name": "updateAllowAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3516c4aea8c9c227d0f7c1c11f2e59b15fa8f66921e89be682e2630d0d84cb79",
  "receipt": {
    "to": null,
    "from": "0xA18732DC751BE0dB04157eb92C92BA9d0fC09FC5",
    "contractAddress": "0x15e068Ef1f76319b1848b1fcB3e49D68724AEE07",
    "transactionIndex": 0,
    "gasUsed": "470275",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000400000000000000000000000000000000000000000000000000000020000000000000000000000800000000000200000000000000001004000000000010000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000002000000000000000000000",
    "blockHash": "0xa536c97efd80bb692fe47075bb865cdc07fb37f4693cd7b929ae6f64803225ec",
    "transactionHash": "0x3516c4aea8c9c227d0f7c1c11f2e59b15fa8f66921e89be682e2630d0d84cb79",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 23661563,
        "transactionHash": "0x3516c4aea8c9c227d0f7c1c11f2e59b15fa8f66921e89be682e2630d0d84cb79",
        "address": "0x15e068Ef1f76319b1848b1fcB3e49D68724AEE07",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a18732dc751be0db04157eb92c92ba9d0fc09fc5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa536c97efd80bb692fe47075bb865cdc07fb37f4693cd7b929ae6f64803225ec"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 23661563,
        "transactionHash": "0x3516c4aea8c9c227d0f7c1c11f2e59b15fa8f66921e89be682e2630d0d84cb79",
        "address": "0x15e068Ef1f76319b1848b1fcB3e49D68724AEE07",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000a18732dc751be0db04157eb92c92ba9d0fc09fc5",
          "0x000000000000000000000000a18732dc751be0db04157eb92c92ba9d0fc09fc5"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa536c97efd80bb692fe47075bb865cdc07fb37f4693cd7b929ae6f64803225ec"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 23661563,
        "transactionHash": "0x3516c4aea8c9c227d0f7c1c11f2e59b15fa8f66921e89be682e2630d0d84cb79",
        "address": "0x15e068Ef1f76319b1848b1fcB3e49D68724AEE07",
        "topics": [
          "0xafab23a4bc8c49250ba37eeb0625b0a9b271f55d1501838d24f54508c3b17342"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 2,
        "blockHash": "0xa536c97efd80bb692fe47075bb865cdc07fb37f4693cd7b929ae6f64803225ec"
      }
    ],
    "blockNumber": 23661563,
    "cumulativeGasUsed": "470275",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA18732DC751BE0dB04157eb92C92BA9d0fC09FC5"
  ],
  "numDeployments": 2,
  "solcInputHash": "38927a2e82d41581ccd1dae52ae0229c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"AllowAllAccountsEligible\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"isAllAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRequirementFulfilled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ownerAddAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"ownerBatchAddAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"ownerBatchRemoveAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ownerRemoveAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_updatedAllow\",\"type\":\"bool\"}],\"name\":\"updateAllowAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Dummy roxy which return true if an address is registered by the owner, when isAllAllowed is false. It allows all the accounts when isAllAllowed is set to true. By default isAllAllowed is false.\",\"kind\":\"dev\",\"methods\":{\"isRequirementFulfilled(address)\":{\"details\":\"Checks if the provided account is registered by the owner\",\"params\":{\"account\":\"address of the account that runs a hopr node\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerAddAccount(address)\":{\"details\":\"Owner add account onto the registry list\",\"params\":{\"account\":\"address to be added onto the registry\"}},\"ownerBatchAddAccounts(address[])\":{\"details\":\"Owner add accounts onto the registry list in batch.\",\"params\":{\"accounts\":\"addresses to be removed from the registry\"}},\"ownerBatchRemoveAccounts(address[])\":{\"details\":\"Owner removes from list of eligible NFTs in batch.\",\"params\":{\"accounts\":\"addresses to be removed from the registry\"}},\"ownerRemoveAccount(address)\":{\"details\":\"Owner move account from the registry list\",\"params\":{\"account\":\"address to be removed from the registry\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAllowAll(bool)\":{\"details\":\"Update the global toggle that allows all the accounts to be eligible\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/proxy/HoprDummyProxyForNetworkRegistry.sol\":\"HoprDummyProxyForNetworkRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IHoprNetworkRegistryRequirement.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IHoprNetworkRegistryRequirement {\\n  function isRequirementFulfilled(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x28d5713841152502b5f324014b2e52ad51274792abed1786120bf18152037c2d\",\"license\":\"GPL-3.0\"},\"contracts/proxy/HoprDummyProxyForNetworkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '../IHoprNetworkRegistryRequirement.sol';\\n\\n/**\\n * @dev Dummy roxy which return true if an address is registered by the owner, when isAllAllowed is false.\\n * It allows all the accounts when isAllAllowed is set to true. By default isAllAllowed is false.\\n */\\ncontract HoprDummyProxyForNetworkRegistry is IHoprNetworkRegistryRequirement, Ownable {\\n  mapping(address => bool) registeredAccounts;\\n  event AccountRegistered(address indexed account);\\n  event AccountDeregistered(address indexed account);\\n  bool public isAllAllowed;\\n\\n  event AllowAllAccountsEligible(bool isAllowed);\\n\\n  constructor(address newOwner) {\\n    _transferOwnership(newOwner);\\n    isAllAllowed = false;\\n    emit AllowAllAccountsEligible(false);\\n  }\\n\\n  /**\\n   * @dev Checks if the provided account is registered by the owner\\n   * @param account address of the account that runs a hopr node\\n   */\\n  function isRequirementFulfilled(address account) external view returns (bool) {\\n    if (isAllAllowed) {\\n      return true;\\n    } else {\\n      return registeredAccounts[account];\\n    }\\n  }\\n\\n  /**\\n   * @dev Update the global toggle that allows all the accounts to be eligible\\n   */\\n  function updateAllowAll(bool _updatedAllow) external onlyOwner {\\n    if (isAllAllowed == _updatedAllow) {\\n      return;\\n    }\\n    isAllAllowed = _updatedAllow;\\n    emit AllowAllAccountsEligible(_updatedAllow);\\n  }\\n\\n  /**\\n   * @dev Owner add accounts onto the registry list in batch.\\n   * @param accounts addresses to be removed from the registry\\n   */\\n  function ownerBatchAddAccounts(address[] calldata accounts) external onlyOwner {\\n    for (uint256 index = 0; index < accounts.length; index++) {\\n      _addAccount(accounts[index]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Owner removes from list of eligible NFTs in batch.\\n   * @param accounts addresses to be removed from the registry\\n   */\\n  function ownerBatchRemoveAccounts(address[] calldata accounts) external onlyOwner {\\n    for (uint256 index = 0; index < accounts.length; index++) {\\n      _removeAccount(accounts[index]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Owner add account onto the registry list\\n   * @param account address to be added onto the registry\\n   */\\n  function ownerAddAccount(address account) external onlyOwner {\\n    _addAccount(account);\\n  }\\n\\n  /**\\n   * @dev Owner move account from the registry list\\n   * @param account address to be removed from the registry\\n   */\\n  function ownerRemoveAccount(address account) external onlyOwner {\\n    _removeAccount(account);\\n  }\\n\\n  /**\\n   * @dev add account onto the registry list\\n   * @param account address to be added into the registry\\n   */\\n  function _addAccount(address account) private {\\n    if (!registeredAccounts[account]) {\\n      registeredAccounts[account] = true;\\n      emit AccountRegistered(account);\\n    }\\n  }\\n\\n  /**\\n   * @dev remove account from the registry list\\n   * @param account address to be removed from the registry\\n   */\\n  function _removeAccount(address account) private {\\n    if (registeredAccounts[account]) {\\n      delete registeredAccounts[account];\\n      emit AccountDeregistered(account);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xdc64dba7c8e07e0acc3bcaf95e6af4b6db4d0cfeaf7ddd3d9b1e4be6a854e881\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161080638038061080683398101604081905261002f916100d5565b61003833610085565b61004181610085565b6002805460ff19169055604051600081527fafab23a4bc8c49250ba37eeb0625b0a9b271f55d1501838d24f54508c3b173429060200160405180910390a150610105565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100e757600080fd5b81516001600160a01b03811681146100fe57600080fd5b9392505050565b6106f2806101146000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806386ca5f311161006657806386ca5f31146100f95780638da5cb5b14610121578063a71b1b741461013c578063f2fde38b1461014f578063f67f5e6f1461016257600080fd5b8063089ffa47146100a35780634051f257146100b8578063486354e2146100cb5780635c5471e7146100de578063715018a6146100f1575b600080fd5b6100b66100b1366004610581565b61016f565b005b6100b66100c63660046105aa565b6101fe565b6100b66100d93660046105d3565b610231565b6100b66100ec3660046105d3565b6102ac565b6100b6610322565b61010c6101073660046105aa565b610358565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b039091168152602001610118565b6100b661014a3660046105aa565b61038d565b6100b661015d3660046105aa565b6103c0565b60025461010c9060ff1681565b6000546001600160a01b031633146101a25760405162461bcd60e51b815260040161019990610648565b60405180910390fd5b60025460ff16151581151514156101b65750565b6002805460ff19168215159081179091556040519081527fafab23a4bc8c49250ba37eeb0625b0a9b271f55d1501838d24f54508c3b173429060200160405180910390a15b50565b6000546001600160a01b031633146102285760405162461bcd60e51b815260040161019990610648565b6101fb81610458565b6000546001600160a01b0316331461025b5760405162461bcd60e51b815260040161019990610648565b60005b818110156102a75761029583838381811061027b5761027b61067d565b905060200201602081019061029091906105aa565b6104c2565b8061029f81610693565b91505061025e565b505050565b6000546001600160a01b031633146102d65760405162461bcd60e51b815260040161019990610648565b60005b818110156102a7576103108383838181106102f6576102f661067d565b905060200201602081019061030b91906105aa565b610458565b8061031a81610693565b9150506102d9565b6000546001600160a01b0316331461034c5760405162461bcd60e51b815260040161019990610648565b6103566000610531565b565b60025460009060ff161561036e57506001919050565b506001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b031633146103b75760405162461bcd60e51b815260040161019990610648565b6101fb816104c2565b6000546001600160a01b031633146103ea5760405162461bcd60e51b815260040161019990610648565b6001600160a01b03811661044f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610199565b6101fb81610531565b6001600160a01b03811660009081526001602052604090205460ff16156101fb576001600160a01b038116600081815260016020526040808220805460ff19169055517f0e63d629afe34b3ca5107c10f90abff5091b31551b371758bd50af76834dc0749190a250565b6001600160a01b03811660009081526001602052604090205460ff166101fb576001600160a01b0381166000818152600160208190526040808320805460ff1916909217909155517fcd822dc9688e20acea68724a2fbcfe4f3e526d20ecaa37b18fe3047ab377d6a59190a250565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561059357600080fd5b813580151581146105a357600080fd5b9392505050565b6000602082840312156105bc57600080fd5b81356001600160a01b03811681146105a357600080fd5b600080602083850312156105e657600080fd5b823567ffffffffffffffff808211156105fe57600080fd5b818501915085601f83011261061257600080fd5b81358181111561062157600080fd5b8660208260051b850101111561063657600080fd5b60209290920196919550909350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156106b557634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212203f78feb260bcb080ee272705e0cfced71efe1340c4da151010f7fe3845c9fcbc64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806386ca5f311161006657806386ca5f31146100f95780638da5cb5b14610121578063a71b1b741461013c578063f2fde38b1461014f578063f67f5e6f1461016257600080fd5b8063089ffa47146100a35780634051f257146100b8578063486354e2146100cb5780635c5471e7146100de578063715018a6146100f1575b600080fd5b6100b66100b1366004610581565b61016f565b005b6100b66100c63660046105aa565b6101fe565b6100b66100d93660046105d3565b610231565b6100b66100ec3660046105d3565b6102ac565b6100b6610322565b61010c6101073660046105aa565b610358565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b039091168152602001610118565b6100b661014a3660046105aa565b61038d565b6100b661015d3660046105aa565b6103c0565b60025461010c9060ff1681565b6000546001600160a01b031633146101a25760405162461bcd60e51b815260040161019990610648565b60405180910390fd5b60025460ff16151581151514156101b65750565b6002805460ff19168215159081179091556040519081527fafab23a4bc8c49250ba37eeb0625b0a9b271f55d1501838d24f54508c3b173429060200160405180910390a15b50565b6000546001600160a01b031633146102285760405162461bcd60e51b815260040161019990610648565b6101fb81610458565b6000546001600160a01b0316331461025b5760405162461bcd60e51b815260040161019990610648565b60005b818110156102a75761029583838381811061027b5761027b61067d565b905060200201602081019061029091906105aa565b6104c2565b8061029f81610693565b91505061025e565b505050565b6000546001600160a01b031633146102d65760405162461bcd60e51b815260040161019990610648565b60005b818110156102a7576103108383838181106102f6576102f661067d565b905060200201602081019061030b91906105aa565b610458565b8061031a81610693565b9150506102d9565b6000546001600160a01b0316331461034c5760405162461bcd60e51b815260040161019990610648565b6103566000610531565b565b60025460009060ff161561036e57506001919050565b506001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b031633146103b75760405162461bcd60e51b815260040161019990610648565b6101fb816104c2565b6000546001600160a01b031633146103ea5760405162461bcd60e51b815260040161019990610648565b6001600160a01b03811661044f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610199565b6101fb81610531565b6001600160a01b03811660009081526001602052604090205460ff16156101fb576001600160a01b038116600081815260016020526040808220805460ff19169055517f0e63d629afe34b3ca5107c10f90abff5091b31551b371758bd50af76834dc0749190a250565b6001600160a01b03811660009081526001602052604090205460ff166101fb576001600160a01b0381166000818152600160208190526040808320805460ff1916909217909155517fcd822dc9688e20acea68724a2fbcfe4f3e526d20ecaa37b18fe3047ab377d6a59190a250565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561059357600080fd5b813580151581146105a357600080fd5b9392505050565b6000602082840312156105bc57600080fd5b81356001600160a01b03811681146105a357600080fd5b600080602083850312156105e657600080fd5b823567ffffffffffffffff808211156105fe57600080fd5b818501915085601f83011261061257600080fd5b81358181111561062157600080fd5b8660208260051b850101111561063657600080fd5b60209290920196919550909350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156106b557634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212203f78feb260bcb080ee272705e0cfced71efe1340c4da151010f7fe3845c9fcbc64736f6c63430008090033",
  "devdoc": {
    "details": "Dummy roxy which return true if an address is registered by the owner, when isAllAllowed is false. It allows all the accounts when isAllAllowed is set to true. By default isAllAllowed is false.",
    "kind": "dev",
    "methods": {
      "isRequirementFulfilled(address)": {
        "details": "Checks if the provided account is registered by the owner",
        "params": {
          "account": "address of the account that runs a hopr node"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerAddAccount(address)": {
        "details": "Owner add account onto the registry list",
        "params": {
          "account": "address to be added onto the registry"
        }
      },
      "ownerBatchAddAccounts(address[])": {
        "details": "Owner add accounts onto the registry list in batch.",
        "params": {
          "accounts": "addresses to be removed from the registry"
        }
      },
      "ownerBatchRemoveAccounts(address[])": {
        "details": "Owner removes from list of eligible NFTs in batch.",
        "params": {
          "accounts": "addresses to be removed from the registry"
        }
      },
      "ownerRemoveAccount(address)": {
        "details": "Owner move account from the registry list",
        "params": {
          "account": "address to be removed from the registry"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAllowAll(bool)": {
        "details": "Update the global toggle that allows all the accounts to be eligible"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 539,
        "contract": "contracts/proxy/HoprDummyProxyForNetworkRegistry.sol:HoprDummyProxyForNetworkRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9127,
        "contract": "contracts/proxy/HoprDummyProxyForNetworkRegistry.sol:HoprDummyProxyForNetworkRegistry",
        "label": "registeredAccounts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9137,
        "contract": "contracts/proxy/HoprDummyProxyForNetworkRegistry.sol:HoprDummyProxyForNetworkRegistry",
        "label": "isAllAllowed",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}