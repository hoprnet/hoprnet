{
  "address": "0x6aDc4991Ac9622Ca07d89A6D38b1Cd062309E8F0",
  "transactionHash": "0x6cc86ead0fc6fc10cfcf1edff9afeffea7c111f033fff2efeffeb5c5c4e2d347",
  "blockNumber": 6877085,
  "metadata": {
    "solcVersion": "0.8.9",
    "input": {
      "language": "Solidity",
      "sources": {
        "contracts/HoprChannels.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/utils/Multicall.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC1820Implementer.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract HoprChannels is IERC777Recipient, ERC1820Implementer, Multicall {\n    using SafeERC20 for IERC20;\n\n    // required by ERC1820 spec\n    IERC1820Registry internal constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n    // required by ERC777 spec\n    bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\n    // used by {tokensReceived} to distinguish which function to call after tokens are sent\n    uint256 public immutable FUND_CHANNEL_MULTI_SIZE = abi.encode(address(0), address(0), uint256(0), uint256(0)).length;\n\n    /**\n     * @dev Possible channel states.\n     *\n     *         finalizeChannelClosure()    +----------------------+                                    \n     *              (After delay)          |                      | initiateChannelClosure()                 \n     *                    +----------------+   Pending To Close   |<-----------------+                 \n     *                    |                |                      |                  |                 \n     *                    |                +----------------------+                  |                 \n     *                    |                              ^                           |                 \n     *                    |                              |                           |                 \n     *                    |                              |  initiateChannelClosure() |                 \n     *                    |                              |  (If not committed)       |                 \n     *                    v                              |                           |                 \n     *             +------------+                        +-+                    +----+-----+           \n     *             |            |                          |                    |          |           \n     *             |   Closed   +--------------------------+--------------------+   Open   |           \n     *             |            |    tokensReceived()      |                    |          |           \n     *             +------+-----+ (If already committed) +-+                    +----------+           \n     *                    |                              |                           ^                 \n     *                    |                              |                           |                 \n     *                    |                              |                           |                 \n     *   tokensReceived() |                              |                           | bumpChannel() \n     *                    |              +---------------+------------+              |                 \n     *                    |              |                            |              |                 \n     *                    +--------------+   Waiting For Commitment   +--------------+                 \n     *                                   |                            |                                \n     *                                   +----------------------------+  \n     */\n    enum ChannelStatus { CLOSED, WAITING_FOR_COMMITMENT, OPEN, PENDING_TO_CLOSE }\n\n    /**\n     * @dev A channel struct, used to represent a channel's state\n     */\n    struct Channel {\n        uint256 balance;\n        bytes32 commitment;\n        uint256 ticketEpoch;\n        uint256 ticketIndex;\n        ChannelStatus status;\n        uint256 channelEpoch;\n        // the time when the channel can be closed - NB: overloads at year >2105\n        uint32 closureTime;\n    }\n\n    /**\n     * @dev Stored publicKeys keyed by their address\n     */\n    mapping(address => bytes) public publicKeys;\n\n    /**\n     * @dev Stored channels keyed by their channel ids\n     */\n    mapping(bytes32 => Channel) public channels;\n\n    /**\n     * @dev HoprToken, the token that will be used to settle payments\n     */\n    IERC20 public immutable token;\n\n    /**\n     * @dev Seconds it takes until we can finalize channel closure once,\n     * channel closure has been initialized.\n     */\n    uint32 public immutable secsClosure;\n\n    /**\n     * Emitted on every channel state change.\n     */\n    event ChannelUpdated(\n        address indexed source,\n        address indexed destination,\n        Channel newState\n    );\n\n    /**\n     * Emitted once an account announces.\n     */\n    event Announcement(\n        address indexed account,\n        bytes publicKey,\n        bytes multiaddr\n    );\n\n    /**\n     * Emitted once a channel if funded.\n     */\n    event ChannelFunded(\n        address indexed funder,\n        address indexed source,\n        address indexed destination,\n        uint256 amount\n    );\n\n    /**\n     * Emitted once a channel is opened.\n     */\n    event ChannelOpened(\n        address indexed source,\n        address indexed destination\n    );\n\n    /**\n     * Emitted once bumpChannel is called.\n     */\n    event ChannelBumped(\n        address indexed source,\n        address indexed destination,\n        bytes32 newCommitment,\n        uint256 ticketEpoch,\n        uint256 channelBalance\n    );\n\n    /**\n     * Emitted once a channel closure is initialized.\n     */\n    event ChannelClosureInitiated(\n        address indexed source,\n        address indexed destination,\n        uint32 closureInitiationTime\n    );\n\n    /**\n     * Emitted once a channel closure is finalized.\n     */\n    event ChannelClosureFinalized(\n        address indexed source,\n        address indexed destination,\n        uint32 closureFinalizationTime,\n        uint256 channelBalance\n    );\n\n    /**\n     * Emitted once a ticket is redeemed.\n     */\n    event TicketRedeemed(\n        address indexed source,\n        address indexed destination,\n        bytes32 nextCommitment,\n        uint256 ticketEpoch,\n        uint256 ticketIndex,\n        bytes32 proofOfRelaySecret,\n        uint256 amount,\n        uint256 winProb,\n        bytes signature\n    );\n\n    /**\n     * @param _token HoprToken address\n     * @param _secsClosure seconds until a channel can be closed\n     */\n    constructor(address _token, uint32 _secsClosure) {\n        require(_token != address(0), \"token must not be empty\");\n\n        token = IERC20(_token);\n        secsClosure = _secsClosure;\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n    }\n\n    /**\n    * Assert that source and destination are good addresses, and distinct.\n    */\n    modifier validateSourceAndDest(address source, address destination) {\n      require(source != destination, \"source and destination must not be the same\");\n      require(source != address(0), \"source must not be empty\");\n      require(destination != address(0), \"destination must not be empty\");\n      _;\n    }\n\n    /**\n     * @dev Announces msg.sender's publicKey and multiaddress.\n     * Multiaddress confirmation should be done off-chain,\n     * peer id in the multiaddr is discarded in favour of the pubkey derived one.\n     * @param publicKey the msg.sender's public key\n     * @param multiaddr the multiaddress\n     */\n    function announce(bytes calldata publicKey, bytes calldata multiaddr) external {\n        require(address(uint160(uint256(keccak256(publicKey)))) == msg.sender, \"publicKey's address does not match senders\");\n        publicKeys[msg.sender] = publicKey;\n        emit Announcement(msg.sender, publicKey, multiaddr);\n    }\n\n    /**\n     * @dev Funds channels, in both directions, between 2 parties.\n     * then emits {ChannelUpdated} event, for each channel.\n     * @param account1 the address of account1\n     * @param account2 the address of account2\n     * @param amount1 amount to fund account1\n     * @param amount2 amount to fund account2\n     */\n    function fundChannelMulti(\n        address account1,\n        address account2,\n        uint256 amount1,\n        uint256 amount2\n    ) external {\n        require(amount1 + amount2 > 0, \"amount must be greater than 0\");\n\n        // fund channel in direction of: account1 -> account2\n        if (amount1 > 0){\n          _fundChannel(msg.sender, account1, account2, amount1);\n        }\n        // fund channel in direction of: account2 -> account1\n        if (amount2 > 0){\n          _fundChannel(msg.sender, account2, account1, amount2);\n        }\n\n        // pull tokens from funder\n        token.transferFrom(msg.sender, address(this), amount1 + amount2);\n    }\n\n    /**\n    * @dev redeem a ticket.\n    * If the sender has a channel to the source, the amount will be transferred\n    * to that channel, otherwise it will be sent to their address directly.\n    * @param source the source of the ticket\n    * @param nextCommitment the commitment that hashes to the redeemers previous commitment\n    * @param proofOfRelaySecret the proof of relay secret\n    * @param winProb the winning probability of the ticket\n    * @param amount the amount in the ticket\n    * @param signature signature\n    */\n    function redeemTicket(\n        address source,\n        bytes32 nextCommitment,\n        uint256 ticketEpoch,\n        uint256 ticketIndex,\n        bytes32 proofOfRelaySecret,\n        uint256 amount,\n        uint256 winProb,\n        bytes memory signature\n    ) external validateSourceAndDest(source, msg.sender) {\n        require(nextCommitment != bytes32(0), \"nextCommitment must not be empty\");\n        require(amount != uint256(0), \"amount must not be empty\");\n        (, Channel storage spendingChannel) = _getChannel(\n            source,\n            msg.sender\n        );\n        require(spendingChannel.status == ChannelStatus.OPEN || spendingChannel.status == ChannelStatus.PENDING_TO_CLOSE, \"spending channel must be open or pending to close\");\n        require(spendingChannel.commitment == keccak256(abi.encodePacked(nextCommitment)), \"commitment must be hash of next commitment\");\n        require(spendingChannel.ticketEpoch == ticketEpoch, \"ticket epoch must match\");\n        require(spendingChannel.ticketIndex < ticketIndex, \"redemptions must be in order\");\n\n        bytes32 ticketHash = ECDSA.toEthSignedMessageHash(\n            keccak256(\n              _getEncodedTicket(\n                  msg.sender,\n                  spendingChannel.ticketEpoch,\n                  proofOfRelaySecret,\n                  spendingChannel.channelEpoch,\n                  amount,\n                  ticketIndex,\n                  winProb\n              )\n            )\n        );\n\n        require(ECDSA.recover(ticketHash, signature) == source, \"signer must match the counterparty\");\n        require(\n            _getTicketLuck(\n                ticketHash,\n                nextCommitment,\n                proofOfRelaySecret\n            ) <= winProb,\n            \"ticket must be a win\"\n        );\n\n          spendingChannel.ticketIndex = ticketIndex;\n          spendingChannel.commitment = nextCommitment;\n          spendingChannel.balance = spendingChannel.balance - amount;\n          (, Channel storage earningChannel) = _getChannel(\n              msg.sender,\n              source\n          );\n\n          emit ChannelUpdated(source, msg.sender, spendingChannel);\n          emit TicketRedeemed(source, msg.sender, nextCommitment, ticketEpoch, ticketIndex, proofOfRelaySecret, amount, winProb, signature);\n\n          if (earningChannel.status == ChannelStatus.OPEN) {\n            earningChannel.balance = earningChannel.balance + amount;\n            emit ChannelUpdated(msg.sender, source, earningChannel);\n          } else {\n            token.transfer(msg.sender, amount);\n          }\n    }\n\n\n    /**\n     * @dev Initialize channel closure.\n     * When a channel owner (the 'source' of the channel) wants to 'cash out',\n     * they must notify the counterparty (the 'destination') that they will do\n     * so, and provide enough time for them to redeem any outstanding tickets\n     * before-hand. This notice period is called the 'cool-off' period.\n     * The channel 'destination' should be monitoring blockchain events, thus\n     * they should be aware that the closure has been triggered, as this\n     * method triggers a {ChannelUpdated} and an {ChannelClosureInitiated} event.\n     * After the cool-off period expires, the 'source' can call\n     * 'finalizeChannelClosure' which withdraws the stake.\n     * @param destination the address of the destination\n     */\n    function initiateChannelClosure(\n        address destination\n    ) external validateSourceAndDest(msg.sender, destination) {\n        (, Channel storage channel) = _getChannel(msg.sender, destination);\n        require(channel.status == ChannelStatus.OPEN || channel.status == ChannelStatus.WAITING_FOR_COMMITMENT, \"channel must be open or waiting for commitment\");\n        channel.closureTime = _currentBlockTimestamp() + secsClosure;\n        channel.status = ChannelStatus.PENDING_TO_CLOSE;\n        emit ChannelUpdated(msg.sender, destination, channel);\n        emit ChannelClosureInitiated(msg.sender, destination, _currentBlockTimestamp());\n    }\n\n    /**\n     * @dev Finalize the channel closure, if cool-off period\n     * is over it will close the channel and transfer funds\n     * to the sender. Then emits {ChannelUpdated} and the\n     * {ChannelClosureFinalized} event.\n     * @param destination the address of the counterparty\n     */\n    function finalizeChannelClosure(\n        address destination\n    ) external validateSourceAndDest(msg.sender, destination) {\n        (, Channel storage channel) = _getChannel(msg.sender, destination);\n        require(channel.status == ChannelStatus.PENDING_TO_CLOSE, \"channel must be pending to close\");\n        require(channel.closureTime < _currentBlockTimestamp(), \"closureTime must be before now\");\n        uint256 amountToTransfer = channel.balance;\n        emit ChannelClosureFinalized(msg.sender, destination, channel.closureTime, channel.balance);\n        delete channel.balance;\n        delete channel.closureTime;\n        channel.status = ChannelStatus.CLOSED;\n        emit ChannelUpdated(msg.sender, destination, channel);\n\n        if (amountToTransfer > 0) {\n          token.transfer(msg.sender, amountToTransfer);\n        }\n\n    }\n\n    /**\n    * @dev Request a channelEpoch bump, so we can make a new set of\n    * commitments\n    * Implies that msg.sender is the destination of the channel.\n    * @param source the address of the channel source\n    * @param newCommitment, a secret derived from this new commitment\n    */\n    function bumpChannel(\n      address source,\n      bytes32 newCommitment\n    ) external validateSourceAndDest(source, msg.sender) {\n        (, Channel storage channel) = _getChannel(\n            source,\n            msg.sender\n        );\n\n        require(newCommitment != bytes32(0), \"Cannot set empty commitment\");\n        channel.commitment = newCommitment;\n        channel.ticketEpoch = channel.ticketEpoch + 1;\n        if (channel.status == ChannelStatus.WAITING_FOR_COMMITMENT){\n          channel.status = ChannelStatus.OPEN;\n        }\n        emit ChannelUpdated(source, msg.sender, channel);\n        emit ChannelBumped(source, msg.sender, newCommitment, channel.ticketEpoch, channel.balance);\n    }\n\n    /**\n     * A hook triggered when HOPR tokens are sent to this contract.\n     *\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        // solhint-disable-next-line no-unused-vars\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        // solhint-disable-next-line no-unused-vars\n        bytes calldata operatorData\n    ) external override {\n        require(msg.sender == address(token), \"caller must be HoprToken\");\n        require(to == address(this), \"must be sending tokens to HoprChannels\");\n\n        // must be one of our supported functions\n        if (userData.length == FUND_CHANNEL_MULTI_SIZE) {\n            address account1;\n            address account2;\n            uint256 amount1;\n            uint256 amount2;\n\n            (account1, account2, amount1, amount2) = abi.decode(userData, (address, address, uint256, uint256));\n            require(amount == amount1 + amount2, \"amount sent must be equal to amount specified\");\n\n            // fund channel in direction of: account1 -> account2\n            if (amount1 > 0){\n                _fundChannel(from, account1, account2, amount1);\n            }\n            // fund channel in direction of: account2 -> account1\n            if (amount2 > 0){\n                _fundChannel(from, account2, account1, amount2);\n            }\n        }\n    }\n\n    // internal code\n\n    /**\n     * @dev Funds a channel, then emits\n     * {ChannelUpdated} event.\n     * @param source the address of the channel source\n     * @param dest the address of the channel destination\n     * @param amount amount to fund account1\n     */\n    function _fundChannel(\n        address funder,\n        address source,\n        address dest,\n        uint256 amount\n    ) internal validateSourceAndDest(source, dest) {\n        require(amount > 0, \"amount must be greater than 0\");\n        require(publicKeys[source].length != 0, \"source has not announced\");\n        require(publicKeys[dest].length != 0, \"destination has not announced\");\n\n        (, Channel storage channel) = _getChannel(source, dest);\n        require(channel.status != ChannelStatus.PENDING_TO_CLOSE, \"Cannot fund a closing channel\"); \n        if (channel.status == ChannelStatus.CLOSED) {\n          // We are reopening the channel\n          channel.channelEpoch = channel.channelEpoch + 1;\n          channel.ticketEpoch = 0; // As we've incremented the channel epoch, we can restart the ticket counter\n          channel.ticketIndex = 0;\n\n          if (channel.commitment != bytes32(0)) {\n            channel.status = ChannelStatus.OPEN;\n            emit ChannelOpened(source, dest);\n          } else {\n            channel.status = ChannelStatus.WAITING_FOR_COMMITMENT;\n          }\n        }\n\n        channel.balance = channel.balance + amount;\n        emit ChannelUpdated(source, dest, channel);\n        emit ChannelFunded(funder, source, dest, amount);\n    }\n\n\n    /**\n     * @param source source\n     * @param destination destination\n     * @return a tuple of channelId, channel\n     */\n    function _getChannel(address source, address destination)\n        internal\n        view\n        returns (\n            bytes32,\n            Channel storage\n        )\n    {\n        bytes32 channelId = _getChannelId(source, destination);\n        Channel storage channel = channels[channelId];\n        return (channelId, channel);\n    }\n\n    /**\n     * @param source the address of source\n     * @param destination the address of destination\n     * @return the channel id \n     */\n    function _getChannelId(address source, address destination) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(source, destination));\n    }\n\n    /**\n     * @return the current timestamp\n     */\n    function _currentBlockTimestamp() internal view returns (uint32) {\n        // solhint-disable-next-line\n        return uint32(block.timestamp);\n    }\n\n    /**\n     * Uses the response to recompute the challenge. This is done\n     * by multiplying the base point of the curve with the given response.\n     * Due to the lack of embedded ECMUL functionality in the current\n     * version of the EVM, this is done by misusing the `ecrecover` \n     * functionality. `ecrecover` performs the point multiplication and \n     * converts the output to an Ethereum address (sliced hash of the product\n     * of base point and scalar).\n     * See https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384\n     * @param response response that is used to recompute the challenge\n     */\n    function _computeChallenge(bytes32 response) internal pure returns (address)  {\n        // Field order of the base field\n        uint256 FIELD_ORDER = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\n\n        require(0 < uint256(response), \"Invalid response. Value must be within the field\");\n        require(uint256(response) < FIELD_ORDER, \"Invalid response. Value must be within the field\");\n\n        // x-coordinate of the base point\n        uint256 gx = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798;\n        // y-coordinate of base-point is even, so v is 27\n        uint8 gv = 27;\n\n        address signer = ecrecover(0, gv, bytes32(gx), bytes32(mulmod(uint256(response), gx, FIELD_ORDER)));\n\n        return signer;\n    }\n    /**\n     * @dev Encode ticket data\n     * @return bytes\n     */\n    function _getEncodedTicket(\n        address recipient,\n        uint256 recipientCounter,\n        bytes32 proofOfRelaySecret,\n        uint256 channelEpoch,\n        uint256 amount,\n        uint256 ticketIndex,\n        uint256 winProb\n    ) internal pure returns (bytes memory) {\n        address challenge = _computeChallenge(proofOfRelaySecret);\n\n        return abi.encodePacked(\n            recipient,\n            challenge,\n            recipientCounter,\n            amount,\n            winProb,\n            ticketIndex,\n            channelEpoch\n        );\n    }\n    \n    /**\n     * @dev Get the ticket's \"luck\" by\n     * hashing provided values.\n     * @return luck\n     */\n    function _getTicketLuck(\n        bytes32 ticketHash,\n        bytes32 nextCommitment,\n        bytes32 proofOfRelaySecret\n    ) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(ticketHash, nextCommitment, proofOfRelaySecret)));\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Multicall.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Multicall.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\nabstract contract Multicall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     */\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Registry.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the global ERC1820 Registry, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n * implementers for interfaces in this registry, as well as query support.\n *\n * Implementers may be shared by multiple accounts, and can also implement more\n * than a single interface for each account. Contracts can implement interfaces\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\n * contract.\n *\n * {IERC165} interfaces can also be queried via the registry.\n *\n * For an in-depth explanation and source code analysis, see the EIP text.\n */\ninterface IERC1820Registry {\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(\n        address account,\n        bytes32 _interfaceHash,\n        address implementer\n    ) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     */\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     * @param account Address of the contract for which to update the cache.\n     * @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     * @notice Checks whether a contract implements an ERC165 interface or not.\n     * If the result is not cached a direct lookup on the contract address is performed.\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     * {updateERC165Cache} with the contract address.\n     * @param account Address of the contract to check.\n     * @param interfaceId ERC165 interface to check.\n     * @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n     * @param account Address of the contract to check.\n     * @param interfaceId ERC165 interface to check.\n     * @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/ERC1820Implementer.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC1820Implementer.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1820Implementer.sol\";\n\n/**\n * @dev Implementation of the {IERC1820Implementer} interface.\n *\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\n * declare their willingness to be implementers.\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\n * registration to be complete.\n */\ncontract ERC1820Implementer is IERC1820Implementer {\n    bytes32 private constant _ERC1820_ACCEPT_MAGIC = keccak256(\"ERC1820_ACCEPT_MAGIC\");\n\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account)\n        public\n        view\n        virtual\n        override\n        returns (bytes32)\n    {\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\n    }\n\n    /**\n     * @dev Declares the contract as willing to be an implementer of\n     * `interfaceHash` for `account`.\n     *\n     * See {IERC1820Registry-setInterfaceImplementer} and\n     * {IERC1820Registry-interfaceHash}.\n     */\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\n        _supportedInterfaces[interfaceHash][account] = true;\n    }\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Address.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/IERC1820Implementer.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Implementer.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface for an ERC1820 implementer, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\n * Used by contracts that will be registered as implementers in the\n * {IERC1820Registry}.\n */\ninterface IERC1820Implementer {\n    /**\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\n     * implements `interfaceHash` for `account`.\n     *\n     * See {IERC1820Registry-setInterfaceImplementer}.\n     */\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\n}\n"
        },
        "@openzeppelin/contracts/utils/Strings.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
        },
        "contracts/mocks/ChannelsMock.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8;\n\nimport \"../HoprChannels.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract ChannelsMock is HoprChannels {\n    constructor(address _token, uint32 _secsClosure)\n    HoprChannels(_token, _secsClosure) {}\n\n    function getChannelIdInternal(\n        address partyA,\n        address partyB\n    ) external pure returns (bytes32) {\n        return _getChannelId(partyA, partyB);\n    }\n\n    function getEncodedTicketInternal(\n        address recipient,\n        uint256 recipientCounter,\n        bytes32 proofOfRelaySecret,\n        uint256 channelIteration,\n        uint256 amount,\n        uint256 ticketIndex,\n        uint256 winProb\n    ) external pure returns (bytes memory) {\n        return _getEncodedTicket(recipient, recipientCounter, proofOfRelaySecret, channelIteration, amount, ticketIndex, winProb);\n    }\n\n    function getTicketLuckInternal(\n        bytes32 ticketHash,\n        bytes32 secretPreImage,\n        bytes32 proofOfRelaySecret\n    ) external pure returns (uint256) {\n        return _getTicketLuck(ticketHash, secretPreImage, proofOfRelaySecret);\n    }\n\n    function getTicketHashInternal(\n        address recipient,\n        uint256 recipientCounter,\n        bytes32 proofOfRelaySecret,\n        uint256 channelIteration,\n        uint256 amount,\n        uint256 ticketIndex,\n        uint256 winProb\n    ) external pure returns (bytes32) {\n        return ECDSA.toEthSignedMessageHash(\n            keccak256(_getEncodedTicket(recipient, recipientCounter, proofOfRelaySecret, channelIteration, amount, ticketIndex, winProb))\n        );\n    }\n\n    function computeChallengeInternal(bytes32 response) external pure returns (address) {\n        return _computeChallenge(response);\n    }\n}\n"
        },
        "contracts/HoprWrapperProxy.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol';\nimport '@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\n// https://github.com/omni/omnibridge/blob/c814f686487c50462b132b9691fd77cc2de237d3/contracts/interfaces/IERC677.sol\ninterface IERC677 is IERC20 {\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool);\n\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n}\n\ncontract HoprWrapperProxy is IERC777Recipient {\n  using SafeERC20 for IERC20;\n\n  IERC1820Registry public constant ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n  bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256('ERC777TokensRecipient');\n  address public constant WXHOPR_TOKEN = 0xD4fdec44DB9D44B8f2b6d529620f9C0C7066A2c1;\n  address public constant XHOPR_TOKEN = 0xD057604A14982FE8D88c5fC25Aac3267eA142a08;\n  address public constant WRAPPER = 0x097707143e01318734535676cfe2e5cF8b656ae8;\n  address payable public constant XDAI_MULTISIG = payable(0x5E1c4e7004B7411bA27Dc354330fab31147DFeF1);\n\n  event FowardedTo(address to, uint256 amount);\n  event FowardedFrom(address from, uint256 amount);\n\n  /**\n   * @dev register this contract to ERC1820 registry\n   */\n  constructor() public {\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n  }\n\n  /**\n   * @dev ERC677 hook. Token holder can send their xHOPR with `transferAndCall` to this contract.\n   * @param _from address Address of tokens sender. It should be from the multisig\n   * @param _value uint256 token amount being transferred\n   * @param _data bytes Data being sent along with token transfer\n   */\n  function onTokenTransfer(\n    address _from,\n    uint256 _value,\n    // solhint-disable-next-line no-unused-vars\n    bytes memory _data\n  ) external returns (bool) {\n    require(msg.sender == XHOPR_TOKEN, 'HoprWrapperProxy: Only accept xHOPR token');\n    require(_from == XDAI_MULTISIG, 'HoprWrapperProxy: Only accept xHOPR from the Asso MultiSig');\n    // forward it to the wrapper\n    emit FowardedTo(WRAPPER, _value);\n    IERC677(XHOPR_TOKEN).transferAndCall(WRAPPER, _value, '');\n    return true;\n  }\n\n  /**\n   * @dev token recipient hook for ERC777\n   * @param operator address operator requesting the transfer\n   * @param from address token holder address.\n   * @param to address recipient address\n   * @param amount uint256 amount of tokens to transfer\n   * @param userData bytes extra information provided by the token holder (if any)\n   * @param operatorData bytes extra information provided by the operator (if any)\n   */\n  function tokensReceived(\n    address operator,\n    address from,\n    address to,\n    uint256 amount,\n    bytes calldata userData,\n    bytes calldata operatorData\n  ) external override {\n    require(msg.sender == WXHOPR_TOKEN, 'HoprWrapperProxy: Only accept WXHOPR_TOKEN token');\n    // require(from == WRAPPER, 'HoprWrapperProxy: Only accept WXHOPR token from the wrapper');\n    require(to == address(this), 'HoprWrapperProxy: Must be sending tokens to this proxy');\n    emit FowardedFrom(from, amount);\n    IERC20(WXHOPR_TOKEN).safeTransfer(XDAI_MULTISIG, amount);\n  }\n\n  /**\n   * @dev Recover any residual ERC20 token/ETH to the multisig\n   * @param token ERC20 token address that is sent to this contract. Address 0 for ETH\n   */\n  function recoverTokens(address token) external {\n    if (token == address(0)) {\n      XDAI_MULTISIG.transfer(address(this).balance);\n    } else {\n      IERC20(token).safeTransfer(XDAI_MULTISIG, IERC20(token).balanceOf(address(this)));\n    }\n  }\n}\n"
        },
        "contracts/HoprForwarder.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract HoprForwarder is IERC777Recipient {\n    using SafeERC20 for IERC20;\n    \n    IERC1820Registry public constant ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n    bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\n    address public constant HOPR_TOKEN = 0xF5581dFeFD8Fb0e4aeC526bE659CFaB1f8c781dA;\n    address payable public constant MULTISIG = payable(0x4F50Ab4e931289344a57f2fe4bBd10546a6fdC17);\n    \n    /**\n     * @dev register this contract to ERC1820 registry\n     */\n    constructor() public {\n         ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n    }\n    \n    /**\n     * @dev token recipient hook for ERC777\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address. Should be zddress zero for token mintin\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external override {\n        require(msg.sender == HOPR_TOKEN, \"HoprMinterWrapper: Only accept HOPR token\");\n        require(from == address(0), \"HoprMinterWrapper: Only receive mint\");\n        require(to == address(this), \"HoprMinterWrapper: Must be sending tokens to the minter wrapper\");\n        IERC20(HOPR_TOKEN).safeTransfer(MULTISIG, amount);\n    }\n\n    /**\n     * @dev Recover any residual ERC20 token/ETH to the multisig\n     * @param token ERC20 token address that is sent to this contract. Address 0 for ETH\n     */\n    function recoverTokens(address token) external {\n        if (token == address (0)) {\n            MULTISIG.transfer(address(this).balance);           \n        } else {\n            IERC20(token).safeTransfer(MULTISIG, IERC20(token).balanceOf(address(this)));\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/access/Ownable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Context.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
        },
        "contracts/proxy/HoprStakingProxyForNetworkRegistry.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '../IHoprNetworkRegistryRequirement.sol';\n\n/**\n * @dev Interface for staking contract\n * source code at https://github.com/hoprnet/hopr-stake/tree/main/contracts\n * staking v2 is deployed at https://blockscout.com/xdai/mainnet/address/0x2cDD13ddB0346E0F620C8E5826Da5d7230341c6E\n * staking v3 is deployed at https://blockscout.com/xdai/mainnet/address/0xae933331ef0bE122f9499512d3ed4Fa3896DCf20\n */\ncontract IHoprStake {\n  function stakedHoprTokens(address _account) public view returns (uint256) {}\n\n  function isNftTypeAndRankRedeemed3(\n    uint256 nftTypeIndex,\n    uint256 boostNumerator,\n    address hodler\n  ) external view returns (bool) {}\n}\n\n/**\n * @dev Proxy for staking (v2/v3) contract, which an \"HoprNetworkRegistry requirement\" is implemented\n * Only accounts with HoprBoost NFTs that are of the type and rank in the `eligibleNftTypeAndRank` array\n * are considered as eligible, when their stake is also above the `stakeThreshold`\n */\ncontract HoprStakingProxyForNetworkRegistry is IHoprNetworkRegistryRequirement, Ownable {\n  struct NftTypeAndRank {\n    uint256 nftType;\n    uint256 nftRank;\n  }\n\n  IHoprStake public immutable STAKE_CONTRACT; // contract of HoprStake contract\n  uint256 public stakeThreshold; // minimum amount HOPR tokens being staked in the staking contract to be considered eligible\n  NftTypeAndRank[] public eligibleNftTypeAndRank; // list of NFTs whose owner are considered as eligible to the network if the `stakeThreshold` is also met\n  NftTypeAndRank[] public specialNftTypeAndRank; // list of NFTs whose owner are considered as eligible to the network without meeting the `stakeThreshold`, e.g. \"Dev NFT\"\n\n  event NftTypeAndRankAdded(uint256 indexed nftType, uint256 indexed nftRank); // emit when a new NFT type and rank gets included in the eligibility list\n  event NftTypeAndRankRemoved(uint256 indexed nftType, uint256 indexed nftRank); // emit when a NFT type and rank gets removed from the eligibility list\n  event SpecialNftTypeAndRankAdded(uint256 indexed nftType, uint256 indexed nftRank); // emit when a new special type and rank of NFT gets included in the eligibility list\n  event SpecialNftTypeAndRankRemoved(uint256 indexed nftType, uint256 indexed nftRank); // emit when a special type and rank of NFT gets removed from the eligibility list\n  event ThresholdUpdated(uint256 indexed threshold); // emit when the staking threshold gets updated.\n\n  constructor(\n    address stakeContract,\n    address newOwner,\n    uint256 minStake\n  ) {\n    STAKE_CONTRACT = IHoprStake(stakeContract);\n    stakeThreshold = minStake;\n    emit ThresholdUpdated(stakeThreshold);\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Checks if the provided account has\n   * a) special NFTs, e.g. \"Dev NFT\"\n   * b) redeemed any NFT of eligibleNftTypeAndRank and staked HOPR tokens above the `threshold`\n   * @param account staker address that has a hopr nodes running\n   */\n  function isRequirementFulfilled(address account) external view returns (bool) {\n    // if the account owns a special NFT, requirement is fulfilled\n    for (uint256 i = 0; i < specialNftTypeAndRank.length; i++) {\n      NftTypeAndRank memory eligible = specialNftTypeAndRank[i];\n      if (STAKE_CONTRACT.isNftTypeAndRankRedeemed3(eligible.nftType, eligible.nftRank, account)) {\n        return true;\n      }\n    }\n\n    // when no special NFT is present, the account needs to 1) reach the minimum stake, 2) own an eligible NFT\n    // for self-claiming accounts, check against the current criteria\n    uint256 amount = STAKE_CONTRACT.stakedHoprTokens(account);\n    if (amount < stakeThreshold) {\n      // threshold does not meet\n      return false;\n    }\n    // check on regular eligible NFTs.\n    for (uint256 i = 0; i < eligibleNftTypeAndRank.length; i++) {\n      NftTypeAndRank memory eligible = eligibleNftTypeAndRank[i];\n      if (STAKE_CONTRACT.isNftTypeAndRankRedeemed3(eligible.nftType, eligible.nftRank, account)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @dev Owner adds/updates NFT type and rank to the list of special NFTs in batch.\n   * @param nftTypes Array of type indexes of the special HoprBoost NFT\n   * @param nftRanks Array of HOPR boost numerator, which is associated to the special NFT\n   */\n  function ownerBatchAddSpecialNftTypeAndRank(uint256[] calldata nftTypes, uint256[] calldata nftRanks)\n    external\n    onlyOwner\n  {\n    require(\n      nftTypes.length == nftRanks.length,\n      'HoprStakingProxyForNetworkRegistry: ownerBatchAddSpecialNftTypeAndRank lengths mismatch'\n    );\n    for (uint256 index = 0; index < nftTypes.length; index++) {\n      _addSpecialNftTypeAndRank(nftTypes[index], nftRanks[index]);\n    }\n  }\n\n  /**\n   * @dev Owner removes from list of special NFTs in batch.\n   * @param nftTypes Array of type index of the special HoprBoost NFT\n   * @param nftRanks Array of  HOPR boost numerator, which is associated to the special NFT\n   */\n  function ownerBatchRemoveSpecialNftTypeAndRank(uint256[] calldata nftTypes, uint256[] calldata nftRanks)\n    external\n    onlyOwner\n  {\n    require(\n      nftTypes.length == nftRanks.length,\n      'HoprStakingProxyForNetworkRegistry: ownerBatchRemoveSpecialNftTypeAndRank lengths mismatch'\n    );\n    for (uint256 index = 0; index < nftTypes.length; index++) {\n      _removeSpecialNftTypeAndRank(nftTypes[index], nftRanks[index]);\n    }\n  }\n\n  /**\n   * @dev Owner adds/updates NFT type and rank to the list of eligibles NFTs in batch.\n   * @param nftTypes Array of type indexes of the eligible HoprBoost NFT\n   * @param nftRanks Array of HOPR boost numerator, which is associated to the eligible NFT\n   */\n  function ownerBatchAddNftTypeAndRank(uint256[] calldata nftTypes, uint256[] calldata nftRanks) external onlyOwner {\n    require(\n      nftTypes.length == nftRanks.length,\n      'HoprStakingProxyForNetworkRegistry: ownerBatchAddNftTypeAndRank lengths mismatch'\n    );\n    for (uint256 index = 0; index < nftTypes.length; index++) {\n      _addNftTypeAndRank(nftTypes[index], nftRanks[index]);\n    }\n  }\n\n  /**\n   * @dev Owner removes from list of eligible NFTs in batch.\n   * @param nftTypes Array of type index of the eligible HoprBoost NFT\n   * @param nftRanks Array of  HOPR boost numerator, which is associated to the eligible NFT\n   */\n  function ownerBatchRemoveNftTypeAndRank(uint256[] calldata nftTypes, uint256[] calldata nftRanks) external onlyOwner {\n    require(\n      nftTypes.length == nftRanks.length,\n      'HoprStakingProxyForNetworkRegistry: ownerBatchRemoveNftTypeAndRank lengths mismatch'\n    );\n    for (uint256 index = 0; index < nftTypes.length; index++) {\n      _removeNftTypeAndRank(nftTypes[index], nftRanks[index]);\n    }\n  }\n\n  /**\n   * @dev Owner adds/updates NFT type and rank to the list of eligibles NFTs.\n   * @param nftType Type index of the eligible HoprBoost NFT\n   * @param nftRank HOPR boost numerator, which is associated to the eligible NFT\n   */\n  function ownerAddNftTypeAndRank(uint256 nftType, uint256 nftRank) external onlyOwner {\n    _addNftTypeAndRank(nftType, nftRank);\n  }\n\n  /**\n   * @dev Owner removes from list of eligible NFTs\n   * @param nftType Type index of the eligible HoprBoost NFT\n   * @param nftRank HOPR boost numerator, which is associated to the eligible NFT\n   */\n  function ownerRemoveNftTypeAndRank(uint256 nftType, uint256 nftRank) external onlyOwner {\n    _removeNftTypeAndRank(nftType, nftRank);\n  }\n\n  /**\n   * @dev Owner updates the minimal staking amount required for users to add themselves onto the HoprNetworkRegistry\n   * @param newThreshold Minimum stake of HOPR token\n   */\n  function ownerUpdateThreshold(uint256 newThreshold) external onlyOwner {\n    require(\n      stakeThreshold != newThreshold,\n      'HoprStakingProxyForNetworkRegistry: try to update with the same staking threshold'\n    );\n    stakeThreshold = newThreshold;\n    emit ThresholdUpdated(stakeThreshold);\n  }\n\n  /**\n   * @dev adds NFT type and rank to the list of special NFTs.\n   * @param nftType Type index of the special HoprBoost NFT\n   * @param nftRank HOPR boost numerator, which is associated to the special NFT\n   */\n  function _addSpecialNftTypeAndRank(uint256 nftType, uint256 nftRank) private {\n    uint256 i = 0;\n    for (i; i < specialNftTypeAndRank.length; i++) {\n      // walk through all the types\n      if (specialNftTypeAndRank[i].nftType == nftType && specialNftTypeAndRank[i].nftRank == nftRank) {\n        // already exist;\n        return;\n      }\n    }\n    specialNftTypeAndRank.push(NftTypeAndRank({nftType: nftType, nftRank: nftRank}));\n    emit SpecialNftTypeAndRankAdded(nftType, nftRank);\n    (nftType, nftRank);\n  }\n\n  /**\n   * @dev Remove from list of special NFTs\n   * @param nftType Type index of the special HoprBoost NFT\n   * @param nftRank HOPR boost numerator, which is associated to the special NFT\n   */\n  function _removeSpecialNftTypeAndRank(uint256 nftType, uint256 nftRank) private {\n    // walk through\n    for (uint256 i = 0; i < specialNftTypeAndRank.length; i++) {\n      if (specialNftTypeAndRank[i].nftType == nftType && specialNftTypeAndRank[i].nftRank == nftRank) {\n        // overwrite with the last element in the array\n        specialNftTypeAndRank[i] = specialNftTypeAndRank[specialNftTypeAndRank.length - 1];\n        specialNftTypeAndRank.pop();\n        emit SpecialNftTypeAndRankRemoved(nftType, nftRank);\n      }\n    }\n  }\n\n  /**\n   * @dev adds NFT type and rank to the list of eligibles NFTs.\n   * @param nftType Type index of the eligible HoprBoost NFT\n   * @param nftRank HOPR boost numerator, which is associated to the eligible NFT\n   */\n  function _addNftTypeAndRank(uint256 nftType, uint256 nftRank) private {\n    uint256 i = 0;\n    for (i; i < eligibleNftTypeAndRank.length; i++) {\n      // walk through all the types\n      if (eligibleNftTypeAndRank[i].nftType == nftType && eligibleNftTypeAndRank[i].nftRank == nftRank) {\n        // already exist;\n        return;\n      }\n    }\n    eligibleNftTypeAndRank.push(NftTypeAndRank({nftType: nftType, nftRank: nftRank}));\n    emit NftTypeAndRankAdded(nftType, nftRank);\n  }\n\n  /**\n   * @dev Remove from list of eligible NFTs\n   * @param nftType Type index of the eligible HoprBoost NFT\n   * @param nftRank HOPR boost numerator, which is associated to the eligible NFT\n   */\n  function _removeNftTypeAndRank(uint256 nftType, uint256 nftRank) private {\n    // walk through\n    for (uint256 i = 0; i < eligibleNftTypeAndRank.length; i++) {\n      if (eligibleNftTypeAndRank[i].nftType == nftType && eligibleNftTypeAndRank[i].nftRank == nftRank) {\n        // overwrite with the last element in the array\n        eligibleNftTypeAndRank[i] = eligibleNftTypeAndRank[eligibleNftTypeAndRank.length - 1];\n        eligibleNftTypeAndRank.pop();\n        emit NftTypeAndRankRemoved(nftType, nftRank);\n      }\n    }\n  }\n}\n"
        },
        "contracts/IHoprNetworkRegistryRequirement.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\ninterface IHoprNetworkRegistryRequirement {\n  function isRequirementFulfilled(address account) external view returns (bool);\n}\n"
        },
        "contracts/proxy/HoprDummyProxyForNetworkRegistry.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '../IHoprNetworkRegistryRequirement.sol';\n\n/**\n * @dev Dummy roxy which return true if an address is registered by the owner\n */\ncontract HoprDummyProxyForNetworkRegistry is IHoprNetworkRegistryRequirement, Ownable {\n  mapping(address => bool) registeredAccounts;\n  event AccountRegistered(address indexed account);\n  event AccountDeregistered(address indexed account);\n\n  constructor(address newOwner) {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Checks if the provided account is registered by the owner\n   * @param account address of the account that runs a hopr node\n   */\n  function isRequirementFulfilled(address account) external view returns (bool) {\n    return registeredAccounts[account];\n  }\n\n  /**\n   * @dev Owner add accounts onto the registry list in batch.\n   * @param accounts addresses to be removed from the registry\n   */\n  function ownerBatchAddAccounts(address[] calldata accounts) external onlyOwner {\n    for (uint256 index = 0; index < accounts.length; index++) {\n      _addAccount(accounts[index]);\n    }\n  }\n\n  /**\n   * @dev Owner removes from list of eligible NFTs in batch.\n   * @param accounts addresses to be removed from the registry\n   */\n  function ownerBatchRemoveAccounts(address[] calldata accounts) external onlyOwner {\n    for (uint256 index = 0; index < accounts.length; index++) {\n      _removeAccount(accounts[index]);\n    }\n  }\n\n  /**\n   * @dev Owner add account onto the registry list\n   * @param account address to be added onto the registry\n   */\n  function ownerAddAccount(address account) external onlyOwner {\n    _addAccount(account);\n  }\n\n  /**\n   * @dev Owner move account from the registry list\n   * @param account address to be removed from the registry\n   */\n  function ownerRemoveAccount(address account) external onlyOwner {\n    _removeAccount(account);\n  }\n\n  /**\n   * @dev add account onto the registry list\n   * @param account address to be added into the registry\n   */\n  function _addAccount(address account) private {\n    if (!registeredAccounts[account]) {\n      registeredAccounts[account] = true;\n      emit AccountRegistered(account);\n    }\n  }\n\n  /**\n   * @dev remove account from the registry list\n   * @param account address to be removed from the registry\n   */\n  function _removeAccount(address account) private {\n    if (registeredAccounts[account]) {\n      delete registeredAccounts[account];\n      emit AccountDeregistered(account);\n    }\n  }\n}\n"
        },
        "contracts/HoprNetworkRegistry.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './IHoprNetworkRegistryRequirement.sol';\n\n/**\n * @title HoprNetworkRegistry\n * @dev Smart contract that maintains a list of hopr node address (peer id) that are allowed\n * to enter HOPR network. Each peer id is linked with an Ethereum account. Only Ethereum\n * accounts that are eligible according to `IHoprNetworkRegistryRequirement` can register a\n * HOPR node address. If an account wants to change its registerd HOPR node address, it must\n * firstly deregister itself before registering new node.\n *\n * Note that HOPR node address refers to `PeerId.toB58String()`\n *\n * This network registry can be globally enabled/disabled by the owner\n *\n * Implementation of `IHoprNetworkRegistryRequirement` can also be dynamically updated by the\n * owner. Some sample implementations can be found under../proxy/ folder\n *\n * Owner has the power to overwrite the registration\n */\ncontract HoprNetworkRegistry is Ownable {\n  IHoprNetworkRegistryRequirement public requirementImplementation; // Implementation of network registry proxy\n  mapping(address => string) public accountToNodePeerId; // mapping the account to the hopr node peer id in bytes\n  mapping(string => address) public nodePeerIdToAccount; // mapping the hopr node peer id in bytes to account\n  bool public enabled;\n\n  event EnabledNetworkRegistry(bool indexed isEnabled); // Global toggle of the network registry\n  event RequirementUpdated(address indexed requirementImplementation); // Emit when the network registry proxy is updated\n  event Registered(address indexed account, string hoprPeerId); // Emit when an account register a node peer id for itself\n  event Deregistered(address indexed account); // Emit when an account deregister a node peer id for itself\n  event RegisteredByOwner(address indexed account, string hoprPeerId); // Emit when the contract owner register a node peer id for an account\n  event DeregisteredByOwner(address indexed account); // Emit when the contract owner deregister a node peer id for an account\n  event EligibilityUpdated(address indexed account, bool indexed eligibility); // Emit when the eligibility of an account is updated\n\n  /**\n   * @dev Network registry can be globally toggled. If `enabled === true`, only nodes registered\n   * in this contract with an eligible account associated can join HOPR network; If `!enabled`,\n   * all the nodes can join HOPR network regardless the eligibility of the associated account.\n   */\n  modifier mustBeEnabled() {\n    require(enabled, 'HoprNetworkRegistry: Registry is disabled');\n    _;\n  }\n\n  /**\n   * Specify NetworkRegistry logic implementation and transfer the ownership\n   * enable the network registry on deployment.\n   * @param _requirementImplementation address of the network registry logic implementation\n   * @param _newOwner address of the contract owner\n   */\n  constructor(address _requirementImplementation, address _newOwner) {\n    requirementImplementation = IHoprNetworkRegistryRequirement(_requirementImplementation);\n    enabled = true;\n    _transferOwnership(_newOwner);\n    emit RequirementUpdated(_requirementImplementation);\n    emit EnabledNetworkRegistry(true);\n  }\n\n  /**\n   * Specify NetworkRegistry logic implementation\n   * @param _requirementImplementation address of the network registry logic implementation\n   */\n  function updateRequirementImplementation(address _requirementImplementation) external onlyOwner {\n    requirementImplementation = IHoprNetworkRegistryRequirement(_requirementImplementation);\n    emit RequirementUpdated(_requirementImplementation);\n  }\n\n  /**\n   * Enable globally the network registry by the owner\n   */\n  function enableRegistry() external onlyOwner {\n    require(!enabled, 'HoprNetworkRegistry: Registry is enabled');\n    enabled = true;\n    emit EnabledNetworkRegistry(true);\n  }\n\n  /**\n   * Disanable globally the network registry by the owner\n   */\n  function disableRegistry() external onlyOwner mustBeEnabled {\n    enabled = false;\n    emit EnabledNetworkRegistry(false);\n  }\n\n  /**\n   * @dev Checks if the msg.sender fulfills registration requirement at the calling time, if so,\n   * register the EOA with HOPR node peer id. Account can also update its registration status\n   * with this function.\n   * @notice It allows msg.sender to update registered node peer id.\n   * @param hoprPeerId Hopr nodes peer id in bytes. e.g. 16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1\n   * hopr node peer id should always start with '16Uiu2HA' (0x3136556975324841) and be of length 53\n   */\n  function selfRegister(string calldata hoprPeerId) external mustBeEnabled returns (bool) {\n    require(\n      bytes(hoprPeerId).length == 53 && bytes32(bytes(hoprPeerId)[0:8]) == '16Uiu2HA',\n      'HoprNetworkRegistry: HOPR node peer id must be valid'\n    );\n    // get account associated with the given hopr node peer id, if any\n    address registeredAccount = nodePeerIdToAccount[hoprPeerId];\n    // if the hopr node peer id was linked to a different account, revert.\n    // To change a nodes' linked account, it must be deregistered by the previously linked account\n    // first before registering by the new account, to prevent hostile takeover of others' node peer id\n    require(\n      registeredAccount == msg.sender || registeredAccount == address(0),\n      'HoprNetworkRegistry: Cannot link a registered node to a different account'\n    );\n\n    // get multi address associated with the caller, if any\n    bytes memory registeredNodeMultiaddrInBytes = bytes(accountToNodePeerId[msg.sender]);\n    require(\n      registeredNodeMultiaddrInBytes.length == 0 ||\n        keccak256(registeredNodeMultiaddrInBytes) == keccak256(bytes(hoprPeerId)),\n      'HoprNetworkRegistry: Cannot link an account to a different node. Please remove the registered node'\n    );\n\n    if (requirementImplementation.isRequirementFulfilled(msg.sender)) {\n      // only update the list when no record previously exists\n      if (registeredNodeMultiaddrInBytes.length == 0) {\n        accountToNodePeerId[msg.sender] = hoprPeerId;\n        nodePeerIdToAccount[hoprPeerId] = msg.sender;\n        emit Registered(msg.sender, hoprPeerId);\n      }\n      emit EligibilityUpdated(msg.sender, true);\n      return true;\n    }\n\n    emit EligibilityUpdated(msg.sender, false);\n    return false;\n  }\n\n  /**\n   * @dev Allows when there's already a multi address associated with the caller account, remove the link by deregistering\n   */\n  function selfDeregister() external mustBeEnabled returns (bool) {\n    string memory registeredNodeMultiaddr = accountToNodePeerId[msg.sender];\n    require(bytes(registeredNodeMultiaddr).length > 0, 'HoprNetworkRegistry: Cannot delete an empty entry');\n    delete accountToNodePeerId[msg.sender];\n    delete nodePeerIdToAccount[registeredNodeMultiaddr];\n    emit Deregistered(msg.sender);\n    return true;\n  }\n\n  /**\n   * @dev Owner adds Ethereum addresses and HOPR node ids to the registration.\n   * Allows owner to register arbitrary HOPR Addresses even if accounts do not fulfill registration requirements.\n   * HOPR node peer id validation should be done off-chain.\n   * @notice It allows owner to overwrite exisitng entries.\n   * @param accounts Array of Ethereum accounts, e.g. [0xf6A8b267f43998B890857f8d1C9AabC68F8556ee]\n   * @param hoprPeerIds Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]\n   */\n  function ownerRegister(address[] calldata accounts, string[] calldata hoprPeerIds) external onlyOwner mustBeEnabled {\n    require(hoprPeerIds.length == accounts.length, 'HoprNetworkRegistry: hoprPeerIdes and accounts lengths mismatch');\n    for (uint256 i = 0; i < accounts.length; i++) {\n      // validate peer the length and prefix of peer Ids. If invalid, skip.\n      if (bytes(hoprPeerIds[i]).length == 53 && bytes32(bytes(hoprPeerIds[i])[0:8]) == '16Uiu2HA') {\n        string memory hoprPeerId = hoprPeerIds[i];\n        address account = accounts[i];\n        accountToNodePeerId[account] = hoprPeerId;\n        nodePeerIdToAccount[hoprPeerId] = account;\n        emit RegisteredByOwner(account, hoprPeerId);\n        emit EligibilityUpdated(account, true);\n      }\n    }\n  }\n\n  /**\n   * @dev Owner removes previously owner-added Ethereum addresses and HOPR node ids from the registration.\n   * @notice Owner can even remove self-declared entries.\n   * @param accounts Array of Ethereum accounts, e.g. 0xf6A8b267f43998B890857f8d1C9AabC68F8556ee\n   */\n  function ownerDeregister(address[] calldata accounts) external onlyOwner mustBeEnabled {\n    for (uint256 i = 0; i < accounts.length; i++) {\n      address account = accounts[i];\n      string memory hoprPeerId = accountToNodePeerId[account];\n      delete accountToNodePeerId[account];\n      delete nodePeerIdToAccount[hoprPeerId];\n      // Eligibility update should have a logindex strictly smaller\n      // than the deregister event to make sure it always gets processed\n      // before the deregister event\n      emit EligibilityUpdated(account, false);\n      emit DeregisteredByOwner(account);\n    }\n  }\n\n  /**\n   * @dev Owner syncs a list of addresses with based on the latest criteria.\n   * @notice If an account hasn't been registered, its eligibility is not going to be updated\n   * @param accounts Array of Ethereum accounts, e.g. [0xf6A8b267f43998B890857f8d1C9AabC68F8556ee]\n   */\n  function sync(address[] calldata accounts) external onlyOwner mustBeEnabled {\n    for (uint256 i = 0; i < accounts.length; i++) {\n      address account = accounts[i];\n      if (bytes(accountToNodePeerId[account]).length == 0) {\n        // if the account does not have any registered address\n        continue;\n      }\n      if (!requirementImplementation.isRequirementFulfilled(account)) {\n        // if the account is no longer eligible\n        emit EligibilityUpdated(account, false);\n      } else {\n        emit EligibilityUpdated(account, true);\n      }\n    }\n  }\n\n  /**\n   * @dev Returns if a hopr address is registered and its associated account is eligible or not.\n   * @param hoprPeerId hopr node peer id\n   */\n  function isNodeRegisteredAndEligible(string calldata hoprPeerId) public view returns (bool) {\n    address account = nodePeerIdToAccount[hoprPeerId];\n    if (account == address(0)) {\n      // this address has never been registered\n      return false;\n    }\n    return requirementImplementation.isRequirementFulfilled(account);\n  }\n\n  /**\n   * @dev Returns if an account address is eligible according to the criteria defined in the implementation\n   * It also checks if a node peer id is associated with the account.\n   * @param account account address that runs hopr node\n   */\n  function isAccountRegisteredAndEligible(address account) public view returns (bool) {\n    return bytes(accountToNodePeerId[account]).length != 0 && requirementImplementation.isRequirementFulfilled(account);\n  }\n}\n"
        }
      },
      "settings": {
        "optimizer": {
          "enabled": true,
          "runs": 200
        },
        "outputSelection": {
          "*": {
            "*": [
              "storageLayout",
              "abi",
              "evm.bytecode",
              "evm.deployedBytecode",
              "evm.methodIdentifiers",
              "metadata",
              "devdoc",
              "userdoc",
              "evm.gasEstimates"
            ],
            "": [
              "ast"
            ]
          }
        },
        "metadata": {
          "useLiteralContent": true
        }
      }
    }
  },
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_requirementImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Deregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "DeregisteredByOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "eligibility",
          "type": "bool"
        }
      ],
      "name": "EligibilityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "EnabledNetworkRegistry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "hoprPeerId",
          "type": "string"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "hoprPeerId",
          "type": "string"
        }
      ],
      "name": "RegisteredByOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requirementImplementation",
          "type": "address"
        }
      ],
      "name": "RequirementUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountToNodePeerId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAccountRegisteredAndEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "hoprPeerId",
          "type": "string"
        }
      ],
      "name": "isNodeRegisteredAndEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nodePeerIdToAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "ownerDeregister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "hoprPeerIds",
          "type": "string[]"
        }
      ],
      "name": "ownerRegister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requirementImplementation",
      "outputs": [
        {
          "internalType": "contract IHoprNetworkRegistryRequirement",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selfDeregister",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "hoprPeerId",
          "type": "string"
        }
      ],
      "name": "selfRegister",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "sync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_requirementImplementation",
          "type": "address"
        }
      ],
      "name": "updateRequirementImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ]
}