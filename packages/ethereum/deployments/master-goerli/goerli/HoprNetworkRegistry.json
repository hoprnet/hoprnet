{
  "address": "0xB3732fE5B08AC573b48932189A9d7DB1F7891820",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_requirementImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Deregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "DeregisteredByOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "eligibility",
          "type": "bool"
        }
      ],
      "name": "EligibilityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "EnabledNetworkRegistry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "hoprPeerId",
          "type": "string"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "hoprPeerId",
          "type": "string"
        }
      ],
      "name": "RegisteredByOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requirementImplementation",
          "type": "address"
        }
      ],
      "name": "RequirementUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountToNodePeerId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAccountRegisteredAndEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "hoprPeerId",
          "type": "string"
        }
      ],
      "name": "isNodeRegisteredAndEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nodePeerIdToAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "ownerDeregister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "hoprPeerIds",
          "type": "string[]"
        }
      ],
      "name": "ownerRegister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requirementImplementation",
      "outputs": [
        {
          "internalType": "contract IHoprNetworkRegistryRequirement",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selfDeregister",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "hoprPeerId",
          "type": "string"
        }
      ],
      "name": "selfRegister",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "sync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_requirementImplementation",
          "type": "address"
        }
      ],
      "name": "updateRequirementImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa2470371f1baad756eeaaf5565b7d8b0df5edf8a959cfae6503d4cc0cdf291a3",
  "receipt": {
    "to": null,
    "from": "0xA18732DC751BE0dB04157eb92C92BA9d0fC09FC5",
    "contractAddress": "0xB3732fE5B08AC573b48932189A9d7DB1F7891820",
    "transactionIndex": 2,
    "gasUsed": "1570066",
    "logsBloom": "0x
    "blockHash": "0x4a0ee6e81c18978793782c7945f4fe1569f5a1e9248f1f4ff5a9635a6b973ce9",
    "transactionHash": "0xa2470371f1baad756eeaaf5565b7d8b0df5edf8a959cfae6503d4cc0cdf291a3",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 7427113,
        "transactionHash": "0xa2470371f1baad756eeaaf5565b7d8b0df5edf8a959cfae6503d4cc0cdf291a3",
        "address": "0xB3732fE5B08AC573b48932189A9d7DB1F7891820",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a18732dc751be0db04157eb92c92ba9d0fc09fc5"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x4a0ee6e81c18978793782c7945f4fe1569f5a1e9248f1f4ff5a9635a6b973ce9"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 7427113,
        "transactionHash": "0xa2470371f1baad756eeaaf5565b7d8b0df5edf8a959cfae6503d4cc0cdf291a3",
        "address": "0xB3732fE5B08AC573b48932189A9d7DB1F7891820",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000a18732dc751be0db04157eb92c92ba9d0fc09fc5",
          "0x000000000000000000000000a18732dc751be0db04157eb92c92ba9d0fc09fc5"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x4a0ee6e81c18978793782c7945f4fe1569f5a1e9248f1f4ff5a9635a6b973ce9"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 7427113,
        "transactionHash": "0xa2470371f1baad756eeaaf5565b7d8b0df5edf8a959cfae6503d4cc0cdf291a3",
        "address": "0xB3732fE5B08AC573b48932189A9d7DB1F7891820",
        "topics": [
          "0x8ac4b2eb7749f75c5b99b898e547fd615dd7a424e68356ea196b7dae742d6c32",
          "0x0000000000000000000000002dbf1d5b4012291c0efaec26c4dab105b059d898"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x4a0ee6e81c18978793782c7945f4fe1569f5a1e9248f1f4ff5a9635a6b973ce9"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 7427113,
        "transactionHash": "0xa2470371f1baad756eeaaf5565b7d8b0df5edf8a959cfae6503d4cc0cdf291a3",
        "address": "0xB3732fE5B08AC573b48932189A9d7DB1F7891820",
        "topics": [
          "0x3f749856d23f89c3cefe0f1055d280fc302c5d6adb048bc20f5d975239c30492",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x4a0ee6e81c18978793782c7945f4fe1569f5a1e9248f1f4ff5a9635a6b973ce9"
      }
    ],
    "blockNumber": 7427113,
    "cumulativeGasUsed": "1699806",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2dBf1d5b4012291C0EFaec26c4DAb105B059D898",
    "0xA18732DC751BE0dB04157eb92C92BA9d0fC09FC5"
  ],
  "numDeployments": 2,
  "solcInputHash": "38927a2e82d41581ccd1dae52ae0229c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requirementImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Deregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DeregisteredByOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"eligibility\",\"type\":\"bool\"}],\"name\":\"EligibilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"EnabledNetworkRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hoprPeerId\",\"type\":\"string\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hoprPeerId\",\"type\":\"string\"}],\"name\":\"RegisteredByOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requirementImplementation\",\"type\":\"address\"}],\"name\":\"RequirementUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountToNodePeerId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountRegisteredAndEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hoprPeerId\",\"type\":\"string\"}],\"name\":\"isNodeRegisteredAndEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nodePeerIdToAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"ownerDeregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"hoprPeerIds\",\"type\":\"string[]\"}],\"name\":\"ownerRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requirementImplementation\",\"outputs\":[{\"internalType\":\"contract IHoprNetworkRegistryRequirement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfDeregister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hoprPeerId\",\"type\":\"string\"}],\"name\":\"selfRegister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requirementImplementation\",\"type\":\"address\"}],\"name\":\"updateRequirementImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Smart contract that maintains a list of hopr node address (peer id) that are allowed to enter HOPR network. Each peer id is linked with an Ethereum account. Only Ethereum accounts that are eligible according to `IHoprNetworkRegistryRequirement` can register a HOPR node address. If an account wants to change its registerd HOPR node address, it must firstly deregister itself before registering new node. Note that HOPR node address refers to `PeerId.toString()` This network registry can be globally enabled/disabled by the owner Implementation of `IHoprNetworkRegistryRequirement` can also be dynamically updated by the owner. Some sample implementations can be found under../proxy/ folder Owner has the power to overwrite the registration\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_newOwner\":\"address of the contract owner\",\"_requirementImplementation\":\"address of the network registry logic implementation\"}},\"isAccountRegisteredAndEligible(address)\":{\"details\":\"Returns if an account address is eligible according to the criteria defined in the implementation It also checks if a node peer id is associated with the account.\",\"params\":{\"account\":\"account address that runs hopr node\"}},\"isNodeRegisteredAndEligible(string)\":{\"details\":\"Returns if a hopr address is registered and its associated account is eligible or not.\",\"params\":{\"hoprPeerId\":\"hopr node peer id\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerDeregister(address[])\":{\"details\":\"Owner removes previously owner-added Ethereum addresses and HOPR node ids from the registration.\",\"params\":{\"accounts\":\"Array of Ethereum accounts, e.g. 0xf6A8b267f43998B890857f8d1C9AabC68F8556ee\"}},\"ownerRegister(address[],string[])\":{\"details\":\"Owner adds Ethereum addresses and HOPR node ids to the registration. Allows owner to register arbitrary HOPR Addresses even if accounts do not fulfill registration requirements. HOPR node peer id validation should be done off-chain.\",\"params\":{\"accounts\":\"Array of Ethereum accounts, e.g. [0xf6A8b267f43998B890857f8d1C9AabC68F8556ee]\",\"hoprPeerIds\":\"Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"selfDeregister()\":{\"details\":\"Allows when there's already a multi address associated with the caller account, remove the link by deregistering\"},\"selfRegister(string)\":{\"details\":\"Checks if the msg.sender fulfills registration requirement at the calling time, if so, register the EOA with HOPR node peer id. Account can also update its registration status with this function.\",\"params\":{\"hoprPeerId\":\"Hopr nodes peer id in bytes. e.g. 16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1 hopr node peer id should always start with '16Uiu2HA' (0x3136556975324841) and be of length 53\"}},\"sync(address[])\":{\"details\":\"Owner syncs a list of addresses with based on the latest criteria.\",\"params\":{\"accounts\":\"Array of Ethereum accounts, e.g. [0xf6A8b267f43998B890857f8d1C9AabC68F8556ee]\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateRequirementImplementation(address)\":{\"params\":{\"_requirementImplementation\":\"address of the network registry logic implementation\"}}},\"title\":\"HoprNetworkRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Specify NetworkRegistry logic implementation and transfer the ownership enable the network registry on deployment.\"},\"disableRegistry()\":{\"notice\":\"Disanable globally the network registry by the owner\"},\"enableRegistry()\":{\"notice\":\"Enable globally the network registry by the owner\"},\"ownerDeregister(address[])\":{\"notice\":\"Owner can even remove self-declared entries.\"},\"ownerRegister(address[],string[])\":{\"notice\":\"It allows owner to overwrite exisitng entries.\"},\"selfRegister(string)\":{\"notice\":\"It allows msg.sender to update registered node peer id.\"},\"sync(address[])\":{\"notice\":\"If an account hasn't been registered, its eligibility is not going to be updated\"},\"updateRequirementImplementation(address)\":{\"notice\":\"Specify NetworkRegistry logic implementation\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HoprNetworkRegistry.sol\":\"HoprNetworkRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/HoprNetworkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './IHoprNetworkRegistryRequirement.sol';\\n\\n/**\\n * @title HoprNetworkRegistry\\n * @dev Smart contract that maintains a list of hopr node address (peer id) that are allowed\\n * to enter HOPR network. Each peer id is linked with an Ethereum account. Only Ethereum\\n * accounts that are eligible according to `IHoprNetworkRegistryRequirement` can register a\\n * HOPR node address. If an account wants to change its registerd HOPR node address, it must\\n * firstly deregister itself before registering new node.\\n *\\n * Note that HOPR node address refers to `PeerId.toString()`\\n *\\n * This network registry can be globally enabled/disabled by the owner\\n *\\n * Implementation of `IHoprNetworkRegistryRequirement` can also be dynamically updated by the\\n * owner. Some sample implementations can be found under../proxy/ folder\\n *\\n * Owner has the power to overwrite the registration\\n */\\ncontract HoprNetworkRegistry is Ownable {\\n  IHoprNetworkRegistryRequirement public requirementImplementation; // Implementation of network registry proxy\\n  mapping(address => string) public accountToNodePeerId; // mapping the account to the hopr node peer id in bytes\\n  mapping(string => address) public nodePeerIdToAccount; // mapping the hopr node peer id in bytes to account\\n  bool public enabled;\\n\\n  event EnabledNetworkRegistry(bool indexed isEnabled); // Global toggle of the network registry\\n  event RequirementUpdated(address indexed requirementImplementation); // Emit when the network registry proxy is updated\\n  event Registered(address indexed account, string hoprPeerId); // Emit when an account register a node peer id for itself\\n  event Deregistered(address indexed account); // Emit when an account deregister a node peer id for itself\\n  event RegisteredByOwner(address indexed account, string hoprPeerId); // Emit when the contract owner register a node peer id for an account\\n  event DeregisteredByOwner(address indexed account); // Emit when the contract owner deregister a node peer id for an account\\n  event EligibilityUpdated(address indexed account, bool indexed eligibility); // Emit when the eligibility of an account is updated\\n\\n  /**\\n   * @dev Network registry can be globally toggled. If `enabled === true`, only nodes registered\\n   * in this contract with an eligible account associated can join HOPR network; If `!enabled`,\\n   * all the nodes can join HOPR network regardless the eligibility of the associated account.\\n   */\\n  modifier mustBeEnabled() {\\n    require(enabled, 'HoprNetworkRegistry: Registry is disabled');\\n    _;\\n  }\\n\\n  /**\\n   * Specify NetworkRegistry logic implementation and transfer the ownership\\n   * enable the network registry on deployment.\\n   * @param _requirementImplementation address of the network registry logic implementation\\n   * @param _newOwner address of the contract owner\\n   */\\n  constructor(address _requirementImplementation, address _newOwner) {\\n    requirementImplementation = IHoprNetworkRegistryRequirement(_requirementImplementation);\\n    enabled = true;\\n    _transferOwnership(_newOwner);\\n    emit RequirementUpdated(_requirementImplementation);\\n    emit EnabledNetworkRegistry(true);\\n  }\\n\\n  /**\\n   * Specify NetworkRegistry logic implementation\\n   * @param _requirementImplementation address of the network registry logic implementation\\n   */\\n  function updateRequirementImplementation(address _requirementImplementation) external onlyOwner {\\n    requirementImplementation = IHoprNetworkRegistryRequirement(_requirementImplementation);\\n    emit RequirementUpdated(_requirementImplementation);\\n  }\\n\\n  /**\\n   * Enable globally the network registry by the owner\\n   */\\n  function enableRegistry() external onlyOwner {\\n    require(!enabled, 'HoprNetworkRegistry: Registry is enabled');\\n    enabled = true;\\n    emit EnabledNetworkRegistry(true);\\n  }\\n\\n  /**\\n   * Disanable globally the network registry by the owner\\n   */\\n  function disableRegistry() external onlyOwner mustBeEnabled {\\n    enabled = false;\\n    emit EnabledNetworkRegistry(false);\\n  }\\n\\n  /**\\n   * @dev Checks if the msg.sender fulfills registration requirement at the calling time, if so,\\n   * register the EOA with HOPR node peer id. Account can also update its registration status\\n   * with this function.\\n   * @notice It allows msg.sender to update registered node peer id.\\n   * @param hoprPeerId Hopr nodes peer id in bytes. e.g. 16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1\\n   * hopr node peer id should always start with '16Uiu2HA' (0x3136556975324841) and be of length 53\\n   */\\n  function selfRegister(string calldata hoprPeerId) external mustBeEnabled returns (bool) {\\n    require(\\n      bytes(hoprPeerId).length == 53 && bytes32(bytes(hoprPeerId)[0:8]) == '16Uiu2HA',\\n      'HoprNetworkRegistry: HOPR node peer id must be valid'\\n    );\\n    // get account associated with the given hopr node peer id, if any\\n    address registeredAccount = nodePeerIdToAccount[hoprPeerId];\\n    // if the hopr node peer id was linked to a different account, revert.\\n    // To change a nodes' linked account, it must be deregistered by the previously linked account\\n    // first before registering by the new account, to prevent hostile takeover of others' node peer id\\n    require(\\n      registeredAccount == msg.sender || registeredAccount == address(0),\\n      'HoprNetworkRegistry: Cannot link a registered node to a different account'\\n    );\\n\\n    // get multi address associated with the caller, if any\\n    bytes memory registeredNodeMultiaddrInBytes = bytes(accountToNodePeerId[msg.sender]);\\n    require(\\n      registeredNodeMultiaddrInBytes.length == 0 ||\\n        keccak256(registeredNodeMultiaddrInBytes) == keccak256(bytes(hoprPeerId)),\\n      'HoprNetworkRegistry: Cannot link an account to a different node. Please remove the registered node'\\n    );\\n\\n    if (requirementImplementation.isRequirementFulfilled(msg.sender)) {\\n      // only update the list when no record previously exists\\n      if (registeredNodeMultiaddrInBytes.length == 0) {\\n        accountToNodePeerId[msg.sender] = hoprPeerId;\\n        nodePeerIdToAccount[hoprPeerId] = msg.sender;\\n        emit Registered(msg.sender, hoprPeerId);\\n      }\\n      emit EligibilityUpdated(msg.sender, true);\\n      return true;\\n    }\\n\\n    emit EligibilityUpdated(msg.sender, false);\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Allows when there's already a multi address associated with the caller account, remove the link by deregistering\\n   */\\n  function selfDeregister() external mustBeEnabled returns (bool) {\\n    string memory registeredNodeMultiaddr = accountToNodePeerId[msg.sender];\\n    require(bytes(registeredNodeMultiaddr).length > 0, 'HoprNetworkRegistry: Cannot delete an empty entry');\\n    delete accountToNodePeerId[msg.sender];\\n    delete nodePeerIdToAccount[registeredNodeMultiaddr];\\n    emit Deregistered(msg.sender);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Owner adds Ethereum addresses and HOPR node ids to the registration.\\n   * Allows owner to register arbitrary HOPR Addresses even if accounts do not fulfill registration requirements.\\n   * HOPR node peer id validation should be done off-chain.\\n   * @notice It allows owner to overwrite exisitng entries.\\n   * @param accounts Array of Ethereum accounts, e.g. [0xf6A8b267f43998B890857f8d1C9AabC68F8556ee]\\n   * @param hoprPeerIds Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]\\n   */\\n  function ownerRegister(address[] calldata accounts, string[] calldata hoprPeerIds) external onlyOwner mustBeEnabled {\\n    require(hoprPeerIds.length == accounts.length, 'HoprNetworkRegistry: hoprPeerIdes and accounts lengths mismatch');\\n    for (uint256 i = 0; i < accounts.length; i++) {\\n      // validate peer the length and prefix of peer Ids. If invalid, skip.\\n      if (bytes(hoprPeerIds[i]).length == 53 && bytes32(bytes(hoprPeerIds[i])[0:8]) == '16Uiu2HA') {\\n        string memory hoprPeerId = hoprPeerIds[i];\\n        address account = accounts[i];\\n        accountToNodePeerId[account] = hoprPeerId;\\n        nodePeerIdToAccount[hoprPeerId] = account;\\n        emit RegisteredByOwner(account, hoprPeerId);\\n        emit EligibilityUpdated(account, true);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Owner removes previously owner-added Ethereum addresses and HOPR node ids from the registration.\\n   * @notice Owner can even remove self-declared entries.\\n   * @param accounts Array of Ethereum accounts, e.g. 0xf6A8b267f43998B890857f8d1C9AabC68F8556ee\\n   */\\n  function ownerDeregister(address[] calldata accounts) external onlyOwner mustBeEnabled {\\n    for (uint256 i = 0; i < accounts.length; i++) {\\n      address account = accounts[i];\\n      string memory hoprPeerId = accountToNodePeerId[account];\\n      delete accountToNodePeerId[account];\\n      delete nodePeerIdToAccount[hoprPeerId];\\n      // Eligibility update should have a logindex strictly smaller\\n      // than the deregister event to make sure it always gets processed\\n      // before the deregister event\\n      emit EligibilityUpdated(account, false);\\n      emit DeregisteredByOwner(account);\\n    }\\n  }\\n\\n  /**\\n   * @dev Owner syncs a list of addresses with based on the latest criteria.\\n   * @notice If an account hasn't been registered, its eligibility is not going to be updated\\n   * @param accounts Array of Ethereum accounts, e.g. [0xf6A8b267f43998B890857f8d1C9AabC68F8556ee]\\n   */\\n  function sync(address[] calldata accounts) external onlyOwner mustBeEnabled {\\n    for (uint256 i = 0; i < accounts.length; i++) {\\n      address account = accounts[i];\\n      if (bytes(accountToNodePeerId[account]).length == 0) {\\n        // if the account does not have any registered address\\n        continue;\\n      }\\n      if (!requirementImplementation.isRequirementFulfilled(account)) {\\n        // if the account is no longer eligible\\n        emit EligibilityUpdated(account, false);\\n      } else {\\n        emit EligibilityUpdated(account, true);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns if a hopr address is registered and its associated account is eligible or not.\\n   * @param hoprPeerId hopr node peer id\\n   */\\n  function isNodeRegisteredAndEligible(string calldata hoprPeerId) public view returns (bool) {\\n    address account = nodePeerIdToAccount[hoprPeerId];\\n    if (account == address(0)) {\\n      // this address has never been registered\\n      return false;\\n    }\\n    return requirementImplementation.isRequirementFulfilled(account);\\n  }\\n\\n  /**\\n   * @dev Returns if an account address is eligible according to the criteria defined in the implementation\\n   * It also checks if a node peer id is associated with the account.\\n   * @param account account address that runs hopr node\\n   */\\n  function isAccountRegisteredAndEligible(address account) public view returns (bool) {\\n    return bytes(accountToNodePeerId[account]).length != 0 && requirementImplementation.isRequirementFulfilled(account);\\n  }\\n}\\n\",\"keccak256\":\"0xb3a5f595ca76bafb6d44404ca3caddb30fa735984099d2fbe290024759b328ff\",\"license\":\"GPL-3.0\"},\"contracts/IHoprNetworkRegistryRequirement.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IHoprNetworkRegistryRequirement {\\n  function isRequirementFulfilled(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x28d5713841152502b5f324014b2e52ad51274792abed1786120bf18152037c2d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001b9238038062001b92833981016040819052620000349162000147565b6200003f33620000da565b600180546001600160a01b0319166001600160a01b0384161781556004805460ff191690911790556200007281620000da565b6040516001600160a01b038316907f8ac4b2eb7749f75c5b99b898e547fd615dd7a424e68356ea196b7dae742d6c3290600090a26040516001907f3f749856d23f89c3cefe0f1055d280fc302c5d6adb048bc20f5d975239c3049290600090a250506200017f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200014257600080fd5b919050565b600080604083850312156200015b57600080fd5b62000166836200012a565b915062000176602084016200012a565b90509250929050565b611a03806200018f6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063cbebafe011610071578063cbebafe014610233578063cfb3735f1461023b578063d195a75514610243578063e3d2a07114610256578063f2fde38b1461026957600080fd5b8063715018a6146101f45780638da5cb5b146101fc578063af4c4cf71461020d578063c376dcd51461022057600080fd5b80632e6e0318116100de5780632e6e03181461017a57806336e1aa80146101c65780633d3895d8146101d95780635d1c3964146101e157600080fd5b80631365e5d1146101105780631e0d65f114610138578063238dafe01461015857806327b040a114610165575b600080fd5b61012361011e3660046114e3565b61027c565b60405190151581526020015b60405180910390f35b61014b610146366004611555565b6106e2565b60405161012f91906115b5565b6004546101239060ff1681565b610178610173366004611555565b61077c565b005b6101ae6101883660046115fe565b80516020818301810180516003825292820191909301209152546001600160a01b031681565b6040516001600160a01b03909116815260200161012f565b6101786101d43660046116fb565b6107f0565b610123610aa6565b6101236101ef366004611555565b610c45565b610178610cef565b6000546001600160a01b03166101ae565b61012361021b3660046114e3565b610d25565b61017861022e366004611767565b610de9565b610178610fd0565b610178611053565b610178610251366004611767565b61111c565b6001546101ae906001600160a01b031681565b610178610277366004611555565b6112b5565b60045460009060ff166102aa5760405162461bcd60e51b81526004016102a1906117a9565b60405180910390fd5b6035821480156102da57506102c36008600084866117f2565b6102cc9161181c565b67313655697532484160c01b145b6103435760405162461bcd60e51b815260206004820152603460248201527f486f70724e6574776f726b52656769737472793a20484f5052206e6f6465207060448201527319595c881a59081b5d5cdd081899481d985b1a5960621b60648201526084016102a1565b60006003848460405161035792919061183a565b908152604051908190036020019020546001600160a01b031690503381148061038757506001600160a01b038116155b61040b5760405162461bcd60e51b815260206004820152604960248201527f486f70724e6574776f726b52656769737472793a2043616e6e6f74206c696e6b60448201527f20612072656769737465726564206e6f646520746f206120646966666572656e6064820152681d081858d8dbdd5b9d60ba1b608482015260a4016102a1565b33600090815260026020526040812080546104259061184a565b80601f01602080910402602001604051908101604052809291908181526020018280546104519061184a565b801561049e5780601f106104735761010080835404028352916020019161049e565b820191906000526020600020905b81548152906001019060200180831161048157829003601f168201915b505050505090508051600014806104d2575084846040516104c092919061183a565b60405180910390208180519060200120145b6105755760405162461bcd60e51b815260206004820152606260248201527f486f70724e6574776f726b52656769737472793a2043616e6e6f74206c696e6b60448201527f20616e206163636f756e7420746f206120646966666572656e74206e6f64652e60648201527f20506c656173652072656d6f7665207468652072656769737465726564206e6f608482015261646560f01b60a482015260c4016102a1565b6001546040516386ca5f3160e01b81523360048201526001600160a01b03909116906386ca5f319060240160206040518083038186803b1580156105b857600080fd5b505afa1580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f09190611885565b156106ba578051610693573360009081526002602052604090206106159086866113a0565b50336003868660405161062992919061183a565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b03199093169290921790915533907fb3eccf73f39b1c07947c780b2b39df2a1bb058b4037b0a42d0881ca1a028a1329061068a90889088906118a7565b60405180910390a25b60405160019033906000805160206119ae83398151915290600090a36001925050506106dc565b60405160009033906000805160206119ae833981519152908390a36000925050505b92915050565b600260205260009081526040902080546106fb9061184a565b80601f01602080910402602001604051908101604052809291908181526020018280546107279061184a565b80156107745780601f1061074957610100808354040283529160200191610774565b820191906000526020600020905b81548152906001019060200180831161075757829003601f168201915b505050505081565b6000546001600160a01b031633146107a65760405162461bcd60e51b81526004016102a1906118d6565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f8ac4b2eb7749f75c5b99b898e547fd615dd7a424e68356ea196b7dae742d6c3290600090a250565b6000546001600160a01b0316331461081a5760405162461bcd60e51b81526004016102a1906118d6565b60045460ff1661083c5760405162461bcd60e51b81526004016102a1906117a9565b8083146108b15760405162461bcd60e51b815260206004820152603f60248201527f486f70724e6574776f726b52656769737472793a20686f70725065657249646560448201527f7320616e64206163636f756e7473206c656e67746873206d69736d617463680060648201526084016102a1565b60005b83811015610a9f578282828181106108ce576108ce61190b565b90506020028101906108e09190611921565b9050603514801561093657508282828181106108fe576108fe61190b565b90506020028101906109109190611921565b61091f916008916000916117f2565b6109289161181c565b67313655697532484160c01b145b15610a8d57600083838381811061094f5761094f61190b565b90506020028101906109619190611921565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394508992508891508590508181106109ac576109ac61190b565b90506020020160208101906109c19190611555565b6001600160a01b038116600090815260026020908152604090912084519293506109ef929091850190611424565b5080600383604051610a019190611968565b90815260405190819003602001812080546001600160a01b039384166001600160a01b0319909116179055908216907f87b2f82f8766cb6651342bc0a77cfb41521b857c0dd7f38e751c2dfd21820c2390610a5d9085906115b5565b60405180910390a26040516001906001600160a01b038316906000805160206119ae83398151915290600090a350505b80610a9781611984565b9150506108b4565b5050505050565b60045460009060ff16610acb5760405162461bcd60e51b81526004016102a1906117a9565b3360009081526002602052604081208054610ae59061184a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b119061184a565b8015610b5e5780601f10610b3357610100808354040283529160200191610b5e565b820191906000526020600020905b815481529060010190602001808311610b4157829003601f168201915b505050505090506000815111610bd05760405162461bcd60e51b815260206004820152603160248201527f486f70724e6574776f726b52656769737472793a2043616e6e6f742064656c65604482015270746520616e20656d70747920656e74727960781b60648201526084016102a1565b336000908152600260205260408120610be891611498565b600381604051610bf89190611968565b90815260405190819003602001812080546001600160a01b031916905533907fafebd0f81ba8c430fcc0c6a6e7a26fd7f868af9c4e4f19db37a0f16502374fd590600090a2600191505090565b6001600160a01b03811660009081526002602052604081208054610c689061184a565b15801591506106dc57506001546040516386ca5f3160e01b81526001600160a01b038481166004830152909116906386ca5f319060240160206040518083038186803b158015610cb757600080fd5b505afa158015610ccb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190611885565b6000546001600160a01b03163314610d195760405162461bcd60e51b81526004016102a1906118d6565b610d236000611350565b565b60008060038484604051610d3a92919061183a565b908152604051908190036020019020546001600160a01b0316905080610d645760009150506106dc565b6001546040516386ca5f3160e01b81526001600160a01b038381166004830152909116906386ca5f319060240160206040518083038186803b158015610da957600080fd5b505afa158015610dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de19190611885565b949350505050565b6000546001600160a01b03163314610e135760405162461bcd60e51b81526004016102a1906118d6565b60045460ff16610e355760405162461bcd60e51b81526004016102a1906117a9565b60005b81811015610fcb576000838383818110610e5457610e5461190b565b9050602002016020810190610e699190611555565b6001600160a01b038116600090815260026020526040812080549293509091610e919061184a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ebd9061184a565b8015610f0a5780601f10610edf57610100808354040283529160200191610f0a565b820191906000526020600020905b815481529060010190602001808311610eed57829003601f168201915b505050506001600160a01b0384166000908152600260205260408120929350610f34929150611498565b600381604051610f449190611968565b90815260405190819003602001812080546001600160a01b03191690556000906001600160a01b038416906000805160206119ae833981519152908390a36040516001600160a01b038316907fdf4242a03f23b1da0e2e242ff26d4e65922c17a5b1ddd5146277058a9c42fd7690600090a250508080610fc390611984565b915050610e38565b505050565b6000546001600160a01b03163314610ffa5760405162461bcd60e51b81526004016102a1906118d6565b60045460ff1661101c5760405162461bcd60e51b81526004016102a1906117a9565b6004805460ff191690556040516000907f3f749856d23f89c3cefe0f1055d280fc302c5d6adb048bc20f5d975239c30492908290a2565b6000546001600160a01b0316331461107d5760405162461bcd60e51b81526004016102a1906118d6565b60045460ff16156110e15760405162461bcd60e51b815260206004820152602860248201527f486f70724e6574776f726b52656769737472793a20526567697374727920697360448201526708195b98589b195960c21b60648201526084016102a1565b6004805460ff191660019081179091556040517f3f749856d23f89c3cefe0f1055d280fc302c5d6adb048bc20f5d975239c3049290600090a2565b6000546001600160a01b031633146111465760405162461bcd60e51b81526004016102a1906118d6565b60045460ff166111685760405162461bcd60e51b81526004016102a1906117a9565b60005b81811015610fcb5760008383838181106111875761118761190b565b905060200201602081019061119c9190611555565b6001600160a01b03811660009081526002602052604090208054919250906111c39061184a565b151590506111d157506112a3565b6001546040516386ca5f3160e01b81526001600160a01b038381166004830152909116906386ca5f319060240160206040518083038186803b15801561121657600080fd5b505afa15801561122a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124e9190611885565b61127b576040516000906001600160a01b038316906000805160206119ae833981519152908390a36112a1565b6040516001906001600160a01b038316906000805160206119ae83398151915290600090a35b505b806112ad81611984565b91505061116b565b6000546001600160a01b031633146112df5760405162461bcd60e51b81526004016102a1906118d6565b6001600160a01b0381166113445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102a1565b61134d81611350565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546113ac9061184a565b90600052602060002090601f0160209004810192826113ce5760008555611414565b82601f106113e75782800160ff19823516178555611414565b82800160010185558215611414579182015b828111156114145782358255916020019190600101906113f9565b506114209291506114ce565b5090565b8280546114309061184a565b90600052602060002090601f0160209004810192826114525760008555611414565b82601f1061146b57805160ff1916838001178555611414565b82800160010185558215611414579182015b8281111561141457825182559160200191906001019061147d565b5080546114a49061184a565b6000825580601f106114b4575050565b601f01602090049060005260206000209081019061134d91905b5b8082111561142057600081556001016114cf565b600080602083850312156114f657600080fd5b823567ffffffffffffffff8082111561150e57600080fd5b818501915085601f83011261152257600080fd5b81358181111561153157600080fd5b86602082850101111561154357600080fd5b60209290920196919550909350505050565b60006020828403121561156757600080fd5b81356001600160a01b038116811461157e57600080fd5b9392505050565b60005b838110156115a0578181015183820152602001611588565b838111156115af576000848401525b50505050565b60208152600082518060208401526115d4816040850160208701611585565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561161057600080fd5b813567ffffffffffffffff8082111561162857600080fd5b818401915084601f83011261163c57600080fd5b81358181111561164e5761164e6115e8565b604051601f8201601f19908116603f01168101908382118183101715611676576116766115e8565b8160405282815287602084870101111561168f57600080fd5b826020860160208301376000928101602001929092525095945050505050565b60008083601f8401126116c157600080fd5b50813567ffffffffffffffff8111156116d957600080fd5b6020830191508360208260051b85010111156116f457600080fd5b9250929050565b6000806000806040858703121561171157600080fd5b843567ffffffffffffffff8082111561172957600080fd5b611735888389016116af565b9096509450602087013591508082111561174e57600080fd5b5061175b878288016116af565b95989497509550505050565b6000806020838503121561177a57600080fd5b823567ffffffffffffffff81111561179157600080fd5b61179d858286016116af565b90969095509350505050565b60208082526029908201527f486f70724e6574776f726b52656769737472793a20526567697374727920697360408201526808191a5cd8589b195960ba1b606082015260800190565b6000808585111561180257600080fd5b8386111561180f57600080fd5b5050820193919092039150565b803560208310156106dc57600019602084900360031b1b1692915050565b8183823760009101908152919050565b600181811c9082168061185e57607f821691505b6020821081141561187f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561189757600080fd5b8151801515811461157e57600080fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261193857600080fd5b83018035915067ffffffffffffffff82111561195357600080fd5b6020019150368190038213156116f457600080fd5b6000825161197a818460208701611585565b9190910192915050565b60006000198214156119a657634e487b7160e01b600052601160045260246000fd5b506001019056fee2994f8d6f600ad473dba82c0a890ab7affacb860d3365f474baa3dc04a2e557a2646970667358221220af8ee5c39f383a4863fa134f30f574031578078b29bb2d7f4e7b67780a327d3464736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063cbebafe011610071578063cbebafe014610233578063cfb3735f1461023b578063d195a75514610243578063e3d2a07114610256578063f2fde38b1461026957600080fd5b8063715018a6146101f45780638da5cb5b146101fc578063af4c4cf71461020d578063c376dcd51461022057600080fd5b80632e6e0318116100de5780632e6e03181461017a57806336e1aa80146101c65780633d3895d8146101d95780635d1c3964146101e157600080fd5b80631365e5d1146101105780631e0d65f114610138578063238dafe01461015857806327b040a114610165575b600080fd5b61012361011e3660046114e3565b61027c565b60405190151581526020015b60405180910390f35b61014b610146366004611555565b6106e2565b60405161012f91906115b5565b6004546101239060ff1681565b610178610173366004611555565b61077c565b005b6101ae6101883660046115fe565b80516020818301810180516003825292820191909301209152546001600160a01b031681565b6040516001600160a01b03909116815260200161012f565b6101786101d43660046116fb565b6107f0565b610123610aa6565b6101236101ef366004611555565b610c45565b610178610cef565b6000546001600160a01b03166101ae565b61012361021b3660046114e3565b610d25565b61017861022e366004611767565b610de9565b610178610fd0565b610178611053565b610178610251366004611767565b61111c565b6001546101ae906001600160a01b031681565b610178610277366004611555565b6112b5565b60045460009060ff166102aa5760405162461bcd60e51b81526004016102a1906117a9565b60405180910390fd5b6035821480156102da57506102c36008600084866117f2565b6102cc9161181c565b67313655697532484160c01b145b6103435760405162461bcd60e51b815260206004820152603460248201527f486f70724e6574776f726b52656769737472793a20484f5052206e6f6465207060448201527319595c881a59081b5d5cdd081899481d985b1a5960621b60648201526084016102a1565b60006003848460405161035792919061183a565b908152604051908190036020019020546001600160a01b031690503381148061038757506001600160a01b038116155b61040b5760405162461bcd60e51b815260206004820152604960248201527f486f70724e6574776f726b52656769737472793a2043616e6e6f74206c696e6b60448201527f20612072656769737465726564206e6f646520746f206120646966666572656e6064820152681d081858d8dbdd5b9d60ba1b608482015260a4016102a1565b33600090815260026020526040812080546104259061184a565b80601f01602080910402602001604051908101604052809291908181526020018280546104519061184a565b801561049e5780601f106104735761010080835404028352916020019161049e565b820191906000526020600020905b81548152906001019060200180831161048157829003601f168201915b505050505090508051600014806104d2575084846040516104c092919061183a565b60405180910390208180519060200120145b6105755760405162461bcd60e51b815260206004820152606260248201527f486f70724e6574776f726b52656769737472793a2043616e6e6f74206c696e6b60448201527f20616e206163636f756e7420746f206120646966666572656e74206e6f64652e60648201527f20506c656173652072656d6f7665207468652072656769737465726564206e6f608482015261646560f01b60a482015260c4016102a1565b6001546040516386ca5f3160e01b81523360048201526001600160a01b03909116906386ca5f319060240160206040518083038186803b1580156105b857600080fd5b505afa1580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f09190611885565b156106ba578051610693573360009081526002602052604090206106159086866113a0565b50336003868660405161062992919061183a565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b03199093169290921790915533907fb3eccf73f39b1c07947c780b2b39df2a1bb058b4037b0a42d0881ca1a028a1329061068a90889088906118a7565b60405180910390a25b60405160019033906000805160206119ae83398151915290600090a36001925050506106dc565b60405160009033906000805160206119ae833981519152908390a36000925050505b92915050565b600260205260009081526040902080546106fb9061184a565b80601f01602080910402602001604051908101604052809291908181526020018280546107279061184a565b80156107745780601f1061074957610100808354040283529160200191610774565b820191906000526020600020905b81548152906001019060200180831161075757829003601f168201915b505050505081565b6000546001600160a01b031633146107a65760405162461bcd60e51b81526004016102a1906118d6565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f8ac4b2eb7749f75c5b99b898e547fd615dd7a424e68356ea196b7dae742d6c3290600090a250565b6000546001600160a01b0316331461081a5760405162461bcd60e51b81526004016102a1906118d6565b60045460ff1661083c5760405162461bcd60e51b81526004016102a1906117a9565b8083146108b15760405162461bcd60e51b815260206004820152603f60248201527f486f70724e6574776f726b52656769737472793a20686f70725065657249646560448201527f7320616e64206163636f756e7473206c656e67746873206d69736d617463680060648201526084016102a1565b60005b83811015610a9f578282828181106108ce576108ce61190b565b90506020028101906108e09190611921565b9050603514801561093657508282828181106108fe576108fe61190b565b90506020028101906109109190611921565b61091f916008916000916117f2565b6109289161181c565b67313655697532484160c01b145b15610a8d57600083838381811061094f5761094f61190b565b90506020028101906109619190611921565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394508992508891508590508181106109ac576109ac61190b565b90506020020160208101906109c19190611555565b6001600160a01b038116600090815260026020908152604090912084519293506109ef929091850190611424565b5080600383604051610a019190611968565b90815260405190819003602001812080546001600160a01b039384166001600160a01b0319909116179055908216907f87b2f82f8766cb6651342bc0a77cfb41521b857c0dd7f38e751c2dfd21820c2390610a5d9085906115b5565b60405180910390a26040516001906001600160a01b038316906000805160206119ae83398151915290600090a350505b80610a9781611984565b9150506108b4565b5050505050565b60045460009060ff16610acb5760405162461bcd60e51b81526004016102a1906117a9565b3360009081526002602052604081208054610ae59061184a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b119061184a565b8015610b5e5780601f10610b3357610100808354040283529160200191610b5e565b820191906000526020600020905b815481529060010190602001808311610b4157829003601f168201915b505050505090506000815111610bd05760405162461bcd60e51b815260206004820152603160248201527f486f70724e6574776f726b52656769737472793a2043616e6e6f742064656c65604482015270746520616e20656d70747920656e74727960781b60648201526084016102a1565b336000908152600260205260408120610be891611498565b600381604051610bf89190611968565b90815260405190819003602001812080546001600160a01b031916905533907fafebd0f81ba8c430fcc0c6a6e7a26fd7f868af9c4e4f19db37a0f16502374fd590600090a2600191505090565b6001600160a01b03811660009081526002602052604081208054610c689061184a565b15801591506106dc57506001546040516386ca5f3160e01b81526001600160a01b038481166004830152909116906386ca5f319060240160206040518083038186803b158015610cb757600080fd5b505afa158015610ccb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190611885565b6000546001600160a01b03163314610d195760405162461bcd60e51b81526004016102a1906118d6565b610d236000611350565b565b60008060038484604051610d3a92919061183a565b908152604051908190036020019020546001600160a01b0316905080610d645760009150506106dc565b6001546040516386ca5f3160e01b81526001600160a01b038381166004830152909116906386ca5f319060240160206040518083038186803b158015610da957600080fd5b505afa158015610dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de19190611885565b949350505050565b6000546001600160a01b03163314610e135760405162461bcd60e51b81526004016102a1906118d6565b60045460ff16610e355760405162461bcd60e51b81526004016102a1906117a9565b60005b81811015610fcb576000838383818110610e5457610e5461190b565b9050602002016020810190610e699190611555565b6001600160a01b038116600090815260026020526040812080549293509091610e919061184a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ebd9061184a565b8015610f0a5780601f10610edf57610100808354040283529160200191610f0a565b820191906000526020600020905b815481529060010190602001808311610eed57829003601f168201915b505050506001600160a01b0384166000908152600260205260408120929350610f34929150611498565b600381604051610f449190611968565b90815260405190819003602001812080546001600160a01b03191690556000906001600160a01b038416906000805160206119ae833981519152908390a36040516001600160a01b038316907fdf4242a03f23b1da0e2e242ff26d4e65922c17a5b1ddd5146277058a9c42fd7690600090a250508080610fc390611984565b915050610e38565b505050565b6000546001600160a01b03163314610ffa5760405162461bcd60e51b81526004016102a1906118d6565b60045460ff1661101c5760405162461bcd60e51b81526004016102a1906117a9565b6004805460ff191690556040516000907f3f749856d23f89c3cefe0f1055d280fc302c5d6adb048bc20f5d975239c30492908290a2565b6000546001600160a01b0316331461107d5760405162461bcd60e51b81526004016102a1906118d6565b60045460ff16156110e15760405162461bcd60e51b815260206004820152602860248201527f486f70724e6574776f726b52656769737472793a20526567697374727920697360448201526708195b98589b195960c21b60648201526084016102a1565b6004805460ff191660019081179091556040517f3f749856d23f89c3cefe0f1055d280fc302c5d6adb048bc20f5d975239c3049290600090a2565b6000546001600160a01b031633146111465760405162461bcd60e51b81526004016102a1906118d6565b60045460ff166111685760405162461bcd60e51b81526004016102a1906117a9565b60005b81811015610fcb5760008383838181106111875761118761190b565b905060200201602081019061119c9190611555565b6001600160a01b03811660009081526002602052604090208054919250906111c39061184a565b151590506111d157506112a3565b6001546040516386ca5f3160e01b81526001600160a01b038381166004830152909116906386ca5f319060240160206040518083038186803b15801561121657600080fd5b505afa15801561122a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124e9190611885565b61127b576040516000906001600160a01b038316906000805160206119ae833981519152908390a36112a1565b6040516001906001600160a01b038316906000805160206119ae83398151915290600090a35b505b806112ad81611984565b91505061116b565b6000546001600160a01b031633146112df5760405162461bcd60e51b81526004016102a1906118d6565b6001600160a01b0381166113445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102a1565b61134d81611350565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546113ac9061184a565b90600052602060002090601f0160209004810192826113ce5760008555611414565b82601f106113e75782800160ff19823516178555611414565b82800160010185558215611414579182015b828111156114145782358255916020019190600101906113f9565b506114209291506114ce565b5090565b8280546114309061184a565b90600052602060002090601f0160209004810192826114525760008555611414565b82601f1061146b57805160ff1916838001178555611414565b82800160010185558215611414579182015b8281111561141457825182559160200191906001019061147d565b5080546114a49061184a565b6000825580601f106114b4575050565b601f01602090049060005260206000209081019061134d91905b5b8082111561142057600081556001016114cf565b600080602083850312156114f657600080fd5b823567ffffffffffffffff8082111561150e57600080fd5b818501915085601f83011261152257600080fd5b81358181111561153157600080fd5b86602082850101111561154357600080fd5b60209290920196919550909350505050565b60006020828403121561156757600080fd5b81356001600160a01b038116811461157e57600080fd5b9392505050565b60005b838110156115a0578181015183820152602001611588565b838111156115af576000848401525b50505050565b60208152600082518060208401526115d4816040850160208701611585565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561161057600080fd5b813567ffffffffffffffff8082111561162857600080fd5b818401915084601f83011261163c57600080fd5b81358181111561164e5761164e6115e8565b604051601f8201601f19908116603f01168101908382118183101715611676576116766115e8565b8160405282815287602084870101111561168f57600080fd5b826020860160208301376000928101602001929092525095945050505050565b60008083601f8401126116c157600080fd5b50813567ffffffffffffffff8111156116d957600080fd5b6020830191508360208260051b85010111156116f457600080fd5b9250929050565b6000806000806040858703121561171157600080fd5b843567ffffffffffffffff8082111561172957600080fd5b611735888389016116af565b9096509450602087013591508082111561174e57600080fd5b5061175b878288016116af565b95989497509550505050565b6000806020838503121561177a57600080fd5b823567ffffffffffffffff81111561179157600080fd5b61179d858286016116af565b90969095509350505050565b60208082526029908201527f486f70724e6574776f726b52656769737472793a20526567697374727920697360408201526808191a5cd8589b195960ba1b606082015260800190565b6000808585111561180257600080fd5b8386111561180f57600080fd5b5050820193919092039150565b803560208310156106dc57600019602084900360031b1b1692915050565b8183823760009101908152919050565b600181811c9082168061185e57607f821691505b6020821081141561187f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561189757600080fd5b8151801515811461157e57600080fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261193857600080fd5b83018035915067ffffffffffffffff82111561195357600080fd5b6020019150368190038213156116f457600080fd5b6000825161197a818460208701611585565b9190910192915050565b60006000198214156119a657634e487b7160e01b600052601160045260246000fd5b506001019056fee2994f8d6f600ad473dba82c0a890ab7affacb860d3365f474baa3dc04a2e557a2646970667358221220af8ee5c39f383a4863fa134f30f574031578078b29bb2d7f4e7b67780a327d3464736f6c63430008090033",
  "devdoc": {
    "details": "Smart contract that maintains a list of hopr node address (peer id) that are allowed to enter HOPR network. Each peer id is linked with an Ethereum account. Only Ethereum accounts that are eligible according to `IHoprNetworkRegistryRequirement` can register a HOPR node address. If an account wants to change its registerd HOPR node address, it must firstly deregister itself before registering new node. Note that HOPR node address refers to `PeerId.toString()` This network registry can be globally enabled/disabled by the owner Implementation of `IHoprNetworkRegistryRequirement` can also be dynamically updated by the owner. Some sample implementations can be found under../proxy/ folder Owner has the power to overwrite the registration",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_newOwner": "address of the contract owner",
          "_requirementImplementation": "address of the network registry logic implementation"
        }
      },
      "isAccountRegisteredAndEligible(address)": {
        "details": "Returns if an account address is eligible according to the criteria defined in the implementation It also checks if a node peer id is associated with the account.",
        "params": {
          "account": "account address that runs hopr node"
        }
      },
      "isNodeRegisteredAndEligible(string)": {
        "details": "Returns if a hopr address is registered and its associated account is eligible or not.",
        "params": {
          "hoprPeerId": "hopr node peer id"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerDeregister(address[])": {
        "details": "Owner removes previously owner-added Ethereum addresses and HOPR node ids from the registration.",
        "params": {
          "accounts": "Array of Ethereum accounts, e.g. 0xf6A8b267f43998B890857f8d1C9AabC68F8556ee"
        }
      },
      "ownerRegister(address[],string[])": {
        "details": "Owner adds Ethereum addresses and HOPR node ids to the registration. Allows owner to register arbitrary HOPR Addresses even if accounts do not fulfill registration requirements. HOPR node peer id validation should be done off-chain.",
        "params": {
          "accounts": "Array of Ethereum accounts, e.g. [0xf6A8b267f43998B890857f8d1C9AabC68F8556ee]",
          "hoprPeerIds": "Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "selfDeregister()": {
        "details": "Allows when there's already a multi address associated with the caller account, remove the link by deregistering"
      },
      "selfRegister(string)": {
        "details": "Checks if the msg.sender fulfills registration requirement at the calling time, if so, register the EOA with HOPR node peer id. Account can also update its registration status with this function.",
        "params": {
          "hoprPeerId": "Hopr nodes peer id in bytes. e.g. 16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1 hopr node peer id should always start with '16Uiu2HA' (0x3136556975324841) and be of length 53"
        }
      },
      "sync(address[])": {
        "details": "Owner syncs a list of addresses with based on the latest criteria.",
        "params": {
          "accounts": "Array of Ethereum accounts, e.g. [0xf6A8b267f43998B890857f8d1C9AabC68F8556ee]"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateRequirementImplementation(address)": {
        "params": {
          "_requirementImplementation": "address of the network registry logic implementation"
        }
      }
    },
    "title": "HoprNetworkRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Specify NetworkRegistry logic implementation and transfer the ownership enable the network registry on deployment."
      },
      "disableRegistry()": {
        "notice": "Disanable globally the network registry by the owner"
      },
      "enableRegistry()": {
        "notice": "Enable globally the network registry by the owner"
      },
      "ownerDeregister(address[])": {
        "notice": "Owner can even remove self-declared entries."
      },
      "ownerRegister(address[],string[])": {
        "notice": "It allows owner to overwrite exisitng entries."
      },
      "selfRegister(string)": {
        "notice": "It allows msg.sender to update registered node peer id."
      },
      "sync(address[])": {
        "notice": "If an account hasn't been registered, its eligibility is not going to be updated"
      },
      "updateRequirementImplementation(address)": {
        "notice": "Specify NetworkRegistry logic implementation"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 539,
        "contract": "contracts/HoprNetworkRegistry.sol:HoprNetworkRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7654,
        "contract": "contracts/HoprNetworkRegistry.sol:HoprNetworkRegistry",
        "label": "requirementImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IHoprNetworkRegistryRequirement)8501"
      },
      {
        "astId": 7658,
        "contract": "contracts/HoprNetworkRegistry.sol:HoprNetworkRegistry",
        "label": "accountToNodePeerId",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 7662,
        "contract": "contracts/HoprNetworkRegistry.sol:HoprNetworkRegistry",
        "label": "nodePeerIdToAccount",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 7664,
        "contract": "contracts/HoprNetworkRegistry.sol:HoprNetworkRegistry",
        "label": "enabled",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IHoprNetworkRegistryRequirement)8501": {
        "encoding": "inplace",
        "label": "contract IHoprNetworkRegistryRequirement",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}