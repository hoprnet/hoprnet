{
  "address": "0x5df074701a46e34f83cF0Bc18874BB83c34A5BD3",
  "transactionHash": "0xcd8a3ca1b915558ba73b8c2644190433b8248fc3fad8db35da4c0f56c7efca79",
  "blockNumber": 7309853,
  "metadata": {
    "solcVersion": "0.8.9",
    "input": {
      "language": "Solidity",
      "sources": {
        "contracts/HoprChannels.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/utils/Multicall.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC1820Implementer.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract HoprChannels is IERC777Recipient, ERC1820Implementer, Multicall {\n    using SafeERC20 for IERC20;\n\n    // required by ERC1820 spec\n    IERC1820Registry internal constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n    // required by ERC777 spec\n    bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\n    // used by {tokensReceived} to distinguish which function to call after tokens are sent\n    uint256 public immutable FUND_CHANNEL_MULTI_SIZE = abi.encode(address(0), address(0), uint256(0), uint256(0)).length;\n\n    /**\n     * @dev Possible channel states.\n     *\n     *         finalizeChannelClosure()    +----------------------+\n     *              (After delay)          |                      | initiateChannelClosure()\n     *                    +----------------+   Pending To Close   |<-----------------+\n     *                    |                |                      |                  |\n     *                    |                +----------------------+                  |\n     *                    |                              ^                           |\n     *                    |                              |                           |\n     *                    |                              |  initiateChannelClosure() |\n     *                    |                              |  (If not committed)       |\n     *                    v                              |                           |\n     *             +------------+                        +-+                    +----+-----+\n     *             |            |                          |                    |          |\n     *             |   Closed   +--------------------------+--------------------+   Open   |\n     *             |            |    tokensReceived()      |                    |          |\n     *             +------+-----+ (If already committed) +-+                    +----------+\n     *                    |                              |                           ^\n     *                    |                              |                           |\n     *                    |                              |                           |\n     *   tokensReceived() |                              |                           | bumpChannel()\n     *                    |              +---------------+------------+              |\n     *                    |              |                            |              |\n     *                    +--------------+   Waiting For Commitment   +--------------+\n     *                                   |                            |\n     *                                   +----------------------------+\n     */\n    enum ChannelStatus { CLOSED, WAITING_FOR_COMMITMENT, OPEN, PENDING_TO_CLOSE }\n\n    /**\n     * @dev A channel struct, used to represent a channel's state\n     */\n    struct Channel {\n        uint256 balance;\n        bytes32 commitment;\n        uint256 ticketEpoch;\n        uint256 ticketIndex;\n        ChannelStatus status;\n        uint256 channelEpoch;\n        // the time when the channel can be closed - NB: overloads at year >2105\n        uint32 closureTime;\n    }\n\n    /**\n     * @dev Stored publicKeys keyed by their address\n     */\n    mapping(address => bytes) public publicKeys;\n\n    /**\n     * @dev Stored channels keyed by their channel ids\n     */\n    mapping(bytes32 => Channel) public channels;\n\n    /**\n     * @dev HoprToken, the token that will be used to settle payments\n     */\n    IERC20 public immutable token;\n\n    /**\n     * @dev Seconds it takes until we can finalize channel closure once,\n     * channel closure has been initialized.\n     */\n    uint32 public immutable secsClosure;\n\n    /**\n     * Emitted on every channel state change.\n     */\n    event ChannelUpdated(\n        address indexed source,\n        address indexed destination,\n        Channel newState\n    );\n\n    /**\n     * Emitted once an account announces.\n     */\n    event Announcement(\n        address indexed account,\n        bytes publicKey,\n        bytes multiaddr\n    );\n\n    /**\n     * Emitted once a channel if funded.\n     */\n    event ChannelFunded(\n        address indexed funder,\n        address indexed source,\n        address indexed destination,\n        uint256 amount\n    );\n\n    /**\n     * Emitted once a channel is opened.\n     */\n    event ChannelOpened(\n        address indexed source,\n        address indexed destination\n    );\n\n    /**\n     * Emitted once bumpChannel is called.\n     */\n    event ChannelBumped(\n        address indexed source,\n        address indexed destination,\n        bytes32 newCommitment,\n        uint256 ticketEpoch,\n        uint256 channelBalance\n    );\n\n    /**\n     * Emitted once a channel closure is initialized.\n     */\n    event ChannelClosureInitiated(\n        address indexed source,\n        address indexed destination,\n        uint32 closureInitiationTime\n    );\n\n    /**\n     * Emitted once a channel closure is finalized.\n     */\n    event ChannelClosureFinalized(\n        address indexed source,\n        address indexed destination,\n        uint32 closureFinalizationTime,\n        uint256 channelBalance\n    );\n\n    /**\n     * Emitted once a ticket is redeemed.\n     */\n    event TicketRedeemed(\n        address indexed source,\n        address indexed destination,\n        bytes32 nextCommitment,\n        uint256 ticketEpoch,\n        uint256 ticketIndex,\n        bytes32 proofOfRelaySecret,\n        uint256 amount,\n        uint256 winProb,\n        bytes signature\n    );\n\n    /**\n     * @param _token HoprToken address\n     * @param _secsClosure seconds until a channel can be closed\n     */\n    constructor(address _token, uint32 _secsClosure) {\n        require(_token != address(0), \"token must not be empty\");\n\n        token = IERC20(_token);\n        secsClosure = _secsClosure;\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n    }\n\n    /**\n    * Assert that source and destination are good addresses, and distinct.\n    */\n    modifier validateSourceAndDest(address source, address destination) {\n      require(source != destination, \"source and destination must not be the same\");\n      require(source != address(0), \"source must not be empty\");\n      require(destination != address(0), \"destination must not be empty\");\n      _;\n    }\n\n    /**\n     * @dev Announces msg.sender's publicKey and multiaddress.\n     * Multiaddress confirmation should be done off-chain,\n     * peer id in the multiaddr is discarded in favour of the pubkey derived one.\n     * @param publicKey the msg.sender's public key\n     * @param multiaddr the multiaddress\n     */\n    function announce(bytes calldata publicKey, bytes calldata multiaddr) external {\n        require(address(uint160(uint256(keccak256(publicKey)))) == msg.sender, \"publicKey's address does not match senders\");\n        publicKeys[msg.sender] = publicKey;\n        emit Announcement(msg.sender, publicKey, multiaddr);\n    }\n\n    /**\n     * @dev Funds channels, in both directions, between 2 parties.\n     * then emits {ChannelUpdated} event, for each channel.\n     * @param account1 the address of account1\n     * @param account2 the address of account2\n     * @param amount1 amount to fund account1\n     * @param amount2 amount to fund account2\n     */\n    function fundChannelMulti(\n        address account1,\n        address account2,\n        uint256 amount1,\n        uint256 amount2\n    ) external {\n        require(amount1 + amount2 > 0, \"amount must be greater than 0\");\n\n        // fund channel in direction of: account1 -> account2\n        if (amount1 > 0){\n          _fundChannel(msg.sender, account1, account2, amount1);\n        }\n        // fund channel in direction of: account2 -> account1\n        if (amount2 > 0){\n          _fundChannel(msg.sender, account2, account1, amount2);\n        }\n\n        // pull tokens from funder\n        token.transferFrom(msg.sender, address(this), amount1 + amount2);\n    }\n\n    /**\n    * @dev redeem a ticket.\n    * If the sender has a channel to the source, the amount will be transferred\n    * to that channel, otherwise it will be sent to their address directly.\n    * @param source the source of the ticket\n    * @param nextCommitment the commitment that hashes to the redeemers previous commitment\n    * @param proofOfRelaySecret the proof of relay secret\n    * @param winProb the winning probability of the ticket\n    * @param amount the amount in the ticket\n    * @param signature signature\n    */\n    function redeemTicket(\n        address source,\n        bytes32 nextCommitment,\n        uint256 ticketEpoch,\n        uint256 ticketIndex,\n        bytes32 proofOfRelaySecret,\n        uint256 amount,\n        uint256 winProb,\n        bytes memory signature\n    ) external validateSourceAndDest(source, msg.sender) {\n        require(nextCommitment != bytes32(0), \"nextCommitment must not be empty\");\n        require(amount != uint256(0), \"amount must not be empty\");\n        (, Channel storage spendingChannel) = _getChannel(\n            source,\n            msg.sender\n        );\n        require(spendingChannel.status == ChannelStatus.OPEN || spendingChannel.status == ChannelStatus.PENDING_TO_CLOSE, \"spending channel must be open or pending to close\");\n        require(spendingChannel.commitment == keccak256(abi.encodePacked(nextCommitment)), \"commitment must be hash of next commitment\");\n        require(spendingChannel.ticketEpoch == ticketEpoch, \"ticket epoch must match\");\n        require(spendingChannel.ticketIndex < ticketIndex, \"redemptions must be in order\");\n\n        bytes32 ticketHash = ECDSA.toEthSignedMessageHash(\n            keccak256(\n              _getEncodedTicket(\n                  msg.sender,\n                  spendingChannel.ticketEpoch,\n                  proofOfRelaySecret,\n                  spendingChannel.channelEpoch,\n                  amount,\n                  ticketIndex,\n                  winProb\n              )\n            )\n        );\n\n        require(ECDSA.recover(ticketHash, signature) == source, \"signer must match the counterparty\");\n        require(\n            _getTicketLuck(\n                ticketHash,\n                nextCommitment,\n                proofOfRelaySecret\n            ) <= winProb,\n            \"ticket must be a win\"\n        );\n\n          spendingChannel.ticketIndex = ticketIndex;\n          spendingChannel.commitment = nextCommitment;\n          spendingChannel.balance = spendingChannel.balance - amount;\n          (, Channel storage earningChannel) = _getChannel(\n              msg.sender,\n              source\n          );\n\n          emit ChannelUpdated(source, msg.sender, spendingChannel);\n          emit TicketRedeemed(source, msg.sender, nextCommitment, ticketEpoch, ticketIndex, proofOfRelaySecret, amount, winProb, signature);\n\n          if (earningChannel.status == ChannelStatus.OPEN) {\n            earningChannel.balance = earningChannel.balance + amount;\n            emit ChannelUpdated(msg.sender, source, earningChannel);\n          } else {\n            token.transfer(msg.sender, amount);\n          }\n    }\n\n\n    /**\n     * @dev Initialize channel closure.\n     * When a channel owner (the 'source' of the channel) wants to 'cash out',\n     * they must notify the counterparty (the 'destination') that they will do\n     * so, and provide enough time for them to redeem any outstanding tickets\n     * before-hand. This notice period is called the 'cool-off' period.\n     * The channel 'destination' should be monitoring blockchain events, thus\n     * they should be aware that the closure has been triggered, as this\n     * method triggers a {ChannelUpdated} and an {ChannelClosureInitiated} event.\n     * After the cool-off period expires, the 'source' can call\n     * 'finalizeChannelClosure' which withdraws the stake.\n     * @param destination the address of the destination\n     */\n    function initiateChannelClosure(\n        address destination\n    ) external validateSourceAndDest(msg.sender, destination) {\n        (, Channel storage channel) = _getChannel(msg.sender, destination);\n        require(channel.status == ChannelStatus.OPEN || channel.status == ChannelStatus.WAITING_FOR_COMMITMENT, \"channel must be open or waiting for commitment\");\n        channel.closureTime = _currentBlockTimestamp() + secsClosure;\n        channel.status = ChannelStatus.PENDING_TO_CLOSE;\n        emit ChannelUpdated(msg.sender, destination, channel);\n        emit ChannelClosureInitiated(msg.sender, destination, _currentBlockTimestamp());\n    }\n\n    /**\n     * @dev Finalize the channel closure, if cool-off period\n     * is over it will close the channel and transfer funds\n     * to the sender. Then emits {ChannelUpdated} and the\n     * {ChannelClosureFinalized} event.\n     * @param destination the address of the counterparty\n     */\n    function finalizeChannelClosure(\n        address destination\n    ) external validateSourceAndDest(msg.sender, destination) {\n        (, Channel storage channel) = _getChannel(msg.sender, destination);\n        require(channel.status == ChannelStatus.PENDING_TO_CLOSE, \"channel must be pending to close\");\n        require(channel.closureTime < _currentBlockTimestamp(), \"closureTime must be before now\");\n        uint256 amountToTransfer = channel.balance;\n        emit ChannelClosureFinalized(msg.sender, destination, channel.closureTime, channel.balance);\n        delete channel.balance;\n        delete channel.closureTime;\n        channel.status = ChannelStatus.CLOSED;\n        emit ChannelUpdated(msg.sender, destination, channel);\n\n        if (amountToTransfer > 0) {\n          token.transfer(msg.sender, amountToTransfer);\n        }\n\n    }\n\n    /**\n    * @dev Request a channelEpoch bump, so we can make a new set of\n    * commitments\n    * Implies that msg.sender is the destination of the channel.\n    * @param source the address of the channel source\n    * @param newCommitment, a secret derived from this new commitment\n    */\n    function bumpChannel(\n      address source,\n      bytes32 newCommitment\n    ) external validateSourceAndDest(source, msg.sender) {\n        (, Channel storage channel) = _getChannel(\n            source,\n            msg.sender\n        );\n\n        require(newCommitment != bytes32(0), \"Cannot set empty commitment\");\n        channel.commitment = newCommitment;\n        channel.ticketEpoch = channel.ticketEpoch + 1;\n        if (channel.status == ChannelStatus.WAITING_FOR_COMMITMENT){\n          channel.status = ChannelStatus.OPEN;\n        }\n        emit ChannelUpdated(source, msg.sender, channel);\n        emit ChannelBumped(source, msg.sender, newCommitment, channel.ticketEpoch, channel.balance);\n    }\n\n    /**\n     * A hook triggered when HOPR tokens are sent to this contract.\n     *\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        // solhint-disable-next-line no-unused-vars\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        // solhint-disable-next-line no-unused-vars\n        bytes calldata operatorData\n    ) external override {\n        require(msg.sender == address(token), \"caller must be HoprToken\");\n        require(to == address(this), \"must be sending tokens to HoprChannels\");\n\n        // must be one of our supported functions\n        if (userData.length == FUND_CHANNEL_MULTI_SIZE) {\n            address account1;\n            address account2;\n            uint256 amount1;\n            uint256 amount2;\n\n            (account1, account2, amount1, amount2) = abi.decode(userData, (address, address, uint256, uint256));\n            require(amount == amount1 + amount2, \"amount sent must be equal to amount specified\");\n\n            // fund channel in direction of: account1 -> account2\n            if (amount1 > 0){\n                _fundChannel(from, account1, account2, amount1);\n            }\n            // fund channel in direction of: account2 -> account1\n            if (amount2 > 0){\n                _fundChannel(from, account2, account1, amount2);\n            }\n        }\n    }\n\n    // internal code\n\n    /**\n     * @dev Funds a channel, then emits\n     * {ChannelUpdated} event.\n     * @param source the address of the channel source\n     * @param dest the address of the channel destination\n     * @param amount amount to fund account1\n     */\n    function _fundChannel(\n        address funder,\n        address source,\n        address dest,\n        uint256 amount\n    ) internal validateSourceAndDest(source, dest) {\n        require(amount > 0, \"amount must be greater than 0\");\n        require(publicKeys[source].length != 0, \"source has not announced\");\n        require(publicKeys[dest].length != 0, \"destination has not announced\");\n\n        (, Channel storage channel) = _getChannel(source, dest);\n        require(channel.status != ChannelStatus.PENDING_TO_CLOSE, \"Cannot fund a closing channel\");\n        if (channel.status == ChannelStatus.CLOSED) {\n          // We are reopening the channel\n          channel.channelEpoch = channel.channelEpoch + 1;\n          channel.ticketEpoch = 0; // As we've incremented the channel epoch, we can restart the ticket counter\n          channel.ticketIndex = 0;\n\n          if (channel.commitment != bytes32(0)) {\n            channel.status = ChannelStatus.OPEN;\n            emit ChannelOpened(source, dest);\n          } else {\n            channel.status = ChannelStatus.WAITING_FOR_COMMITMENT;\n          }\n        }\n\n        channel.balance = channel.balance + amount;\n        emit ChannelUpdated(source, dest, channel);\n        emit ChannelFunded(funder, source, dest, amount);\n    }\n\n\n    /**\n     * @param source source\n     * @param destination destination\n     * @return a tuple of channelId, channel\n     */\n    function _getChannel(address source, address destination)\n        internal\n        view\n        returns (\n            bytes32,\n            Channel storage\n        )\n    {\n        bytes32 channelId = _getChannelId(source, destination);\n        Channel storage channel = channels[channelId];\n        return (channelId, channel);\n    }\n\n    /**\n     * @param source the address of source\n     * @param destination the address of destination\n     * @return the channel id \n     */\n    function _getChannelId(address source, address destination) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(source, destination));\n    }\n\n    /**\n     * @return the current timestamp\n     */\n    function _currentBlockTimestamp() internal view returns (uint32) {\n        // solhint-disable-next-line\n        return uint32(block.timestamp);\n    }\n\n    /**\n     * Uses the response to recompute the challenge. This is done\n     * by multiplying the base point of the curve with the given response.\n     * Due to the lack of embedded ECMUL functionality in the current\n     * version of the EVM, this is done by misusing the `ecrecover` \n     * functionality. `ecrecover` performs the point multiplication and \n     * converts the output to an Ethereum address (sliced hash of the product\n     * of base point and scalar).\n     * See https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384\n     * @param response response that is used to recompute the challenge\n     */\n    function _computeChallenge(bytes32 response) internal pure returns (address)  {\n        // Field order of the base field\n        uint256 FIELD_ORDER = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\n\n        require(0 < uint256(response), \"Invalid response. Value must be within the field\");\n        require(uint256(response) < FIELD_ORDER, \"Invalid response. Value must be within the field\");\n\n        // x-coordinate of the base point\n        uint256 gx = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798;\n        // y-coordinate of base-point is even, so v is 27\n        uint8 gv = 27;\n\n        address signer = ecrecover(0, gv, bytes32(gx), bytes32(mulmod(uint256(response), gx, FIELD_ORDER)));\n\n        return signer;\n    }\n    /**\n     * @dev Encode ticket data\n     * @return bytes\n     */\n    function _getEncodedTicket(\n        address recipient,\n        uint256 recipientCounter,\n        bytes32 proofOfRelaySecret,\n        uint256 channelEpoch,\n        uint256 amount,\n        uint256 ticketIndex,\n        uint256 winProb\n    ) internal pure returns (bytes memory) {\n        address challenge = _computeChallenge(proofOfRelaySecret);\n\n        return abi.encodePacked(\n            recipient,\n            challenge,\n            recipientCounter,\n            amount,\n            winProb,\n            ticketIndex,\n            channelEpoch\n        );\n    }\n    \n    /**\n     * @dev Get the ticket's \"luck\" by\n     * hashing provided values.\n     * @return luck\n     */\n    function _getTicketLuck(\n        bytes32 ticketHash,\n        bytes32 nextCommitment,\n        bytes32 proofOfRelaySecret\n    ) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(ticketHash, nextCommitment, proofOfRelaySecret)));\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Multicall.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Multicall.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\nabstract contract Multicall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     */\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Registry.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the global ERC1820 Registry, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n * implementers for interfaces in this registry, as well as query support.\n *\n * Implementers may be shared by multiple accounts, and can also implement more\n * than a single interface for each account. Contracts can implement interfaces\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\n * contract.\n *\n * {IERC165} interfaces can also be queried via the registry.\n *\n * For an in-depth explanation and source code analysis, see the EIP text.\n */\ninterface IERC1820Registry {\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(\n        address account,\n        bytes32 _interfaceHash,\n        address implementer\n    ) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     */\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     * @param account Address of the contract for which to update the cache.\n     * @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     * @notice Checks whether a contract implements an ERC165 interface or not.\n     * If the result is not cached a direct lookup on the contract address is performed.\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     * {updateERC165Cache} with the contract address.\n     * @param account Address of the contract to check.\n     * @param interfaceId ERC165 interface to check.\n     * @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n     * @param account Address of the contract to check.\n     * @param interfaceId ERC165 interface to check.\n     * @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/ERC1820Implementer.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC1820Implementer.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1820Implementer.sol\";\n\n/**\n * @dev Implementation of the {IERC1820Implementer} interface.\n *\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\n * declare their willingness to be implementers.\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\n * registration to be complete.\n */\ncontract ERC1820Implementer is IERC1820Implementer {\n    bytes32 private constant _ERC1820_ACCEPT_MAGIC = keccak256(\"ERC1820_ACCEPT_MAGIC\");\n\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account)\n        public\n        view\n        virtual\n        override\n        returns (bytes32)\n    {\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\n    }\n\n    /**\n     * @dev Declares the contract as willing to be an implementer of\n     * `interfaceHash` for `account`.\n     *\n     * See {IERC1820Registry-setInterfaceImplementer} and\n     * {IERC1820Registry-interfaceHash}.\n     */\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\n        _supportedInterfaces[interfaceHash][account] = true;\n    }\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Address.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/IERC1820Implementer.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Implementer.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface for an ERC1820 implementer, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\n * Used by contracts that will be registered as implementers in the\n * {IERC1820Registry}.\n */\ninterface IERC1820Implementer {\n    /**\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\n     * implements `interfaceHash` for `account`.\n     *\n     * See {IERC1820Registry-setInterfaceImplementer}.\n     */\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\n}\n"
        },
        "@openzeppelin/contracts/utils/Strings.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
        },
        "contracts/mocks/ChannelsMock.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8;\n\nimport \"../HoprChannels.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract ChannelsMock is HoprChannels {\n    constructor(address _token, uint32 _secsClosure)\n    HoprChannels(_token, _secsClosure) {}\n\n    function getChannelIdInternal(\n        address partyA,\n        address partyB\n    ) external pure returns (bytes32) {\n        return _getChannelId(partyA, partyB);\n    }\n\n    function getEncodedTicketInternal(\n        address recipient,\n        uint256 recipientCounter,\n        bytes32 proofOfRelaySecret,\n        uint256 channelIteration,\n        uint256 amount,\n        uint256 ticketIndex,\n        uint256 winProb\n    ) external pure returns (bytes memory) {\n        return _getEncodedTicket(recipient, recipientCounter, proofOfRelaySecret, channelIteration, amount, ticketIndex, winProb);\n    }\n\n    function getTicketLuckInternal(\n        bytes32 ticketHash,\n        bytes32 secretPreImage,\n        bytes32 proofOfRelaySecret\n    ) external pure returns (uint256) {\n        return _getTicketLuck(ticketHash, secretPreImage, proofOfRelaySecret);\n    }\n\n    function getTicketHashInternal(\n        address recipient,\n        uint256 recipientCounter,\n        bytes32 proofOfRelaySecret,\n        uint256 channelIteration,\n        uint256 amount,\n        uint256 ticketIndex,\n        uint256 winProb\n    ) external pure returns (bytes32) {\n        return ECDSA.toEthSignedMessageHash(\n            keccak256(_getEncodedTicket(recipient, recipientCounter, proofOfRelaySecret, channelIteration, amount, ticketIndex, winProb))\n        );\n    }\n\n    function computeChallengeInternal(bytes32 response) external pure returns (address) {\n        return _computeChallenge(response);\n    }\n}\n"
        },
        "@openzeppelin/contracts/access/AccessControl.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts/access/IAccessControl.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
        },
        "@openzeppelin/contracts/utils/Context.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
        },
        "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
        },
        "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
        },
        "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
        },
        "contracts/stake/HoprBoost.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/access/AccessControlEnumerable.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\nimport './IHoprBoost.sol';\nimport '../utils/EnumerableStringSet.sol';\n\n/**\n *\n */\ncontract HoprBoost is IHoprBoost, AccessControlEnumerable, ERC721URIStorage, ERC721Enumerable, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n  using EnumerableStringSet for EnumerableStringSet.StringSet;\n\n  bytes32 public constant MINTER_ROLE = keccak256('MINTER_ROLE');\n\n  string private _baseTokenURI;\n  EnumerableStringSet.StringSet private _boostType;\n  mapping(uint256 => uint256) private _boostNumerator; // tokenId => boost factor numerator\n  mapping(uint256 => uint256) private _redeemDeadline; // tokenId => deadline for redeeming a boost\n  mapping(uint256 => uint256) private _boostTypeIndexOfId; // tokenId => boost type index\n\n  event BoostMinted(uint256 indexed boostTypeIndex, uint256 indexed boostNumerator, uint256 indexed redeemDeadline);\n\n  /**\n   * @dev Set a new admin role. Set the new admin as a minter. Provide name and symbol for ERC721.\n   * Update the ``_baseTokenURI``.\n   * @param newAdmin address Address of the new admin account\n   */\n  constructor(address newAdmin, string memory baseTokenURI) ERC721('HOPR Boost NFT', 'HOPR Boost') {\n    _baseTokenURI = baseTokenURI;\n    _setupRole(DEFAULT_ADMIN_ROLE, newAdmin);\n    _setupRole(MINTER_ROLE, newAdmin);\n  }\n\n  /**\n   * @dev Returns the boost factor and the redeem deadline associated with ``tokenId``.\n   * @param tokenId uint256 token Id of the boost.\n   */\n  function boostOf(uint256 tokenId) external view override returns (uint256, uint256) {\n    return (_boostNumerator[tokenId], _redeemDeadline[tokenId]);\n  }\n\n  /**\n   * @dev Returns the boost type index associated with ``tokenId``.\n   * @param tokenId uint256 token Id of the boost.\n   */\n  function typeIndexOf(uint256 tokenId) external view override returns (uint256) {\n    return _boostTypeIndexOfId[tokenId];\n  }\n\n  /**\n   * @dev Returns the boost type associated with ``tokenId``.\n   * @param tokenId uint256 token Id of the boost.\n   */\n  function typeOf(uint256 tokenId) external view override returns (string memory) {\n    return _boostType.at(_boostTypeIndexOfId[tokenId]);\n  }\n\n  /**\n   * @dev Returns the boost type name associated with ``typeIndex``.\n   * @param typeIndex uint256 Index of the type.\n   */\n  function typeAt(uint256 typeIndex) external view returns (string memory) {\n    return _boostType.at(typeIndex);\n  }\n\n  /**\n   * @dev Admin can update the new base URI at any time.\n   * @param baseTokenURI string Basic URI of the token.\n   */\n  function updateBaseURI(string memory baseTokenURI) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _baseTokenURI = baseTokenURI;\n  }\n\n  /**\n   * @dev Minter creates a new token for `to`. Its token ID will be automatically\n   * assigned based on current `totalSupply`. (and available on the emitted {IERC721-Transfer} event).\n   * Provide boost factor, boost type and boost rank. If needed, register a new class of boost,\n   * with its \"type\", \"rank\" and \"boost factor (numerator)\"\n   * The token URI is generated based on the base URI, boostType and boostRank.\n   * @param to address Address of token holder that will receive the NFT token of the given \"type\"\n   * @param boostType string Type of the boost\n   * @param boostRank string Rank of the boost\n   * @param boostNumerator uint256 Numerator of the boost factor. Its denominator is 1e12.\n   * @param redeemDeadline uint256 Deadline for redeem a boost. Epoch Unix Timestamp.\n   */\n  function mint(\n    address to,\n    string memory boostType,\n    string memory boostRank,\n    uint256 boostNumerator,\n    uint256 redeemDeadline\n  ) external onlyRole(MINTER_ROLE) {\n    // register boost type in the smart contract\n    _boostType.add(boostType);\n    uint256 boostTypeIndex = _boostType.indexOf(boostType);\n    string memory _tokenURI = string(abi.encodePacked(boostType, '/', boostRank));\n\n    _mintBoost(to, boostNumerator, redeemDeadline, boostTypeIndex, _tokenURI);\n\n    emit BoostMinted(boostTypeIndex, boostNumerator, redeemDeadline);\n  }\n\n  /**\n   * @dev Minter creates new tokens for `to` array. Its token ID will be automatically\n   * assigned based on current `totalSupply`. (and available on the emitted {IERC721-Transfer} event).\n   * Provide boost factor, boost type and boost rank. If needed, register a new class of boost,\n   * with its \"type\", \"rank\" and \"boost factor (numerator)\"\n   * The token URI is generated based on the base URI, boostType and boostRank.\n   * @param to address[] Addresses of token holder that will receive the NFT token of the given \"type\"\n   * @param boostType string Type of the boost\n   * @param boostRank string Rank of the boost\n   * @param boostNumerator uint256 Numerator of the boost factor. Its denominator is 1e12.\n   * @param redeemDeadline uint256 Deadline for redeem a boost. Epoch Unix Timestamp\n   */\n  function batchMint(\n    address[] calldata to,\n    string calldata boostType,\n    string calldata boostRank,\n    uint256 boostNumerator,\n    uint256 redeemDeadline\n  ) external onlyRole(MINTER_ROLE) {\n    // register boost type in the smart contract\n    _boostType.add(boostType);\n    uint256 boostTypeIndex = _boostType.indexOf(boostType);\n    string memory _tokenURI = string(abi.encodePacked(boostType, '/', boostRank));\n\n    for (uint256 index = 0; index < to.length; index++) {\n      _mintBoost(to[index], boostNumerator, redeemDeadline, boostTypeIndex, _tokenURI);\n    }\n\n    emit BoostMinted(boostTypeIndex, boostNumerator, redeemDeadline);\n  }\n\n  /**\n   * @dev Reclaim any ERC20 token being accidentally sent to the contract.\n   * @param tokenAddress address ERC20 token address.\n   */\n  function reclaimErc20Tokens(address tokenAddress) external onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\n    IERC20(tokenAddress).safeTransfer(_msgSender(), IERC20(tokenAddress).balanceOf(address(this)));\n  }\n\n  /**\n   * @dev Reclaim any ERC721 token being accidentally sent to the contract.\n   * @param tokenAddress address ERC721 token address.\n   */\n  function reclaimErc721Tokens(address tokenAddress, uint256 tokenId)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n    nonReentrant\n  {\n    IERC721(tokenAddress).transferFrom(address(this), _msgSender(), tokenId);\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(IERC165, AccessControlEnumerable, ERC721, ERC721Enumerable)\n    returns (bool)\n  {\n    return interfaceId == type(IHoprBoost).interfaceId || super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Inherit tokenURI from {ERC721} and {ERC721URIStorage}\n   */\n  function tokenURI(uint256 tokenId)\n    public\n    view\n    override(IERC721Metadata, ERC721, ERC721URIStorage)\n    returns (string memory)\n  {\n    return super.tokenURI(tokenId);\n  }\n\n  /**\n   * @dev Inherit _baseURI from {ERC721} and {ERC721URIStorage}\n   */\n  function _baseURI() internal view override returns (string memory) {\n    return _baseTokenURI;\n  }\n\n  /**\n   * @dev Inherit _baseURI from {ERC721} and {ERC721Enumerable}\n   */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal virtual override(ERC721, ERC721Enumerable) {\n    super._beforeTokenTransfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev Cannot burn the NFT token\n   */\n  function _burn(uint256 tokenId) internal virtual override(ERC721, ERC721URIStorage) {}\n\n  /**\n   * @dev Mint token. Generate token URI and save its URI.\n   * @param to address Address of token holder\n   * @param boostNumerator uint256 Numerator of the boost factor. Its denominator is 1e12.\n   * @param redeemDeadline uint256 Deadline for redeem a boost. Epoch Unix Timestamp\n   * @param boostTypeIndex uint256 Index of the boost type.\n   * @param _tokenURI string URI of the boost.\n   */\n  function _mintBoost(\n    address to,\n    uint256 boostNumerator,\n    uint256 redeemDeadline,\n    uint256 boostTypeIndex,\n    string memory _tokenURI\n  ) private {\n    // create token\n    uint256 tokenId = totalSupply();\n    _mint(to, tokenId);\n    // save boost factor numerator\n    _boostNumerator[tokenId] = boostNumerator;\n    // save redeem deadline\n    _redeemDeadline[tokenId] = redeemDeadline;\n    // save boost type id\n    _boostTypeIndexOfId[tokenId] = boostTypeIndex;\n    // save tokenURI\n    _setTokenURI(tokenId, _tokenURI);\n  }\n}\n"
        },
        "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
        },
        "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
        },
        "contracts/stake/IHoprBoost.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IHoprBoost is IERC721Metadata {\n  /**\n   * @dev Returns the boost factor and the redeem deadline associated with ``tokenId``.\n   * @param tokenId uint256 token Id of the boost.\n   */\n  function boostOf(uint256 tokenId) external view returns (uint256, uint256);\n\n  /**\n   * @dev Returns the boost type associated with ``tokenId``.\n   * @param tokenId uint256 token Id of the boost.\n   */\n  function typeOf(uint256 tokenId) external view returns (string memory);\n\n  /**\n   * @dev Returns the boost type index associated with ``tokenId``.\n   * @param tokenId uint256 token Id of the boost.\n   */\n  function typeIndexOf(uint256 tokenId) external view returns (uint256);\n}\n"
        },
        "contracts/utils/EnumerableStringSet.sol": {
          "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Adapted from OpenZeppelin's EnumerableSet library, for string type.\n */\nlibrary EnumerableStringSet {\n  struct StringSet {\n    // Storage of set values\n    string[] _values;\n    // Position of the value in the `values` array, plus 1 because index 0\n    // means a value is not in the set.\n    mapping(string => uint256) _indexes;\n  }\n\n  event SetCreated(uint256 indexed typeIndex);\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(StringSet storage set, string memory value) internal returns (bool) {\n    if (!contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._indexes[value] = set._values.length;\n      emit SetCreated(set._indexes[value]);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(StringSet storage set, string memory value) internal view returns (bool) {\n    return set._indexes[value] != 0;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   */\n  function at(StringSet storage set, uint256 index) internal view returns (string memory) {\n    return set._values[index - 1];\n  }\n\n  /**\n   * @dev Returns index of a given value.\n   */\n  function indexOf(StringSet storage set, string memory value) internal view returns (uint256) {\n    return set._indexes[value];\n  }\n}\n"
        },
        "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
        },
        "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
        },
        "contracts/stake/HoprWhitehat.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/utils/introspection/ERC1820Implementer.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport './HoprStake.sol';\nimport './HoprBoost.sol';\nimport '../mocks/ERC777Mock.sol';\nimport '../mocks/ERC677Mock.sol';\n\n/*\n  CHECKLIST:\n\n  STEP -1. flatten contract\n  STEP 0. deploy HoprWhitehat\n  STEP 1. transfer ownership of HoprStake to this newOwnerContract\n  STEP 2. find user with minimal amount of locked tokens for testing purposes\n  STEP 3. obtain the amount of rewards which that user is entitled to\n  STEP 4. fund newOwnerContract with corresponding amount of wxHOPR\n  STEP 5. user needs to follow procedure A\n\n  PROCEDURE PARTICIPANTS:\n\n  W - HoprWhitehat contract\n  H - HoprStake contract\n  S - account which has stake locked in H\n  C - account calling the gimmeToken/0 function\n  O - account which is owner of W\n\n  PROCEDURE A (2 manual steps):\n\n  1. S calls contract function `prepare` of W\n  2. S calls contract function `gimmeToken` of W\n  3. [W-gimmeToken] sends wxHopr to H\n  4. [W-gimmeToken] calls `unlock` of H\n  5. [W-gimmeToken -> H-unlock-_claim] performs `safeTransfer` of wxHopr to S\n  6. [W-gimmeToken -> H-unlock-_claim -> S-W_tokensReceived] calls `reclaimErc20Tokens` of H\n  7. [W-gimmeToken -> H-unlock-_claim -> S-W_tokensReceived -> H-reclaimErc20Tokens] performs `safeTransfer` of xHopr to H\n  8. [W-gimmeToken -> H-unlock] transfers redeemed nfts\n  8. DONE\n\n  PROCEDURE B (1 manual step):\n\n  1. S calls contract function `prepare` of W\n  2. O calls contract function `gimmeToken` of W with S as parameter\n  3. [W-gimmeToken] sends wxHopr to H\n  4. [W-gimmeToken] calls `unlock` of H\n  5. [W-gimmeToken -> H-unlock-_claim] performs `safeTransfer` of wxHopr to S\n  6. [W-gimmeToken -> H-unlock-_claim -> S-W_tokensReceived] calls `reclaimErc20Tokens` of H\n  7. [W-gimmeToken -> H-unlock-_claim -> S-W_tokensReceived -> H-reclaimErc20Tokens] performs `safeTransfer` of xHopr to H\n  8. [W-gimmeToken -> H-unlock] transfers redeemed nfts\n  8. DONE\n*/\n\ncontract HoprWhitehat is Ownable, IERC777Recipient, IERC721Receiver, ERC1820Implementer, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n\n  // utility variable used to refer to the caller\n  address public currentCaller;\n  // determine if function calls are processed\n  bool public isActive;\n  // rescued xhopr amount\n  uint256 public rescuedXHoprAmount;\n\n  // instantiated references to the contracts used in Stake Season 1\n  HoprBoost public myHoprBoost = HoprBoost(0x43d13D7B83607F14335cF2cB75E87dA369D056c7);\n  HoprStake public myHoprStake = HoprStake(0x912F4d6607160256787a2AD40dA098Ac2aFE57AC);\n  ERC777Mock public wxHopr = ERC777Mock(0xD4fdec44DB9D44B8f2b6d529620f9C0C7066A2c1);\n  ERC677Mock public xHopr = ERC677Mock(0xD057604A14982FE8D88c5fC25Aac3267eA142a08);\n\n  IERC1820Registry private constant ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n  bytes32 private constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256('ERC777TokensRecipient');\n  bytes32 private constant ERC1820_ACCEPT_MAGIC = keccak256('ERC1820_ACCEPT_MAGIC');\n\n  event RequestedGimme(address indexed account, uint256 indexed entitledReward);\n  event Called777Hook(address indexed contractAddress, address indexed from, uint256 indexed amount);\n  event Called777HookForFunding(address indexed contractAddress, address indexed from, uint256 indexed amount);\n  event Received677(address indexed contractAddress, address indexed from, uint256 indexed amount);\n  event ReclaimedBoost(address indexed account, uint256 indexed tokenId);\n\n  /**\n   * @dev Provide NFT contract address. Transfer owner role to the new owner address.\n   * At deployment, it also registers the lock contract as an ERC777 recipient.\n   * @param _newOwner address Address of the new owner. This new owner can reclaim any ERC20 and ERC721 token being accidentally sent to the lock contract.\n   * @param _myHoprBoost address Address of the mock boost contract.\n   * @param _myHoprStake address Address of the mock stake contract.\n   * @param _xHopr address Address of the mock xHopr contract.\n   * @param _wxHopr address Address of the mock wxHopr contract.\n   */\n  constructor(\n    address _newOwner,\n    address _myHoprBoost,\n    address _myHoprStake,\n    address _xHopr,\n    address _wxHopr\n  ) {\n    // implement in favor of testing\n    uint256 chainId;\n    assembly {\n      chainId := chainid()\n    }\n    if (chainId != 100) {\n      myHoprBoost = HoprBoost(_myHoprBoost);\n      myHoprStake = HoprStake(_myHoprStake);\n      xHopr = ERC677Mock(_xHopr);\n      wxHopr = ERC777Mock(_wxHopr);\n    }\n    // keep deactivated at creation, requires manual activation by owner\n    isActive = false;\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n    transferOwnership(_newOwner);\n  }\n\n  /**\n   * override implementation check\n   */\n  function canImplementInterfaceForAddress(bytes32 interfaceHash, address account)\n    public\n    view\n    virtual\n    override\n    returns (bytes32)\n  {\n    return interfaceHash == TOKENS_RECIPIENT_INTERFACE_HASH ? ERC1820_ACCEPT_MAGIC : bytes32(0x00);\n  }\n\n  // entry function to be called by users who can unlock their tokens (users who have rewards)\n  function gimmeToken() external nonReentrant {\n    require(isActive, 'Whitehat is not active');\n    // ensure STEP 1\n    require(myHoprStake.owner() == address(this), 'HoprStake needs to transfer ownership');\n    // ensure STEP 2\n    require(\n      ERC1820_REGISTRY.getInterfaceImplementer(msg.sender, TOKENS_RECIPIENT_INTERFACE_HASH) == address(this),\n      'Caller has to set this contract as ERC1820 interface'\n    );\n\n    // store caller to be used throughout the call\n    currentCaller = msg.sender;\n    // updates the rewards inside the accounts mapping struct\n    myHoprStake.sync(currentCaller);\n\n    // solhint-disable-next-line no-unused-vars\n    (\n      uint256 actualLockedTokenAmount,\n      uint256 virtualLockedTokenAmount,\n      uint256 lastSyncTimestamp,\n      uint256 cumulatedRewards,\n      uint256 claimedRewards\n    ) = myHoprStake.accounts(currentCaller);\n    uint256 stakerEntitledReward = cumulatedRewards - claimedRewards;\n    emit RequestedGimme(currentCaller, stakerEntitledReward);\n\n    // send rewards to HoprStake to make sure claim within unlock works\n    wxHopr.send(address(myHoprStake), stakerEntitledReward, '0x0');\n    // unlock xHOPR\n    myHoprStake.unlock(currentCaller);\n  }\n\n  // entry function to be called by users who can unlock their tokens (users who have rewards)\n  function gimmeTokenFor(address staker) external onlyOwner {\n    // contract must be the recipient of\n    require(myHoprStake.owner() == address(this), 'HoprStake needs to transfer ownership');\n    // check 1820 implementation\n    require(\n      ERC1820_REGISTRY.getInterfaceImplementer(staker, TOKENS_RECIPIENT_INTERFACE_HASH) == address(this),\n      'Caller has to set this contract as ERC1820 interface'\n    );\n    // store the caller for other hook functions\n    currentCaller = staker;\n    // update caller's account (claimable rewards)\n    myHoprStake.sync(currentCaller); // updates the rewards inside the accounts mapping struct\n    // solhint-disable-next-line no-unused-vars\n    (\n      uint256 actualLockedTokenAmount,\n      uint256 virtualLockedTokenAmount,\n      uint256 lastSyncTimestamp,\n      uint256 cumulatedRewards,\n      uint256 claimedRewards\n    ) = myHoprStake.accounts(currentCaller);\n    uint256 stakerEntitledReward = cumulatedRewards - claimedRewards;\n    emit RequestedGimme(currentCaller, stakerEntitledReward);\n    // fund reward to Stake contract\n    wxHopr.send(address(myHoprStake), stakerEntitledReward, '0x0');\n    // unlock xHOPR\n    myHoprStake.unlock(currentCaller);\n  }\n\n  // ERC777 fallback (wxHOPR aka reward tokens)\n  function tokensReceived(\n    address operator,\n    address from,\n    address to,\n    uint256 amount,\n    bytes calldata userData,\n    bytes calldata operatorData\n  ) external override {\n    if (isActive) {\n      require(msg.sender == address(wxHopr), 'can only be called from wxHOPR');\n      if (from == address(myHoprStake)) {\n        require(to == currentCaller, 'must send ERC777 tokens to the caller of gimmeToken');\n        emit Called777Hook(msg.sender, from, amount);\n        // controlled-reentrancy starts here\n        if (xHopr.balanceOf(address(myHoprStake)) > myHoprStake.totalLocked()) {\n          myHoprStake.reclaimErc20Tokens(address(xHopr));\n        }\n      } else {\n        emit Called777HookForFunding(msg.sender, from, amount);\n      }\n    }\n  }\n\n  /**\n   * @dev ERC677 fallback (xHOPR aka token that users stake and unlock)\n   * No need to reclaim NFTs for caller upon receiving xHOPR\n   */\n  function onTokenTransfer(\n    address _from,\n    uint256 _value,\n    bytes memory _data\n  ) external returns (bool) {\n    if (msg.sender == address(xHopr)) {\n      rescuedXHoprAmount += _value;\n    }\n    emit Received677(msg.sender, _from, _value);\n    return true;\n  }\n\n  /**\n   * ERC721 hook. Allow contract to receive 721\n   */\n  function onERC721Received(\n    // solhint-disable-next-line no-unused-vars\n    address operator,\n    address from,\n    uint256 tokenId,\n    // solhint-disable-next-line no-unused-vars\n    bytes calldata data\n  ) external override returns (bytes4) {\n    return IERC721Receiver(address(this)).onERC721Received.selector;\n  }\n\n  /**\n   * @dev Transfer the ownership of HoprStake contract back to multisig\n   */\n  function transferBackOwnership(address multisig) external onlyOwner {\n    myHoprStake.transferOwnership(multisig);\n  }\n\n  /**\n   * @dev rescue all the NFTs of a locked staker account\n   * Forward it to the original owner.\n   */\n  function ownerRescueBoosterNft(address stakerAddress, uint256 tokenId) external onlyOwner {\n    myHoprStake.reclaimErc721Tokens(address(myHoprBoost), tokenId);\n    // reclaim erc721 of the lockedAddress\n    emit ReclaimedBoost(stakerAddress, tokenId);\n    // forward the 721 to the original staker\n    myHoprBoost.safeTransferFrom(address(this), stakerAddress, tokenId);\n  }\n\n  /**\n   * @dev rescue all the NFTs of a locked staker account\n   * Forward it to the original owner.\n   */\n  function ownerRescueBoosterNftInBatch(address stakerAddress) external onlyOwner {\n    uint256 numBoost = myHoprStake.redeemedNftIndex(stakerAddress);\n    for (uint256 index = 0; index < numBoost; index++) {\n      uint256 tokenId = myHoprStake.redeemedNft(stakerAddress, index);\n      myHoprStake.reclaimErc721Tokens(address(myHoprBoost), tokenId);\n      // reclaim erc721 of the lockedAddress\n      emit ReclaimedBoost(stakerAddress, tokenId);\n      // forward the 721 to the original staker\n      myHoprBoost.safeTransferFrom(address(this), stakerAddress, tokenId);\n    }\n  }\n\n  /**\n   * @dev Reclaim any ERC20 token being accidentally sent to the contract.\n   * @param tokenAddress address ERC20 token address.\n   */\n  function reclaimErc20Tokens(address tokenAddress) external onlyOwner {\n    uint256 difference = IERC20(tokenAddress).balanceOf(address(this));\n    IERC20(tokenAddress).safeTransfer(owner(), difference);\n  }\n\n  /**\n   * @dev Reclaim any ERC721 token being accidentally sent to the contract.\n   * @param tokenAddress address ERC721 token address.\n   * @param tokenId id of the ERC721 token.\n   */\n  function reclaimErc721Tokens(address tokenAddress, uint256 tokenId) external onlyOwner {\n    IHoprBoost(tokenAddress).transferFrom(address(this), owner(), tokenId);\n  }\n\n  /**\n   * @dev Activate all contract functions.\n   */\n  function activate() public onlyOwner {\n    require(!isActive, 'HoprWhitehat is already active');\n    isActive = true;\n  }\n\n  /**\n   * @dev Deactivate all contract functions.\n   */\n  function deactivate() public onlyOwner {\n    require(isActive, 'HoprWhitehat is already not active');\n    isActive = false;\n  }\n}\n"
        },
        "@openzeppelin/contracts/access/Ownable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
        },
        "contracts/stake/HoprStake.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol';\nimport '@openzeppelin/contracts/utils/math/Math.sol';\nimport './IHoprBoost.sol';\n\n/**\n *\n */\ncontract HoprStake is Ownable, IERC777Recipient, IERC721Receiver, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n  using Math for uint256;\n\n  struct Account {\n    uint256 actualLockedTokenAmount; // The amount of LOCK_TOKEN being actually locked to the contract.\n    // Those tokens can be withdrawn after “UNLOCK_START”\n    uint256 virtualLockedTokenAmount; // The amount of LOCK_TOKEN token being virtually locked to the contract.\n    // This field is only relevant to seed investors. Those tokens cannot be withdrawn after “UNLOCK_START”.\n    uint256 lastSyncTimestamp; // Timestamp at which any “Account” attribute gets synced for the last time.\n    uint256 cumulatedRewards; // Rewards accredited to the account at “lastSyncTimestamp”.\n    uint256 claimedRewards; // Rewards claimed by the account.\n  }\n\n  uint256 public constant BASIC_START = 1627387200; // Block timestamp at which incentive program starts for accounts that stake real LOCK_TOKEN. Default value is 1627387200 (July 27th 2021 14:00 CET).\n  uint256 public constant SEED_START = 1630065600; // Block timestamp at which incentive program starts for seed investors that promise to stake their unreleased tokens. Default value is 1630065600 (August 27th 2021 14:00 CET).\n  uint256 public constant PROGRAM_END = 1642424400; // Block timestamp at which incentive program ends. From this timestamp on, tokens can be unlocked. Default value is 1642424400 (Jan 17th 2022 14:00 CET).\n  uint256 public constant FACTOR_DENOMINATOR = 1e12; // Denominator of the “Basic reward factor”. Default value is 1e12.\n  uint256 public constant BASIC_FACTOR_NUMERATOR = 5787; // Numerator of the “Basic reward factor”, for all accounts (except for seed investors) that participate in the program. Default value is 5787, which corresponds to 5.787/1e9 per second. Its associated denominator is FACTOR_DENOMINATOR.\n  uint256 public constant SEED_FACTOR_NUMERATOR = 7032; // Numerator of the \"Seed reward factor”, for all accounts (except for seed investors) that participate in the program. Default value is 7032, which corresponds to 7.032/1e9 per second. Its associated denominator is FACTOR_DENOMINATOR.\n  uint256 public constant BOOST_CAP = 1e24; // Cap on actual locked tokens for receiving additional boosts.\n  address public LOCK_TOKEN = 0xD057604A14982FE8D88c5fC25Aac3267eA142a08; // Token that HOPR holders need to lock to the contract: xHOPR address.\n  address public REWARD_TOKEN = 0xD4fdec44DB9D44B8f2b6d529620f9C0C7066A2c1; // Token that HOPR holders can claim as rewards: wxHOPR address\n\n  IHoprBoost public nftContract; // Address of the NFT smart contract.\n  mapping(address => mapping(uint256 => uint256)) public redeemedNft; // Redeemed NFT per account, structured as “account -> index -> NFT tokenId”.\n  mapping(address => uint256) public redeemedNftIndex; // The last index of redeemed NFT of an account. It defines the length of the “redeemedBoostToken mapping.\n  mapping(address => mapping(uint256 => uint256)) public redeemedFactor; // Redeemed boost factor per account, structured as “account -> index -> NFT tokenId”.\n  mapping(address => uint256) public redeemedFactorIndex; // The last index of redeemed boost factor factor of an account. It defines the length of the “redeemedFactor” mapping.\n\n  mapping(address => Account) public accounts; // It stores the locked token amount, earned and claimed rewards per account.\n  uint256 public totalLocked; // Total amount of tokens being locked in the incentive program. Virtual token locks are not taken into account.\n  uint256 public availableReward; // Total amount of reward tokens currently available in the lock.\n\n  // setup ERC1820\n  IERC1820Registry private constant ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n  bytes32 private constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256('ERC777TokensRecipient');\n\n  event Sync(address indexed account, uint256 indexed increment);\n  event Staked(address indexed account, uint256 indexed actualAmount, uint256 indexed virtualAmount);\n  event Released(address indexed account, uint256 indexed actualAmount, uint256 indexed virtualAmount);\n  event RewardFueled(uint256 indexed amount);\n  event Redeemed(address indexed account, uint256 indexed boostTokenId, bool indexed factorRegistered);\n  event Claimed(address indexed account, uint256 indexed rewardAmount);\n\n  /**\n   * @dev Provide NFT contract address. Transfer owner role to the new owner address.\n   * At deployment, it also registers the lock contract as an ERC777 recipient.\n   * @param _nftAddress address Address of the NFT contract.\n   * @param _newOwner address Address of the new owner. This new owner can reclaim any ERC20 and ERC721 token being accidentally sent to the lock contract.\n   */\n  constructor(\n    address _nftAddress,\n    address _newOwner,\n    address _lockToken,\n    address _rewardToken\n  ) {\n    // implement in favor of testing\n    uint256 chainId;\n    assembly {\n      chainId := chainid()\n    }\n    if (chainId != 100) {\n      LOCK_TOKEN = _lockToken;\n      REWARD_TOKEN = _rewardToken;\n    }\n    nftContract = IHoprBoost(_nftAddress);\n    transferOwnership(_newOwner);\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n  }\n\n  /**\n   * @dev ERC677 hook. Token holders can send their tokens with `transferAndCall` to the stake contract.\n   * After PROGRAM_END, it refuses tokens; Before PROGRAM_END, it accepts tokens xHOPR token, sync\n   * Account state, and update totalLocked.\n   * @param _from address Address of tokens sender\n   * @param _value uint256 token amount being transferred\n   * @param _data bytes Data being sent along with token transfer\n   */\n  function onTokenTransfer(\n    address _from,\n    uint256 _value,\n    // solhint-disable-next-line no-unused-vars\n    bytes memory _data\n  ) external returns (bool) {\n    require(msg.sender == LOCK_TOKEN, 'HoprStake: Only accept LOCK_TOKEN in staking');\n    require(block.timestamp <= PROGRAM_END, 'HoprStake: Program ended, cannot stake anymore.');\n\n    _sync(_from);\n    accounts[_from].actualLockedTokenAmount += _value;\n    totalLocked += _value;\n    emit Staked(_from, _value, 0);\n\n    return true;\n  }\n\n  /**\n   * @dev ERC777 hook. To receive wxHOPR to fuel the reward pool with `send()` method. It updates the availableReward by tokenAmount.\n   * @param operator address operator requesting the transfer\n   * @param from address token holder address\n   * @param to address recipient address\n   * @param amount uint256 amount of tokens to transfer\n   * @param userData bytes hex information provided by the token holder (if any)\n   * @param operatorData bytes extra information provided by the operator (if any)\n   */\n  function tokensReceived(\n    // solhint-disable-next-line no-unused-vars\n    address operator,\n    address from,\n    address to,\n    uint256 amount,\n    // solhint-disable-next-line no-unused-vars\n    bytes calldata userData,\n    // solhint-disable-next-line no-unused-vars\n    bytes calldata operatorData\n  ) external override {\n    require(msg.sender == REWARD_TOKEN, 'HoprStake: Sender must be wxHOPR token');\n    require(to == address(this), 'HoprStake: Must be sending tokens to HoprStake contract');\n    require(from == owner(), 'HoprStake: Only accept owner to provide rewards');\n    availableReward += amount;\n    emit RewardFueled(amount);\n  }\n\n  /**\n   * @dev Whenever a boost `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n   * when redeeming, this function is called. Boost factor associated with the\n   * It must return its Solidity selector to confirm the token transfer upon success.\n   * @param operator address operator requesting the transfer\n   * @param from address token holder address\n   * @param tokenId uint256 amount of tokens to transfer\n   * @param data bytes hex information provided by the token holder (if any)\n   */\n  function onERC721Received(\n    // solhint-disable-next-line no-unused-vars\n    address operator,\n    address from,\n    uint256 tokenId,\n    // solhint-disable-next-line no-unused-vars\n    bytes calldata data\n  ) external override returns (bytes4) {\n    require(_msgSender() == address(nftContract), 'HoprStake: Cannot SafeTransferFrom tokens other than HoprBoost.');\n    require(block.timestamp <= PROGRAM_END, 'HoprStake: Program ended, cannot redeem boosts.');\n    // Account memory account = accounts[from];\n    _sync(from);\n\n    // redeem NFT\n    redeemedNft[from][redeemedNftIndex[from]] = tokenId;\n    redeemedNftIndex[from] += 1;\n\n    // update boost factor\n    uint256 typeId = nftContract.typeIndexOf(tokenId);\n    (uint256 factor, uint256 deadline) = nftContract.boostOf(tokenId);\n    require(block.timestamp <= deadline, 'HoprStake: Cannot redeem an expired boost.');\n\n    uint256 boostIndex = redeemedFactorIndex[from];\n    uint256 index = 0;\n    for (index; index < boostIndex; index++) {\n      // loop through redeemed factors, replace the factor of the same type, if the current factor is larger.\n      uint256 redeemedId = redeemedFactor[from][index];\n      (uint256 redeemedFactorValue, ) = nftContract.boostOf(redeemedId);\n\n      if (nftContract.typeIndexOf(redeemedId) == typeId) {\n        if (redeemedFactorValue < factor) {\n          redeemedFactor[from][index] = tokenId;\n        }\n        emit Redeemed(from, tokenId, redeemedFactorValue < factor);\n        break;\n      }\n    }\n    if (index == boostIndex) {\n      // new type being redeemed.\n      redeemedFactor[from][boostIndex] = tokenId;\n      redeemedFactorIndex[from] += 1;\n      emit Redeemed(from, tokenId, true);\n    }\n\n    return IERC721Receiver(address(this)).onERC721Received.selector;\n  }\n\n  /**\n   * @dev Only owner can call this function to store virtual lock for seed investors.\n   * If the investor hasn't locked any token in this account, create an \"Account\" with {0, caps[i], block.timestamp, 0, 0}.\n   * If the investor has locked some tokens in this account, update its “virtualLockedTokenAmount”.\n   * This function can be called at anytime of the program.\n   * @param investors address[] Array of seed investors accounts.\n   * @param caps uint256[] Array of their virtually locked tokens.\n   */\n  function lock(address[] calldata investors, uint256[] calldata caps) external onlyOwner {\n    require(block.timestamp <= PROGRAM_END, 'HoprStake: Program ended, cannot stake anymore.');\n    require(investors.length == caps.length, 'HoprStake: Length does not match');\n\n    for (uint256 index = 0; index < investors.length; index++) {\n      address investor = investors[index];\n      _sync(investor);\n      accounts[investor].virtualLockedTokenAmount += caps[index];\n      // accounts[investor].lastSyncTimestamp = block.timestamp;\n      emit Staked(investor, 0, caps[index]);\n    }\n  }\n\n  /**\n   * @dev Manually sync account's reward states\n   * @notice public function of ``_sync``.\n   * @param account address Account whose stake rewards will be synced.\n   */\n  function sync(address account) external {\n    _sync(account);\n  }\n\n  /**\n   * @dev Sync rewards and claim them\n   * @notice public function of ``_sync`` + ``_claim``\n   * @param account address Account whose stake rewards will be synced and claimed.\n   */\n  function claimRewards(address account) public {\n    _sync(account);\n    _claim(account);\n  }\n\n  /**\n   * @dev Unlock staking\n   * @param account address Account that staked tokens.\n   */\n  function unlock(address account) external {\n    require(block.timestamp > PROGRAM_END, 'HoprStake: Program is ongoing, cannot unlock stake.');\n    uint256 actualStake = accounts[account].actualLockedTokenAmount;\n    uint256 virtualStake = accounts[account].virtualLockedTokenAmount;\n    _sync(account);\n    accounts[account].actualLockedTokenAmount = 0;\n    accounts[account].virtualLockedTokenAmount = 0;\n    totalLocked -= actualStake;\n    _claim(account);\n    // unlock actual staked tokens\n    IERC20(LOCK_TOKEN).safeTransfer(account, actualStake);\n    // unlock redeemed NFTs\n    for (uint256 index = 0; index < redeemedNftIndex[account]; index++) {\n      nftContract.transferFrom(address(this), account, redeemedNft[account][index]);\n    }\n    emit Released(account, actualStake, virtualStake);\n  }\n\n  /**\n   * @dev Reclaim any ERC20 token being accidentally sent to the contract.\n   * @param tokenAddress address ERC20 token address.\n   */\n  function reclaimErc20Tokens(address tokenAddress) external onlyOwner nonReentrant {\n    uint256 difference;\n    if (tokenAddress == LOCK_TOKEN) {\n      difference = IERC20(LOCK_TOKEN).balanceOf(address(this)) - totalLocked;\n    } else {\n      difference = IERC20(tokenAddress).balanceOf(address(this));\n    }\n    IERC20(tokenAddress).safeTransfer(owner(), difference);\n  }\n\n  /**\n   * @dev Reclaim any ERC721 token being accidentally sent to the contract.\n   * @param tokenAddress address ERC721 token address.\n   */\n  function reclaimErc721Tokens(address tokenAddress, uint256 tokenId) external onlyOwner nonReentrant {\n    IHoprBoost(tokenAddress).transferFrom(address(this), owner(), tokenId);\n  }\n\n  /**\n   * @dev Returns the increment of cumulated rewards during the “lastSyncTimestamp” and current block.timestamp.\n   * @param _account address Address of the account whose rewards will be calculated.\n   */\n  function getCumulatedRewardsIncrement(address _account) public view returns (uint256) {\n    return _getCumulatedRewardsIncrement(_account);\n  }\n\n  /**\n   * @dev Calculates the increment of cumulated rewards during the “lastSyncTimestamp” and block.timestamp.\n   * current block timestamp and lastSyncTimestamp are confined in [BASIC_START, PROGRAMEND] for basic and boosted lockup,\n   * and [SEED_START, PROGRAMEND] for seed investors.\n   * @param _account address Address of the account whose rewards will be calculated.\n   */\n  function _getCumulatedRewardsIncrement(address _account) private view returns (uint256) {\n    Account memory account = accounts[_account];\n    if (block.timestamp <= BASIC_START || account.lastSyncTimestamp >= PROGRAM_END) {\n      // skip calculation and return directly 0;\n      return 0;\n    }\n    // Per second gain, for basic lock-up.\n    uint256 gainPerSec = account.actualLockedTokenAmount * BASIC_FACTOR_NUMERATOR;\n\n    // Per second gain, for additional boost, applicable to amount under BOOST_CAP\n    for (uint256 index = 0; index < redeemedFactorIndex[_account]; index++) {\n      uint256 tokenId = redeemedFactor[_account][index];\n      (uint256 boost, ) = nftContract.boostOf(tokenId);\n      gainPerSec += (account.actualLockedTokenAmount.min(BOOST_CAP)) * boost;\n    }\n\n    return\n      (gainPerSec *\n        (block.timestamp.max(BASIC_START).min(PROGRAM_END) -\n          account.lastSyncTimestamp.max(BASIC_START).min(PROGRAM_END)) +\n        account.virtualLockedTokenAmount *\n        SEED_FACTOR_NUMERATOR *\n        (// Per second gain, for seed investor lock-up\n        block.timestamp.max(SEED_START).min(PROGRAM_END) -\n          account.lastSyncTimestamp.max(SEED_START).min(PROGRAM_END))) / FACTOR_DENOMINATOR;\n  }\n\n  /**\n   * @dev Update “lastSyncTimestamp” with the current block timestamp and update “cumulatedRewards” with _getCumulatedRewardsIncrement(account)\n   * @param _account address Address of the account whose rewards will be calculated.\n   */\n  function _sync(address _account) private {\n    uint256 increment = _getCumulatedRewardsIncrement(_account);\n    accounts[_account].cumulatedRewards += increment;\n    accounts[_account].lastSyncTimestamp = block.timestamp;\n    emit Sync(_account, increment);\n  }\n\n  /**\n   * @dev Claim rewards for staking.\n   * @param _account address Address of the staking account.\n   */\n  function _claim(address _account) private {\n    Account memory account = accounts[_account];\n    // update states\n    uint256 amount = account.cumulatedRewards - account.claimedRewards;\n    require(amount > 0, 'HoprStake: Nothing to claim');\n    accounts[_account].claimedRewards = accounts[_account].cumulatedRewards;\n    require(availableReward >= amount, 'HoprStake: Insufficient reward pool.');\n    availableReward -= amount;\n    // send rewards to the account.\n    IERC20(REWARD_TOKEN).safeTransfer(_account, amount);\n    emit Claimed(_account, amount);\n  }\n}\n"
        },
        "contracts/mocks/ERC777Mock.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.6.0 <=0.9.0;\n\nimport '@openzeppelin/contracts/utils/Context.sol';\nimport '@openzeppelin/contracts/token/ERC777/ERC777.sol';\n\ncontract ERC777Mock is Context, ERC777 {\n  constructor(\n    address initialHolder,\n    uint256 initialBalance,\n    string memory name,\n    string memory symbol,\n    address[] memory defaultOperators\n  ) public ERC777(name, symbol, defaultOperators) {\n    _mint(initialHolder, initialBalance, '', '');\n  }\n\n  function mintInternal(\n    address to,\n    uint256 amount,\n    bytes memory userData,\n    bytes memory operatorData\n  ) public {\n    _mint(to, amount, userData, operatorData);\n  }\n\n  function approveInternal(\n    address holder,\n    address spender,\n    uint256 value\n  ) public {\n    _approve(holder, spender, value);\n  }\n}\n"
        },
        "contracts/mocks/ERC677Mock.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\n\n/**\n * @title ERC677BridgeToken\n * @dev The basic implementation of a bridgeable ERC677-compatible token\n */\ncontract ERC677Mock is ERC20 {\n  using Address for address;\n  bytes4 internal constant ON_TOKEN_TRANSFER = 0xa4c0ed36; // onTokenTransfer(address,uint256,bytes)\n\n  event TransferAndCall(address indexed from, address indexed to, uint256 value, bytes data);\n\n  constructor() ERC20('ERC677Mock', 'M677') {}\n\n  modifier validRecipient(address _recipient) {\n    require(_recipient != address(0) && _recipient != address(this));\n    /* solcov ignore next */\n    _;\n  }\n\n  function batchMintInternal(address[] memory _to, uint256 _value) external {\n    for (uint256 index = 0; index < _to.length; index++) {\n      _mint(_to[index], _value);\n    }\n  }\n\n  function transferAndCall(\n    address _to,\n    uint256 _value,\n    bytes memory _data\n  ) external validRecipient(_to) returns (bool) {\n    require(super.transfer(_to, _value));\n    emit TransferAndCall(msg.sender, _to, _value, _data);\n\n    if (_to.isContract()) {\n      (bool success, ) = _to.call(abi.encodeWithSelector(ON_TOKEN_TRANSFER, msg.sender, _value, _data));\n      require(success, 'ERC677Mock: failed when calling onTokenTransfer');\n    }\n    return true;\n  }\n\n  function superTransfer(address _to, uint256 _value) internal returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transfer(address _to, uint256 _value) public override returns (bool) {\n    require(super.transfer(_to, _value));\n    (bool success, ) = _to.call(abi.encodeWithSelector(ON_TOKEN_TRANSFER, msg.sender, _value, new bytes(0)));\n    require(success);\n    return true;\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  ) public override returns (bool) {\n    require(super.transferFrom(_from, _to, _value));\n    (bool success, ) = _to.call(abi.encodeWithSelector(ON_TOKEN_TRANSFER, msg.sender, _value, new bytes(0)));\n    require(success);\n    return true;\n  }\n}\n"
        },
        "@openzeppelin/contracts/utils/math/Math.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
        },
        "@openzeppelin/contracts/token/ERC777/ERC777.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/ERC777.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC777.sol\";\nimport \"./IERC777Recipient.sol\";\nimport \"./IERC777Sender.sol\";\nimport \"../ERC20/IERC20.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/IERC1820Registry.sol\";\n\n/**\n * @dev Implementation of the {IERC777} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * Support for ERC20 is included in this contract, as specified by the EIP: both\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\n * movements.\n *\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\n * are no special restrictions in the amount of tokens that created, moved, or\n * destroyed. This makes integration with ERC20 applications seamless.\n */\ncontract ERC777 is Context, IERC777, IERC20 {\n    using Address for address;\n\n    IERC1820Registry internal constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n    mapping(address => uint256) private _balances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256(\"ERC777TokensSender\");\n    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\n\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\n    address[] private _defaultOperatorsArray;\n\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\n    mapping(address => bool) private _defaultOperators;\n\n    // For each account, a mapping of its operators and revoked default operators.\n    mapping(address => mapping(address => bool)) private _operators;\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n\n    // ERC20-allowances\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    /**\n     * @dev `defaultOperators` may be an empty array.\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address[] memory defaultOperators_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n\n        _defaultOperatorsArray = defaultOperators_;\n        for (uint256 i = 0; i < defaultOperators_.length; i++) {\n            _defaultOperators[defaultOperators_[i]] = true;\n        }\n\n        // register interfaces\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC777Token\"), address(this));\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\"ERC20Token\"), address(this));\n    }\n\n    /**\n     * @dev See {IERC777-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC777-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {ERC20-decimals}.\n     *\n     * Always returns 18, as per the\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\n     */\n    function decimals() public pure virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC777-granularity}.\n     *\n     * This implementation always returns `1`.\n     */\n    function granularity() public view virtual override returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @dev See {IERC777-totalSupply}.\n     */\n    function totalSupply() public view virtual override(IERC20, IERC777) returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\n     */\n    function balanceOf(address tokenHolder) public view virtual override(IERC20, IERC777) returns (uint256) {\n        return _balances[tokenHolder];\n    }\n\n    /**\n     * @dev See {IERC777-send}.\n     *\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n     */\n    function send(\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        _send(_msgSender(), recipient, amount, data, \"\", true);\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\n     * interface if it is a contract.\n     *\n     * Also emits a {Sent} event.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n\n        address from = _msgSender();\n\n        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n\n        _move(from, from, recipient, amount, \"\", \"\");\n\n        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n\n        return true;\n    }\n\n    /**\n     * @dev See {IERC777-burn}.\n     *\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n     */\n    function burn(uint256 amount, bytes memory data) public virtual override {\n        _burn(_msgSender(), amount, data, \"\");\n    }\n\n    /**\n     * @dev See {IERC777-isOperatorFor}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) public view virtual override returns (bool) {\n        return\n            operator == tokenHolder ||\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n            _operators[tokenHolder][operator];\n    }\n\n    /**\n     * @dev See {IERC777-authorizeOperator}.\n     */\n    function authorizeOperator(address operator) public virtual override {\n        require(_msgSender() != operator, \"ERC777: authorizing self as operator\");\n\n        if (_defaultOperators[operator]) {\n            delete _revokedDefaultOperators[_msgSender()][operator];\n        } else {\n            _operators[_msgSender()][operator] = true;\n        }\n\n        emit AuthorizedOperator(operator, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC777-revokeOperator}.\n     */\n    function revokeOperator(address operator) public virtual override {\n        require(operator != _msgSender(), \"ERC777: revoking self as operator\");\n\n        if (_defaultOperators[operator]) {\n            _revokedDefaultOperators[_msgSender()][operator] = true;\n        } else {\n            delete _operators[_msgSender()][operator];\n        }\n\n        emit RevokedOperator(operator, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC777-defaultOperators}.\n     */\n    function defaultOperators() public view virtual override returns (address[] memory) {\n        return _defaultOperatorsArray;\n    }\n\n    /**\n     * @dev See {IERC777-operatorSend}.\n     *\n     * Emits {Sent} and {IERC20-Transfer} events.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    ) public virtual override {\n        require(isOperatorFor(_msgSender(), sender), \"ERC777: caller is not an operator for holder\");\n        _send(sender, recipient, amount, data, operatorData, true);\n    }\n\n    /**\n     * @dev See {IERC777-operatorBurn}.\n     *\n     * Emits {Burned} and {IERC20-Transfer} events.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    ) public virtual override {\n        require(isOperatorFor(_msgSender(), account), \"ERC777: caller is not an operator for holder\");\n        _burn(account, amount, data, operatorData);\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     *\n     * Note that operator and allowance concepts are orthogonal: operators may\n     * not have allowance, and accounts with allowance may not be operators\n     * themselves.\n     */\n    function allowance(address holder, address spender) public view virtual override returns (uint256) {\n        return _allowances[holder][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Note that accounts cannot have allowance issued by their operators.\n     */\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\n        address holder = _msgSender();\n        _approve(holder, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Note that operator and allowance concepts are orthogonal: operators cannot\n     * call `transferFrom` (unless they have allowance), and accounts with\n     * allowance cannot call `operatorSend` (unless they are operators).\n     *\n     * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\n     */\n    function transferFrom(\n        address holder,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n        require(holder != address(0), \"ERC777: transfer from the zero address\");\n\n        address spender = _msgSender();\n\n        _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n\n        _move(spender, holder, recipient, amount, \"\", \"\");\n\n        uint256 currentAllowance = _allowances[holder][spender];\n        require(currentAllowance >= amount, \"ERC777: transfer amount exceeds allowance\");\n        _approve(holder, spender, currentAllowance - amount);\n\n        _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n\n        return true;\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `operator`, `data` and `operatorData`.\n     *\n     * See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits {Minted} and {IERC20-Transfer} events.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function _mint(\n        address account,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    ) internal virtual {\n        _mint(account, amount, userData, operatorData, true);\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * If `requireReceptionAck` is set to true, and if a send hook is\n     * registered for `account`, the corresponding function will be called with\n     * `operator`, `data` and `operatorData`.\n     *\n     * See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits {Minted} and {IERC20-Transfer} events.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function _mint(\n        address account,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    ) internal virtual {\n        require(account != address(0), \"ERC777: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, amount);\n\n        // Update state variables\n        _totalSupply += amount;\n        _balances[account] += amount;\n\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck);\n\n        emit Minted(operator, account, amount, userData, operatorData);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Send tokens\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _send(\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    ) internal virtual {\n        require(from != address(0), \"ERC777: send from the zero address\");\n        require(to != address(0), \"ERC777: send to the zero address\");\n\n        address operator = _msgSender();\n\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n\n        _move(operator, from, to, amount, userData, operatorData);\n\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n    }\n\n    /**\n     * @dev Burn tokens\n     * @param from address token holder address\n     * @param amount uint256 amount of tokens to burn\n     * @param data bytes extra information provided by the token holder\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _burn(\n        address from,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData\n    ) internal virtual {\n        require(from != address(0), \"ERC777: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n\n        _beforeTokenTransfer(operator, from, address(0), amount);\n\n        // Update state variables\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC777: burn amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Burned(operator, from, amount, data, operatorData);\n        emit Transfer(from, address(0), amount);\n    }\n\n    function _move(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    ) private {\n        _beforeTokenTransfer(operator, from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC777: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Sent(operator, from, to, amount, userData, operatorData);\n        emit Transfer(from, to, amount);\n    }\n\n    /**\n     * @dev See {ERC20-_approve}.\n     *\n     * Note that accounts cannot have allowance issued by their operators.\n     */\n    function _approve(\n        address holder,\n        address spender,\n        uint256 value\n    ) internal {\n        require(holder != address(0), \"ERC777: approve from the zero address\");\n        require(spender != address(0), \"ERC777: approve to the zero address\");\n\n        _allowances[holder][spender] = value;\n        emit Approval(holder, spender, value);\n    }\n\n    /**\n     * @dev Call from.tokensToSend() if the interface is registered\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _callTokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    ) private {\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n        }\n    }\n\n    /**\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\n     * tokensReceived() was not registered for the recipient\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _callTokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    ) private {\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n        } else if (requireReceptionAck) {\n            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
        },
        "@openzeppelin/contracts/token/ERC777/IERC777.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777Token standard as defined in the EIP.\n *\n * This contract uses the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n * token holders and recipients react to token movements by using setting implementers\n * for the associated interfaces in said registry. See {IERC1820Registry} and\n * {ERC1820Implementer}.\n */\ninterface IERC777 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For most token contracts, this value will equal 1.\n     */\n    function granularity() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(\n        address recipient,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external;\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external;\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData\n    );\n\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC777/IERC777Sender.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Sender.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\n *\n * {IERC777} Token holders can be notified of operations performed on their\n * tokens by having a contract implement this interface (contract holders can be\n * their own implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Sender {\n    /**\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\n     * is conveyed by `to` being the zero address or not.\n     *\n     * This call occurs _before_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
        },
        "contracts/stake/HoprStakeSeason4.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol';\nimport '@openzeppelin/contracts/utils/math/Math.sol';\nimport './IHoprBoost.sol';\n\n/**\n *\n */\ncontract HoprStakeSeason4 is Ownable, IERC777Recipient, IERC721Receiver, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n  using Math for uint256;\n\n  struct Account {\n    uint256 actualLockedTokenAmount; // The amount of LOCK_TOKEN being actually locked to the contract.\n    // Those tokens can be withdrawn after “UNLOCK_START”\n    uint256 lastSyncTimestamp; // Timestamp at which any “Account” attribute gets synced for the last time.\n    uint256 cumulatedRewards; // Rewards accredited to the account at “lastSyncTimestamp”.\n    uint256 claimedRewards; // Rewards claimed by the account.\n  }\n\n  uint256 public constant PROGRAM_START = 1658836800; // Block timestamp at which incentive program starts. Default value is 1658836800 (July 26th 2022 14:00 CET).\n  uint256 public constant PROGRAM_END = 1666785600; // Block timestamp at which incentive program ends. From this timestamp on, tokens can be unlocked. Default value is 1666785600 (Oct 26th 2022 14:00 CET).\n  uint256 public constant FACTOR_DENOMINATOR = 1e12; // Denominator of the “Basic reward factor”. Default value is 1e12.\n  uint256 public constant BASIC_FACTOR_NUMERATOR = 3171; // Numerator of the “Basic reward factor”, for all accounts that participate in the program. Default value is 3171, which corresponds to 3.171/1e9 per second. Its associated denominator is FACTOR_DENOMINATOR.\n  uint256 public constant BOOST_CAP = 15e22; // Cap on actual locked tokens for receiving additional boosts, 150k (150,000 * 1e18)\n\n  address public LOCK_TOKEN = 0xD057604A14982FE8D88c5fC25Aac3267eA142a08; // Token that HOPR holders need to lock to the contract: xHOPR address.\n  address public REWARD_TOKEN = 0xD4fdec44DB9D44B8f2b6d529620f9C0C7066A2c1; // Token that HOPR holders can claim as rewards: wxHOPR address\n  IHoprBoost public NFT_CONTRACT = IHoprBoost(0x43d13D7B83607F14335cF2cB75E87dA369D056c7); // Address of the HoprBoost NFT smart contract.\n\n  mapping(address => mapping(uint256 => uint256)) public redeemedNft; // Redeemed NFT per account, structured as “account -> index -> NFT tokenId”.\n  mapping(address => uint256) public redeemedNftIndex; // The last index of redeemed NFT of an account. It defines the length of the “redeemedBoostToken mapping.\n  mapping(address => mapping(uint256 => uint256)) public redeemedFactor; // Redeemed boost factor per account, structured as “account -> index -> NFT tokenId”.\n  mapping(address => uint256) public redeemedFactorIndex; // The last index of redeemed boost factor factor of an account. It defines the length of the “redeemedFactor” mapping.\n  mapping(uint256 => bool) public isBlockedNft; // Type index of HoprBoost NFT that is not accepted in this season\n\n  mapping(address => Account) public accounts; // It stores the locked token amount, earned and claimed rewards per account.\n  uint256 public totalLocked; // Total amount of tokens being locked in the incentive program.\n  uint256 public availableReward; // Total amount of reward tokens currently available in the lock.\n\n  // setup ERC1820\n  IERC1820Registry private constant ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n  bytes32 private constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256('ERC777TokensRecipient');\n\n  event Sync(address indexed account, uint256 indexed increment);\n  event Staked(address indexed account, uint256 indexed actualAmount);\n  event Released(address indexed account, uint256 indexed actualAmount);\n  event RewardFueled(uint256 indexed amount);\n  event Redeemed(address indexed account, uint256 indexed boostTokenId, bool indexed factorRegistered);\n  event Claimed(address indexed account, uint256 indexed rewardAmount);\n  event NftBlocked(uint256 indexed typeIndex);\n  event NftAllowed(uint256 indexed typeIndex);\n\n  /**\n   * @dev Provide NFT contract address. Transfer owner role to the new owner address.\n   * At deployment, it also registers the lock contract as an ERC777 recipient.\n   * Also, it blocks HODLr, DAO_v2, Surveyor, Wildhorn_v2, PuzzleHunt_v1, PuzzleHunt_v2 NFTs\n   * @param _nftAddress address Address of the NFT contract.\n   * @param _newOwner address Address of the new owner. This new owner can reclaim any ERC20 and ERC721 token being accidentally sent to the lock contract.\n   * @param _lockToken address Address of the stake token xHOPR.\n   * @param _rewardToken address Address of the reward token wxHOPR.\n   */\n  constructor(\n    address _nftAddress,\n    address _newOwner,\n    address _lockToken,\n    address _rewardToken\n  ) {\n    // implement in favor of testing\n    uint256 chainId;\n    assembly {\n      chainId := chainid()\n    }\n    if (chainId != 100) {\n      LOCK_TOKEN = _lockToken;\n      REWARD_TOKEN = _rewardToken;\n      NFT_CONTRACT = IHoprBoost(_nftAddress);\n    }\n    // block a selection of HoprBoost NFTs\n    _ownerBlockNftType(2); // HODLr\n    _ownerBlockNftType(3); // Wildhorn_v1\n    _ownerBlockNftType(4); // PuzzleHunt_v1\n    _ownerBlockNftType(7); // PuzzleHunt_v2\n    _ownerBlockNftType(8); // Wildhorn_v2\n    _ownerBlockNftType(9); // DAO_v2\n    _ownerBlockNftType(10); // Surveyor\n    transferOwnership(_newOwner);\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n  }\n\n  /**\n   * @dev Given NFT name type and rank name (as in HoprBoost) returns if the hodler has redeemed such an NFT\n   * @param nftType string Type name of the HoprBoost NFT.\n   * @param nftRank string Rank name of the HoprBoost NFT.\n   * @param hodler address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\n   */\n  function isNftTypeAndRankRedeemed1(\n    string memory nftType,\n    string memory nftRank,\n    address hodler\n  ) external view returns (bool) {\n    string memory nftURI = string(abi.encodePacked(nftType, '/', nftRank));\n\n    // compare `boostType/boosRank` of redeemed NFTs with `nftURI`\n    for (uint256 index = 0; index < redeemedNftIndex[hodler]; index++) {\n      uint256 redeemedTokenId = redeemedNft[hodler][index];\n      string memory redeemedTokenURI = NFT_CONTRACT.tokenURI(redeemedTokenId);\n      if (_hasSubstring(redeemedTokenURI, nftURI)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @dev Given NFT type index and rank name (as in HoprBoost) returns if the hodler has redeemed such an NFT\n   * @param nftTypeIndex uint256 Type index of the HoprBoost NFT.\n   * @param nftRank string Rank name of the HoprBoost NFT.\n   * @param hodler address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\n   */\n  function isNftTypeAndRankRedeemed2(\n    uint256 nftTypeIndex,\n    string memory nftRank,\n    address hodler\n  ) external view returns (bool) {\n    // compare `boostType/boosRank` of redeemed NFTs with `nftURI`\n    for (uint256 index = 0; index < redeemedNftIndex[hodler]; index++) {\n      uint256 redeemedTokenId = redeemedNft[hodler][index];\n      string memory redeemedTokenURI = NFT_CONTRACT.tokenURI(redeemedTokenId);\n      if (NFT_CONTRACT.typeIndexOf(redeemedTokenId) == nftTypeIndex && _hasSubstring(redeemedTokenURI, nftRank)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @dev Given NFT type index and the boost numerator (as in HoprBoost) returns if the hodler has redeemed such an NFT\n   * @param nftTypeIndex uint256 Type index of the HoprBoost NFT.\n   * @param boostNumerator uint256 Boost numerator of the HoprBoost NFT.\n   * @param hodler address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\n   */\n  function isNftTypeAndRankRedeemed3(\n    uint256 nftTypeIndex,\n    uint256 boostNumerator,\n    address hodler\n  ) external view returns (bool) {\n    for (uint256 index = 0; index < redeemedNftIndex[hodler]; index++) {\n      uint256 redeemedTokenId = redeemedNft[hodler][index];\n      (uint256 redeemedBoost, ) = NFT_CONTRACT.boostOf(redeemedTokenId);\n      if (NFT_CONTRACT.typeIndexOf(redeemedTokenId) == nftTypeIndex && boostNumerator == redeemedBoost) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @dev Given NFT type name and the boost numerator (as in HoprBoost) returns if the hodler has redeemed such an NFT\n   * @param nftType string Type name of the HoprBoost NFT.\n   * @param boostNumerator uint256 Boost numerator of the HoprBoost NFT.\n   * @param hodler address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\n   */\n  function isNftTypeAndRankRedeemed4(\n    string memory nftType,\n    uint256 boostNumerator,\n    address hodler\n  ) external view returns (bool) {\n    for (uint256 index = 0; index < redeemedNftIndex[hodler]; index++) {\n      uint256 redeemedTokenId = redeemedNft[hodler][index];\n      (uint256 redeemedBoost, ) = NFT_CONTRACT.boostOf(redeemedTokenId);\n      if (\n        keccak256((bytes(NFT_CONTRACT.typeOf(redeemedTokenId)))) == keccak256((bytes(nftType))) &&\n        boostNumerator == redeemedBoost\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @dev Owner can block NFTs from being redeemed in the current staking contract by its type name (as in HoprBoost)\n   * @param typeIndex integer Type index to be blocked\n   */\n  function ownerBlockNftType(uint256 typeIndex) external onlyOwner {\n    require(!isBlockedNft[typeIndex], 'HoprStake: NFT type is already blocked');\n    _ownerBlockNftType(typeIndex);\n  }\n\n  /**\n   * @dev Owner can allow blocked NFTs to be redeemable.\n   * @param typeIndex integer Type index to be allowed\n   */\n  function ownerUnblockNftType(uint256 typeIndex) external onlyOwner {\n    require(isBlockedNft[typeIndex], 'HoprStake: NFT type is not blocked');\n    isBlockedNft[typeIndex] = false;\n    emit NftAllowed(typeIndex);\n  }\n\n  /**\n   * @dev ERC677 hook. Token holders can send their tokens with `transferAndCall` to the stake contract.\n   * After PROGRAM_END, it refuses tokens; Before PROGRAM_END, it accepts tokens xHOPR token, sync\n   * Account state, and update totalLocked.\n   * @param _from address Address of tokens sender\n   * @param _value uint256 token amount being transferred\n   * @param _data bytes Data being sent along with token transfer\n   */\n  function onTokenTransfer(\n    address _from,\n    uint256 _value,\n    // solhint-disable-next-line no-unused-vars\n    bytes memory _data\n  ) external returns (bool) {\n    require(msg.sender == LOCK_TOKEN, 'HoprStake: Only accept LOCK_TOKEN in staking');\n    require(block.timestamp <= PROGRAM_END, 'HoprStake: Program ended, cannot stake anymore.');\n\n    _sync(_from);\n    accounts[_from].actualLockedTokenAmount += _value;\n    totalLocked += _value;\n    emit Staked(_from, _value);\n\n    return true;\n  }\n\n  /**\n   * @dev ERC777 hook. To receive wxHOPR to fuel the reward pool with `send()` method. It updates the availableReward by tokenAmount.\n   * @param operator address operator requesting the transfer\n   * @param from address token holder address\n   * @param to address recipient address\n   * @param amount uint256 amount of tokens to transfer\n   * @param userData bytes hex information provided by the token holder (if any)\n   * @param operatorData bytes extra information provided by the operator (if any)\n   */\n  function tokensReceived(\n    // solhint-disable-next-line no-unused-vars\n    address operator,\n    address from,\n    address to,\n    uint256 amount,\n    // solhint-disable-next-line no-unused-vars\n    bytes calldata userData,\n    // solhint-disable-next-line no-unused-vars\n    bytes calldata operatorData\n  ) external override {\n    require(msg.sender == REWARD_TOKEN, 'HoprStake: Sender must be wxHOPR token');\n    require(to == address(this), 'HoprStake: Must be sending tokens to HoprStake contract');\n    require(from == owner(), 'HoprStake: Only accept owner to provide rewards');\n    availableReward += amount;\n    emit RewardFueled(amount);\n  }\n\n  /**\n   * @dev Whenever a boost `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n   * when redeeming, this function is called. Boost factor associated with the\n   * It must return its Solidity selector to confirm the token transfer upon success.\n   * @param operator address operator requesting the transfer\n   * @param from address token holder address\n   * @param tokenId uint256 amount of tokens to transfer\n   * @param data bytes hex information provided by the token holder (if any)\n   */\n  function onERC721Received(\n    // solhint-disable-next-line no-unused-vars\n    address operator,\n    address from,\n    uint256 tokenId,\n    // solhint-disable-next-line no-unused-vars\n    bytes calldata data\n  ) external override returns (bytes4) {\n    require(_msgSender() == address(NFT_CONTRACT), 'HoprStake: Cannot SafeTransferFrom tokens other than HoprBoost.');\n    require(block.timestamp <= PROGRAM_END, 'HoprStake: Program ended, cannot redeem boosts.');\n    // Account memory account = accounts[from];\n    _sync(from);\n\n    // redeem NFT\n    redeemedNft[from][redeemedNftIndex[from]] = tokenId;\n    redeemedNftIndex[from] += 1;\n\n    // update boost factor\n    uint256 typeId = NFT_CONTRACT.typeIndexOf(tokenId);\n    (uint256 factor, ) = NFT_CONTRACT.boostOf(tokenId);\n    require(!isBlockedNft[typeId], 'HoprStake: Can only redeem NFTs of allowed types.');\n\n    uint256 boostIndex = redeemedFactorIndex[from];\n    uint256 index = 0;\n    for (index; index < boostIndex; index++) {\n      // loop through redeemed factors, replace the factor of the same type, if the current factor is larger.\n      uint256 redeemedId = redeemedFactor[from][index];\n      uint256 redeemedIndex = NFT_CONTRACT.typeIndexOf(redeemedId);\n      (uint256 redeemedFactorValue, ) = NFT_CONTRACT.boostOf(redeemedId);\n\n      if (NFT_CONTRACT.typeIndexOf(redeemedId) == typeId) {\n        if (redeemedFactorValue < factor) {\n          redeemedFactor[from][index] = tokenId;\n        }\n        emit Redeemed(from, tokenId, redeemedFactorValue < factor);\n        break;\n      }\n    }\n    if (index == boostIndex) {\n      // new type being redeemed.\n      redeemedFactor[from][boostIndex] = tokenId;\n      redeemedFactorIndex[from] += 1;\n      emit Redeemed(from, tokenId, true);\n    }\n\n    return IERC721Receiver(address(this)).onERC721Received.selector;\n  }\n\n  /**\n   * @dev Manually sync account's reward states\n   * @notice public function of ``_sync``.\n   * @param account address Account whose stake rewards will be synced.\n   */\n  function sync(address account) external {\n    _sync(account);\n  }\n\n  /**\n   * @dev Sync rewards and claim them\n   * @notice public function of ``_sync`` + ``_claim``\n   * @param account address Account whose stake rewards will be synced and claimed.\n   */\n  function claimRewards(address account) external {\n    _sync(account);\n    _claim(account);\n  }\n\n  /**\n   * @dev Unlock staking for caller\n   */\n  function unlock() external {\n    _unlockFor(msg.sender);\n  }\n\n  /**\n   * @dev Unlock staking for a given account\n   * @param account address Account that staked tokens.\n   */\n  function unlockFor(address account) external {\n    _unlockFor(account);\n  }\n\n  /**\n   * @dev Reclaim any ERC20 token being accidentally sent to the contract.\n   * @param tokenAddress address ERC20 token address.\n   */\n  function reclaimErc20Tokens(address tokenAddress) external onlyOwner nonReentrant {\n    uint256 difference;\n    if (tokenAddress == LOCK_TOKEN) {\n      difference = IERC20(LOCK_TOKEN).balanceOf(address(this)) - totalLocked;\n    } else {\n      difference = IERC20(tokenAddress).balanceOf(address(this));\n    }\n    IERC20(tokenAddress).safeTransfer(owner(), difference);\n  }\n\n  /**\n   * @dev Reclaim any ERC721 token being accidentally sent to the contract.\n   * @param tokenAddress address ERC721 token address.\n   */\n  function reclaimErc721Tokens(address tokenAddress, uint256 tokenId) external onlyOwner nonReentrant {\n    require(tokenAddress != address(NFT_CONTRACT), 'HoprStake: Cannot claim HoprBoost NFT');\n    IHoprBoost(tokenAddress).transferFrom(address(this), owner(), tokenId);\n  }\n\n  /**\n   * @dev Shortcut that returns the actual stake of an account.\n   * @param _account address Address of the staker account.\n   */\n  function stakedHoprTokens(address _account) public view returns (uint256) {\n    return accounts[_account].actualLockedTokenAmount;\n  }\n\n  /**\n   * @dev Returns the increment of cumulated rewards during the “lastSyncTimestamp” and current block.timestamp.\n   * @param _account address Address of the account whose rewards will be calculated.\n   */\n  function getCumulatedRewardsIncrement(address _account) public view returns (uint256) {\n    return _getCumulatedRewardsIncrement(_account);\n  }\n\n  /**\n   * @dev Calculates the increment of cumulated rewards during the “lastSyncTimestamp” and block.timestamp.\n   * current block timestamp and lastSyncTimestamp are confined in [PROGRAM_START, PROGRAM_END] for basic and boosted lockup,\n   * @param _account address Address of the account whose rewards will be calculated.\n   */\n  function _getCumulatedRewardsIncrement(address _account) private view returns (uint256) {\n    Account memory account = accounts[_account];\n    if (block.timestamp <= PROGRAM_START || account.lastSyncTimestamp >= PROGRAM_END) {\n      // skip calculation and return directly 0;\n      return 0;\n    }\n    // Per second gain, for basic lock-up.\n    uint256 gainPerSec = account.actualLockedTokenAmount * BASIC_FACTOR_NUMERATOR;\n\n    // Per second gain, for additional boost, applicable to amount under BOOST_CAP\n    for (uint256 index = 0; index < redeemedFactorIndex[_account]; index++) {\n      uint256 tokenId = redeemedFactor[_account][index];\n      (uint256 boost, ) = NFT_CONTRACT.boostOf(tokenId);\n      gainPerSec += (account.actualLockedTokenAmount.min(BOOST_CAP)) * boost;\n    }\n\n    return\n      (gainPerSec *\n        (block.timestamp.max(PROGRAM_START).min(PROGRAM_END) -\n          account.lastSyncTimestamp.max(PROGRAM_START).min(PROGRAM_END))) / FACTOR_DENOMINATOR;\n  }\n\n  /**\n   * @dev if the given `tokenURI` end with `/substring`\n   * @param tokenURI string URI of the HoprBoost NFT. E.g. \"https://stake.hoprnet.org/PuzzleHunt_v2/Bronze - Week 5\"\n   * @param substring string of the `boostRank` or `boostType/boostRank`. E.g. \"Bronze - Week 5\", \"PuzzleHunt_v2/Bronze - Week 5\"\n   */\n  function _hasSubstring(string memory tokenURI, string memory substring) private pure returns (bool) {\n    // convert string to bytes\n    bytes memory tokenURIInBytes = bytes(tokenURI);\n    bytes memory substringInBytes = bytes(substring);\n\n    // lenghth of tokenURI is the sum of substringLen and restLen, where\n    // - `substringLen` is the length of the part that is extracted and compared with the provided substring\n    // - `restLen` is the length of the baseURI and boostType, which will be offset\n    uint256 substringLen = substringInBytes.length;\n    uint256 restLen = tokenURIInBytes.length - substringLen;\n    // one byte before the supposed substring, to see if it's the start of `substring`\n    bytes1 slashPositionContent = tokenURIInBytes[restLen - 1];\n\n    if (slashPositionContent != 0x2f) {\n      // if this position is not a `/`, substring in the tokenURI is for sure neither `boostRank` nor `boostType/boostRank`\n      return false;\n    }\n\n    // offset so that value from the next calldata (`substring`) is removed, so bitwise it needs to shift\n    // log2(16) * (32 - substringLen) * 2\n    uint256 offset = (32 - substringLen) * 8;\n\n    bytes32 trimed; // left-padded extracted `boostRank` from the `tokenURI`\n    bytes32 substringInBytes32 = bytes32(substringInBytes); // convert substring in to bytes32\n    bytes32 shifted; // shift the substringInBytes32 from right-padded to left-padded\n\n    bool result;\n    assembly {\n      // assuming `boostRank` or `boostType/boostRank` will never exceed 32 bytes\n      // left-pad the `boostRank` extracted from the `tokenURI`, so that possible\n      // extra pieces of `substring` is not included\n      // 32 jumps the storage of bytes length and restLen offsets the `baseURI`\n      trimed := shr(offset, mload(add(add(tokenURIInBytes, 32), restLen)))\n      // tokenURIInBytes32 := mload(add(add(tokenURIInBytes, 32), restLen))\n      // left-pad `substring`\n      shifted := shr(offset, substringInBytes32)\n      // compare results\n      result := eq(trimed, shifted)\n    }\n    return result;\n  }\n\n  /**\n   * @dev Update “lastSyncTimestamp” with the current block timestamp and update “cumulatedRewards” with _getCumulatedRewardsIncrement(account)\n   * @param _account address Address of the account whose rewards will be calculated.\n   */\n  function _sync(address _account) private {\n    uint256 increment = _getCumulatedRewardsIncrement(_account);\n    accounts[_account].cumulatedRewards += increment;\n    accounts[_account].lastSyncTimestamp = block.timestamp;\n    emit Sync(_account, increment);\n  }\n\n  /**\n   * @dev Claim rewards for staking.\n   * @param _account address Address of the staking account.\n   */\n  function _claim(address _account) private {\n    Account memory account = accounts[_account];\n    // update states\n    uint256 amount = account.cumulatedRewards - account.claimedRewards;\n    if (amount > 0) {\n      accounts[_account].claimedRewards = accounts[_account].cumulatedRewards;\n      require(availableReward >= amount, 'HoprStake: Insufficient reward pool.');\n      availableReward -= amount;\n      // send rewards to the account.\n      IERC20(REWARD_TOKEN).safeTransfer(_account, amount);\n      emit Claimed(_account, amount);\n    }\n  }\n\n  /**\n   * @dev Unlock staking for a given account\n   * @param _account address Account that staked tokens.\n   */\n  function _unlockFor(address _account) private {\n    require(block.timestamp > PROGRAM_END, 'HoprStake: Program is ongoing, cannot unlock stake.');\n    uint256 actualStake = accounts[_account].actualLockedTokenAmount;\n    _sync(_account);\n    accounts[_account].actualLockedTokenAmount = 0;\n    totalLocked -= actualStake;\n    _claim(_account);\n    // unlock actual staked tokens\n    IERC20(LOCK_TOKEN).safeTransfer(_account, actualStake);\n    // unlock redeemed NFTs\n    for (uint256 index = 0; index < redeemedNftIndex[_account]; index++) {\n      NFT_CONTRACT.transferFrom(address(this), _account, redeemedNft[_account][index]);\n    }\n    emit Released(_account, actualStake);\n  }\n\n  /**\n   * @dev Private function to block an NFT\n   * @param typeIndex integer Type index to be blocked\n   */\n  function _ownerBlockNftType(uint256 typeIndex) private {\n    isBlockedNft[typeIndex] = true;\n    emit NftBlocked(typeIndex);\n  }\n}\n"
        },
        "contracts/stake/HoprStakeSeason3.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol';\nimport '@openzeppelin/contracts/utils/math/Math.sol';\nimport './IHoprBoost.sol';\n\n/**\n *\n */\ncontract HoprStakeSeason3 is Ownable, IERC777Recipient, IERC721Receiver, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n  using Math for uint256;\n\n  struct Account {\n    uint256 actualLockedTokenAmount; // The amount of LOCK_TOKEN being actually locked to the contract.\n    // Those tokens can be withdrawn after “UNLOCK_START”\n    uint256 lastSyncTimestamp; // Timestamp at which any “Account” attribute gets synced for the last time.\n    uint256 cumulatedRewards; // Rewards accredited to the account at “lastSyncTimestamp”.\n    uint256 claimedRewards; // Rewards claimed by the account.\n  }\n\n  uint256 public constant PROGRAM_START = 1650974400; // Block timestamp at which incentive program starts. Default value is 1650974400 (April 26th 2022 14:00 CET).\n  uint256 public constant PROGRAM_END = 1658836800; // Block timestamp at which incentive program ends. From this timestamp on, tokens can be unlocked. Default value is 1658836800 (July 26th 2022 14:00 CET).\n  uint256 public constant FACTOR_DENOMINATOR = 1e12; // Denominator of the “Basic reward factor”. Default value is 1e12.\n  uint256 public constant BASIC_FACTOR_NUMERATOR = 3171; // Numerator of the “Basic reward factor”, for all accounts that participate in the program. Default value is 3171, which corresponds to 3.171/1e9 per second. Its associated denominator is FACTOR_DENOMINATOR.\n  uint256 public constant BOOST_CAP = 15e22; // Cap on actual locked tokens for receiving additional boosts, 150k (150,000 * 1e18)\n\n  address public LOCK_TOKEN = 0xD057604A14982FE8D88c5fC25Aac3267eA142a08; // Token that HOPR holders need to lock to the contract: xHOPR address.\n  address public REWARD_TOKEN = 0xD4fdec44DB9D44B8f2b6d529620f9C0C7066A2c1; // Token that HOPR holders can claim as rewards: wxHOPR address\n  IHoprBoost public NFT_CONTRACT = IHoprBoost(0x43d13D7B83607F14335cF2cB75E87dA369D056c7); // Address of the HoprBoost NFT smart contract.\n\n  mapping(address => mapping(uint256 => uint256)) public redeemedNft; // Redeemed NFT per account, structured as “account -> index -> NFT tokenId”.\n  mapping(address => uint256) public redeemedNftIndex; // The last index of redeemed NFT of an account. It defines the length of the “redeemedBoostToken mapping.\n  mapping(address => mapping(uint256 => uint256)) public redeemedFactor; // Redeemed boost factor per account, structured as “account -> index -> NFT tokenId”.\n  mapping(address => uint256) public redeemedFactorIndex; // The last index of redeemed boost factor factor of an account. It defines the length of the “redeemedFactor” mapping.\n  mapping(uint256 => bool) public isBlockedNft; // Type index of HoprBoost NFT that is not accepted in this season\n\n  mapping(address => Account) public accounts; // It stores the locked token amount, earned and claimed rewards per account.\n  uint256 public totalLocked; // Total amount of tokens being locked in the incentive program.\n  uint256 public availableReward; // Total amount of reward tokens currently available in the lock.\n\n  // setup ERC1820\n  IERC1820Registry private constant ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n  bytes32 private constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256('ERC777TokensRecipient');\n\n  event Sync(address indexed account, uint256 indexed increment);\n  event Staked(address indexed account, uint256 indexed actualAmount);\n  event Released(address indexed account, uint256 indexed actualAmount);\n  event RewardFueled(uint256 indexed amount);\n  event Redeemed(address indexed account, uint256 indexed boostTokenId, bool indexed factorRegistered);\n  event Claimed(address indexed account, uint256 indexed rewardAmount);\n  event NftBlocked(uint256 indexed typeIndex);\n  event NftAllowed(uint256 indexed typeIndex);\n\n  /**\n   * @dev Provide NFT contract address. Transfer owner role to the new owner address.\n   * At deployment, it also registers the lock contract as an ERC777 recipient.\n   * Also, it blocks HODLr NFTs\n   * @param _nftAddress address Address of the NFT contract.\n   * @param _newOwner address Address of the new owner. This new owner can reclaim any ERC20 and ERC721 token being accidentally sent to the lock contract.\n   * @param _lockToken address Address of the stake token xHOPR.\n   * @param _rewardToken address Address of the reward token wxHOPR.\n   */\n  constructor(\n    address _nftAddress,\n    address _newOwner,\n    address _lockToken,\n    address _rewardToken\n  ) {\n    // implement in favor of testing\n    uint256 chainId;\n    assembly {\n      chainId := chainid()\n    }\n    if (chainId != 100) {\n      LOCK_TOKEN = _lockToken;\n      REWARD_TOKEN = _rewardToken;\n      NFT_CONTRACT = IHoprBoost(_nftAddress);\n    }\n    // block a selection of HoprBoost NFTs\n    _ownerBlockNftType(2);\n    transferOwnership(_newOwner);\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n  }\n\n  /**\n   * @dev Given NFT name type and rank name (as in HoprBoost) returns if the hodler has redeemed such an NFT\n   * @param nftType string Type name of the HoprBoost NFT.\n   * @param nftRank string Rank name of the HoprBoost NFT.\n   * @param hodler address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\n   */\n  function isNftTypeAndRankRedeemed1(\n    string memory nftType,\n    string memory nftRank,\n    address hodler\n  ) external view returns (bool) {\n    string memory nftURI = string(abi.encodePacked(nftType, '/', nftRank));\n\n    // compare `boostType/boosRank` of redeemed NFTs with `nftURI`\n    for (uint256 index = 0; index < redeemedNftIndex[hodler]; index++) {\n      uint256 redeemedTokenId = redeemedNft[hodler][index];\n      string memory redeemedTokenURI = NFT_CONTRACT.tokenURI(redeemedTokenId);\n      if (_hasSubstring(redeemedTokenURI, nftURI)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @dev Given NFT type index and rank name (as in HoprBoost) returns if the hodler has redeemed such an NFT\n   * @param nftTypeIndex uint256 Type index of the HoprBoost NFT.\n   * @param nftRank string Rank name of the HoprBoost NFT.\n   * @param hodler address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\n   */\n  function isNftTypeAndRankRedeemed2(\n    uint256 nftTypeIndex,\n    string memory nftRank,\n    address hodler\n  ) external view returns (bool) {\n    // compare `boostType/boosRank` of redeemed NFTs with `nftURI`\n    for (uint256 index = 0; index < redeemedNftIndex[hodler]; index++) {\n      uint256 redeemedTokenId = redeemedNft[hodler][index];\n      string memory redeemedTokenURI = NFT_CONTRACT.tokenURI(redeemedTokenId);\n      if (NFT_CONTRACT.typeIndexOf(redeemedTokenId) == nftTypeIndex && _hasSubstring(redeemedTokenURI, nftRank)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @dev Given NFT type index and the boost numerator (as in HoprBoost) returns if the hodler has redeemed such an NFT\n   * @param nftTypeIndex uint256 Type index of the HoprBoost NFT.\n   * @param boostNumerator uint256 Boost numerator of the HoprBoost NFT.\n   * @param hodler address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\n   */\n  function isNftTypeAndRankRedeemed3(\n    uint256 nftTypeIndex,\n    uint256 boostNumerator,\n    address hodler\n  ) external view returns (bool) {\n    for (uint256 index = 0; index < redeemedNftIndex[hodler]; index++) {\n      uint256 redeemedTokenId = redeemedNft[hodler][index];\n      (uint256 redeemedBoost, ) = NFT_CONTRACT.boostOf(redeemedTokenId);\n      if (NFT_CONTRACT.typeIndexOf(redeemedTokenId) == nftTypeIndex && boostNumerator == redeemedBoost) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @dev Given NFT type name and the boost numerator (as in HoprBoost) returns if the hodler has redeemed such an NFT\n   * @param nftType string Type name of the HoprBoost NFT.\n   * @param boostNumerator uint256 Boost numerator of the HoprBoost NFT.\n   * @param hodler address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\n   */\n  function isNftTypeAndRankRedeemed4(\n    string memory nftType,\n    uint256 boostNumerator,\n    address hodler\n  ) external view returns (bool) {\n    for (uint256 index = 0; index < redeemedNftIndex[hodler]; index++) {\n      uint256 redeemedTokenId = redeemedNft[hodler][index];\n      (uint256 redeemedBoost, ) = NFT_CONTRACT.boostOf(redeemedTokenId);\n      if (\n        keccak256((bytes(NFT_CONTRACT.typeOf(redeemedTokenId)))) == keccak256((bytes(nftType))) &&\n        boostNumerator == redeemedBoost\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @dev Owner can block NFTs from being redeemed in the current staking contract by its type name (as in HoprBoost)\n   * @param typeIndex integer Type index to be blocked\n   */\n  function ownerBlockNftType(uint256 typeIndex) external onlyOwner {\n    require(!isBlockedNft[typeIndex], 'HoprStake: NFT type is already blocked');\n    _ownerBlockNftType(typeIndex);\n  }\n\n  /**\n   * @dev Owner can allow blocked NFTs to be redeemable.\n   * @param typeIndex integer Type index to be allowed\n   */\n  function ownerUnblockNftType(uint256 typeIndex) external onlyOwner {\n    require(isBlockedNft[typeIndex], 'HoprStake: NFT type is not blocked');\n    isBlockedNft[typeIndex] = false;\n    emit NftAllowed(typeIndex);\n  }\n\n  /**\n   * @dev ERC677 hook. Token holders can send their tokens with `transferAndCall` to the stake contract.\n   * After PROGRAM_END, it refuses tokens; Before PROGRAM_END, it accepts tokens xHOPR token, sync\n   * Account state, and update totalLocked.\n   * @param _from address Address of tokens sender\n   * @param _value uint256 token amount being transferred\n   * @param _data bytes Data being sent along with token transfer\n   */\n  function onTokenTransfer(\n    address _from,\n    uint256 _value,\n    // solhint-disable-next-line no-unused-vars\n    bytes memory _data\n  ) external returns (bool) {\n    require(msg.sender == LOCK_TOKEN, 'HoprStake: Only accept LOCK_TOKEN in staking');\n    require(block.timestamp <= PROGRAM_END, 'HoprStake: Program ended, cannot stake anymore.');\n\n    _sync(_from);\n    accounts[_from].actualLockedTokenAmount += _value;\n    totalLocked += _value;\n    emit Staked(_from, _value);\n\n    return true;\n  }\n\n  /**\n   * @dev ERC777 hook. To receive wxHOPR to fuel the reward pool with `send()` method. It updates the availableReward by tokenAmount.\n   * @param operator address operator requesting the transfer\n   * @param from address token holder address\n   * @param to address recipient address\n   * @param amount uint256 amount of tokens to transfer\n   * @param userData bytes hex information provided by the token holder (if any)\n   * @param operatorData bytes extra information provided by the operator (if any)\n   */\n  function tokensReceived(\n    // solhint-disable-next-line no-unused-vars\n    address operator,\n    address from,\n    address to,\n    uint256 amount,\n    // solhint-disable-next-line no-unused-vars\n    bytes calldata userData,\n    // solhint-disable-next-line no-unused-vars\n    bytes calldata operatorData\n  ) external override {\n    require(msg.sender == REWARD_TOKEN, 'HoprStake: Sender must be wxHOPR token');\n    require(to == address(this), 'HoprStake: Must be sending tokens to HoprStake contract');\n    require(from == owner(), 'HoprStake: Only accept owner to provide rewards');\n    availableReward += amount;\n    emit RewardFueled(amount);\n  }\n\n  /**\n   * @dev Whenever a boost `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n   * when redeeming, this function is called. Boost factor associated with the\n   * It must return its Solidity selector to confirm the token transfer upon success.\n   * @param operator address operator requesting the transfer\n   * @param from address token holder address\n   * @param tokenId uint256 amount of tokens to transfer\n   * @param data bytes hex information provided by the token holder (if any)\n   */\n  function onERC721Received(\n    // solhint-disable-next-line no-unused-vars\n    address operator,\n    address from,\n    uint256 tokenId,\n    // solhint-disable-next-line no-unused-vars\n    bytes calldata data\n  ) external override returns (bytes4) {\n    require(_msgSender() == address(NFT_CONTRACT), 'HoprStake: Cannot SafeTransferFrom tokens other than HoprBoost.');\n    require(block.timestamp <= PROGRAM_END, 'HoprStake: Program ended, cannot redeem boosts.');\n    // Account memory account = accounts[from];\n    _sync(from);\n\n    // redeem NFT\n    redeemedNft[from][redeemedNftIndex[from]] = tokenId;\n    redeemedNftIndex[from] += 1;\n\n    // update boost factor\n    uint256 typeId = NFT_CONTRACT.typeIndexOf(tokenId);\n    (uint256 factor, ) = NFT_CONTRACT.boostOf(tokenId);\n    require(!isBlockedNft[typeId], 'HoprStake: Can only redeem NFTs of allowed types.');\n\n    uint256 boostIndex = redeemedFactorIndex[from];\n    uint256 index = 0;\n    for (index; index < boostIndex; index++) {\n      // loop through redeemed factors, replace the factor of the same type, if the current factor is larger.\n      uint256 redeemedId = redeemedFactor[from][index];\n      uint256 redeemedIndex = NFT_CONTRACT.typeIndexOf(redeemedId);\n      (uint256 redeemedFactorValue, ) = NFT_CONTRACT.boostOf(redeemedId);\n\n      if (NFT_CONTRACT.typeIndexOf(redeemedId) == typeId) {\n        if (redeemedFactorValue < factor) {\n          redeemedFactor[from][index] = tokenId;\n        }\n        emit Redeemed(from, tokenId, redeemedFactorValue < factor);\n        break;\n      }\n    }\n    if (index == boostIndex) {\n      // new type being redeemed.\n      redeemedFactor[from][boostIndex] = tokenId;\n      redeemedFactorIndex[from] += 1;\n      emit Redeemed(from, tokenId, true);\n    }\n\n    return IERC721Receiver(address(this)).onERC721Received.selector;\n  }\n\n  /**\n   * @dev Manually sync account's reward states\n   * @notice public function of ``_sync``.\n   * @param account address Account whose stake rewards will be synced.\n   */\n  function sync(address account) external {\n    _sync(account);\n  }\n\n  /**\n   * @dev Sync rewards and claim them\n   * @notice public function of ``_sync`` + ``_claim``\n   * @param account address Account whose stake rewards will be synced and claimed.\n   */\n  function claimRewards(address account) external {\n    _sync(account);\n    _claim(account);\n  }\n\n  /**\n   * @dev Unlock staking for caller\n   */\n  function unlock() external {\n    _unlockFor(msg.sender);\n  }\n\n  /**\n   * @dev Unlock staking for a given account\n   * @param account address Account that staked tokens.\n   */\n  function unlockFor(address account) external {\n    _unlockFor(account);\n  }\n\n  /**\n   * @dev Reclaim any ERC20 token being accidentally sent to the contract.\n   * @param tokenAddress address ERC20 token address.\n   */\n  function reclaimErc20Tokens(address tokenAddress) external onlyOwner nonReentrant {\n    uint256 difference;\n    if (tokenAddress == LOCK_TOKEN) {\n      difference = IERC20(LOCK_TOKEN).balanceOf(address(this)) - totalLocked;\n    } else {\n      difference = IERC20(tokenAddress).balanceOf(address(this));\n    }\n    IERC20(tokenAddress).safeTransfer(owner(), difference);\n  }\n\n  /**\n   * @dev Reclaim any ERC721 token being accidentally sent to the contract.\n   * @param tokenAddress address ERC721 token address.\n   */\n  function reclaimErc721Tokens(address tokenAddress, uint256 tokenId) external onlyOwner nonReentrant {\n    require(tokenAddress != address(NFT_CONTRACT), 'HoprStake: Cannot claim HoprBoost NFT');\n    IHoprBoost(tokenAddress).transferFrom(address(this), owner(), tokenId);\n  }\n\n  /**\n   * @dev Shortcut that returns the actual stake of an account.\n   * @param _account address Address of the staker account.\n   */\n  function stakedHoprTokens(address _account) public view returns (uint256) {\n    return accounts[_account].actualLockedTokenAmount;\n  }\n\n  /**\n   * @dev Returns the increment of cumulated rewards during the “lastSyncTimestamp” and current block.timestamp.\n   * @param _account address Address of the account whose rewards will be calculated.\n   */\n  function getCumulatedRewardsIncrement(address _account) public view returns (uint256) {\n    return _getCumulatedRewardsIncrement(_account);\n  }\n\n  /**\n   * @dev Calculates the increment of cumulated rewards during the “lastSyncTimestamp” and block.timestamp.\n   * current block timestamp and lastSyncTimestamp are confined in [PROGRAM_START, PROGRAM_END] for basic and boosted lockup,\n   * @param _account address Address of the account whose rewards will be calculated.\n   */\n  function _getCumulatedRewardsIncrement(address _account) private view returns (uint256) {\n    Account memory account = accounts[_account];\n    if (block.timestamp <= PROGRAM_START || account.lastSyncTimestamp >= PROGRAM_END) {\n      // skip calculation and return directly 0;\n      return 0;\n    }\n    // Per second gain, for basic lock-up.\n    uint256 gainPerSec = account.actualLockedTokenAmount * BASIC_FACTOR_NUMERATOR;\n\n    // Per second gain, for additional boost, applicable to amount under BOOST_CAP\n    for (uint256 index = 0; index < redeemedFactorIndex[_account]; index++) {\n      uint256 tokenId = redeemedFactor[_account][index];\n      (uint256 boost, ) = NFT_CONTRACT.boostOf(tokenId);\n      gainPerSec += (account.actualLockedTokenAmount.min(BOOST_CAP)) * boost;\n    }\n\n    return\n      (gainPerSec *\n        (block.timestamp.max(PROGRAM_START).min(PROGRAM_END) -\n          account.lastSyncTimestamp.max(PROGRAM_START).min(PROGRAM_END))) / FACTOR_DENOMINATOR;\n  }\n\n  /**\n   * @dev if the given `tokenURI` end with `/substring`\n   * @param tokenURI string URI of the HoprBoost NFT. E.g. \"https://stake.hoprnet.org/PuzzleHunt_v2/Bronze - Week 5\"\n   * @param substring string of the `boostRank` or `boostType/boostRank`. E.g. \"Bronze - Week 5\", \"PuzzleHunt_v2/Bronze - Week 5\"\n   */\n  function _hasSubstring(string memory tokenURI, string memory substring) private pure returns (bool) {\n    // convert string to bytes\n    bytes memory tokenURIInBytes = bytes(tokenURI);\n    bytes memory substringInBytes = bytes(substring);\n\n    // lenghth of tokenURI is the sum of substringLen and restLen, where\n    // - `substringLen` is the length of the part that is extracted and compared with the provided substring\n    // - `restLen` is the length of the baseURI and boostType, which will be offset\n    uint256 substringLen = substringInBytes.length;\n    uint256 restLen = tokenURIInBytes.length - substringLen;\n    // one byte before the supposed substring, to see if it's the start of `substring`\n    bytes1 slashPositionContent = tokenURIInBytes[restLen - 1];\n\n    if (slashPositionContent != 0x2f) {\n      // if this position is not a `/`, substring in the tokenURI is for sure neither `boostRank` nor `boostType/boostRank`\n      return false;\n    }\n\n    // offset so that value from the next calldata (`substring`) is removed, so bitwise it needs to shift\n    // log2(16) * (32 - substringLen) * 2\n    uint256 offset = (32 - substringLen) * 8;\n\n    bytes32 trimed; // left-padded extracted `boostRank` from the `tokenURI`\n    bytes32 substringInBytes32 = bytes32(substringInBytes); // convert substring in to bytes32\n    bytes32 shifted; // shift the substringInBytes32 from right-padded to left-padded\n\n    bool result;\n    assembly {\n      // assuming `boostRank` or `boostType/boostRank` will never exceed 32 bytes\n      // left-pad the `boostRank` extracted from the `tokenURI`, so that possible\n      // extra pieces of `substring` is not included\n      // 32 jumps the storage of bytes length and restLen offsets the `baseURI`\n      trimed := shr(offset, mload(add(add(tokenURIInBytes, 32), restLen)))\n      // tokenURIInBytes32 := mload(add(add(tokenURIInBytes, 32), restLen))\n      // left-pad `substring`\n      shifted := shr(offset, substringInBytes32)\n      // compare results\n      result := eq(trimed, shifted)\n    }\n    return result;\n  }\n\n  /**\n   * @dev Update “lastSyncTimestamp” with the current block timestamp and update “cumulatedRewards” with _getCumulatedRewardsIncrement(account)\n   * @param _account address Address of the account whose rewards will be calculated.\n   */\n  function _sync(address _account) private {\n    uint256 increment = _getCumulatedRewardsIncrement(_account);\n    accounts[_account].cumulatedRewards += increment;\n    accounts[_account].lastSyncTimestamp = block.timestamp;\n    emit Sync(_account, increment);\n  }\n\n  /**\n   * @dev Claim rewards for staking.\n   * @param _account address Address of the staking account.\n   */\n  function _claim(address _account) private {\n    Account memory account = accounts[_account];\n    // update states\n    uint256 amount = account.cumulatedRewards - account.claimedRewards;\n    if (amount > 0) {\n      accounts[_account].claimedRewards = accounts[_account].cumulatedRewards;\n      require(availableReward >= amount, 'HoprStake: Insufficient reward pool.');\n      availableReward -= amount;\n      // send rewards to the account.\n      IERC20(REWARD_TOKEN).safeTransfer(_account, amount);\n      emit Claimed(_account, amount);\n    }\n  }\n\n  /**\n   * @dev Unlock staking for a given account\n   * @param _account address Account that staked tokens.\n   */\n  function _unlockFor(address _account) private {\n    require(block.timestamp > PROGRAM_END, 'HoprStake: Program is ongoing, cannot unlock stake.');\n    uint256 actualStake = accounts[_account].actualLockedTokenAmount;\n    _sync(_account);\n    accounts[_account].actualLockedTokenAmount = 0;\n    totalLocked -= actualStake;\n    _claim(_account);\n    // unlock actual staked tokens\n    IERC20(LOCK_TOKEN).safeTransfer(_account, actualStake);\n    // unlock redeemed NFTs\n    for (uint256 index = 0; index < redeemedNftIndex[_account]; index++) {\n      NFT_CONTRACT.transferFrom(address(this), _account, redeemedNft[_account][index]);\n    }\n    emit Released(_account, actualStake);\n  }\n\n  /**\n   * @dev Private function to block an NFT\n   * @param typeIndex integer Type index to be blocked\n   */\n  function _ownerBlockNftType(uint256 typeIndex) private {\n    isBlockedNft[typeIndex] = true;\n    emit NftBlocked(typeIndex);\n  }\n}\n"
        },
        "contracts/stake/HoprStake2.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol';\nimport '@openzeppelin/contracts/utils/math/Math.sol';\nimport './IHoprBoost.sol';\n\n/**\n *\n */\ncontract HoprStake2 is Ownable, IERC777Recipient, IERC721Receiver, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n  using Math for uint256;\n\n  struct Account {\n    uint256 actualLockedTokenAmount; // The amount of LOCK_TOKEN being actually locked to the contract.\n    // Those tokens can be withdrawn after “UNLOCK_START”\n    uint256 lastSyncTimestamp; // Timestamp at which any “Account” attribute gets synced for the last time.\n    uint256 cumulatedRewards; // Rewards accredited to the account at “lastSyncTimestamp”.\n    uint256 claimedRewards; // Rewards claimed by the account.\n  }\n\n  uint256 public constant PROGRAM_START = 1642424400; // Block timestamp at which incentive program starts. Default value is 1642424400 (Jan 17th 2022 14:00 CET).\n  uint256 public constant PROGRAM_END = 1650974400; // Block timestamp at which incentive program ends. From this timestamp on, tokens can be unlocked. Default value is 1650974400 (Apr 26th 2022 14:00 CET).\n  uint256 public constant FACTOR_DENOMINATOR = 1e12; // Denominator of the “Basic reward factor”. Default value is 1e12.\n  uint256 public constant BASIC_FACTOR_NUMERATOR = 5787; // Numerator of the “Basic reward factor”, for all accounts that participate in the program. Default value is 5787, which corresponds to 5.787/1e9 per second. Its associated denominator is FACTOR_DENOMINATOR.\n  uint256 public constant BOOST_CAP = 1e24; // Cap on actual locked tokens for receiving additional boosts.\n\n  address public LOCK_TOKEN = 0xD057604A14982FE8D88c5fC25Aac3267eA142a08; // Token that HOPR holders need to lock to the contract: xHOPR address.\n  address public REWARD_TOKEN = 0xD4fdec44DB9D44B8f2b6d529620f9C0C7066A2c1; // Token that HOPR holders can claim as rewards: wxHOPR address\n  IHoprBoost public NFT_CONTRACT = IHoprBoost(0x43d13D7B83607F14335cF2cB75E87dA369D056c7); // Address of the HoprBoost NFT smart contract.\n\n  mapping(address => mapping(uint256 => uint256)) public redeemedNft; // Redeemed NFT per account, structured as “account -> index -> NFT tokenId”.\n  mapping(address => uint256) public redeemedNftIndex; // The last index of redeemed NFT of an account. It defines the length of the “redeemedBoostToken mapping.\n  mapping(address => mapping(uint256 => uint256)) public redeemedFactor; // Redeemed boost factor per account, structured as “account -> index -> NFT tokenId”.\n  mapping(address => uint256) public redeemedFactorIndex; // The last index of redeemed boost factor factor of an account. It defines the length of the “redeemedFactor” mapping.\n\n  mapping(address => Account) public accounts; // It stores the locked token amount, earned and claimed rewards per account.\n  uint256 public totalLocked; // Total amount of tokens being locked in the incentive program.\n  uint256 public availableReward; // Total amount of reward tokens currently available in the lock.\n\n  // setup ERC1820\n  IERC1820Registry private constant ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n  bytes32 private constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256('ERC777TokensRecipient');\n\n  event Sync(address indexed account, uint256 indexed increment);\n  event Staked(address indexed account, uint256 indexed actualAmount);\n  event Released(address indexed account, uint256 indexed actualAmount);\n  event RewardFueled(uint256 indexed amount);\n  event Redeemed(address indexed account, uint256 indexed boostTokenId, bool indexed factorRegistered);\n  event Claimed(address indexed account, uint256 indexed rewardAmount);\n\n  /**\n   * @dev Provide NFT contract address. Transfer owner role to the new owner address.\n   * At deployment, it also registers the lock contract as an ERC777 recipient.\n   * @param _nftAddress address Address of the NFT contract.\n   * @param _newOwner address Address of the new owner. This new owner can reclaim any ERC20 and ERC721 token being accidentally sent to the lock contract.\n   * @param _lockToken address Address of the stake token xHOPR.\n   * @param _rewardToken address Address of the reward token wxHOPR.\n   */\n  constructor(\n    address _nftAddress,\n    address _newOwner,\n    address _lockToken,\n    address _rewardToken\n  ) {\n    // implement in favor of testing\n    uint256 chainId;\n    assembly {\n      chainId := chainid()\n    }\n    if (chainId != 100) {\n      LOCK_TOKEN = _lockToken;\n      REWARD_TOKEN = _rewardToken;\n      NFT_CONTRACT = IHoprBoost(_nftAddress);\n    }\n    transferOwnership(_newOwner);\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n  }\n\n  /**\n   * @dev Given NFT name type and rank name (as in HoprBoost) returns if the hodler has redeemed such an NFT\n   * @param nftType string Type name of the HoprBoost NFT.\n   * @param nftRank string Rank name of the HoprBoost NFT.\n   * @param hodler address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\n   */\n  function isNftTypeAndRankRedeemed1(\n    string memory nftType,\n    string memory nftRank,\n    address hodler\n  ) external view returns (bool) {\n    string memory nftURI = string(abi.encodePacked(nftType, '/', nftRank));\n\n    // compare `boostType/boosRank` of redeemed NFTs with `nftURI`\n    for (uint256 index = 0; index < redeemedNftIndex[hodler]; index++) {\n      uint256 redeemedTokenId = redeemedNft[hodler][index];\n      string memory redeemedTokenURI = NFT_CONTRACT.tokenURI(redeemedTokenId);\n      if (_hasSubstring(redeemedTokenURI, nftURI)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @dev Given NFT type index and rank name (as in HoprBoost) returns if the hodler has redeemed such an NFT\n   * @param nftTypeIndex uint256 Type index of the HoprBoost NFT.\n   * @param nftRank string Rank name of the HoprBoost NFT.\n   * @param hodler address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\n   */\n  function isNftTypeAndRankRedeemed2(\n    uint256 nftTypeIndex,\n    string memory nftRank,\n    address hodler\n  ) external view returns (bool) {\n    // compare `boostType/boosRank` of redeemed NFTs with `nftURI`\n    for (uint256 index = 0; index < redeemedNftIndex[hodler]; index++) {\n      uint256 redeemedTokenId = redeemedNft[hodler][index];\n      string memory redeemedTokenURI = NFT_CONTRACT.tokenURI(redeemedTokenId);\n      if (NFT_CONTRACT.typeIndexOf(redeemedTokenId) == nftTypeIndex && _hasSubstring(redeemedTokenURI, nftRank)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @dev Given NFT type index and the boost numerator (as in HoprBoost) returns if the hodler has redeemed such an NFT\n   * @param nftTypeIndex uint256 Type index of the HoprBoost NFT.\n   * @param boostNumerator uint256 Boost numerator of the HoprBoost NFT.\n   * @param hodler address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\n   */\n  function isNftTypeAndRankRedeemed3(\n    uint256 nftTypeIndex,\n    uint256 boostNumerator,\n    address hodler\n  ) external view returns (bool) {\n    for (uint256 index = 0; index < redeemedNftIndex[hodler]; index++) {\n      uint256 redeemedTokenId = redeemedNft[hodler][index];\n      (uint256 redeemedBoost, ) = NFT_CONTRACT.boostOf(redeemedTokenId);\n      if (NFT_CONTRACT.typeIndexOf(redeemedTokenId) == nftTypeIndex && boostNumerator == redeemedBoost) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @dev Given NFT type name and the boost numerator (as in HoprBoost) returns if the hodler has redeemed such an NFT\n   * @param nftType string Type name of the HoprBoost NFT.\n   * @param boostNumerator uint256 Boost numerator of the HoprBoost NFT.\n   * @param hodler address Address of an account that stakes xHOPR tokens and/or redeems its HoprBoost NFT.\n   */\n  function isNftTypeAndRankRedeemed4(\n    string memory nftType,\n    uint256 boostNumerator,\n    address hodler\n  ) external view returns (bool) {\n    for (uint256 index = 0; index < redeemedNftIndex[hodler]; index++) {\n      uint256 redeemedTokenId = redeemedNft[hodler][index];\n      (uint256 redeemedBoost, ) = NFT_CONTRACT.boostOf(redeemedTokenId);\n      if (\n        keccak256((bytes(NFT_CONTRACT.typeOf(redeemedTokenId)))) == keccak256((bytes(nftType))) &&\n        boostNumerator == redeemedBoost\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @dev ERC677 hook. Token holders can send their tokens with `transferAndCall` to the stake contract.\n   * After PROGRAM_END, it refuses tokens; Before PROGRAM_END, it accepts tokens xHOPR token, sync\n   * Account state, and update totalLocked.\n   * @param _from address Address of tokens sender\n   * @param _value uint256 token amount being transferred\n   * @param _data bytes Data being sent along with token transfer\n   */\n  function onTokenTransfer(\n    address _from,\n    uint256 _value,\n    // solhint-disable-next-line no-unused-vars\n    bytes memory _data\n  ) external returns (bool) {\n    require(msg.sender == LOCK_TOKEN, 'HoprStake: Only accept LOCK_TOKEN in staking');\n    require(block.timestamp <= PROGRAM_END, 'HoprStake: Program ended, cannot stake anymore.');\n\n    _sync(_from);\n    accounts[_from].actualLockedTokenAmount += _value;\n    totalLocked += _value;\n    emit Staked(_from, _value);\n\n    return true;\n  }\n\n  /**\n   * @dev ERC777 hook. To receive wxHOPR to fuel the reward pool with `send()` method. It updates the availableReward by tokenAmount.\n   * @param operator address operator requesting the transfer\n   * @param from address token holder address\n   * @param to address recipient address\n   * @param amount uint256 amount of tokens to transfer\n   * @param userData bytes hex information provided by the token holder (if any)\n   * @param operatorData bytes extra information provided by the operator (if any)\n   */\n  function tokensReceived(\n    // solhint-disable-next-line no-unused-vars\n    address operator,\n    address from,\n    address to,\n    uint256 amount,\n    // solhint-disable-next-line no-unused-vars\n    bytes calldata userData,\n    // solhint-disable-next-line no-unused-vars\n    bytes calldata operatorData\n  ) external override {\n    require(msg.sender == REWARD_TOKEN, 'HoprStake: Sender must be wxHOPR token');\n    require(to == address(this), 'HoprStake: Must be sending tokens to HoprStake contract');\n    require(from == owner(), 'HoprStake: Only accept owner to provide rewards');\n    availableReward += amount;\n    emit RewardFueled(amount);\n  }\n\n  /**\n   * @dev Whenever a boost `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n   * when redeeming, this function is called. Boost factor associated with the\n   * It must return its Solidity selector to confirm the token transfer upon success.\n   * @param operator address operator requesting the transfer\n   * @param from address token holder address\n   * @param tokenId uint256 amount of tokens to transfer\n   * @param data bytes hex information provided by the token holder (if any)\n   */\n  function onERC721Received(\n    // solhint-disable-next-line no-unused-vars\n    address operator,\n    address from,\n    uint256 tokenId,\n    // solhint-disable-next-line no-unused-vars\n    bytes calldata data\n  ) external override returns (bytes4) {\n    require(_msgSender() == address(NFT_CONTRACT), 'HoprStake: Cannot SafeTransferFrom tokens other than HoprBoost.');\n    require(block.timestamp <= PROGRAM_END, 'HoprStake: Program ended, cannot redeem boosts.');\n    // Account memory account = accounts[from];\n    _sync(from);\n\n    // redeem NFT\n    redeemedNft[from][redeemedNftIndex[from]] = tokenId;\n    redeemedNftIndex[from] += 1;\n\n    // update boost factor\n    uint256 typeId = NFT_CONTRACT.typeIndexOf(tokenId);\n    (uint256 factor, ) = NFT_CONTRACT.boostOf(tokenId);\n\n    uint256 boostIndex = redeemedFactorIndex[from];\n    uint256 index = 0;\n    for (index; index < boostIndex; index++) {\n      // loop through redeemed factors, replace the factor of the same type, if the current factor is larger.\n      uint256 redeemedId = redeemedFactor[from][index];\n      (uint256 redeemedFactorValue, ) = NFT_CONTRACT.boostOf(redeemedId);\n\n      if (NFT_CONTRACT.typeIndexOf(redeemedId) == typeId) {\n        if (redeemedFactorValue < factor) {\n          redeemedFactor[from][index] = tokenId;\n        }\n        emit Redeemed(from, tokenId, redeemedFactorValue < factor);\n        break;\n      }\n    }\n    if (index == boostIndex) {\n      // new type being redeemed.\n      redeemedFactor[from][boostIndex] = tokenId;\n      redeemedFactorIndex[from] += 1;\n      emit Redeemed(from, tokenId, true);\n    }\n\n    return IERC721Receiver(address(this)).onERC721Received.selector;\n  }\n\n  /**\n   * @dev Manually sync account's reward states\n   * @notice public function of ``_sync``.\n   * @param account address Account whose stake rewards will be synced.\n   */\n  function sync(address account) external {\n    _sync(account);\n  }\n\n  /**\n   * @dev Sync rewards and claim them\n   * @notice public function of ``_sync`` + ``_claim``\n   * @param account address Account whose stake rewards will be synced and claimed.\n   */\n  function claimRewards(address account) external {\n    _sync(account);\n    _claim(account);\n  }\n\n  /**\n   * @dev Unlock staking for caller\n   */\n  function unlock() external {\n    _unlockFor(msg.sender);\n  }\n\n  /**\n   * @dev Unlock staking for a given account\n   * @param account address Account that staked tokens.\n   */\n  function unlockFor(address account) external {\n    _unlockFor(account);\n  }\n\n  /**\n   * @dev Reclaim any ERC20 token being accidentally sent to the contract.\n   * @param tokenAddress address ERC20 token address.\n   */\n  function reclaimErc20Tokens(address tokenAddress) external onlyOwner nonReentrant {\n    uint256 difference;\n    if (tokenAddress == LOCK_TOKEN) {\n      difference = IERC20(LOCK_TOKEN).balanceOf(address(this)) - totalLocked;\n    } else {\n      difference = IERC20(tokenAddress).balanceOf(address(this));\n    }\n    IERC20(tokenAddress).safeTransfer(owner(), difference);\n  }\n\n  /**\n   * @dev Reclaim any ERC721 token being accidentally sent to the contract.\n   * @param tokenAddress address ERC721 token address.\n   */\n  function reclaimErc721Tokens(address tokenAddress, uint256 tokenId) external onlyOwner nonReentrant {\n    require(tokenAddress != address(NFT_CONTRACT), 'HoprStake: Cannot claim HoprBoost NFT');\n    IHoprBoost(tokenAddress).transferFrom(address(this), owner(), tokenId);\n  }\n\n  /**\n   * @dev Shortcut that returns the actual stake of an account.\n   * @param _account address Address of the staker account.\n   */\n  function stakedHoprTokens(address _account) public view returns (uint256) {\n    return accounts[_account].actualLockedTokenAmount;\n  }\n\n  /**\n   * @dev Returns the increment of cumulated rewards during the “lastSyncTimestamp” and current block.timestamp.\n   * @param _account address Address of the account whose rewards will be calculated.\n   */\n  function getCumulatedRewardsIncrement(address _account) public view returns (uint256) {\n    return _getCumulatedRewardsIncrement(_account);\n  }\n\n  /**\n   * @dev Calculates the increment of cumulated rewards during the “lastSyncTimestamp” and block.timestamp.\n   * current block timestamp and lastSyncTimestamp are confined in [PROGRAM_START, PROGRAM_END] for basic and boosted lockup,\n   * @param _account address Address of the account whose rewards will be calculated.\n   */\n  function _getCumulatedRewardsIncrement(address _account) private view returns (uint256) {\n    Account memory account = accounts[_account];\n    if (block.timestamp <= PROGRAM_START || account.lastSyncTimestamp >= PROGRAM_END) {\n      // skip calculation and return directly 0;\n      return 0;\n    }\n    // Per second gain, for basic lock-up.\n    uint256 gainPerSec = account.actualLockedTokenAmount * BASIC_FACTOR_NUMERATOR;\n\n    // Per second gain, for additional boost, applicable to amount under BOOST_CAP\n    for (uint256 index = 0; index < redeemedFactorIndex[_account]; index++) {\n      uint256 tokenId = redeemedFactor[_account][index];\n      (uint256 boost, ) = NFT_CONTRACT.boostOf(tokenId);\n      gainPerSec += (account.actualLockedTokenAmount.min(BOOST_CAP)) * boost;\n    }\n\n    return\n      (gainPerSec *\n        (block.timestamp.max(PROGRAM_START).min(PROGRAM_END) -\n          account.lastSyncTimestamp.max(PROGRAM_START).min(PROGRAM_END))) / FACTOR_DENOMINATOR;\n  }\n\n  /**\n   * @dev if the given `tokenURI` end with `/substring`\n   * @param tokenURI string URI of the HoprBoost NFT. E.g. \"https://stake.hoprnet.org/PuzzleHunt_v2/Bronze - Week 5\"\n   * @param substring string of the `boostRank` or `boostType/boostRank`. E.g. \"Bronze - Week 5\", \"PuzzleHunt_v2/Bronze - Week 5\"\n   */\n  function _hasSubstring(string memory tokenURI, string memory substring) private pure returns (bool) {\n    // convert string to bytes\n    bytes memory tokenURIInBytes = bytes(tokenURI);\n    bytes memory substringInBytes = bytes(substring);\n\n    // lenghth of tokenURI is the sum of substringLen and restLen, where\n    // - `substringLen` is the length of the part that is extracted and compared with the provided substring\n    // - `restLen` is the length of the baseURI and boostType, which will be offset\n    uint256 substringLen = substringInBytes.length;\n    uint256 restLen = tokenURIInBytes.length - substringLen;\n    // one byte before the supposed substring, to see if it's the start of `substring`\n    bytes1 slashPositionContent = tokenURIInBytes[restLen - 1];\n\n    if (slashPositionContent != 0x2f) {\n      // if this position is not a `/`, substring in the tokenURI is for sure neither `boostRank` nor `boostType/boostRank`\n      return false;\n    }\n\n    // offset so that value from the next calldata (`substring`) is removed, so bitwise it needs to shift\n    // log2(16) * (32 - substringLen) * 2\n    uint256 offset = (32 - substringLen) * 8;\n\n    bytes32 trimed; // left-padded extracted `boostRank` from the `tokenURI`\n    bytes32 substringInBytes32 = bytes32(substringInBytes); // convert substring in to bytes32\n    bytes32 shifted; // shift the substringInBytes32 from right-padded to left-padded\n\n    bool result;\n    assembly {\n      // assuming `boostRank` or `boostType/boostRank` will never exceed 32 bytes\n      // left-pad the `boostRank` extracted from the `tokenURI`, so that possible\n      // extra pieces of `substring` is not included\n      // 32 jumps the storage of bytes length and restLen offsets the `baseURI`\n      trimed := shr(offset, mload(add(add(tokenURIInBytes, 32), restLen)))\n      // tokenURIInBytes32 := mload(add(add(tokenURIInBytes, 32), restLen))\n      // left-pad `substring`\n      shifted := shr(offset, substringInBytes32)\n      // compare results\n      result := eq(trimed, shifted)\n    }\n    return result;\n  }\n\n  /**\n   * @dev Update “lastSyncTimestamp” with the current block timestamp and update “cumulatedRewards” with _getCumulatedRewardsIncrement(account)\n   * @param _account address Address of the account whose rewards will be calculated.\n   */\n  function _sync(address _account) private {\n    uint256 increment = _getCumulatedRewardsIncrement(_account);\n    accounts[_account].cumulatedRewards += increment;\n    accounts[_account].lastSyncTimestamp = block.timestamp;\n    emit Sync(_account, increment);\n  }\n\n  /**\n   * @dev Claim rewards for staking.\n   * @param _account address Address of the staking account.\n   */\n  function _claim(address _account) private {\n    Account memory account = accounts[_account];\n    // update states\n    uint256 amount = account.cumulatedRewards - account.claimedRewards;\n    require(amount > 0, 'HoprStake: Nothing to claim');\n    accounts[_account].claimedRewards = accounts[_account].cumulatedRewards;\n    require(availableReward >= amount, 'HoprStake: Insufficient reward pool.');\n    availableReward -= amount;\n    // send rewards to the account.\n    IERC20(REWARD_TOKEN).safeTransfer(_account, amount);\n    emit Claimed(_account, amount);\n  }\n\n  /**\n   * @dev Unlock staking for a given account\n   * @param _account address Account that staked tokens.\n   */\n  function _unlockFor(address _account) private {\n    require(block.timestamp > PROGRAM_END, 'HoprStake: Program is ongoing, cannot unlock stake.');\n    uint256 actualStake = accounts[_account].actualLockedTokenAmount;\n    _sync(_account);\n    accounts[_account].actualLockedTokenAmount = 0;\n    totalLocked -= actualStake;\n    _claim(_account);\n    // unlock actual staked tokens\n    IERC20(LOCK_TOKEN).safeTransfer(_account, actualStake);\n    // unlock redeemed NFTs\n    for (uint256 index = 0; index < redeemedNftIndex[_account]; index++) {\n      NFT_CONTRACT.transferFrom(address(this), _account, redeemedNft[_account][index]);\n    }\n    emit Released(_account, actualStake);\n  }\n}\n"
        },
        "contracts/HoprWrapperProxy.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol';\nimport '@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\n// https://github.com/omni/omnibridge/blob/c814f686487c50462b132b9691fd77cc2de237d3/contracts/interfaces/IERC677.sol\ninterface IERC677 is IERC20 {\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool);\n\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n}\n\ncontract HoprWrapperProxy is IERC777Recipient {\n  using SafeERC20 for IERC20;\n\n  IERC1820Registry public constant ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n  bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256('ERC777TokensRecipient');\n  address public constant WXHOPR_TOKEN = 0xD4fdec44DB9D44B8f2b6d529620f9C0C7066A2c1;\n  address public constant XHOPR_TOKEN = 0xD057604A14982FE8D88c5fC25Aac3267eA142a08;\n  address public constant WRAPPER = 0x097707143e01318734535676cfe2e5cF8b656ae8;\n  address payable public constant XDAI_MULTISIG = payable(0x5E1c4e7004B7411bA27Dc354330fab31147DFeF1);\n\n  event FowardedTo(address to, uint256 amount);\n  event FowardedFrom(address from, uint256 amount);\n\n  /**\n   * @dev register this contract to ERC1820 registry\n   */\n  constructor() public {\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n  }\n\n  /**\n   * @dev ERC677 hook. Token holder can send their xHOPR with `transferAndCall` to this contract.\n   * @param _from address Address of tokens sender. It should be from the multisig\n   * @param _value uint256 token amount being transferred\n   * @param _data bytes Data being sent along with token transfer\n   */\n  function onTokenTransfer(\n    address _from,\n    uint256 _value,\n    // solhint-disable-next-line no-unused-vars\n    bytes memory _data\n  ) external returns (bool) {\n    require(msg.sender == XHOPR_TOKEN, 'HoprWrapperProxy: Only accept xHOPR token');\n    require(_from == XDAI_MULTISIG, 'HoprWrapperProxy: Only accept xHOPR from the Asso MultiSig');\n    // forward it to the wrapper\n    emit FowardedTo(WRAPPER, _value);\n    IERC677(XHOPR_TOKEN).transferAndCall(WRAPPER, _value, '');\n    return true;\n  }\n\n  /**\n   * @dev token recipient hook for ERC777\n   * @param operator address operator requesting the transfer\n   * @param from address token holder address.\n   * @param to address recipient address\n   * @param amount uint256 amount of tokens to transfer\n   * @param userData bytes extra information provided by the token holder (if any)\n   * @param operatorData bytes extra information provided by the operator (if any)\n   */\n  function tokensReceived(\n    address operator,\n    address from,\n    address to,\n    uint256 amount,\n    bytes calldata userData,\n    bytes calldata operatorData\n  ) external override {\n    require(msg.sender == WXHOPR_TOKEN, 'HoprWrapperProxy: Only accept WXHOPR_TOKEN token');\n    // require(from == WRAPPER, 'HoprWrapperProxy: Only accept WXHOPR token from the wrapper');\n    require(to == address(this), 'HoprWrapperProxy: Must be sending tokens to this proxy');\n    emit FowardedFrom(from, amount);\n    IERC20(WXHOPR_TOKEN).safeTransfer(XDAI_MULTISIG, amount);\n  }\n\n  /**\n   * @dev Recover any residual ERC20 token/ETH to the multisig\n   * @param token ERC20 token address that is sent to this contract. Address 0 for ETH\n   */\n  function recoverTokens(address token) external {\n    if (token == address(0)) {\n      XDAI_MULTISIG.transfer(address(this).balance);\n    } else {\n      IERC20(token).safeTransfer(XDAI_MULTISIG, IERC20(token).balanceOf(address(this)));\n    }\n  }\n}\n"
        },
        "contracts/HoprForwarder.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract HoprForwarder is IERC777Recipient {\n    using SafeERC20 for IERC20;\n    \n    IERC1820Registry public constant ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n    bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\n    address public constant HOPR_TOKEN = 0xF5581dFeFD8Fb0e4aeC526bE659CFaB1f8c781dA;\n    address payable public constant MULTISIG = payable(0x4F50Ab4e931289344a57f2fe4bBd10546a6fdC17);\n    \n    /**\n     * @dev register this contract to ERC1820 registry\n     */\n    constructor() public {\n         ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n    }\n    \n    /**\n     * @dev token recipient hook for ERC777\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address. Should be zddress zero for token mintin\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external override {\n        require(msg.sender == HOPR_TOKEN, \"HoprMinterWrapper: Only accept HOPR token\");\n        require(from == address(0), \"HoprMinterWrapper: Only receive mint\");\n        require(to == address(this), \"HoprMinterWrapper: Must be sending tokens to the minter wrapper\");\n        IERC20(HOPR_TOKEN).safeTransfer(MULTISIG, amount);\n    }\n\n    /**\n     * @dev Recover any residual ERC20 token/ETH to the multisig\n     * @param token ERC20 token address that is sent to this contract. Address 0 for ETH\n     */\n    function recoverTokens(address token) external {\n        if (token == address (0)) {\n            MULTISIG.transfer(address(this).balance);           \n        } else {\n            IERC20(token).safeTransfer(MULTISIG, IERC20(token).balanceOf(address(this)));\n        }\n    }\n}\n"
        },
        "contracts/mocks/ERC20Mock.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\n/**\n * @title ERC20Mock\n * This mock just provides a public safeMint, mint, and burn functions for testing purposes\n */\ncontract ERC20Mock is ERC20 {\n  constructor(address initialAccount, uint256 initialBalance) payable ERC20('ERC20 Mock', 'M20') {\n    _mint(initialAccount, initialBalance);\n  }\n\n  function mint(address account, uint256 amount) public {\n    _mint(account, amount);\n  }\n\n  function burn(address account, uint256 amount) public {\n    _burn(account, amount);\n  }\n\n  function transferInternal(\n    address from,\n    address to,\n    uint256 value\n  ) public {\n    _transfer(from, to, value);\n  }\n\n  function approveInternal(\n    address owner,\n    address spender,\n    uint256 value\n  ) public {\n    _approve(owner, spender, value);\n  }\n}\n"
        },
        "contracts/proxy/HoprStakingProxyForNetworkRegistry.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '../IHoprNetworkRegistryRequirement.sol';\n\n/**\n * @dev Interface for staking contract\n * source code at https://github.com/hoprnet/hopr-stake/tree/main/contracts\n * staking v2 is deployed at https://blockscout.com/xdai/mainnet/address/0x2cDD13ddB0346E0F620C8E5826Da5d7230341c6E\n * staking v3 is deployed at https://blockscout.com/xdai/mainnet/address/0xae933331ef0bE122f9499512d3ed4Fa3896DCf20\n */\ncontract IHoprStake {\n  function stakedHoprTokens(address _account) public view returns (uint256) {}\n\n  function isNftTypeAndRankRedeemed3(\n    uint256 nftTypeIndex,\n    uint256 boostNumerator,\n    address hodler\n  ) external view returns (bool) {}\n}\n\n/**\n * @dev Proxy for staking (v2/v3) contract, which an \"HoprNetworkRegistry requirement\" is implemented\n * Only accounts with HoprBoost NFTs that are of the type and rank in the `eligibleNftTypeAndRank` array\n * are considered as eligible, when their stake is also above the `stakeThreshold`\n */\ncontract HoprStakingProxyForNetworkRegistry is IHoprNetworkRegistryRequirement, Ownable {\n  struct NftTypeAndRank {\n    uint256 nftType;\n    uint256 nftRank;\n  }\n\n  IHoprStake public immutable STAKE_CONTRACT; // contract of HoprStake contract\n  uint256 public stakeThreshold; // minimum amount HOPR tokens being staked in the staking contract to be considered eligible\n  NftTypeAndRank[] public eligibleNftTypeAndRank; // list of NFTs whose owner are considered as eligible to the network if the `stakeThreshold` is also met\n  NftTypeAndRank[] public specialNftTypeAndRank; // list of NFTs whose owner are considered as eligible to the network without meeting the `stakeThreshold`, e.g. \"Dev NFT\"\n\n  event NftTypeAndRankAdded(uint256 indexed nftType, uint256 indexed nftRank); // emit when a new NFT type and rank gets included in the eligibility list\n  event NftTypeAndRankRemoved(uint256 indexed nftType, uint256 indexed nftRank); // emit when a NFT type and rank gets removed from the eligibility list\n  event SpecialNftTypeAndRankAdded(uint256 indexed nftType, uint256 indexed nftRank); // emit when a new special type and rank of NFT gets included in the eligibility list\n  event SpecialNftTypeAndRankRemoved(uint256 indexed nftType, uint256 indexed nftRank); // emit when a special type and rank of NFT gets removed from the eligibility list\n  event ThresholdUpdated(uint256 indexed threshold); // emit when the staking threshold gets updated.\n\n  constructor(\n    address stakeContract,\n    address newOwner,\n    uint256 minStake\n  ) {\n    STAKE_CONTRACT = IHoprStake(stakeContract);\n    stakeThreshold = minStake;\n    emit ThresholdUpdated(stakeThreshold);\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Checks if the provided account has\n   * a) special NFTs, e.g. \"Dev NFT\"\n   * b) redeemed any NFT of eligibleNftTypeAndRank and staked HOPR tokens above the `threshold`\n   * @param account staker address that has a hopr nodes running\n   */\n  function isRequirementFulfilled(address account) external view returns (bool) {\n    // if the account owns a special NFT, requirement is fulfilled\n    for (uint256 i = 0; i < specialNftTypeAndRank.length; i++) {\n      NftTypeAndRank memory eligible = specialNftTypeAndRank[i];\n      if (STAKE_CONTRACT.isNftTypeAndRankRedeemed3(eligible.nftType, eligible.nftRank, account)) {\n        return true;\n      }\n    }\n\n    // when no special NFT is present, the account needs to 1) reach the minimum stake, 2) own an eligible NFT\n    // for self-claiming accounts, check against the current criteria\n    uint256 amount = STAKE_CONTRACT.stakedHoprTokens(account);\n    if (amount < stakeThreshold) {\n      // threshold does not meet\n      return false;\n    }\n    // check on regular eligible NFTs.\n    for (uint256 i = 0; i < eligibleNftTypeAndRank.length; i++) {\n      NftTypeAndRank memory eligible = eligibleNftTypeAndRank[i];\n      if (STAKE_CONTRACT.isNftTypeAndRankRedeemed3(eligible.nftType, eligible.nftRank, account)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @dev Owner adds/updates NFT type and rank to the list of special NFTs in batch.\n   * @param nftTypes Array of type indexes of the special HoprBoost NFT\n   * @param nftRanks Array of HOPR boost numerator, which is associated to the special NFT\n   */\n  function ownerBatchAddSpecialNftTypeAndRank(uint256[] calldata nftTypes, uint256[] calldata nftRanks)\n    external\n    onlyOwner\n  {\n    require(\n      nftTypes.length == nftRanks.length,\n      'HoprStakingProxyForNetworkRegistry: ownerBatchAddSpecialNftTypeAndRank lengths mismatch'\n    );\n    for (uint256 index = 0; index < nftTypes.length; index++) {\n      _addSpecialNftTypeAndRank(nftTypes[index], nftRanks[index]);\n    }\n  }\n\n  /**\n   * @dev Owner removes from list of special NFTs in batch.\n   * @param nftTypes Array of type index of the special HoprBoost NFT\n   * @param nftRanks Array of  HOPR boost numerator, which is associated to the special NFT\n   */\n  function ownerBatchRemoveSpecialNftTypeAndRank(uint256[] calldata nftTypes, uint256[] calldata nftRanks)\n    external\n    onlyOwner\n  {\n    require(\n      nftTypes.length == nftRanks.length,\n      'HoprStakingProxyForNetworkRegistry: ownerBatchRemoveSpecialNftTypeAndRank lengths mismatch'\n    );\n    for (uint256 index = 0; index < nftTypes.length; index++) {\n      _removeSpecialNftTypeAndRank(nftTypes[index], nftRanks[index]);\n    }\n  }\n\n  /**\n   * @dev Owner adds/updates NFT type and rank to the list of eligibles NFTs in batch.\n   * @param nftTypes Array of type indexes of the eligible HoprBoost NFT\n   * @param nftRanks Array of HOPR boost numerator, which is associated to the eligible NFT\n   */\n  function ownerBatchAddNftTypeAndRank(uint256[] calldata nftTypes, uint256[] calldata nftRanks) external onlyOwner {\n    require(\n      nftTypes.length == nftRanks.length,\n      'HoprStakingProxyForNetworkRegistry: ownerBatchAddNftTypeAndRank lengths mismatch'\n    );\n    for (uint256 index = 0; index < nftTypes.length; index++) {\n      _addNftTypeAndRank(nftTypes[index], nftRanks[index]);\n    }\n  }\n\n  /**\n   * @dev Owner removes from list of eligible NFTs in batch.\n   * @param nftTypes Array of type index of the eligible HoprBoost NFT\n   * @param nftRanks Array of  HOPR boost numerator, which is associated to the eligible NFT\n   */\n  function ownerBatchRemoveNftTypeAndRank(uint256[] calldata nftTypes, uint256[] calldata nftRanks) external onlyOwner {\n    require(\n      nftTypes.length == nftRanks.length,\n      'HoprStakingProxyForNetworkRegistry: ownerBatchRemoveNftTypeAndRank lengths mismatch'\n    );\n    for (uint256 index = 0; index < nftTypes.length; index++) {\n      _removeNftTypeAndRank(nftTypes[index], nftRanks[index]);\n    }\n  }\n\n  /**\n   * @dev Owner adds/updates NFT type and rank to the list of eligibles NFTs.\n   * @param nftType Type index of the eligible HoprBoost NFT\n   * @param nftRank HOPR boost numerator, which is associated to the eligible NFT\n   */\n  function ownerAddNftTypeAndRank(uint256 nftType, uint256 nftRank) external onlyOwner {\n    _addNftTypeAndRank(nftType, nftRank);\n  }\n\n  /**\n   * @dev Owner removes from list of eligible NFTs\n   * @param nftType Type index of the eligible HoprBoost NFT\n   * @param nftRank HOPR boost numerator, which is associated to the eligible NFT\n   */\n  function ownerRemoveNftTypeAndRank(uint256 nftType, uint256 nftRank) external onlyOwner {\n    _removeNftTypeAndRank(nftType, nftRank);\n  }\n\n  /**\n   * @dev Owner updates the minimal staking amount required for users to add themselves onto the HoprNetworkRegistry\n   * @param newThreshold Minimum stake of HOPR token\n   */\n  function ownerUpdateThreshold(uint256 newThreshold) external onlyOwner {\n    require(\n      stakeThreshold != newThreshold,\n      'HoprStakingProxyForNetworkRegistry: try to update with the same staking threshold'\n    );\n    stakeThreshold = newThreshold;\n    emit ThresholdUpdated(stakeThreshold);\n  }\n\n  /**\n   * @dev adds NFT type and rank to the list of special NFTs.\n   * @param nftType Type index of the special HoprBoost NFT\n   * @param nftRank HOPR boost numerator, which is associated to the special NFT\n   */\n  function _addSpecialNftTypeAndRank(uint256 nftType, uint256 nftRank) private {\n    uint256 i = 0;\n    for (i; i < specialNftTypeAndRank.length; i++) {\n      // walk through all the types\n      if (specialNftTypeAndRank[i].nftType == nftType && specialNftTypeAndRank[i].nftRank == nftRank) {\n        // already exist;\n        return;\n      }\n    }\n    specialNftTypeAndRank.push(NftTypeAndRank({nftType: nftType, nftRank: nftRank}));\n    emit SpecialNftTypeAndRankAdded(nftType, nftRank);\n    (nftType, nftRank);\n  }\n\n  /**\n   * @dev Remove from list of special NFTs\n   * @param nftType Type index of the special HoprBoost NFT\n   * @param nftRank HOPR boost numerator, which is associated to the special NFT\n   */\n  function _removeSpecialNftTypeAndRank(uint256 nftType, uint256 nftRank) private {\n    // walk through\n    for (uint256 i = 0; i < specialNftTypeAndRank.length; i++) {\n      if (specialNftTypeAndRank[i].nftType == nftType && specialNftTypeAndRank[i].nftRank == nftRank) {\n        // overwrite with the last element in the array\n        specialNftTypeAndRank[i] = specialNftTypeAndRank[specialNftTypeAndRank.length - 1];\n        specialNftTypeAndRank.pop();\n        emit SpecialNftTypeAndRankRemoved(nftType, nftRank);\n      }\n    }\n  }\n\n  /**\n   * @dev adds NFT type and rank to the list of eligibles NFTs.\n   * @param nftType Type index of the eligible HoprBoost NFT\n   * @param nftRank HOPR boost numerator, which is associated to the eligible NFT\n   */\n  function _addNftTypeAndRank(uint256 nftType, uint256 nftRank) private {\n    uint256 i = 0;\n    for (i; i < eligibleNftTypeAndRank.length; i++) {\n      // walk through all the types\n      if (eligibleNftTypeAndRank[i].nftType == nftType && eligibleNftTypeAndRank[i].nftRank == nftRank) {\n        // already exist;\n        return;\n      }\n    }\n    eligibleNftTypeAndRank.push(NftTypeAndRank({nftType: nftType, nftRank: nftRank}));\n    emit NftTypeAndRankAdded(nftType, nftRank);\n  }\n\n  /**\n   * @dev Remove from list of eligible NFTs\n   * @param nftType Type index of the eligible HoprBoost NFT\n   * @param nftRank HOPR boost numerator, which is associated to the eligible NFT\n   */\n  function _removeNftTypeAndRank(uint256 nftType, uint256 nftRank) private {\n    // walk through\n    for (uint256 i = 0; i < eligibleNftTypeAndRank.length; i++) {\n      if (eligibleNftTypeAndRank[i].nftType == nftType && eligibleNftTypeAndRank[i].nftRank == nftRank) {\n        // overwrite with the last element in the array\n        eligibleNftTypeAndRank[i] = eligibleNftTypeAndRank[eligibleNftTypeAndRank.length - 1];\n        eligibleNftTypeAndRank.pop();\n        emit NftTypeAndRankRemoved(nftType, nftRank);\n      }\n    }\n  }\n}\n"
        },
        "contracts/IHoprNetworkRegistryRequirement.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\ninterface IHoprNetworkRegistryRequirement {\n  function isRequirementFulfilled(address account) external view returns (bool);\n}\n"
        },
        "contracts/proxy/HoprDummyProxyForNetworkRegistry.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '../IHoprNetworkRegistryRequirement.sol';\n\n/**\n * @dev Dummy roxy which return true if an address is registered by the owner\n */\ncontract HoprDummyProxyForNetworkRegistry is IHoprNetworkRegistryRequirement, Ownable {\n  mapping(address => bool) registeredAccounts;\n  event AccountRegistered(address indexed account);\n  event AccountDeregistered(address indexed account);\n\n  constructor(address newOwner) {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Checks if the provided account is registered by the owner\n   * @param account address of the account that runs a hopr node\n   */\n  function isRequirementFulfilled(address account) external view returns (bool) {\n    return registeredAccounts[account];\n  }\n\n  /**\n   * @dev Owner add accounts onto the registry list in batch.\n   * @param accounts addresses to be removed from the registry\n   */\n  function ownerBatchAddAccounts(address[] calldata accounts) external onlyOwner {\n    for (uint256 index = 0; index < accounts.length; index++) {\n      _addAccount(accounts[index]);\n    }\n  }\n\n  /**\n   * @dev Owner removes from list of eligible NFTs in batch.\n   * @param accounts addresses to be removed from the registry\n   */\n  function ownerBatchRemoveAccounts(address[] calldata accounts) external onlyOwner {\n    for (uint256 index = 0; index < accounts.length; index++) {\n      _removeAccount(accounts[index]);\n    }\n  }\n\n  /**\n   * @dev Owner add account onto the registry list\n   * @param account address to be added onto the registry\n   */\n  function ownerAddAccount(address account) external onlyOwner {\n    _addAccount(account);\n  }\n\n  /**\n   * @dev Owner move account from the registry list\n   * @param account address to be removed from the registry\n   */\n  function ownerRemoveAccount(address account) external onlyOwner {\n    _removeAccount(account);\n  }\n\n  /**\n   * @dev add account onto the registry list\n   * @param account address to be added into the registry\n   */\n  function _addAccount(address account) private {\n    if (!registeredAccounts[account]) {\n      registeredAccounts[account] = true;\n      emit AccountRegistered(account);\n    }\n  }\n\n  /**\n   * @dev remove account from the registry list\n   * @param account address to be removed from the registry\n   */\n  function _removeAccount(address account) private {\n    if (registeredAccounts[account]) {\n      delete registeredAccounts[account];\n      emit AccountDeregistered(account);\n    }\n  }\n}\n"
        },
        "contracts/HoprNetworkRegistry.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './IHoprNetworkRegistryRequirement.sol';\n\n/**\n * @title HoprNetworkRegistry\n * @dev Smart contract that maintains a list of hopr node address (peer id) that are allowed\n * to enter HOPR network. Each peer id is linked with an Ethereum account. Only Ethereum\n * accounts that are eligible according to `IHoprNetworkRegistryRequirement` can register a\n * HOPR node address. If an account wants to change its registerd HOPR node address, it must\n * firstly deregister itself before registering new node.\n *\n * Note that HOPR node address refers to `PeerId.toB58String()`\n *\n * This network registry can be globally enabled/disabled by the owner\n *\n * Implementation of `IHoprNetworkRegistryRequirement` can also be dynamically updated by the\n * owner. Some sample implementations can be found under../proxy/ folder\n *\n * Owner has the power to overwrite the registration\n */\ncontract HoprNetworkRegistry is Ownable {\n  IHoprNetworkRegistryRequirement public requirementImplementation; // Implementation of network registry proxy\n  mapping(address => string) public accountToNodePeerId; // mapping the account to the hopr node peer id in bytes\n  mapping(string => address) public nodePeerIdToAccount; // mapping the hopr node peer id in bytes to account\n  bool public enabled;\n\n  event EnabledNetworkRegistry(bool indexed isEnabled); // Global toggle of the network registry\n  event RequirementUpdated(address indexed requirementImplementation); // Emit when the network registry proxy is updated\n  event Registered(address indexed account, string hoprPeerId); // Emit when an account register a node peer id for itself\n  event Deregistered(address indexed account); // Emit when an account deregister a node peer id for itself\n  event RegisteredByOwner(address indexed account, string hoprPeerId); // Emit when the contract owner register a node peer id for an account\n  event DeregisteredByOwner(address indexed account); // Emit when the contract owner deregister a node peer id for an account\n  event EligibilityUpdated(address indexed account, bool indexed eligibility); // Emit when the eligibility of an account is updated\n\n  /**\n   * @dev Network registry can be globally toggled. If `enabled === true`, only nodes registered\n   * in this contract with an eligible account associated can join HOPR network; If `!enabled`,\n   * all the nodes can join HOPR network regardless the eligibility of the associated account.\n   */\n  modifier mustBeEnabled() {\n    require(enabled, 'HoprNetworkRegistry: Registry is disabled');\n    _;\n  }\n\n  /**\n   * Specify NetworkRegistry logic implementation and transfer the ownership\n   * enable the network registry on deployment.\n   * @param _requirementImplementation address of the network registry logic implementation\n   * @param _newOwner address of the contract owner\n   */\n  constructor(address _requirementImplementation, address _newOwner) {\n    requirementImplementation = IHoprNetworkRegistryRequirement(_requirementImplementation);\n    enabled = true;\n    _transferOwnership(_newOwner);\n    emit RequirementUpdated(_requirementImplementation);\n    emit EnabledNetworkRegistry(true);\n  }\n\n  /**\n   * Specify NetworkRegistry logic implementation\n   * @param _requirementImplementation address of the network registry logic implementation\n   */\n  function updateRequirementImplementation(address _requirementImplementation) external onlyOwner {\n    requirementImplementation = IHoprNetworkRegistryRequirement(_requirementImplementation);\n    emit RequirementUpdated(_requirementImplementation);\n  }\n\n  /**\n   * Enable globally the network registry by the owner\n   */\n  function enableRegistry() external onlyOwner {\n    require(!enabled, 'HoprNetworkRegistry: Registry is enabled');\n    enabled = true;\n    emit EnabledNetworkRegistry(true);\n  }\n\n  /**\n   * Disanable globally the network registry by the owner\n   */\n  function disableRegistry() external onlyOwner mustBeEnabled {\n    enabled = false;\n    emit EnabledNetworkRegistry(false);\n  }\n\n  /**\n   * @dev Checks if the msg.sender fulfills registration requirement at the calling time, if so,\n   * register the EOA with HOPR node peer id. Account can also update its registration status\n   * with this function.\n   * @notice It allows msg.sender to update registered node peer id.\n   * @param hoprPeerId Hopr nodes peer id in bytes. e.g. 16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1\n   * hopr node peer id should always start with '16Uiu2HA' (0x3136556975324841) and be of length 53\n   */\n  function selfRegister(string calldata hoprPeerId) external mustBeEnabled returns (bool) {\n    require(\n      bytes(hoprPeerId).length == 53 && bytes32(bytes(hoprPeerId)[0:8]) == '16Uiu2HA',\n      'HoprNetworkRegistry: HOPR node peer id must be valid'\n    );\n    // get account associated with the given hopr node peer id, if any\n    address registeredAccount = nodePeerIdToAccount[hoprPeerId];\n    // if the hopr node peer id was linked to a different account, revert.\n    // To change a nodes' linked account, it must be deregistered by the previously linked account\n    // first before registering by the new account, to prevent hostile takeover of others' node peer id\n    require(\n      registeredAccount == msg.sender || registeredAccount == address(0),\n      'HoprNetworkRegistry: Cannot link a registered node to a different account'\n    );\n\n    // get multi address associated with the caller, if any\n    bytes memory registeredNodeMultiaddrInBytes = bytes(accountToNodePeerId[msg.sender]);\n    require(\n      registeredNodeMultiaddrInBytes.length == 0 ||\n        keccak256(registeredNodeMultiaddrInBytes) == keccak256(bytes(hoprPeerId)),\n      'HoprNetworkRegistry: Cannot link an account to a different node. Please remove the registered node'\n    );\n\n    if (requirementImplementation.isRequirementFulfilled(msg.sender)) {\n      // only update the list when no record previously exists\n      if (registeredNodeMultiaddrInBytes.length == 0) {\n        accountToNodePeerId[msg.sender] = hoprPeerId;\n        nodePeerIdToAccount[hoprPeerId] = msg.sender;\n        emit Registered(msg.sender, hoprPeerId);\n      }\n      emit EligibilityUpdated(msg.sender, true);\n      return true;\n    }\n\n    emit EligibilityUpdated(msg.sender, false);\n    return false;\n  }\n\n  /**\n   * @dev Allows when there's already a multi address associated with the caller account, remove the link by deregistering\n   */\n  function selfDeregister() external mustBeEnabled returns (bool) {\n    string memory registeredNodeMultiaddr = accountToNodePeerId[msg.sender];\n    require(bytes(registeredNodeMultiaddr).length > 0, 'HoprNetworkRegistry: Cannot delete an empty entry');\n    delete accountToNodePeerId[msg.sender];\n    delete nodePeerIdToAccount[registeredNodeMultiaddr];\n    emit Deregistered(msg.sender);\n    return true;\n  }\n\n  /**\n   * @dev Owner adds Ethereum addresses and HOPR node ids to the registration.\n   * Allows owner to register arbitrary HOPR Addresses even if accounts do not fulfill registration requirements.\n   * HOPR node peer id validation should be done off-chain.\n   * @notice It allows owner to overwrite exisitng entries.\n   * @param accounts Array of Ethereum accounts, e.g. [0xf6A8b267f43998B890857f8d1C9AabC68F8556ee]\n   * @param hoprPeerIds Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]\n   */\n  function ownerRegister(address[] calldata accounts, string[] calldata hoprPeerIds) external onlyOwner mustBeEnabled {\n    require(hoprPeerIds.length == accounts.length, 'HoprNetworkRegistry: hoprPeerIdes and accounts lengths mismatch');\n    for (uint256 i = 0; i < accounts.length; i++) {\n      // validate peer the length and prefix of peer Ids. If invalid, skip.\n      if (bytes(hoprPeerIds[i]).length == 53 && bytes32(bytes(hoprPeerIds[i])[0:8]) == '16Uiu2HA') {\n        string memory hoprPeerId = hoprPeerIds[i];\n        address account = accounts[i];\n        accountToNodePeerId[account] = hoprPeerId;\n        nodePeerIdToAccount[hoprPeerId] = account;\n        emit RegisteredByOwner(account, hoprPeerId);\n        emit EligibilityUpdated(account, true);\n      }\n    }\n  }\n\n  /**\n   * @dev Owner removes previously owner-added Ethereum addresses and HOPR node ids from the registration.\n   * @notice Owner can even remove self-declared entries.\n   * @param accounts Array of Ethereum accounts, e.g. 0xf6A8b267f43998B890857f8d1C9AabC68F8556ee\n   */\n  function ownerDeregister(address[] calldata accounts) external onlyOwner mustBeEnabled {\n    for (uint256 i = 0; i < accounts.length; i++) {\n      address account = accounts[i];\n      string memory hoprPeerId = accountToNodePeerId[account];\n      delete accountToNodePeerId[account];\n      delete nodePeerIdToAccount[hoprPeerId];\n      // Eligibility update should have a logindex strictly smaller\n      // than the deregister event to make sure it always gets processed\n      // before the deregister event\n      emit EligibilityUpdated(account, false);\n      emit DeregisteredByOwner(account);\n    }\n  }\n\n  /**\n   * @dev Owner syncs a list of addresses with based on the latest criteria.\n   * @notice If an account hasn't been registered, its eligibility is not going to be updated\n   * @param accounts Array of Ethereum accounts, e.g. [0xf6A8b267f43998B890857f8d1C9AabC68F8556ee]\n   */\n  function sync(address[] calldata accounts) external onlyOwner mustBeEnabled {\n    for (uint256 i = 0; i < accounts.length; i++) {\n      address account = accounts[i];\n      if (bytes(accountToNodePeerId[account]).length == 0) {\n        // if the account does not have any registered address\n        continue;\n      }\n      if (!requirementImplementation.isRequirementFulfilled(account)) {\n        // if the account is no longer eligible\n        emit EligibilityUpdated(account, false);\n      } else {\n        emit EligibilityUpdated(account, true);\n      }\n    }\n  }\n\n  /**\n   * @dev Returns if a hopr address is registered and its associated account is eligible or not.\n   * @param hoprPeerId hopr node peer id\n   */\n  function isNodeRegisteredAndEligible(string calldata hoprPeerId) public view returns (bool) {\n    address account = nodePeerIdToAccount[hoprPeerId];\n    if (account == address(0)) {\n      // this address has never been registered\n      return false;\n    }\n    return requirementImplementation.isRequirementFulfilled(account);\n  }\n\n  /**\n   * @dev Returns if an account address is eligible according to the criteria defined in the implementation\n   * It also checks if a node peer id is associated with the account.\n   * @param account account address that runs hopr node\n   */\n  function isAccountRegisteredAndEligible(address account) public view returns (bool) {\n    return bytes(accountToNodePeerId[account]).length != 0 && requirementImplementation.isRequirementFulfilled(account);\n  }\n}\n"
        },
        "contracts/mocks/ERC721Mock.sol": {
          "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\n\n/**\n * @title ERC721Mock\n * This mock just provides a public safeMint, mint, and burn functions for testing purposes\n */\ncontract ERC721Mock is ERC721 {\n  constructor() ERC721('ERC721 Mock', 'M721') {}\n\n  function baseURI() public view returns (string memory) {\n    return _baseURI();\n  }\n\n  function exists(uint256 tokenId) public view returns (bool) {\n    return _exists(tokenId);\n  }\n\n  function mint(address to, uint256 tokenId) public {\n    _mint(to, tokenId);\n  }\n\n  function safeMint(address to, uint256 tokenId) public {\n    _safeMint(to, tokenId);\n  }\n\n  function safeMint(\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) public {\n    _safeMint(to, tokenId, _data);\n  }\n\n  function burn(uint256 tokenId) public {\n    _burn(tokenId);\n  }\n}\n"
        }
      },
      "settings": {
        "optimizer": {
          "enabled": true,
          "runs": 200
        },
        "outputSelection": {
          "*": {
            "*": [
              "storageLayout",
              "abi",
              "evm.bytecode",
              "evm.deployedBytecode",
              "evm.methodIdentifiers",
              "metadata",
              "devdoc",
              "userdoc",
              "evm.gasEstimates"
            ],
            "": [
              "ast"
            ]
          }
        },
        "metadata": {
          "useLiteralContent": true
        }
      }
    }
  },
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_requirementImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Deregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "DeregisteredByOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "eligibility",
          "type": "bool"
        }
      ],
      "name": "EligibilityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "EnabledNetworkRegistry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "hoprPeerId",
          "type": "string"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "hoprPeerId",
          "type": "string"
        }
      ],
      "name": "RegisteredByOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requirementImplementation",
          "type": "address"
        }
      ],
      "name": "RequirementUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountToNodePeerId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAccountRegisteredAndEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "hoprPeerId",
          "type": "string"
        }
      ],
      "name": "isNodeRegisteredAndEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nodePeerIdToAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "ownerDeregister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "hoprPeerIds",
          "type": "string[]"
        }
      ],
      "name": "ownerRegister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requirementImplementation",
      "outputs": [
        {
          "internalType": "contract IHoprNetworkRegistryRequirement",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selfDeregister",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "hoprPeerId",
          "type": "string"
        }
      ],
      "name": "selfRegister",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "sync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_requirementImplementation",
          "type": "address"
        }
      ],
      "name": "updateRequirementImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ]
}