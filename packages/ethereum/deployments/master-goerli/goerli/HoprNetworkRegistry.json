{
  "address": "0xe7986d7402E18C59b657ED0B66B6631B1B3db796",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_requirementImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "peerId",
          "type": "string"
        }
      ],
      "name": "InvalidPeerId",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "hoprPeerId",
          "type": "string"
        }
      ],
      "name": "Deregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "hoprPeerId",
          "type": "string"
        }
      ],
      "name": "DeregisteredByOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "eligibility",
          "type": "bool"
        }
      ],
      "name": "EligibilityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "EnabledNetworkRegistry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "hoprPeerId",
          "type": "string"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "hoprPeerId",
          "type": "string"
        }
      ],
      "name": "RegisteredByOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requirementImplementation",
          "type": "address"
        }
      ],
      "name": "RequirementUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "countRegisterdNodesPerAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAccountRegisteredAndEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "hoprPeerId",
          "type": "string"
        }
      ],
      "name": "isNodeRegisteredAndEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nodePeerIdToAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "hoprPeerIds",
          "type": "string[]"
        }
      ],
      "name": "ownerDeregister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "eligibility",
          "type": "bool[]"
        }
      ],
      "name": "ownerForceEligibility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "hoprPeerIds",
          "type": "string[]"
        }
      ],
      "name": "ownerRegister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requirementImplementation",
      "outputs": [
        {
          "internalType": "contract IHoprNetworkRegistryRequirement",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "hoprPeerIds",
          "type": "string[]"
        }
      ],
      "name": "selfDeregister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "hoprPeerIds",
          "type": "string[]"
        }
      ],
      "name": "selfRegister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "hoprPeerIds",
          "type": "string[]"
        }
      ],
      "name": "sync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_requirementImplementation",
          "type": "address"
        }
      ],
      "name": "updateRequirementImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1ec68412cc53cfa7eba4e2d6b094df6aa331338b4b453b68ac735dc10e7e2559",
  "receipt": {
    "to": null,
    "from": "0xA18732DC751BE0dB04157eb92C92BA9d0fC09FC5",
    "contractAddress": "0xe7986d7402E18C59b657ED0B66B6631B1B3db796",
    "transactionIndex": 2,
    "gasUsed": "1433958",
    "logsBloom": "0x00020000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000020800000000040040000000000000000000280000000000000001000000040000000001020000000000000000020200000000000000000800000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000400000000000000000000060200000000040000000000000000000000080000000000000000000000000000000",
    "blockHash": "0xc70c381d1bae1f16079ae933ce5fe074280ce29cd81401dc28495e56862b3a20",
    "transactionHash": "0x1ec68412cc53cfa7eba4e2d6b094df6aa331338b4b453b68ac735dc10e7e2559",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 7535233,
        "transactionHash": "0x1ec68412cc53cfa7eba4e2d6b094df6aa331338b4b453b68ac735dc10e7e2559",
        "address": "0xe7986d7402E18C59b657ED0B66B6631B1B3db796",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a18732dc751be0db04157eb92c92ba9d0fc09fc5"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc70c381d1bae1f16079ae933ce5fe074280ce29cd81401dc28495e56862b3a20"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 7535233,
        "transactionHash": "0x1ec68412cc53cfa7eba4e2d6b094df6aa331338b4b453b68ac735dc10e7e2559",
        "address": "0xe7986d7402E18C59b657ED0B66B6631B1B3db796",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000a18732dc751be0db04157eb92c92ba9d0fc09fc5",
          "0x000000000000000000000000a18732dc751be0db04157eb92c92ba9d0fc09fc5"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xc70c381d1bae1f16079ae933ce5fe074280ce29cd81401dc28495e56862b3a20"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 7535233,
        "transactionHash": "0x1ec68412cc53cfa7eba4e2d6b094df6aa331338b4b453b68ac735dc10e7e2559",
        "address": "0xe7986d7402E18C59b657ED0B66B6631B1B3db796",
        "topics": [
          "0x8ac4b2eb7749f75c5b99b898e547fd615dd7a424e68356ea196b7dae742d6c32",
          "0x00000000000000000000000042fcc2d521b550476259d1b2a50f7626b631e0fd"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xc70c381d1bae1f16079ae933ce5fe074280ce29cd81401dc28495e56862b3a20"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 7535233,
        "transactionHash": "0x1ec68412cc53cfa7eba4e2d6b094df6aa331338b4b453b68ac735dc10e7e2559",
        "address": "0xe7986d7402E18C59b657ED0B66B6631B1B3db796",
        "topics": [
          "0x3f749856d23f89c3cefe0f1055d280fc302c5d6adb048bc20f5d975239c30492",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xc70c381d1bae1f16079ae933ce5fe074280ce29cd81401dc28495e56862b3a20"
      }
    ],
    "blockNumber": 7535233,
    "cumulativeGasUsed": "1529538",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x42fcC2D521b550476259D1B2a50f7626B631e0FD",
    "0xA18732DC751BE0dB04157eb92C92BA9d0fC09FC5"
  ],
  "numDeployments": 1,
  "solcInputHash": "af7bd918873be3a5c9ededf31794e8b6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requirementImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"peerId\",\"type\":\"string\"}],\"name\":\"InvalidPeerId\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hoprPeerId\",\"type\":\"string\"}],\"name\":\"Deregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hoprPeerId\",\"type\":\"string\"}],\"name\":\"DeregisteredByOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"eligibility\",\"type\":\"bool\"}],\"name\":\"EligibilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"EnabledNetworkRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hoprPeerId\",\"type\":\"string\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hoprPeerId\",\"type\":\"string\"}],\"name\":\"RegisteredByOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requirementImplementation\",\"type\":\"address\"}],\"name\":\"RequirementUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"countRegisterdNodesPerAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountRegisteredAndEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hoprPeerId\",\"type\":\"string\"}],\"name\":\"isNodeRegisteredAndEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nodePeerIdToAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"hoprPeerIds\",\"type\":\"string[]\"}],\"name\":\"ownerDeregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"eligibility\",\"type\":\"bool[]\"}],\"name\":\"ownerForceEligibility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"hoprPeerIds\",\"type\":\"string[]\"}],\"name\":\"ownerRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requirementImplementation\",\"outputs\":[{\"internalType\":\"contract IHoprNetworkRegistryRequirement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"hoprPeerIds\",\"type\":\"string[]\"}],\"name\":\"selfDeregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"hoprPeerIds\",\"type\":\"string[]\"}],\"name\":\"selfRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"hoprPeerIds\",\"type\":\"string[]\"}],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requirementImplementation\",\"type\":\"address\"}],\"name\":\"updateRequirementImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Smart contract that maintains a list of hopr node address (peer id) that are allowed to enter HOPR network. Each peer id is linked with an Ethereum account. Only Ethereum accounts that are eligible according to `IHoprNetworkRegistryRequirement` can register one or multiple HOPR node address(es). When reaching its limits, accounts can remove registered node addresses (`deregister`) before adding more. A peer id can only be registered if it's not registered by another account. Note that HOPR node address refers to `PeerId.toString()` This network registry can be globally enabled/disabled by the owner Implementation of `IHoprNetworkRegistryRequirement` can also be dynamically updated by the owner. Some sample implementations can be found under../proxy/ folder Owner has the power to overwrite the registration\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_newOwner\":\"address of the contract owner\",\"_requirementImplementation\":\"address of the network registry logic implementation\"}},\"isAccountRegisteredAndEligible(address)\":{\"details\":\"Returns if an account address is eligible according to the criteria defined in the proxy implementation It also checks if a node peer id is associated with the account.\",\"params\":{\"account\":\"account address that runs hopr node\"}},\"isNodeRegisteredAndEligible(string)\":{\"details\":\"Returns if a hopr address is registered and its associated account is eligible or not.\",\"params\":{\"hoprPeerId\":\"hopr node peer id\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerDeregister(string[])\":{\"details\":\"Owner removes previously owner-added Ethereum addresses and HOPR node ids from the registration. Function can be called at any time.\",\"params\":{\"hoprPeerIds\":\"Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]\"}},\"ownerForceEligibility(address[],bool[])\":{\"details\":\"Force emit eligibility update by the owner.\",\"params\":{\"accounts\":\"Array of Ethereum accounts, e.g. [0xf6A8b267f43998B890857f8d1C9AabC68F8556ee]\",\"eligibility\":\"Array of account eligibility, e.g. [true]\"}},\"ownerRegister(address[],string[])\":{\"details\":\"Owner adds Ethereum addresses and HOPR node ids to the registration. Function can be called at any time. Allows owner to register arbitrary HOPR peer ids even if accounts do not fulfill registration requirements. HOPR node peer id validation should be done off-chain.\",\"params\":{\"accounts\":\"Array of Ethereum accounts, e.g. [0xf6A8b267f43998B890857f8d1C9AabC68F8556ee]\",\"hoprPeerIds\":\"Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"selfDeregister(string[])\":{\"details\":\"Allows account to deregister a registered peer ID Function can only be called when the registry is enabled. Performs a minimum validation of node IDs. Full validation should be done off-chain. hopr node peer id should always start with '16Uiu2HA' (0x3136556975324841) and be of length 53\",\"params\":{\"hoprPeerIds\":\"Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]\"}},\"selfRegister(string[])\":{\"details\":\"Register a new node's peer id associated with the caller.\",\"params\":{\"hoprPeerIds\":\"Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]\"}},\"sync(string[])\":{\"details\":\"Owner syncs a list of peer Ids with based on the latest criteria. Function can only be called when the registry is enabled.\",\"params\":{\"hoprPeerIds\":\"Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateRequirementImplementation(address)\":{\"params\":{\"_requirementImplementation\":\"address of the network registry logic implementation\"}}},\"title\":\"HoprNetworkRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Specify NetworkRegistry logic implementation and transfer the ownership enable the network registry on deployment.\"},\"disableRegistry()\":{\"notice\":\"Disanable globally the network registry by the owner\"},\"enableRegistry()\":{\"notice\":\"Enable globally the network registry by the owner\"},\"ownerDeregister(string[])\":{\"notice\":\"Owner can even remove self-declared entries.\"},\"ownerForceEligibility(address[],bool[])\":{\"notice\":\"This does not change the result returned from the proxy, so if `sync` is called on those accounts, it may return a different result.\"},\"ownerRegister(address[],string[])\":{\"notice\":\"It allows owner to overwrite exisitng entries.\"},\"selfRegister(string[])\":{\"notice\":\"Transaction will fail, if 1) the peer ID is registered to an address, including the caller. 2) the caller will become ineligible after adding a new node Performs a minimum validation of node IDs. Full validation should be done off-chain. hopr node peer id should always start with '16Uiu2HA' (0x3136556975324841) and be of length 53 Function can only be called when the registry is enabled.\"},\"sync(string[])\":{\"notice\":\"If a peer id hasn't been registered, its eligibility is not going to be updated\"},\"updateRequirementImplementation(address)\":{\"notice\":\"Specify NetworkRegistry logic implementation\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HoprNetworkRegistry.sol\":\"HoprNetworkRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/HoprNetworkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './IHoprNetworkRegistryRequirement.sol';\\n\\n/**\\n * @title HoprNetworkRegistry\\n * @dev Smart contract that maintains a list of hopr node address (peer id) that are allowed\\n * to enter HOPR network. Each peer id is linked with an Ethereum account. Only Ethereum\\n * accounts that are eligible according to `IHoprNetworkRegistryRequirement` can register one\\n * or multiple HOPR node address(es).\\n *\\n * When reaching its limits, accounts can remove registered node addresses (`deregister`)\\n * before adding more.\\n *\\n * A peer id can only be registered if it's not registered by another account.\\n *\\n * Note that HOPR node address refers to `PeerId.toString()`\\n *\\n * This network registry can be globally enabled/disabled by the owner\\n *\\n * Implementation of `IHoprNetworkRegistryRequirement` can also be dynamically updated by the\\n * owner. Some sample implementations can be found under../proxy/ folder\\n *\\n * Owner has the power to overwrite the registration\\n */\\ncontract HoprNetworkRegistry is Ownable {\\n  IHoprNetworkRegistryRequirement public requirementImplementation; // Implementation of network registry proxy\\n  mapping(address => uint256) public countRegisterdNodesPerAccount; // counter for registered nodes per account\\n  mapping(string => address) public nodePeerIdToAccount; // mapping the hopr node peer id in bytes to account\\n  bool public enabled;\\n\\n  error InvalidPeerId(string peerId);\\n\\n  event EnabledNetworkRegistry(bool indexed isEnabled); // Global toggle of the network registry\\n  event RequirementUpdated(address indexed requirementImplementation); // Emit when the network registry proxy is updated\\n  event Registered(address indexed account, string hoprPeerId); // Emit when an account register a node peer id for itself\\n  event Deregistered(address indexed account, string hoprPeerId); // Emit when an account deregister a node peer id for itself\\n  event RegisteredByOwner(address indexed account, string hoprPeerId); // Emit when the contract owner register a node peer id for an account\\n  event DeregisteredByOwner(address indexed account, string hoprPeerId); // Emit when the contract owner deregister a node peer id for an account\\n  event EligibilityUpdated(address indexed account, bool indexed eligibility); // Emit when the eligibility of an account is updated\\n\\n  /**\\n   * @dev Network registry can be globally toggled. If `enabled === true`, only nodes registered\\n   * in this contract with an eligible account associated can join HOPR network; If `!enabled`,\\n   * all the nodes can join HOPR network regardless the eligibility of the associated account.\\n   */\\n  modifier mustBeEnabled() {\\n    require(enabled, 'HoprNetworkRegistry: Registry is disabled');\\n    _;\\n  }\\n\\n  /**\\n   * Specify NetworkRegistry logic implementation and transfer the ownership\\n   * enable the network registry on deployment.\\n   * @param _requirementImplementation address of the network registry logic implementation\\n   * @param _newOwner address of the contract owner\\n   */\\n  constructor(address _requirementImplementation, address _newOwner) {\\n    requirementImplementation = IHoprNetworkRegistryRequirement(_requirementImplementation);\\n    enabled = true;\\n    _transferOwnership(_newOwner);\\n    emit RequirementUpdated(_requirementImplementation);\\n    emit EnabledNetworkRegistry(true);\\n  }\\n\\n  /**\\n   * Specify NetworkRegistry logic implementation\\n   * @param _requirementImplementation address of the network registry logic implementation\\n   */\\n  function updateRequirementImplementation(address _requirementImplementation) external onlyOwner {\\n    requirementImplementation = IHoprNetworkRegistryRequirement(_requirementImplementation);\\n    emit RequirementUpdated(_requirementImplementation);\\n  }\\n\\n  /**\\n   * Enable globally the network registry by the owner\\n   */\\n  function enableRegistry() external onlyOwner {\\n    require(!enabled, 'HoprNetworkRegistry: Registry is enabled');\\n    enabled = true;\\n    emit EnabledNetworkRegistry(true);\\n  }\\n\\n  /**\\n   * Disanable globally the network registry by the owner\\n   */\\n  function disableRegistry() external onlyOwner mustBeEnabled {\\n    enabled = false;\\n    emit EnabledNetworkRegistry(false);\\n  }\\n\\n  /**\\n   * @dev Register a new node's peer id associated with the caller.\\n   * @notice Transaction will fail, if\\n   * 1) the peer ID is registered to an address, including the caller.\\n   * 2) the caller will become ineligible after adding a new node\\n   *\\n   * Performs a minimum validation of node IDs. Full validation should be done off-chain.\\n   * hopr node peer id should always start with '16Uiu2HA' (0x3136556975324841) and be of length 53\\n   *\\n   * Function can only be called when the registry is enabled.\\n   * @param hoprPeerIds Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]\\n   */\\n  function selfRegister(string[] calldata hoprPeerIds) external mustBeEnabled {\\n    // update the counter\\n    countRegisterdNodesPerAccount[msg.sender] += hoprPeerIds.length;\\n\\n    // check sender eligibility\\n    require(\\n      _checkEligibility(msg.sender),\\n      'HoprNetworkRegistry: selfRegister reaches limit, cannot register requested nodes.'\\n    );\\n    emit EligibilityUpdated(msg.sender, true);\\n\\n    for (uint256 i = 0; i < hoprPeerIds.length; i++) {\\n      string memory hoprPeerId = hoprPeerIds[i];\\n      if (bytes(hoprPeerId).length != 53 || bytes32(bytes(hoprPeerIds[i])[0:8]) != '16Uiu2HA') {\\n        revert InvalidPeerId({peerId: hoprPeerId});\\n      }\\n      // get account associated with the given hopr node peer id, if any\\n      address registeredAccount = nodePeerIdToAccount[hoprPeerId];\\n      if (registeredAccount == msg.sender) {\\n        // when registering the registerd account, skip\\n        continue;\\n      } else {\\n        // if the hopr node peer id was linked to a different account, revert.\\n        // To change a nodes' linked account, it must be deregistered by the previously linked account\\n        // first before registering by the new account, to prevent hostile takeover of others' node peer id\\n        require(registeredAccount == address(0), 'HoprNetworkRegistry: Cannot link a registered node.');\\n        nodePeerIdToAccount[hoprPeerId] = msg.sender;\\n        emit Registered(msg.sender, hoprPeerId);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Allows account to deregister a registered peer ID\\n   * Function can only be called when the registry is enabled.\\n   *\\n   * Performs a minimum validation of node IDs. Full validation should be done off-chain.\\n   * hopr node peer id should always start with '16Uiu2HA' (0x3136556975324841) and be of length 53\\n   *\\n   * @param hoprPeerIds Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]\\n   */\\n  function selfDeregister(string[] calldata hoprPeerIds) external mustBeEnabled {\\n    // update the counter\\n    countRegisterdNodesPerAccount[msg.sender] -= hoprPeerIds.length;\\n\\n    // check sender eligibility\\n    if (_checkEligibility(msg.sender)) {\\n      // account becomes eligible\\n      emit EligibilityUpdated(msg.sender, true);\\n    } else {\\n      emit EligibilityUpdated(msg.sender, false);\\n    }\\n\\n    for (uint256 i = 0; i < hoprPeerIds.length; i++) {\\n      string memory hoprPeerId = hoprPeerIds[i];\\n      require(\\n        nodePeerIdToAccount[hoprPeerId] == msg.sender,\\n        'HoprNetworkRegistry: Cannot delete an entry not associated with the caller.'\\n      );\\n      delete nodePeerIdToAccount[hoprPeerId];\\n      emit Deregistered(msg.sender, hoprPeerId);\\n    }\\n  }\\n\\n  /**\\n   * @dev Owner adds Ethereum addresses and HOPR node ids to the registration.\\n   * Function can be called at any time.\\n   * Allows owner to register arbitrary HOPR peer ids even if accounts do not fulfill registration requirements.\\n   * HOPR node peer id validation should be done off-chain.\\n   * @notice It allows owner to overwrite exisitng entries.\\n   * @param accounts Array of Ethereum accounts, e.g. [0xf6A8b267f43998B890857f8d1C9AabC68F8556ee]\\n   * @param hoprPeerIds Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]\\n   */\\n  function ownerRegister(address[] calldata accounts, string[] calldata hoprPeerIds) external onlyOwner {\\n    require(hoprPeerIds.length == accounts.length, 'HoprNetworkRegistry: hoprPeerIdes and accounts lengths mismatch');\\n    for (uint256 i = 0; i < accounts.length; i++) {\\n      // validate peer the length and prefix of peer Ids. If invalid, skip.\\n      if (bytes(hoprPeerIds[i]).length == 53 && bytes32(bytes(hoprPeerIds[i])[0:8]) == '16Uiu2HA') {\\n        string memory hoprPeerId = hoprPeerIds[i];\\n        address account = accounts[i];\\n        // link the account with peer id.\\n        nodePeerIdToAccount[hoprPeerId] = account;\\n        // update the counter\\n        countRegisterdNodesPerAccount[account] += 1;\\n        emit RegisteredByOwner(account, hoprPeerId);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Owner removes previously owner-added Ethereum addresses and HOPR node ids from the registration.\\n   * Function can be called at any time.\\n   * @notice Owner can even remove self-declared entries.\\n   * @param hoprPeerIds Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]\\n   */\\n  function ownerDeregister(string[] calldata hoprPeerIds) external onlyOwner {\\n    for (uint256 i = 0; i < hoprPeerIds.length; i++) {\\n      string memory hoprPeerId = hoprPeerIds[i];\\n      address account = nodePeerIdToAccount[hoprPeerId];\\n      if (account != address(0)) {\\n        delete nodePeerIdToAccount[hoprPeerId];\\n        countRegisterdNodesPerAccount[account] -= 1;\\n        // Eligibility update should have a logindex strictly smaller\\n        // than the deregister event to make sure it always gets processed\\n        // before the deregister event\\n        emit DeregisteredByOwner(account, hoprPeerId);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Force emit eligibility update by the owner.\\n   * @notice This does not change the result returned from the proxy, so if `sync` is called on those accounts,\\n   * it may return a different result.\\n   * @param accounts Array of Ethereum accounts, e.g. [0xf6A8b267f43998B890857f8d1C9AabC68F8556ee]\\n   * @param eligibility Array of account eligibility, e.g. [true]\\n   */\\n  function ownerForceEligibility(address[] calldata accounts, bool[] calldata eligibility) external onlyOwner {\\n    require(accounts.length == eligibility.length, 'HoprNetworkRegistry: accounts and eligibility lengths mismatch');\\n    for (uint256 i = 0; i < accounts.length; i++) {\\n      emit EligibilityUpdated(accounts[i], eligibility[i]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Owner syncs a list of peer Ids with based on the latest criteria.\\n   * Function can only be called when the registry is enabled.\\n   * @notice If a peer id hasn't been registered, its eligibility is not going to be updated\\n   * @param hoprPeerIds Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]\\n   */\\n  function sync(string[] calldata hoprPeerIds) external onlyOwner mustBeEnabled {\\n    for (uint256 i = 0; i < hoprPeerIds.length; i++) {\\n      string memory hoprPeerId = hoprPeerIds[i];\\n      address account = nodePeerIdToAccount[hoprPeerId];\\n\\n      if (account == address(0)) {\\n        // if the account does not have any registered address\\n        continue;\\n      }\\n      if (_checkEligibility(account)) {\\n        emit EligibilityUpdated(account, true);\\n      } else {\\n        // if the account is no longer eligible\\n        emit EligibilityUpdated(account, false);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns if a hopr address is registered and its associated account is eligible or not.\\n   * @param hoprPeerId hopr node peer id\\n   */\\n  function isNodeRegisteredAndEligible(string calldata hoprPeerId) public view returns (bool) {\\n    // check if peer id is registered\\n    address account = nodePeerIdToAccount[hoprPeerId];\\n    if (account == address(0)) {\\n      // this address has never been registered\\n      return false;\\n    }\\n    return _checkEligibility(account);\\n  }\\n\\n  /**\\n   * @dev Returns if an account address is eligible according to the criteria defined in the proxy implementation\\n   * It also checks if a node peer id is associated with the account.\\n   * @param account account address that runs hopr node\\n   */\\n  function isAccountRegisteredAndEligible(address account) public view returns (bool) {\\n    return countRegisterdNodesPerAccount[account] > 0 && _checkEligibility(account);\\n  }\\n\\n  /**\\n   * @dev given the current registry, check if an account has the number of registered nodes within the limit,\\n   * which is the eligibility of an account.\\n   * @notice If an account has registerd more peers than it's currently allowed, the account become ineligible\\n   * @param account address to check its eligibility\\n   */\\n  function _checkEligibility(address account) private view returns (bool) {\\n    uint256 maxAllowedRegistration = requirementImplementation.maxAllowedRegistrations(account);\\n    if (countRegisterdNodesPerAccount[account] <= maxAllowedRegistration) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x3b62319cbe11a09cbb78edf616f317f86c4085f4b3ba19db3c271775057a3afc\",\"license\":\"GPL-3.0\"},\"contracts/IHoprNetworkRegistryRequirement.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface for HoprNetworkRegistryProxy\\n * @dev Network Registry contract (NR) delegates its eligibility check to Network\\n * Registry Proxy (NR Proxy) contract. This interface must be implemented by the\\n * NR Proxy contract.\\n */\\ninterface IHoprNetworkRegistryRequirement {\\n  /**\\n   * @dev Get the maximum number of nodes' peer ids that an account can register.\\n   * This check is only performed when registering new nodes, i.e. if the number gets\\n   * reduced later, it does not affect registered nodes.\\n   *\\n   * @param account Address that can register other nodes\\n   */\\n  function maxAllowedRegistrations(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7f7d4fd00d9c81cd5707c70e74ac46444a44b7f63e06dd2dcab56483b213d125\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200191b3803806200191b833981016040819052620000349162000147565b6200003f33620000da565b600180546001600160a01b0319166001600160a01b0384161781556004805460ff191690911790556200007281620000da565b6040516001600160a01b038316907f8ac4b2eb7749f75c5b99b898e547fd615dd7a424e68356ea196b7dae742d6c3290600090a26040516001907f3f749856d23f89c3cefe0f1055d280fc302c5d6adb048bc20f5d975239c3049290600090a250506200017f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200014257600080fd5b919050565b600080604083850312156200015b57600080fd5b62000166836200012a565b915062000176602084016200012a565b90509250929050565b61178c806200018f6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063cfb3735f11610071578063cfb3735f1461025f578063d86a517014610267578063dd41c7461461027a578063e3d2a0711461028d578063f2fde38b146102a057600080fd5b80638da5cb5b14610220578063a3c676dd14610231578063af4c4cf714610244578063cbebafe01461025757600080fd5b806336e1aa80116100e957806336e1aa80146101b15780633e38949c146101c45780633fa58457146101d75780635d1c396414610205578063715018a61461021857600080fd5b8063036167ae1461011b578063238dafe01461013057806327b040a1146101525780632e6e031814610165575b600080fd5b61012e6101293660046112d2565b6102b3565b005b60045461013d9060ff1681565b60405190151581526020015b60405180910390f35b61012e610160366004611314565b610439565b61019961017336600461135a565b80516020818301810180516003825292820191909301209152546001600160a01b031681565b6040516001600160a01b039091168152602001610149565b61012e6101bf36600461140b565b6104ad565b61012e6101d23660046112d2565b61071f565b6101f76101e5366004611314565b60026020526000908152604090205481565b604051908152602001610149565b61013d610213366004611314565b610943565b61012e610974565b6000546001600160a01b0316610199565b61012e61023f3660046112d2565b6109aa565b61013d610252366004611477565b610cbd565b61012e610d0d565b61012e610d90565b61012e6102753660046112d2565b610e59565b61012e61028836600461140b565b610fb7565b600154610199906001600160a01b031681565b61012e6102ae366004611314565b6110e6565b6000546001600160a01b031633146102e65760405162461bcd60e51b81526004016102dd906114e9565b60405180910390fd5b60005b818110156104345760008383838181106103055761030561151e565b90506020028101906103179190611534565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051949550936003935061035f92508591506115ab565b908152604051908190036020019020546001600160a01b03169050801561041f5760038260405161039091906115ab565b908152604080516020928190038301902080546001600160a01b03191690556001600160a01b0383166000908152600290925281208054600192906103d69084906115dd565b92505081905550806001600160a01b03167f7303b218be576befd7afef7d2f9088c49eb7c26c155dba016527f71ee2f4ad0c8360405161041691906115f4565b60405180910390a25b5050808061042c90611627565b9150506102e9565b505050565b6000546001600160a01b031633146104635760405162461bcd60e51b81526004016102dd906114e9565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f8ac4b2eb7749f75c5b99b898e547fd615dd7a424e68356ea196b7dae742d6c3290600090a250565b6000546001600160a01b031633146104d75760405162461bcd60e51b81526004016102dd906114e9565b80831461054c5760405162461bcd60e51b815260206004820152603f60248201527f486f70724e6574776f726b52656769737472793a20686f70725065657249646560448201527f7320616e64206163636f756e7473206c656e67746873206d69736d617463680060648201526084016102dd565b60005b83811015610718578282828181106105695761056961151e565b905060200281019061057b9190611534565b905060351480156105d157508282828181106105995761059961151e565b90506020028101906105ab9190611534565b6105ba91600891600091611642565b6105c39161166c565b67313655697532484160c01b145b156107065760008383838181106105ea576105ea61151e565b90506020028101906105fc9190611534565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394508992508891508590508181106106475761064761151e565b905060200201602081019061065c9190611314565b90508060038360405161066f91906115ab565b908152604080516020928190038301902080546001600160a01b0319166001600160a01b03948516179055918316600090815260029091529081208054600192906106bb90849061168a565b92505081905550806001600160a01b03167f87b2f82f8766cb6651342bc0a77cfb41521b857c0dd7f38e751c2dfd21820c23836040516106fb91906115f4565b60405180910390a250505b8061071081611627565b91505061054f565b5050505050565b60045460ff166107415760405162461bcd60e51b81526004016102dd906116a2565b33600090815260026020526040812080548392906107609084906115dd565b9091555061076f905033611181565b1561079557604051600190339060008051602061173783398151915290600090a36107b1565b6040516000903390600080516020611737833981519152908390a35b60005b818110156104345760008383838181106107d0576107d061151e565b90506020028101906107e29190611534565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060405192935033926003925061082c915084906115ab565b908152604051908190036020019020546001600160a01b0316146108cc5760405162461bcd60e51b815260206004820152604b60248201527f486f70724e6574776f726b52656769737472793a2043616e6e6f742064656c6560448201527f746520616e20656e747279206e6f74206173736f63696174656420776974682060648201526a3a34329031b0b63632b91760a91b608482015260a4016102dd565b6003816040516108dc91906115ab565b90815260405190819003602001812080546001600160a01b031916905533907fed392d6c60bfee7cf61b9bc8bbcf48abb41bd5884565367943576fcd56a058e1906109289084906115f4565b60405180910390a2508061093b81611627565b9150506107b4565b6001600160a01b0381166000908152600260205260408120541580159061096e575061096e82611181565b92915050565b6000546001600160a01b0316331461099e5760405162461bcd60e51b81526004016102dd906114e9565b6109a86000611236565b565b60045460ff166109cc5760405162461bcd60e51b81526004016102dd906116a2565b33600090815260026020526040812080548392906109eb90849061168a565b909155506109fa905033611181565b610a865760405162461bcd60e51b815260206004820152605160248201527f486f70724e6574776f726b52656769737472793a2073656c665265676973746560448201527f722072656163686573206c696d69742c2063616e6e6f74207265676973746572606482015270103932b8bab2b9ba32b2103737b232b99760791b608482015260a4016102dd565b604051600190339060008051602061173783398151915290600090a360005b81811015610434576000838383818110610ac157610ac161151e565b9050602002810190610ad39190611534565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050825192935050506035141580610b615750838383818110610b2857610b2861151e565b9050602002810190610b3a9190611534565b610b4991600891600091611642565b610b529161166c565b67313655697532484160c01b14155b15610b81578060405163754c8e5960e11b81526004016102dd91906115f4565b6000600382604051610b9391906115ab565b908152604051908190036020019020546001600160a01b0316905033811415610bbd575050610cab565b6001600160a01b03811615610c305760405162461bcd60e51b815260206004820152603360248201527f486f70724e6574776f726b52656769737472793a2043616e6e6f74206c696e6b6044820152721030903932b3b4b9ba32b932b2103737b2329760691b60648201526084016102dd565b33600383604051610c4191906115ab565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b03199093169290921790915533907fb3eccf73f39b1c07947c780b2b39df2a1bb058b4037b0a42d0881ca1a028a13290610ca09085906115f4565b60405180910390a250505b80610cb581611627565b915050610aa5565b60008060038484604051610cd29291906116eb565b908152604051908190036020019020546001600160a01b0316905080610cfc57600091505061096e565b610d0581611181565b949350505050565b6000546001600160a01b03163314610d375760405162461bcd60e51b81526004016102dd906114e9565b60045460ff16610d595760405162461bcd60e51b81526004016102dd906116a2565b6004805460ff191690556040516000907f3f749856d23f89c3cefe0f1055d280fc302c5d6adb048bc20f5d975239c30492908290a2565b6000546001600160a01b03163314610dba5760405162461bcd60e51b81526004016102dd906114e9565b60045460ff1615610e1e5760405162461bcd60e51b815260206004820152602860248201527f486f70724e6574776f726b52656769737472793a20526567697374727920697360448201526708195b98589b195960c21b60648201526084016102dd565b6004805460ff191660019081179091556040517f3f749856d23f89c3cefe0f1055d280fc302c5d6adb048bc20f5d975239c3049290600090a2565b6000546001600160a01b03163314610e835760405162461bcd60e51b81526004016102dd906114e9565b60045460ff16610ea55760405162461bcd60e51b81526004016102dd906116a2565b60005b81811015610434576000838383818110610ec457610ec461151e565b9050602002810190610ed69190611534565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040519495509360039350610f1e92508591506115ab565b908152604051908190036020019020546001600160a01b0316905080610f45575050610fa5565b610f4e81611181565b15610f7d576040516001906001600160a01b0383169060008051602061173783398151915290600090a3610fa2565b6040516000906001600160a01b03831690600080516020611737833981519152908390a35b50505b80610faf81611627565b915050610ea8565b6000546001600160a01b03163314610fe15760405162461bcd60e51b81526004016102dd906114e9565b8281146110565760405162461bcd60e51b815260206004820152603e60248201527f486f70724e6574776f726b52656769737472793a206163636f756e747320616e60448201527f6420656c69676962696c697479206c656e67746873206d69736d61746368000060648201526084016102dd565b60005b83811015610718578282828181106110735761107361151e565b905060200201602081019061108891906116fb565b151585858381811061109c5761109c61151e565b90506020020160208101906110b19190611314565b6001600160a01b031660008051602061173783398151915260405160405180910390a3806110de81611627565b915050611059565b6000546001600160a01b031633146111105760405162461bcd60e51b81526004016102dd906114e9565b6001600160a01b0381166111755760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102dd565b61117e81611236565b50565b6001546040516359aa274160e11b81526001600160a01b038381166004830152600092839291169063b3544e829060240160206040518083038186803b1580156111ca57600080fd5b505afa1580156111de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611202919061171d565b6001600160a01b038416600090815260026020526040902054909150811061122d5750600192915050565b50600092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008083601f84011261129857600080fd5b50813567ffffffffffffffff8111156112b057600080fd5b6020830191508360208260051b85010111156112cb57600080fd5b9250929050565b600080602083850312156112e557600080fd5b823567ffffffffffffffff8111156112fc57600080fd5b61130885828601611286565b90969095509350505050565b60006020828403121561132657600080fd5b81356001600160a01b038116811461133d57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561136c57600080fd5b813567ffffffffffffffff8082111561138457600080fd5b818401915084601f83011261139857600080fd5b8135818111156113aa576113aa611344565b604051601f8201601f19908116603f011681019083821181831017156113d2576113d2611344565b816040528281528760208487010111156113eb57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000806000806040858703121561142157600080fd5b843567ffffffffffffffff8082111561143957600080fd5b61144588838901611286565b9096509450602087013591508082111561145e57600080fd5b5061146b87828801611286565b95989497509550505050565b6000806020838503121561148a57600080fd5b823567ffffffffffffffff808211156114a257600080fd5b818501915085601f8301126114b657600080fd5b8135818111156114c557600080fd5b8660208285010111156114d757600080fd5b60209290920196919550909350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261154b57600080fd5b83018035915067ffffffffffffffff82111561156657600080fd5b6020019150368190038213156112cb57600080fd5b60005b8381101561159657818101518382015260200161157e565b838111156115a5576000848401525b50505050565b600082516115bd81846020870161157b565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b6000828210156115ef576115ef6115c7565b500390565b602081526000825180602084015261161381604085016020870161157b565b601f01601f19169190910160400192915050565b600060001982141561163b5761163b6115c7565b5060010190565b6000808585111561165257600080fd5b8386111561165f57600080fd5b5050820193919092039150565b8035602083101561096e57600019602084900360031b1b1692915050565b6000821982111561169d5761169d6115c7565b500190565b60208082526029908201527f486f70724e6574776f726b52656769737472793a20526567697374727920697360408201526808191a5cd8589b195960ba1b606082015260800190565b8183823760009101908152919050565b60006020828403121561170d57600080fd5b8135801515811461133d57600080fd5b60006020828403121561172f57600080fd5b505191905056fee2994f8d6f600ad473dba82c0a890ab7affacb860d3365f474baa3dc04a2e557a2646970667358221220cb70a6ebfd3703bced5a2ea898370912c232363276fd08646d799bb702be18cb64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063cfb3735f11610071578063cfb3735f1461025f578063d86a517014610267578063dd41c7461461027a578063e3d2a0711461028d578063f2fde38b146102a057600080fd5b80638da5cb5b14610220578063a3c676dd14610231578063af4c4cf714610244578063cbebafe01461025757600080fd5b806336e1aa80116100e957806336e1aa80146101b15780633e38949c146101c45780633fa58457146101d75780635d1c396414610205578063715018a61461021857600080fd5b8063036167ae1461011b578063238dafe01461013057806327b040a1146101525780632e6e031814610165575b600080fd5b61012e6101293660046112d2565b6102b3565b005b60045461013d9060ff1681565b60405190151581526020015b60405180910390f35b61012e610160366004611314565b610439565b61019961017336600461135a565b80516020818301810180516003825292820191909301209152546001600160a01b031681565b6040516001600160a01b039091168152602001610149565b61012e6101bf36600461140b565b6104ad565b61012e6101d23660046112d2565b61071f565b6101f76101e5366004611314565b60026020526000908152604090205481565b604051908152602001610149565b61013d610213366004611314565b610943565b61012e610974565b6000546001600160a01b0316610199565b61012e61023f3660046112d2565b6109aa565b61013d610252366004611477565b610cbd565b61012e610d0d565b61012e610d90565b61012e6102753660046112d2565b610e59565b61012e61028836600461140b565b610fb7565b600154610199906001600160a01b031681565b61012e6102ae366004611314565b6110e6565b6000546001600160a01b031633146102e65760405162461bcd60e51b81526004016102dd906114e9565b60405180910390fd5b60005b818110156104345760008383838181106103055761030561151e565b90506020028101906103179190611534565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051949550936003935061035f92508591506115ab565b908152604051908190036020019020546001600160a01b03169050801561041f5760038260405161039091906115ab565b908152604080516020928190038301902080546001600160a01b03191690556001600160a01b0383166000908152600290925281208054600192906103d69084906115dd565b92505081905550806001600160a01b03167f7303b218be576befd7afef7d2f9088c49eb7c26c155dba016527f71ee2f4ad0c8360405161041691906115f4565b60405180910390a25b5050808061042c90611627565b9150506102e9565b505050565b6000546001600160a01b031633146104635760405162461bcd60e51b81526004016102dd906114e9565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f8ac4b2eb7749f75c5b99b898e547fd615dd7a424e68356ea196b7dae742d6c3290600090a250565b6000546001600160a01b031633146104d75760405162461bcd60e51b81526004016102dd906114e9565b80831461054c5760405162461bcd60e51b815260206004820152603f60248201527f486f70724e6574776f726b52656769737472793a20686f70725065657249646560448201527f7320616e64206163636f756e7473206c656e67746873206d69736d617463680060648201526084016102dd565b60005b83811015610718578282828181106105695761056961151e565b905060200281019061057b9190611534565b905060351480156105d157508282828181106105995761059961151e565b90506020028101906105ab9190611534565b6105ba91600891600091611642565b6105c39161166c565b67313655697532484160c01b145b156107065760008383838181106105ea576105ea61151e565b90506020028101906105fc9190611534565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394508992508891508590508181106106475761064761151e565b905060200201602081019061065c9190611314565b90508060038360405161066f91906115ab565b908152604080516020928190038301902080546001600160a01b0319166001600160a01b03948516179055918316600090815260029091529081208054600192906106bb90849061168a565b92505081905550806001600160a01b03167f87b2f82f8766cb6651342bc0a77cfb41521b857c0dd7f38e751c2dfd21820c23836040516106fb91906115f4565b60405180910390a250505b8061071081611627565b91505061054f565b5050505050565b60045460ff166107415760405162461bcd60e51b81526004016102dd906116a2565b33600090815260026020526040812080548392906107609084906115dd565b9091555061076f905033611181565b1561079557604051600190339060008051602061173783398151915290600090a36107b1565b6040516000903390600080516020611737833981519152908390a35b60005b818110156104345760008383838181106107d0576107d061151e565b90506020028101906107e29190611534565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060405192935033926003925061082c915084906115ab565b908152604051908190036020019020546001600160a01b0316146108cc5760405162461bcd60e51b815260206004820152604b60248201527f486f70724e6574776f726b52656769737472793a2043616e6e6f742064656c6560448201527f746520616e20656e747279206e6f74206173736f63696174656420776974682060648201526a3a34329031b0b63632b91760a91b608482015260a4016102dd565b6003816040516108dc91906115ab565b90815260405190819003602001812080546001600160a01b031916905533907fed392d6c60bfee7cf61b9bc8bbcf48abb41bd5884565367943576fcd56a058e1906109289084906115f4565b60405180910390a2508061093b81611627565b9150506107b4565b6001600160a01b0381166000908152600260205260408120541580159061096e575061096e82611181565b92915050565b6000546001600160a01b0316331461099e5760405162461bcd60e51b81526004016102dd906114e9565b6109a86000611236565b565b60045460ff166109cc5760405162461bcd60e51b81526004016102dd906116a2565b33600090815260026020526040812080548392906109eb90849061168a565b909155506109fa905033611181565b610a865760405162461bcd60e51b815260206004820152605160248201527f486f70724e6574776f726b52656769737472793a2073656c665265676973746560448201527f722072656163686573206c696d69742c2063616e6e6f74207265676973746572606482015270103932b8bab2b9ba32b2103737b232b99760791b608482015260a4016102dd565b604051600190339060008051602061173783398151915290600090a360005b81811015610434576000838383818110610ac157610ac161151e565b9050602002810190610ad39190611534565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050825192935050506035141580610b615750838383818110610b2857610b2861151e565b9050602002810190610b3a9190611534565b610b4991600891600091611642565b610b529161166c565b67313655697532484160c01b14155b15610b81578060405163754c8e5960e11b81526004016102dd91906115f4565b6000600382604051610b9391906115ab565b908152604051908190036020019020546001600160a01b0316905033811415610bbd575050610cab565b6001600160a01b03811615610c305760405162461bcd60e51b815260206004820152603360248201527f486f70724e6574776f726b52656769737472793a2043616e6e6f74206c696e6b6044820152721030903932b3b4b9ba32b932b2103737b2329760691b60648201526084016102dd565b33600383604051610c4191906115ab565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b03199093169290921790915533907fb3eccf73f39b1c07947c780b2b39df2a1bb058b4037b0a42d0881ca1a028a13290610ca09085906115f4565b60405180910390a250505b80610cb581611627565b915050610aa5565b60008060038484604051610cd29291906116eb565b908152604051908190036020019020546001600160a01b0316905080610cfc57600091505061096e565b610d0581611181565b949350505050565b6000546001600160a01b03163314610d375760405162461bcd60e51b81526004016102dd906114e9565b60045460ff16610d595760405162461bcd60e51b81526004016102dd906116a2565b6004805460ff191690556040516000907f3f749856d23f89c3cefe0f1055d280fc302c5d6adb048bc20f5d975239c30492908290a2565b6000546001600160a01b03163314610dba5760405162461bcd60e51b81526004016102dd906114e9565b60045460ff1615610e1e5760405162461bcd60e51b815260206004820152602860248201527f486f70724e6574776f726b52656769737472793a20526567697374727920697360448201526708195b98589b195960c21b60648201526084016102dd565b6004805460ff191660019081179091556040517f3f749856d23f89c3cefe0f1055d280fc302c5d6adb048bc20f5d975239c3049290600090a2565b6000546001600160a01b03163314610e835760405162461bcd60e51b81526004016102dd906114e9565b60045460ff16610ea55760405162461bcd60e51b81526004016102dd906116a2565b60005b81811015610434576000838383818110610ec457610ec461151e565b9050602002810190610ed69190611534565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040519495509360039350610f1e92508591506115ab565b908152604051908190036020019020546001600160a01b0316905080610f45575050610fa5565b610f4e81611181565b15610f7d576040516001906001600160a01b0383169060008051602061173783398151915290600090a3610fa2565b6040516000906001600160a01b03831690600080516020611737833981519152908390a35b50505b80610faf81611627565b915050610ea8565b6000546001600160a01b03163314610fe15760405162461bcd60e51b81526004016102dd906114e9565b8281146110565760405162461bcd60e51b815260206004820152603e60248201527f486f70724e6574776f726b52656769737472793a206163636f756e747320616e60448201527f6420656c69676962696c697479206c656e67746873206d69736d61746368000060648201526084016102dd565b60005b83811015610718578282828181106110735761107361151e565b905060200201602081019061108891906116fb565b151585858381811061109c5761109c61151e565b90506020020160208101906110b19190611314565b6001600160a01b031660008051602061173783398151915260405160405180910390a3806110de81611627565b915050611059565b6000546001600160a01b031633146111105760405162461bcd60e51b81526004016102dd906114e9565b6001600160a01b0381166111755760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102dd565b61117e81611236565b50565b6001546040516359aa274160e11b81526001600160a01b038381166004830152600092839291169063b3544e829060240160206040518083038186803b1580156111ca57600080fd5b505afa1580156111de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611202919061171d565b6001600160a01b038416600090815260026020526040902054909150811061122d5750600192915050565b50600092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008083601f84011261129857600080fd5b50813567ffffffffffffffff8111156112b057600080fd5b6020830191508360208260051b85010111156112cb57600080fd5b9250929050565b600080602083850312156112e557600080fd5b823567ffffffffffffffff8111156112fc57600080fd5b61130885828601611286565b90969095509350505050565b60006020828403121561132657600080fd5b81356001600160a01b038116811461133d57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561136c57600080fd5b813567ffffffffffffffff8082111561138457600080fd5b818401915084601f83011261139857600080fd5b8135818111156113aa576113aa611344565b604051601f8201601f19908116603f011681019083821181831017156113d2576113d2611344565b816040528281528760208487010111156113eb57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000806000806040858703121561142157600080fd5b843567ffffffffffffffff8082111561143957600080fd5b61144588838901611286565b9096509450602087013591508082111561145e57600080fd5b5061146b87828801611286565b95989497509550505050565b6000806020838503121561148a57600080fd5b823567ffffffffffffffff808211156114a257600080fd5b818501915085601f8301126114b657600080fd5b8135818111156114c557600080fd5b8660208285010111156114d757600080fd5b60209290920196919550909350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261154b57600080fd5b83018035915067ffffffffffffffff82111561156657600080fd5b6020019150368190038213156112cb57600080fd5b60005b8381101561159657818101518382015260200161157e565b838111156115a5576000848401525b50505050565b600082516115bd81846020870161157b565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b6000828210156115ef576115ef6115c7565b500390565b602081526000825180602084015261161381604085016020870161157b565b601f01601f19169190910160400192915050565b600060001982141561163b5761163b6115c7565b5060010190565b6000808585111561165257600080fd5b8386111561165f57600080fd5b5050820193919092039150565b8035602083101561096e57600019602084900360031b1b1692915050565b6000821982111561169d5761169d6115c7565b500190565b60208082526029908201527f486f70724e6574776f726b52656769737472793a20526567697374727920697360408201526808191a5cd8589b195960ba1b606082015260800190565b8183823760009101908152919050565b60006020828403121561170d57600080fd5b8135801515811461133d57600080fd5b60006020828403121561172f57600080fd5b505191905056fee2994f8d6f600ad473dba82c0a890ab7affacb860d3365f474baa3dc04a2e557a2646970667358221220cb70a6ebfd3703bced5a2ea898370912c232363276fd08646d799bb702be18cb64736f6c63430008090033",
  "devdoc": {
    "details": "Smart contract that maintains a list of hopr node address (peer id) that are allowed to enter HOPR network. Each peer id is linked with an Ethereum account. Only Ethereum accounts that are eligible according to `IHoprNetworkRegistryRequirement` can register one or multiple HOPR node address(es). When reaching its limits, accounts can remove registered node addresses (`deregister`) before adding more. A peer id can only be registered if it's not registered by another account. Note that HOPR node address refers to `PeerId.toString()` This network registry can be globally enabled/disabled by the owner Implementation of `IHoprNetworkRegistryRequirement` can also be dynamically updated by the owner. Some sample implementations can be found under../proxy/ folder Owner has the power to overwrite the registration",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_newOwner": "address of the contract owner",
          "_requirementImplementation": "address of the network registry logic implementation"
        }
      },
      "isAccountRegisteredAndEligible(address)": {
        "details": "Returns if an account address is eligible according to the criteria defined in the proxy implementation It also checks if a node peer id is associated with the account.",
        "params": {
          "account": "account address that runs hopr node"
        }
      },
      "isNodeRegisteredAndEligible(string)": {
        "details": "Returns if a hopr address is registered and its associated account is eligible or not.",
        "params": {
          "hoprPeerId": "hopr node peer id"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerDeregister(string[])": {
        "details": "Owner removes previously owner-added Ethereum addresses and HOPR node ids from the registration. Function can be called at any time.",
        "params": {
          "hoprPeerIds": "Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]"
        }
      },
      "ownerForceEligibility(address[],bool[])": {
        "details": "Force emit eligibility update by the owner.",
        "params": {
          "accounts": "Array of Ethereum accounts, e.g. [0xf6A8b267f43998B890857f8d1C9AabC68F8556ee]",
          "eligibility": "Array of account eligibility, e.g. [true]"
        }
      },
      "ownerRegister(address[],string[])": {
        "details": "Owner adds Ethereum addresses and HOPR node ids to the registration. Function can be called at any time. Allows owner to register arbitrary HOPR peer ids even if accounts do not fulfill registration requirements. HOPR node peer id validation should be done off-chain.",
        "params": {
          "accounts": "Array of Ethereum accounts, e.g. [0xf6A8b267f43998B890857f8d1C9AabC68F8556ee]",
          "hoprPeerIds": "Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "selfDeregister(string[])": {
        "details": "Allows account to deregister a registered peer ID Function can only be called when the registry is enabled. Performs a minimum validation of node IDs. Full validation should be done off-chain. hopr node peer id should always start with '16Uiu2HA' (0x3136556975324841) and be of length 53",
        "params": {
          "hoprPeerIds": "Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]"
        }
      },
      "selfRegister(string[])": {
        "details": "Register a new node's peer id associated with the caller.",
        "params": {
          "hoprPeerIds": "Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]"
        }
      },
      "sync(string[])": {
        "details": "Owner syncs a list of peer Ids with based on the latest criteria. Function can only be called when the registry is enabled.",
        "params": {
          "hoprPeerIds": "Array of hopr nodes id. e.g. [16Uiu2HAmHsB2c2puugVuuErRzLm9NZfceainZpkxqJMR6qGsf1x1]"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateRequirementImplementation(address)": {
        "params": {
          "_requirementImplementation": "address of the network registry logic implementation"
        }
      }
    },
    "title": "HoprNetworkRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Specify NetworkRegistry logic implementation and transfer the ownership enable the network registry on deployment."
      },
      "disableRegistry()": {
        "notice": "Disanable globally the network registry by the owner"
      },
      "enableRegistry()": {
        "notice": "Enable globally the network registry by the owner"
      },
      "ownerDeregister(string[])": {
        "notice": "Owner can even remove self-declared entries."
      },
      "ownerForceEligibility(address[],bool[])": {
        "notice": "This does not change the result returned from the proxy, so if `sync` is called on those accounts, it may return a different result."
      },
      "ownerRegister(address[],string[])": {
        "notice": "It allows owner to overwrite exisitng entries."
      },
      "selfRegister(string[])": {
        "notice": "Transaction will fail, if 1) the peer ID is registered to an address, including the caller. 2) the caller will become ineligible after adding a new node Performs a minimum validation of node IDs. Full validation should be done off-chain. hopr node peer id should always start with '16Uiu2HA' (0x3136556975324841) and be of length 53 Function can only be called when the registry is enabled."
      },
      "sync(string[])": {
        "notice": "If a peer id hasn't been registered, its eligibility is not going to be updated"
      },
      "updateRequirementImplementation(address)": {
        "notice": "Specify NetworkRegistry logic implementation"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 539,
        "contract": "contracts/HoprNetworkRegistry.sol:HoprNetworkRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7654,
        "contract": "contracts/HoprNetworkRegistry.sol:HoprNetworkRegistry",
        "label": "requirementImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IHoprNetworkRegistryRequirement)8588"
      },
      {
        "astId": 7658,
        "contract": "contracts/HoprNetworkRegistry.sol:HoprNetworkRegistry",
        "label": "countRegisterdNodesPerAccount",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7662,
        "contract": "contracts/HoprNetworkRegistry.sol:HoprNetworkRegistry",
        "label": "nodePeerIdToAccount",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 7664,
        "contract": "contracts/HoprNetworkRegistry.sol:HoprNetworkRegistry",
        "label": "enabled",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IHoprNetworkRegistryRequirement)8588": {
        "encoding": "inplace",
        "label": "contract IHoprNetworkRegistryRequirement",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}