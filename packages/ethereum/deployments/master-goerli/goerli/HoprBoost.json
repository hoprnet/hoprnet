{
  "address": "0x2E923F3a7a2328fefddaC6f0879DDcfB76e6A8F2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "baseTokenURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "boostTypeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "boostNumerator",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "redeemDeadline",
          "type": "uint256"
        }
      ],
      "name": "BoostMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "boostType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "boostRank",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "boostNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemDeadline",
          "type": "uint256"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "boostOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "boostType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "boostRank",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "boostNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemDeadline",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "reclaimErc20Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "reclaimErc721Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "typeIndex",
          "type": "uint256"
        }
      ],
      "name": "typeAt",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "typeIndexOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "typeOf",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseTokenURI",
          "type": "string"
        }
      ],
      "name": "updateBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x34070813e130c37eaae7dc3c1db3d6aa9fe6b863aceabaf94e875f05f8b10930",
  "receipt": {
    "to": null,
    "from": "0xA18732DC751BE0dB04157eb92C92BA9d0fC09FC5",
    "contractAddress": "0x2E923F3a7a2328fefddaC6f0879DDcfB76e6A8F2",
    "transactionIndex": 16,
    "gasUsed": "2978838",
    "logsBloom": "0x
    "blockHash": "0x250fcc0868261ee0ad92b674db6148183abad719e3cc563d037ee2c31aff9f51",
    "transactionHash": "0x34070813e130c37eaae7dc3c1db3d6aa9fe6b863aceabaf94e875f05f8b10930",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 6752028,
        "transactionHash": "0x34070813e130c37eaae7dc3c1db3d6aa9fe6b863aceabaf94e875f05f8b10930",
        "address": "0x2E923F3a7a2328fefddaC6f0879DDcfB76e6A8F2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a18732dc751be0db04157eb92c92ba9d0fc09fc5",
          "0x000000000000000000000000a18732dc751be0db04157eb92c92ba9d0fc09fc5"
        ],
        "data": "0x",
        "logIndex": 58,
        "blockHash": "0x250fcc0868261ee0ad92b674db6148183abad719e3cc563d037ee2c31aff9f51"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 6752028,
        "transactionHash": "0x34070813e130c37eaae7dc3c1db3d6aa9fe6b863aceabaf94e875f05f8b10930",
        "address": "0x2E923F3a7a2328fefddaC6f0879DDcfB76e6A8F2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x000000000000000000000000a18732dc751be0db04157eb92c92ba9d0fc09fc5",
          "0x000000000000000000000000a18732dc751be0db04157eb92c92ba9d0fc09fc5"
        ],
        "data": "0x",
        "logIndex": 59,
        "blockHash": "0x250fcc0868261ee0ad92b674db6148183abad719e3cc563d037ee2c31aff9f51"
      }
    ],
    "blockNumber": 6752028,
    "cumulativeGasUsed": "4576433",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA18732DC751BE0dB04157eb92C92BA9d0fC09FC5",
    ""
  ],
  "solcInputHash": "5fa00b4a586ee3a42a91ca9cffb75029",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boostTypeIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boostNumerator\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"redeemDeadline\",\"type\":\"uint256\"}],\"name\":\"BoostMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"boostType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boostRank\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"boostNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemDeadline\",\"type\":\"uint256\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"boostOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"boostType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"boostRank\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"boostNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemDeadline\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"reclaimErc20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"reclaimErc721Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeIndex\",\"type\":\"uint256\"}],\"name\":\"typeAt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"typeIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"typeOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"}],\"name\":\"updateBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"batchMint(address[],string,string,uint256,uint256)\":{\"details\":\"Minter creates new tokens for `to` array. Its token ID will be automatically assigned based on current `totalSupply`. (and available on the emitted {IERC721-Transfer} event). Provide boost factor, boost type and boost rank. If needed, register a new class of boost,  with its \\\"type\\\", \\\"rank\\\" and \\\"boost factor (numerator)\\\" The token URI is generated based on the base URI, boostType and boostRank.\",\"params\":{\"boostNumerator\":\"uint256 Numerator of the boost factor. Its denominator is 1e12.\",\"boostRank\":\"string Rank of the boost\",\"boostType\":\"string Type of the boost\",\"redeemDeadline\":\"uint256 Deadline for redeem a boost. Epoch Unix Timestamp\",\"to\":\"address[] Addresses of token holder that will receive the NFT token of the given \\\"type\\\"\"}},\"boostOf(uint256)\":{\"details\":\"Returns the boost factor and the redeem deadline associated with ``tokenId``.\",\"params\":{\"tokenId\":\"uint256 token Id of the boost.\"}},\"constructor\":{\"details\":\"Set a new admin role. Set the new admin as a minter. Provide name and symbol for ERC721.  Update the ``_baseTokenURI``.\",\"params\":{\"newAdmin\":\"address Address of the new admin account \"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address,string,string,uint256,uint256)\":{\"details\":\"Minter creates a new token for `to`. Its token ID will be automatically assigned based on current `totalSupply`. (and available on the emitted {IERC721-Transfer} event). Provide boost factor, boost type and boost rank. If needed, register a new class of boost,  with its \\\"type\\\", \\\"rank\\\" and \\\"boost factor (numerator)\\\" The token URI is generated based on the base URI, boostType and boostRank.\",\"params\":{\"boostNumerator\":\"uint256 Numerator of the boost factor. Its denominator is 1e12.\",\"boostRank\":\"string Rank of the boost\",\"boostType\":\"string Type of the boost\",\"redeemDeadline\":\"uint256 Deadline for redeem a boost. Epoch Unix Timestamp. \",\"to\":\"address Address of token holder that will receive the NFT token of the given \\\"type\\\"\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"reclaimErc20Tokens(address)\":{\"details\":\"Reclaim any ERC20 token being accidentally sent to the contract.\",\"params\":{\"tokenAddress\":\"address ERC20 token address.\"}},\"reclaimErc721Tokens(address,uint256)\":{\"details\":\"Reclaim any ERC721 token being accidentally sent to the contract.\",\"params\":{\"tokenAddress\":\"address ERC721 token address.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"Inherit tokenURI from {ERC721} and {ERC721URIStorage}\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"typeAt(uint256)\":{\"details\":\"Returns the boost type name associated with ``typeIndex``.\",\"params\":{\"typeIndex\":\"uint256 Index of the type.\"}},\"typeIndexOf(uint256)\":{\"details\":\"Returns the boost type index associated with ``tokenId``.\",\"params\":{\"tokenId\":\"uint256 token Id of the boost.\"}},\"typeOf(uint256)\":{\"details\":\"Returns the boost type associated with ``tokenId``.\",\"params\":{\"tokenId\":\"uint256 token Id of the boost.\"}},\"updateBaseURI(string)\":{\"details\":\"Admin can update the new base URI at any time.\",\"params\":{\"baseTokenURI\":\"string Basic URI of the token.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HoprBoost.sol\":\"HoprBoost\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x084f583de2c714665b0304529fe8b826a2809f29d03314e4dd9eea926e4bb0f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable {\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x33ba8a175bb81046a02b02e8d5eb4cabc87e1875f4a74bbc6f11c51db5e40d8c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd644260d8e4e64563a7adba96d774dbaac6ae89c2ee58ef49a19850ff1239b08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x188d038a65a945481cc13fe30db334472dfbed61f7959d4478d05feb6303b1ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/HoprBoost.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"./IHoprBoost.sol\\\";\\nimport \\\"./utils/EnumerableStringSet.sol\\\";\\n\\n/**\\n * \\n */\\ncontract HoprBoost is IHoprBoost, AccessControlEnumerable, ERC721URIStorage, ERC721Enumerable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using EnumerableStringSet for EnumerableStringSet.StringSet;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    string private _baseTokenURI;\\n    EnumerableStringSet.StringSet private _boostType;\\n    mapping(uint256=>uint256) private _boostNumerator; // tokenId => boost factor numerator\\n    mapping(uint256=>uint256) private _redeemDeadline; // tokenId => deadline for redeeming a boost\\n    mapping(uint256=>uint256) private _boostTypeIndexOfId; // tokenId => boost type index\\n\\n    event BoostMinted(uint256 indexed boostTypeIndex, uint256 indexed boostNumerator, uint256 indexed redeemDeadline);\\n    /**\\n     * @dev Set a new admin role. Set the new admin as a minter. Provide name and symbol for ERC721. \\n     * Update the ``_baseTokenURI``.\\n     * @param newAdmin address Address of the new admin account \\n     */\\n    constructor(address newAdmin, string memory baseTokenURI) ERC721(\\\"HOPR Boost NFT\\\", \\\"HOPR Boost\\\") {\\n        _baseTokenURI = baseTokenURI;\\n        _setupRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        _setupRole(MINTER_ROLE, newAdmin);\\n    }\\n\\n    /**\\n     * @dev Returns the boost factor and the redeem deadline associated with ``tokenId``.\\n     * @param tokenId uint256 token Id of the boost.\\n     */\\n    function boostOf(uint256 tokenId) external view override returns (uint256, uint256) {\\n        return (_boostNumerator[tokenId], _redeemDeadline[tokenId]);\\n    }\\n    \\n    /**\\n     * @dev Returns the boost type index associated with ``tokenId``.\\n     * @param tokenId uint256 token Id of the boost.\\n     */\\n    function typeIndexOf(uint256 tokenId) external view override returns (uint256) {\\n        return _boostTypeIndexOfId[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the boost type associated with ``tokenId``.\\n     * @param tokenId uint256 token Id of the boost.\\n     */\\n    function typeOf(uint256 tokenId) external view override returns (string memory) {\\n        return _boostType.at(_boostTypeIndexOfId[tokenId]);\\n    }\\n\\n    /**\\n     * @dev Returns the boost type name associated with ``typeIndex``.\\n     * @param typeIndex uint256 Index of the type.\\n     */\\n    function typeAt(uint256 typeIndex) external view returns (string memory) {\\n        return _boostType.at(typeIndex);\\n    }\\n\\n    /**\\n     * @dev Admin can update the new base URI at any time.\\n     * @param baseTokenURI string Basic URI of the token.\\n     */\\n    function updateBaseURI(string memory baseTokenURI) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _baseTokenURI = baseTokenURI;\\n    }\\n\\n    /**\\n     * @dev Minter creates a new token for `to`. Its token ID will be automatically\\n     * assigned based on current `totalSupply`. (and available on the emitted {IERC721-Transfer} event).\\n     * Provide boost factor, boost type and boost rank. If needed, register a new class of boost, \\n     * with its \\\"type\\\", \\\"rank\\\" and \\\"boost factor (numerator)\\\"\\n     * The token URI is generated based on the base URI, boostType and boostRank.\\n     * @param to address Address of token holder that will receive the NFT token of the given \\\"type\\\"\\n     * @param boostType string Type of the boost\\n     * @param boostRank string Rank of the boost\\n     * @param boostNumerator uint256 Numerator of the boost factor. Its denominator is 1e12.\\n     * @param redeemDeadline uint256 Deadline for redeem a boost. Epoch Unix Timestamp. \\n     */\\n    function mint(address to, string memory boostType, string memory boostRank, uint256 boostNumerator, uint256 redeemDeadline) external onlyRole(MINTER_ROLE) {\\n        // register boost type in the smart contract\\n        _boostType.add(boostType);\\n        uint256 boostTypeIndex = _boostType.indexOf(boostType);\\n        string memory _tokenURI = string(abi.encodePacked(boostType, \\\"/\\\", boostRank));\\n\\n        _mintBoost(to, boostNumerator, redeemDeadline, boostTypeIndex, _tokenURI);\\n        \\n        emit BoostMinted(boostTypeIndex, boostNumerator, redeemDeadline);\\n    }\\n\\n    /**\\n     * @dev Minter creates new tokens for `to` array. Its token ID will be automatically\\n     * assigned based on current `totalSupply`. (and available on the emitted {IERC721-Transfer} event).\\n     * Provide boost factor, boost type and boost rank. If needed, register a new class of boost, \\n     * with its \\\"type\\\", \\\"rank\\\" and \\\"boost factor (numerator)\\\"\\n     * The token URI is generated based on the base URI, boostType and boostRank.\\n     * @param to address[] Addresses of token holder that will receive the NFT token of the given \\\"type\\\"\\n     * @param boostType string Type of the boost\\n     * @param boostRank string Rank of the boost\\n     * @param boostNumerator uint256 Numerator of the boost factor. Its denominator is 1e12.\\n     * @param redeemDeadline uint256 Deadline for redeem a boost. Epoch Unix Timestamp\\n     */\\n    function batchMint(address[] calldata to, string calldata boostType, string calldata boostRank, uint256 boostNumerator, uint256 redeemDeadline) external onlyRole(MINTER_ROLE) {\\n        // register boost type in the smart contract\\n        _boostType.add(boostType);\\n        uint256 boostTypeIndex = _boostType.indexOf(boostType);\\n        string memory _tokenURI = string(abi.encodePacked(boostType, \\\"/\\\", boostRank));\\n        \\n        for (uint256 index = 0; index < to.length; index++) {\\n            _mintBoost(to[index], boostNumerator, redeemDeadline, boostTypeIndex, _tokenURI);\\n        }\\n\\n        emit BoostMinted(boostTypeIndex, boostNumerator, redeemDeadline);\\n    }\\n\\n    /**\\n     * @dev Reclaim any ERC20 token being accidentally sent to the contract.\\n     * @param tokenAddress address ERC20 token address.\\n     */\\n    function reclaimErc20Tokens(address tokenAddress) external onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\\n        IERC20(tokenAddress).safeTransfer(_msgSender(), IERC20(tokenAddress).balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @dev Reclaim any ERC721 token being accidentally sent to the contract.\\n     * @param tokenAddress address ERC721 token address.\\n     */\\n    function reclaimErc721Tokens(address tokenAddress, uint256 tokenId) external onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\\n        IERC721(tokenAddress).transferFrom(address(this), _msgSender(), tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) \\n        public \\n        view \\n        virtual \\n        override(IERC165, AccessControlEnumerable, ERC721, ERC721Enumerable) \\n        returns (bool) \\n    {\\n        return interfaceId == type(IHoprBoost).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Inherit tokenURI from {ERC721} and {ERC721URIStorage}\\n     */\\n    function tokenURI(uint256 tokenId) public view override(IERC721Metadata, ERC721, ERC721URIStorage) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /** \\n     * @dev Inherit _baseURI from {ERC721} and {ERC721URIStorage}\\n     */\\n    function _baseURI() internal view override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    /** \\n     * @dev Inherit _baseURI from {ERC721} and {ERC721Enumerable}\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Cannot burn the NFT token\\n     */\\n    function _burn(uint256 tokenId) internal virtual override(ERC721, ERC721URIStorage) {}\\n    \\n\\n    /**\\n     * @dev Mint token. Generate token URI and save its URI.\\n     * @param to address Address of token holder\\n     * @param boostNumerator uint256 Numerator of the boost factor. Its denominator is 1e12.\\n     * @param redeemDeadline uint256 Deadline for redeem a boost. Epoch Unix Timestamp\\n     * @param boostTypeIndex uint256 Index of the boost type.\\n     * @param _tokenURI string URI of the boost.\\n     */\\n    function _mintBoost(address to, uint256 boostNumerator, uint256 redeemDeadline, uint256 boostTypeIndex, string memory _tokenURI) private {\\n        // create token\\n        uint256 tokenId = totalSupply();\\n        _mint(to, tokenId);\\n        // save boost factor numerator\\n        _boostNumerator[tokenId] = boostNumerator;\\n        // save redeem deadline\\n        _redeemDeadline[tokenId] = redeemDeadline;\\n        // save boost type id\\n        _boostTypeIndexOfId[tokenId] = boostTypeIndex;\\n        // save tokenURI\\n        _setTokenURI(tokenId, _tokenURI);\\n    }\\n}\",\"keccak256\":\"0x17dda20f17406363b788bb3a2e4234a6c2aedc2d984204cdacc1e889bb825306\",\"license\":\"GPL-3.0-only\"},\"contracts/IHoprBoost.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IHoprBoost is IERC721Metadata {\\n    /**\\n     * @dev Returns the boost factor and the redeem deadline associated with ``tokenId``.\\n     * @param tokenId uint256 token Id of the boost.\\n     */\\n    function boostOf(uint256 tokenId) external view returns (uint256, uint256);\\n    \\n    /**\\n     * @dev Returns the boost type associated with ``tokenId``.\\n     * @param tokenId uint256 token Id of the boost.\\n     */\\n    function typeOf(uint256 tokenId) external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the boost type index associated with ``tokenId``.\\n     * @param tokenId uint256 token Id of the boost.\\n     */\\n    function typeIndexOf(uint256 tokenId) external view returns (uint256);\\n}\",\"keccak256\":\"0xdf7974d91e5dae2d2645a8668fc924d51b3ae758de327e00987946840356adf6\",\"license\":\"GPL-3.0-only\"},\"contracts/utils/EnumerableStringSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Adapted from OpenZeppelin's EnumerableSet library, for string type.\\n */\\nlibrary EnumerableStringSet {\\n    struct StringSet {\\n        // Storage of set values\\n        string[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(string => uint256) _indexes;\\n    }\\n\\n    event SetCreated(uint256 indexed typeIndex);\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(StringSet storage set, string memory value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            emit SetCreated(set._indexes[value]);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(StringSet storage set, string memory value) internal view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     */\\n    function at(StringSet storage set, uint256 index) internal view returns (string memory) {\\n        return set._values[index - 1];\\n    }\\n\\n    /**\\n     * @dev Returns index of a given value. \\n     */\\n    function indexOf(StringSet storage set, string memory value) internal view returns (uint256) {\\n        return set._indexes[value];\\n    }\\n}\",\"keccak256\":\"0x80f42207d4998c6207200e447f4b8c891a1067166c84d1c4168cd4645af00a5a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620034763803806200347683398101604081905262000034916200030c565b604080518082018252600e81526d1213d41488109bdbdcdd0813919560921b60208083019182528351808501909452600a8452691213d41488109bdbdcdd60b21b9084015281519192916200008c9160029162000266565b508051620000a290600390602084019062000266565b50506001600d55508051620000bf90600e90602084019062000266565b50620000cd60008362000101565b620000f97f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68362000101565b50506200045f565b6200011882826200014460201b620010071760201c565b60008281526001602090815260409091206200013f9183906200101562000154821b17901c565b505050565b62000150828262000174565b5050565b60006200016b836001600160a01b03841662000214565b90505b92915050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000150576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001d03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008181526001830160205260408120546200025d575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200016e565b5060006200016e565b82805462000274906200040c565b90600052602060002090601f016020900481019282620002985760008555620002e3565b82601f10620002b357805160ff1916838001178555620002e3565b82800160010185558215620002e3579182015b82811115620002e3578251825591602001919060010190620002c6565b50620002f1929150620002f5565b5090565b5b80821115620002f15760008155600101620002f6565b600080604083850312156200032057600080fd5b82516001600160a01b03811681146200033857600080fd5b602084810151919350906001600160401b03808211156200035857600080fd5b818601915086601f8301126200036d57600080fd5b81518181111562000382576200038262000449565b604051601f8201601f19908116603f01168101908382118183101715620003ad57620003ad62000449565b816040528281528986848701011115620003c657600080fd5b600093505b82841015620003ea5784840186015181850187015292850192620003cb565b82841115620003fc5760008684830101525b8096505050505050509250929050565b600181811c908216806200042157607f821691505b602082108114156200044357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b613007806200046f6000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c806370a082311161011a578063a22cb465116100ad578063c87b56dd1161007c578063c87b56dd14610498578063ca15c873146104ab578063d5391393146104be578063d547741f146104e5578063e985e9c5146104f857600080fd5b8063a22cb4651461044c578063b5185a881461045f578063b88d4fde14610472578063c588ff8b1461048557600080fd5b8063931688cb116100e9578063931688cb146104165780639365c5331461042957806395d89b411461043c578063a217fddf1461044457600080fd5b806370a082311461039b578063896cddf4146103ae5780639010d07c146103f057806391d148541461040357600080fd5b80632f2ff15d1161019d57806348c64e411161016c57806348c64e411461032f5780634f6ccce714610342578063562317c5146103555780636067bc15146103755780636352211e1461038857600080fd5b80632f2ff15d146102e35780632f745c59146102f657806336568abe1461030957806342842e0e1461031c57600080fd5b806318160ddd116101d957806318160ddd1461028857806323b872dd1461029a578063248a9ca3146102ad57806329867dac146102d057600080fd5b806301ffc9a71461020b57806306fdde0314610233578063081812fc14610248578063095ea7b314610273575b600080fd5b61021e610219366004612b5d565b610534565b60405190151581526020015b60405180910390f35b61023b61055f565b60405161022a9190612d77565b61025b610256366004612aff565b6105f1565b6040516001600160a01b03909116815260200161022a565b6102866102813660046129e1565b61067e565b005b600b545b60405190815260200161022a565b6102866102a836600461286c565b610794565b61028c6102bb366004612aff565b60009081526020819052604090206001015490565b6102866102de36600461295b565b6107c5565b6102866102f1366004612b18565b610877565b61028c6103043660046129e1565b610899565b610286610317366004612b18565b61092f565b61028661032a36600461286c565b610951565b61028661033d3660046129e1565b61096c565b61028c610350366004612aff565b610a46565b61028c610363366004612aff565b60009081526013602052604090205490565b61028661038336600461281e565b610ad9565b61025b610396366004612aff565b610bd2565b61028c6103a936600461281e565b610c49565b6103db6103bc366004612aff565b6000908152601160209081526040808320546012909252909120549091565b6040805192835260208301919091520161022a565b61025b6103fe366004612b3b565b610cd0565b61021e610411366004612b18565b610cef565b610286610424366004612b97565b610d18565b610286610437366004612a0b565b610d37565b61023b610ea4565b61028c600081565b61028661045a366004612924565b610eb3565b61023b61046d366004612aff565b610f78565b6102866104803660046128a8565b610f85565b61023b610493366004612aff565b610fbd565b61023b6104a6366004612aff565b610fdb565b61028c6104b9366004612aff565b610fe6565b61028c7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102866104f3366004612b18565b610ffd565b61021e610506366004612839565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006001600160e01b03198216630d639add60e11b148061055957506105598261102a565b92915050565b60606002805461056e90612ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461059a90612ed2565b80156105e75780601f106105bc576101008083540402835291602001916105e7565b820191906000526020600020905b8154815290600101906020018083116105ca57829003601f168201915b5050505050905090565b60006105fc8261104f565b6106625760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061068982610bd2565b9050806001600160a01b0316836001600160a01b031614156106f75760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610659565b336001600160a01b038216148061071357506107138133610506565b6107855760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610659565b61078f838361106c565b505050565b61079e33826110da565b6107ba5760405162461bcd60e51b815260040161065990612ddc565b61078f8383836111c4565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66107f0813361136f565b6107fb600f866113d3565b506000610809600f8761148a565b905060008686604051602001610820929190612c89565b604051602081830303815290604052905061083e88868685856114b5565b8385837f735e5eb5afdd72cc64657ded7e5de390af3708afb5b9a80b0e5c911a0499d98f60405160405180910390a45050505050505050565b6108818282611506565b600082815260016020526040902061078f9082611015565b60006108a483610c49565b82106109065760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610659565b506001600160a01b03919091166000908152600960209081526040808320938352929052205490565b610939828261152c565b600082815260016020526040902061078f90826115a6565b61078f83838360405180602001604052806000815250610f85565b6000610978813361136f565b6002600d5414156109cb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610659565b6002600d55604080516323b872dd60e01b81523060048201523360248201526044810184905290516001600160a01b038516916323b872dd91606480830192600092919082900301818387803b158015610a2457600080fd5b505af1158015610a38573d6000803e3d6000fd5b50506001600d555050505050565b6000610a51600b5490565b8210610ab45760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610659565b600b8281548110610ac757610ac7612f7e565b90600052602060002001549050919050565b6000610ae5813361136f565b6002600d541415610b385760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610659565b6002600d55610bc9336040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015610b8057600080fd5b505afa158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb89190612bcc565b6001600160a01b03851691906115bb565b50506001600d55565b6000818152600460205260408120546001600160a01b0316806105595760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610659565b60006001600160a01b038216610cb45760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610659565b506001600160a01b031660009081526005602052604090205490565b6000828152600160205260408120610ce8908361160d565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610d24813361136f565b815161078f90600e90602085019061268a565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610d62813361136f565b610da587878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250600f939250506113d39050565b506000610deb88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250600f9392505061148a9050565b9050600088888888604051602001610e069493929190612c2d565b604051602081830303815290604052905060005b8a811015610e6757610e558c8c83818110610e3757610e37612f7e565b9050602002016020810190610e4c919061281e565b878786866114b5565b80610e5f81612f0d565b915050610e1a565b508385837f735e5eb5afdd72cc64657ded7e5de390af3708afb5b9a80b0e5c911a0499d98f60405160405180910390a45050505050505050505050565b60606003805461056e90612ed2565b6001600160a01b038216331415610f0c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610659565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6060610559600f83611619565b610f8f33836110da565b610fab5760405162461bcd60e51b815260040161065990612ddc565b610fb7848484846116d2565b50505050565b60008181526013602052604090205460609061055990600f90611619565b606061055982611705565b600081815260016020526040812061055990611867565b6109398282611871565b6110118282611897565b5050565b6000610ce8836001600160a01b03841661191b565b60006001600160e01b0319821663780e9d6360e01b1480610559575061055982611962565b6000908152600460205260409020546001600160a01b0316151590565b600081815260066020526040902080546001600160a01b0319166001600160a01b03841690811790915581906110a182610bd2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006110e58261104f565b6111465760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610659565b600061115183610bd2565b9050806001600160a01b0316846001600160a01b0316148061118c5750836001600160a01b0316611181846105f1565b6001600160a01b0316145b806111bc57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166111d782610bd2565b6001600160a01b03161461123f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610659565b6001600160a01b0382166112a15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610659565b6112ac8383836119a2565b6112b760008261106c565b6001600160a01b03831660009081526005602052604081208054600192906112e0908490612e78565b90915550506001600160a01b038216600090815260056020526040812080546001929061130e908490612e2d565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6113798282610cef565b61101157611391816001600160a01b031660146119ad565b61139c8360206119ad565b6040516020016113ad929190612cc5565b60408051601f198184030181529082905262461bcd60e51b825261065991600401612d77565b60006113df8383611b49565b6114825782546001810184556000848152602090819020845161140993919091019185019061268a565b508254604051600185019061141f908590612c11565b90815260200160405180910390208190555082600101826040516114439190612c11565b90815260405190819003602001812054907f11497a834951095469930ec62e1641f0dcf3617d9cd7579b6da76e54df3000a790600090a2506001610559565b506000610559565b6000826001018260405161149e9190612c11565b908152602001604051809103902054905092915050565b60006114c0600b5490565b90506114cc8682611b76565b600081815260116020908152604080832088905560128252808320879055601390915290208390556114fe8183611cb5565b505050505050565b600082815260208190526040902060010154611522813361136f565b61078f8383611897565b6001600160a01b038116331461159c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610659565b6110118282611d40565b6000610ce8836001600160a01b038416611da5565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261078f908490611e98565b6000610ce88383611f6a565b606082611627600184612e78565b8154811061163757611637612f7e565b90600052602060002001805461164c90612ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461167890612ed2565b80156116c55780601f1061169a576101008083540402835291602001916116c5565b820191906000526020600020905b8154815290600101906020018083116116a857829003601f168201915b5050505050905092915050565b6116dd8484846111c4565b6116e984848484611f94565b610fb75760405162461bcd60e51b815260040161065990612d8a565b60606117108261104f565b6117765760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610659565b6000828152600860205260408120805461178f90612ed2565b80601f01602080910402602001604051908101604052809291908181526020018280546117bb90612ed2565b80156118085780601f106117dd57610100808354040283529160200191611808565b820191906000526020600020905b8154815290600101906020018083116117eb57829003601f168201915b5050505050905060006118196120a1565b905080516000141561182c575092915050565b81511561185e578082604051602001611846929190612c5a565b60405160208183030381529060405292505050919050565b6111bc846120b0565b6000610559825490565b60008281526020819052604090206001015461188d813361136f565b61078f8383611d40565b6118a18282610cef565b611011576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556118d73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205461148257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610559565b60006001600160e01b031982166380ac58cd60e01b148061199357506001600160e01b03198216635b5e139f60e01b145b8061055957506105598261217a565b61078f83838361219f565b606060006119bc836002612e59565b6119c7906002612e2d565b67ffffffffffffffff8111156119df576119df612f94565b6040519080825280601f01601f191660200182016040528015611a09576020820181803683370190505b509050600360fc1b81600081518110611a2457611a24612f7e565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611a5357611a53612f7e565b60200101906001600160f81b031916908160001a9053506000611a77846002612e59565b611a82906001612e2d565b90505b6001811115611afa576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611ab657611ab6612f7e565b1a60f81b828281518110611acc57611acc612f7e565b60200101906001600160f81b031916908160001a90535060049490941c93611af381612ebb565b9050611a85565b508315610ce85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610659565b60008260010182604051611b5d9190612c11565b9081526040519081900360200190205415159392505050565b6001600160a01b038216611bcc5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610659565b611bd58161104f565b15611c225760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610659565b611c2e600083836119a2565b6001600160a01b0382166000908152600560205260408120805460019290611c57908490612e2d565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b611cbe8261104f565b611d215760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610659565b6000828152600860209081526040909120825161078f9284019061268a565b611d4a8282610cef565b15611011576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015611e8e576000611dc9600183612e78565b8554909150600090611ddd90600190612e78565b9050818114611e42576000866000018281548110611dfd57611dfd612f7e565b9060005260206000200154905080876000018481548110611e2057611e20612f7e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611e5357611e53612f68565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610559565b6000915050610559565b6000611eed826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122579092919063ffffffff16565b80519091501561078f5780806020019051810190611f0b9190612ae2565b61078f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610659565b6000826000018281548110611f8157611f81612f7e565b9060005260206000200154905092915050565b60006001600160a01b0384163b1561209657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611fd8903390899088908890600401612d3a565b602060405180830381600087803b158015611ff257600080fd5b505af1925050508015612022575060408051601f3d908101601f1916820190925261201f91810190612b7a565b60015b61207c573d808015612050576040519150601f19603f3d011682016040523d82523d6000602084013e612055565b606091505b5080516120745760405162461bcd60e51b815260040161065990612d8a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506111bc565b506001949350505050565b6060600e805461056e90612ed2565b60606120bb8261104f565b61211f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610659565b60006121296120a1565b905060008151116121495760405180602001604052806000815250610ce8565b8061215384612266565b604051602001612164929190612c5a565b6040516020818303038152906040529392505050565b60006001600160e01b03198216635a05180f60e01b1480610559575061055982612364565b6001600160a01b0383166121fa576121f581600b80546000838152600c60205260408120829055600182018355919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90155565b61221d565b816001600160a01b0316836001600160a01b03161461221d5761221d8382612399565b6001600160a01b0382166122345761078f81612436565b826001600160a01b0316826001600160a01b03161461078f5761078f82826124e5565b60606111bc8484600085612529565b60608161228a5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156122b4578061229e81612f0d565b91506122ad9050600a83612e45565b915061228e565b60008167ffffffffffffffff8111156122cf576122cf612f94565b6040519080825280601f01601f1916602001820160405280156122f9576020820181803683370190505b5090505b84156111bc5761230e600183612e78565b915061231b600a86612f28565b612326906030612e2d565b60f81b81838151811061233b5761233b612f7e565b60200101906001600160f81b031916908160001a90535061235d600a86612e45565b94506122fd565b60006001600160e01b03198216637965db0b60e01b148061055957506301ffc9a760e01b6001600160e01b0319831614610559565b600060016123a684610c49565b6123b09190612e78565b6000838152600a6020526040902054909150808214612403576001600160a01b03841660009081526009602090815260408083208584528252808320548484528184208190558352600a90915290208190555b506000918252600a602090815260408084208490556001600160a01b039094168352600981528383209183525290812055565b600b5460009061244890600190612e78565b6000838152600c6020526040812054600b805493945090928490811061247057612470612f7e565b9060005260206000200154905080600b838154811061249157612491612f7e565b6000918252602080832090910192909255828152600c9091526040808220849055858252812055600b8054806124c9576124c9612f68565b6001900381819060005260206000200160009055905550505050565b60006124f083610c49565b6001600160a01b0390931660009081526009602090815260408083208684528252808320859055938252600a9052919091209190915550565b60608247101561258a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610659565b843b6125d85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610659565b600080866001600160a01b031685876040516125f49190612c11565b60006040518083038185875af1925050503d8060008114612631576040519150601f19603f3d011682016040523d82523d6000602084013e612636565b606091505b5091509150612646828286612651565b979650505050505050565b60608315612660575081610ce8565b8251156126705782518084602001fd5b8160405162461bcd60e51b81526004016106599190612d77565b82805461269690612ed2565b90600052602060002090601f0160209004810192826126b857600085556126fe565b82601f106126d157805160ff19168380011785556126fe565b828001600101855582156126fe579182015b828111156126fe5782518255916020019190600101906126e3565b5061270a92915061270e565b5090565b5b8082111561270a576000815560010161270f565b600067ffffffffffffffff8084111561273e5761273e612f94565b604051601f8501601f19908116603f0116810190828211818310171561276657612766612f94565b8160405280935085815286868601111561277f57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146127b057600080fd5b919050565b60008083601f8401126127c757600080fd5b50813567ffffffffffffffff8111156127df57600080fd5b6020830191508360208285010111156127f757600080fd5b9250929050565b600082601f83011261280f57600080fd5b610ce883833560208501612723565b60006020828403121561283057600080fd5b610ce882612799565b6000806040838503121561284c57600080fd5b61285583612799565b915061286360208401612799565b90509250929050565b60008060006060848603121561288157600080fd5b61288a84612799565b925061289860208501612799565b9150604084013590509250925092565b600080600080608085870312156128be57600080fd5b6128c785612799565b93506128d560208601612799565b925060408501359150606085013567ffffffffffffffff8111156128f857600080fd5b8501601f8101871361290957600080fd5b61291887823560208401612723565b91505092959194509250565b6000806040838503121561293757600080fd5b61294083612799565b9150602083013561295081612faa565b809150509250929050565b600080600080600060a0868803121561297357600080fd5b61297c86612799565b9450602086013567ffffffffffffffff8082111561299957600080fd5b6129a589838a016127fe565b955060408801359150808211156129bb57600080fd5b506129c8888289016127fe565b9598949750949560608101359550608001359392505050565b600080604083850312156129f457600080fd5b6129fd83612799565b946020939093013593505050565b60008060008060008060008060a0898b031215612a2757600080fd5b883567ffffffffffffffff80821115612a3f57600080fd5b818b0191508b601f830112612a5357600080fd5b813581811115612a6257600080fd5b8c60208260051b8501011115612a7757600080fd5b60209283019a509850908a01359080821115612a9257600080fd5b612a9e8c838d016127b5565b909850965060408b0135915080821115612ab757600080fd5b50612ac48b828c016127b5565b999c989b509699959896976060870135966080013595509350505050565b600060208284031215612af457600080fd5b8151610ce881612faa565b600060208284031215612b1157600080fd5b5035919050565b60008060408385031215612b2b57600080fd5b8235915061286360208401612799565b60008060408385031215612b4e57600080fd5b50508035926020909101359150565b600060208284031215612b6f57600080fd5b8135610ce881612fbb565b600060208284031215612b8c57600080fd5b8151610ce881612fbb565b600060208284031215612ba957600080fd5b813567ffffffffffffffff811115612bc057600080fd5b6111bc848285016127fe565b600060208284031215612bde57600080fd5b5051919050565b60008151808452612bfd816020860160208601612e8f565b601f01601f19169290920160200192915050565b60008251612c23818460208701612e8f565b9190910192915050565b83858237602f60f81b81850190815260009083856001830137600093016001019283525090949350505050565b60008351612c6c818460208801612e8f565b835190830190612c80818360208801612e8f565b01949350505050565b60008351612c9b818460208801612e8f565b602f60f81b9083019081528351612cb9816001840160208801612e8f565b01600101949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612cfd816017850160208801612e8f565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612d2e816028840160208801612e8f565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612d6d90830184612be5565b9695505050505050565b602081526000610ce86020830184612be5565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008219821115612e4057612e40612f3c565b500190565b600082612e5457612e54612f52565b500490565b6000816000190483118215151615612e7357612e73612f3c565b500290565b600082821015612e8a57612e8a612f3c565b500390565b60005b83811015612eaa578181015183820152602001612e92565b83811115610fb75750506000910152565b600081612eca57612eca612f3c565b506000190190565b600181811c90821680612ee657607f821691505b60208210811415612f0757634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612f2157612f21612f3c565b5060010190565b600082612f3757612f37612f52565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114612fb857600080fd5b50565b6001600160e01b031981168114612fb857600080fdfea2646970667358221220bf44bd2b3c74ce552d7a822d9498b2b1837514dccf8dd9ee50355ccce810ef4d64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c806370a082311161011a578063a22cb465116100ad578063c87b56dd1161007c578063c87b56dd14610498578063ca15c873146104ab578063d5391393146104be578063d547741f146104e5578063e985e9c5146104f857600080fd5b8063a22cb4651461044c578063b5185a881461045f578063b88d4fde14610472578063c588ff8b1461048557600080fd5b8063931688cb116100e9578063931688cb146104165780639365c5331461042957806395d89b411461043c578063a217fddf1461044457600080fd5b806370a082311461039b578063896cddf4146103ae5780639010d07c146103f057806391d148541461040357600080fd5b80632f2ff15d1161019d57806348c64e411161016c57806348c64e411461032f5780634f6ccce714610342578063562317c5146103555780636067bc15146103755780636352211e1461038857600080fd5b80632f2ff15d146102e35780632f745c59146102f657806336568abe1461030957806342842e0e1461031c57600080fd5b806318160ddd116101d957806318160ddd1461028857806323b872dd1461029a578063248a9ca3146102ad57806329867dac146102d057600080fd5b806301ffc9a71461020b57806306fdde0314610233578063081812fc14610248578063095ea7b314610273575b600080fd5b61021e610219366004612b5d565b610534565b60405190151581526020015b60405180910390f35b61023b61055f565b60405161022a9190612d77565b61025b610256366004612aff565b6105f1565b6040516001600160a01b03909116815260200161022a565b6102866102813660046129e1565b61067e565b005b600b545b60405190815260200161022a565b6102866102a836600461286c565b610794565b61028c6102bb366004612aff565b60009081526020819052604090206001015490565b6102866102de36600461295b565b6107c5565b6102866102f1366004612b18565b610877565b61028c6103043660046129e1565b610899565b610286610317366004612b18565b61092f565b61028661032a36600461286c565b610951565b61028661033d3660046129e1565b61096c565b61028c610350366004612aff565b610a46565b61028c610363366004612aff565b60009081526013602052604090205490565b61028661038336600461281e565b610ad9565b61025b610396366004612aff565b610bd2565b61028c6103a936600461281e565b610c49565b6103db6103bc366004612aff565b6000908152601160209081526040808320546012909252909120549091565b6040805192835260208301919091520161022a565b61025b6103fe366004612b3b565b610cd0565b61021e610411366004612b18565b610cef565b610286610424366004612b97565b610d18565b610286610437366004612a0b565b610d37565b61023b610ea4565b61028c600081565b61028661045a366004612924565b610eb3565b61023b61046d366004612aff565b610f78565b6102866104803660046128a8565b610f85565b61023b610493366004612aff565b610fbd565b61023b6104a6366004612aff565b610fdb565b61028c6104b9366004612aff565b610fe6565b61028c7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102866104f3366004612b18565b610ffd565b61021e610506366004612839565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006001600160e01b03198216630d639add60e11b148061055957506105598261102a565b92915050565b60606002805461056e90612ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461059a90612ed2565b80156105e75780601f106105bc576101008083540402835291602001916105e7565b820191906000526020600020905b8154815290600101906020018083116105ca57829003601f168201915b5050505050905090565b60006105fc8261104f565b6106625760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061068982610bd2565b9050806001600160a01b0316836001600160a01b031614156106f75760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610659565b336001600160a01b038216148061071357506107138133610506565b6107855760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610659565b61078f838361106c565b505050565b61079e33826110da565b6107ba5760405162461bcd60e51b815260040161065990612ddc565b61078f8383836111c4565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66107f0813361136f565b6107fb600f866113d3565b506000610809600f8761148a565b905060008686604051602001610820929190612c89565b604051602081830303815290604052905061083e88868685856114b5565b8385837f735e5eb5afdd72cc64657ded7e5de390af3708afb5b9a80b0e5c911a0499d98f60405160405180910390a45050505050505050565b6108818282611506565b600082815260016020526040902061078f9082611015565b60006108a483610c49565b82106109065760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610659565b506001600160a01b03919091166000908152600960209081526040808320938352929052205490565b610939828261152c565b600082815260016020526040902061078f90826115a6565b61078f83838360405180602001604052806000815250610f85565b6000610978813361136f565b6002600d5414156109cb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610659565b6002600d55604080516323b872dd60e01b81523060048201523360248201526044810184905290516001600160a01b038516916323b872dd91606480830192600092919082900301818387803b158015610a2457600080fd5b505af1158015610a38573d6000803e3d6000fd5b50506001600d555050505050565b6000610a51600b5490565b8210610ab45760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610659565b600b8281548110610ac757610ac7612f7e565b90600052602060002001549050919050565b6000610ae5813361136f565b6002600d541415610b385760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610659565b6002600d55610bc9336040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015610b8057600080fd5b505afa158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb89190612bcc565b6001600160a01b03851691906115bb565b50506001600d55565b6000818152600460205260408120546001600160a01b0316806105595760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610659565b60006001600160a01b038216610cb45760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610659565b506001600160a01b031660009081526005602052604090205490565b6000828152600160205260408120610ce8908361160d565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610d24813361136f565b815161078f90600e90602085019061268a565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610d62813361136f565b610da587878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250600f939250506113d39050565b506000610deb88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250600f9392505061148a9050565b9050600088888888604051602001610e069493929190612c2d565b604051602081830303815290604052905060005b8a811015610e6757610e558c8c83818110610e3757610e37612f7e565b9050602002016020810190610e4c919061281e565b878786866114b5565b80610e5f81612f0d565b915050610e1a565b508385837f735e5eb5afdd72cc64657ded7e5de390af3708afb5b9a80b0e5c911a0499d98f60405160405180910390a45050505050505050505050565b60606003805461056e90612ed2565b6001600160a01b038216331415610f0c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610659565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6060610559600f83611619565b610f8f33836110da565b610fab5760405162461bcd60e51b815260040161065990612ddc565b610fb7848484846116d2565b50505050565b60008181526013602052604090205460609061055990600f90611619565b606061055982611705565b600081815260016020526040812061055990611867565b6109398282611871565b6110118282611897565b5050565b6000610ce8836001600160a01b03841661191b565b60006001600160e01b0319821663780e9d6360e01b1480610559575061055982611962565b6000908152600460205260409020546001600160a01b0316151590565b600081815260066020526040902080546001600160a01b0319166001600160a01b03841690811790915581906110a182610bd2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006110e58261104f565b6111465760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610659565b600061115183610bd2565b9050806001600160a01b0316846001600160a01b0316148061118c5750836001600160a01b0316611181846105f1565b6001600160a01b0316145b806111bc57506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166111d782610bd2565b6001600160a01b03161461123f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610659565b6001600160a01b0382166112a15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610659565b6112ac8383836119a2565b6112b760008261106c565b6001600160a01b03831660009081526005602052604081208054600192906112e0908490612e78565b90915550506001600160a01b038216600090815260056020526040812080546001929061130e908490612e2d565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6113798282610cef565b61101157611391816001600160a01b031660146119ad565b61139c8360206119ad565b6040516020016113ad929190612cc5565b60408051601f198184030181529082905262461bcd60e51b825261065991600401612d77565b60006113df8383611b49565b6114825782546001810184556000848152602090819020845161140993919091019185019061268a565b508254604051600185019061141f908590612c11565b90815260200160405180910390208190555082600101826040516114439190612c11565b90815260405190819003602001812054907f11497a834951095469930ec62e1641f0dcf3617d9cd7579b6da76e54df3000a790600090a2506001610559565b506000610559565b6000826001018260405161149e9190612c11565b908152602001604051809103902054905092915050565b60006114c0600b5490565b90506114cc8682611b76565b600081815260116020908152604080832088905560128252808320879055601390915290208390556114fe8183611cb5565b505050505050565b600082815260208190526040902060010154611522813361136f565b61078f8383611897565b6001600160a01b038116331461159c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610659565b6110118282611d40565b6000610ce8836001600160a01b038416611da5565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261078f908490611e98565b6000610ce88383611f6a565b606082611627600184612e78565b8154811061163757611637612f7e565b90600052602060002001805461164c90612ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461167890612ed2565b80156116c55780601f1061169a576101008083540402835291602001916116c5565b820191906000526020600020905b8154815290600101906020018083116116a857829003601f168201915b5050505050905092915050565b6116dd8484846111c4565b6116e984848484611f94565b610fb75760405162461bcd60e51b815260040161065990612d8a565b60606117108261104f565b6117765760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610659565b6000828152600860205260408120805461178f90612ed2565b80601f01602080910402602001604051908101604052809291908181526020018280546117bb90612ed2565b80156118085780601f106117dd57610100808354040283529160200191611808565b820191906000526020600020905b8154815290600101906020018083116117eb57829003601f168201915b5050505050905060006118196120a1565b905080516000141561182c575092915050565b81511561185e578082604051602001611846929190612c5a565b60405160208183030381529060405292505050919050565b6111bc846120b0565b6000610559825490565b60008281526020819052604090206001015461188d813361136f565b61078f8383611d40565b6118a18282610cef565b611011576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556118d73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205461148257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610559565b60006001600160e01b031982166380ac58cd60e01b148061199357506001600160e01b03198216635b5e139f60e01b145b8061055957506105598261217a565b61078f83838361219f565b606060006119bc836002612e59565b6119c7906002612e2d565b67ffffffffffffffff8111156119df576119df612f94565b6040519080825280601f01601f191660200182016040528015611a09576020820181803683370190505b509050600360fc1b81600081518110611a2457611a24612f7e565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611a5357611a53612f7e565b60200101906001600160f81b031916908160001a9053506000611a77846002612e59565b611a82906001612e2d565b90505b6001811115611afa576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611ab657611ab6612f7e565b1a60f81b828281518110611acc57611acc612f7e565b60200101906001600160f81b031916908160001a90535060049490941c93611af381612ebb565b9050611a85565b508315610ce85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610659565b60008260010182604051611b5d9190612c11565b9081526040519081900360200190205415159392505050565b6001600160a01b038216611bcc5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610659565b611bd58161104f565b15611c225760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610659565b611c2e600083836119a2565b6001600160a01b0382166000908152600560205260408120805460019290611c57908490612e2d565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b611cbe8261104f565b611d215760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610659565b6000828152600860209081526040909120825161078f9284019061268a565b611d4a8282610cef565b15611011576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015611e8e576000611dc9600183612e78565b8554909150600090611ddd90600190612e78565b9050818114611e42576000866000018281548110611dfd57611dfd612f7e565b9060005260206000200154905080876000018481548110611e2057611e20612f7e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611e5357611e53612f68565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610559565b6000915050610559565b6000611eed826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122579092919063ffffffff16565b80519091501561078f5780806020019051810190611f0b9190612ae2565b61078f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610659565b6000826000018281548110611f8157611f81612f7e565b9060005260206000200154905092915050565b60006001600160a01b0384163b1561209657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611fd8903390899088908890600401612d3a565b602060405180830381600087803b158015611ff257600080fd5b505af1925050508015612022575060408051601f3d908101601f1916820190925261201f91810190612b7a565b60015b61207c573d808015612050576040519150601f19603f3d011682016040523d82523d6000602084013e612055565b606091505b5080516120745760405162461bcd60e51b815260040161065990612d8a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506111bc565b506001949350505050565b6060600e805461056e90612ed2565b60606120bb8261104f565b61211f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610659565b60006121296120a1565b905060008151116121495760405180602001604052806000815250610ce8565b8061215384612266565b604051602001612164929190612c5a565b6040516020818303038152906040529392505050565b60006001600160e01b03198216635a05180f60e01b1480610559575061055982612364565b6001600160a01b0383166121fa576121f581600b80546000838152600c60205260408120829055600182018355919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90155565b61221d565b816001600160a01b0316836001600160a01b03161461221d5761221d8382612399565b6001600160a01b0382166122345761078f81612436565b826001600160a01b0316826001600160a01b03161461078f5761078f82826124e5565b60606111bc8484600085612529565b60608161228a5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156122b4578061229e81612f0d565b91506122ad9050600a83612e45565b915061228e565b60008167ffffffffffffffff8111156122cf576122cf612f94565b6040519080825280601f01601f1916602001820160405280156122f9576020820181803683370190505b5090505b84156111bc5761230e600183612e78565b915061231b600a86612f28565b612326906030612e2d565b60f81b81838151811061233b5761233b612f7e565b60200101906001600160f81b031916908160001a90535061235d600a86612e45565b94506122fd565b60006001600160e01b03198216637965db0b60e01b148061055957506301ffc9a760e01b6001600160e01b0319831614610559565b600060016123a684610c49565b6123b09190612e78565b6000838152600a6020526040902054909150808214612403576001600160a01b03841660009081526009602090815260408083208584528252808320548484528184208190558352600a90915290208190555b506000918252600a602090815260408084208490556001600160a01b039094168352600981528383209183525290812055565b600b5460009061244890600190612e78565b6000838152600c6020526040812054600b805493945090928490811061247057612470612f7e565b9060005260206000200154905080600b838154811061249157612491612f7e565b6000918252602080832090910192909255828152600c9091526040808220849055858252812055600b8054806124c9576124c9612f68565b6001900381819060005260206000200160009055905550505050565b60006124f083610c49565b6001600160a01b0390931660009081526009602090815260408083208684528252808320859055938252600a9052919091209190915550565b60608247101561258a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610659565b843b6125d85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610659565b600080866001600160a01b031685876040516125f49190612c11565b60006040518083038185875af1925050503d8060008114612631576040519150601f19603f3d011682016040523d82523d6000602084013e612636565b606091505b5091509150612646828286612651565b979650505050505050565b60608315612660575081610ce8565b8251156126705782518084602001fd5b8160405162461bcd60e51b81526004016106599190612d77565b82805461269690612ed2565b90600052602060002090601f0160209004810192826126b857600085556126fe565b82601f106126d157805160ff19168380011785556126fe565b828001600101855582156126fe579182015b828111156126fe5782518255916020019190600101906126e3565b5061270a92915061270e565b5090565b5b8082111561270a576000815560010161270f565b600067ffffffffffffffff8084111561273e5761273e612f94565b604051601f8501601f19908116603f0116810190828211818310171561276657612766612f94565b8160405280935085815286868601111561277f57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146127b057600080fd5b919050565b60008083601f8401126127c757600080fd5b50813567ffffffffffffffff8111156127df57600080fd5b6020830191508360208285010111156127f757600080fd5b9250929050565b600082601f83011261280f57600080fd5b610ce883833560208501612723565b60006020828403121561283057600080fd5b610ce882612799565b6000806040838503121561284c57600080fd5b61285583612799565b915061286360208401612799565b90509250929050565b60008060006060848603121561288157600080fd5b61288a84612799565b925061289860208501612799565b9150604084013590509250925092565b600080600080608085870312156128be57600080fd5b6128c785612799565b93506128d560208601612799565b925060408501359150606085013567ffffffffffffffff8111156128f857600080fd5b8501601f8101871361290957600080fd5b61291887823560208401612723565b91505092959194509250565b6000806040838503121561293757600080fd5b61294083612799565b9150602083013561295081612faa565b809150509250929050565b600080600080600060a0868803121561297357600080fd5b61297c86612799565b9450602086013567ffffffffffffffff8082111561299957600080fd5b6129a589838a016127fe565b955060408801359150808211156129bb57600080fd5b506129c8888289016127fe565b9598949750949560608101359550608001359392505050565b600080604083850312156129f457600080fd5b6129fd83612799565b946020939093013593505050565b60008060008060008060008060a0898b031215612a2757600080fd5b883567ffffffffffffffff80821115612a3f57600080fd5b818b0191508b601f830112612a5357600080fd5b813581811115612a6257600080fd5b8c60208260051b8501011115612a7757600080fd5b60209283019a509850908a01359080821115612a9257600080fd5b612a9e8c838d016127b5565b909850965060408b0135915080821115612ab757600080fd5b50612ac48b828c016127b5565b999c989b509699959896976060870135966080013595509350505050565b600060208284031215612af457600080fd5b8151610ce881612faa565b600060208284031215612b1157600080fd5b5035919050565b60008060408385031215612b2b57600080fd5b8235915061286360208401612799565b60008060408385031215612b4e57600080fd5b50508035926020909101359150565b600060208284031215612b6f57600080fd5b8135610ce881612fbb565b600060208284031215612b8c57600080fd5b8151610ce881612fbb565b600060208284031215612ba957600080fd5b813567ffffffffffffffff811115612bc057600080fd5b6111bc848285016127fe565b600060208284031215612bde57600080fd5b5051919050565b60008151808452612bfd816020860160208601612e8f565b601f01601f19169290920160200192915050565b60008251612c23818460208701612e8f565b9190910192915050565b83858237602f60f81b81850190815260009083856001830137600093016001019283525090949350505050565b60008351612c6c818460208801612e8f565b835190830190612c80818360208801612e8f565b01949350505050565b60008351612c9b818460208801612e8f565b602f60f81b9083019081528351612cb9816001840160208801612e8f565b01600101949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612cfd816017850160208801612e8f565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612d2e816028840160208801612e8f565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612d6d90830184612be5565b9695505050505050565b602081526000610ce86020830184612be5565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008219821115612e4057612e40612f3c565b500190565b600082612e5457612e54612f52565b500490565b6000816000190483118215151615612e7357612e73612f3c565b500290565b600082821015612e8a57612e8a612f3c565b500390565b60005b83811015612eaa578181015183820152602001612e92565b83811115610fb75750506000910152565b600081612eca57612eca612f3c565b506000190190565b600181811c90821680612ee657607f821691505b60208210811415612f0757634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612f2157612f21612f3c565b5060010190565b600082612f3757612f37612f52565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114612fb857600080fd5b50565b6001600160e01b031981168114612fb857600080fdfea2646970667358221220bf44bd2b3c74ce552d7a822d9498b2b1837514dccf8dd9ee50355ccce810ef4d64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "batchMint(address[],string,string,uint256,uint256)": {
        "details": "Minter creates new tokens for `to` array. Its token ID will be automatically assigned based on current `totalSupply`. (and available on the emitted {IERC721-Transfer} event). Provide boost factor, boost type and boost rank. If needed, register a new class of boost,  with its \"type\", \"rank\" and \"boost factor (numerator)\" The token URI is generated based on the base URI, boostType and boostRank.",
        "params": {
          "boostNumerator": "uint256 Numerator of the boost factor. Its denominator is 1e12.",
          "boostRank": "string Rank of the boost",
          "boostType": "string Type of the boost",
          "redeemDeadline": "uint256 Deadline for redeem a boost. Epoch Unix Timestamp",
          "to": "address[] Addresses of token holder that will receive the NFT token of the given \"type\""
        }
      },
      "boostOf(uint256)": {
        "details": "Returns the boost factor and the redeem deadline associated with ``tokenId``.",
        "params": {
          "tokenId": "uint256 token Id of the boost."
        }
      },
      "constructor": {
        "details": "Set a new admin role. Set the new admin as a minter. Provide name and symbol for ERC721.  Update the ``_baseTokenURI``.",
        "params": {
          "newAdmin": "address Address of the new admin account "
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address,string,string,uint256,uint256)": {
        "details": "Minter creates a new token for `to`. Its token ID will be automatically assigned based on current `totalSupply`. (and available on the emitted {IERC721-Transfer} event). Provide boost factor, boost type and boost rank. If needed, register a new class of boost,  with its \"type\", \"rank\" and \"boost factor (numerator)\" The token URI is generated based on the base URI, boostType and boostRank.",
        "params": {
          "boostNumerator": "uint256 Numerator of the boost factor. Its denominator is 1e12.",
          "boostRank": "string Rank of the boost",
          "boostType": "string Type of the boost",
          "redeemDeadline": "uint256 Deadline for redeem a boost. Epoch Unix Timestamp. ",
          "to": "address Address of token holder that will receive the NFT token of the given \"type\""
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "reclaimErc20Tokens(address)": {
        "details": "Reclaim any ERC20 token being accidentally sent to the contract.",
        "params": {
          "tokenAddress": "address ERC20 token address."
        }
      },
      "reclaimErc721Tokens(address,uint256)": {
        "details": "Reclaim any ERC721 token being accidentally sent to the contract.",
        "params": {
          "tokenAddress": "address ERC721 token address."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "Inherit tokenURI from {ERC721} and {ERC721URIStorage}"
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "typeAt(uint256)": {
        "details": "Returns the boost type name associated with ``typeIndex``.",
        "params": {
          "typeIndex": "uint256 Index of the type."
        }
      },
      "typeIndexOf(uint256)": {
        "details": "Returns the boost type index associated with ``tokenId``.",
        "params": {
          "tokenId": "uint256 token Id of the boost."
        }
      },
      "typeOf(uint256)": {
        "details": "Returns the boost type associated with ``tokenId``.",
        "params": {
          "tokenId": "uint256 token Id of the boost."
        }
      },
      "updateBaseURI(string)": {
        "details": "Admin can update the new base URI at any time.",
        "params": {
          "baseTokenURI": "string Basic URI of the token."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)"
      },
      {
        "astId": 403,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)5487_storage)"
      },
      {
        "astId": 1600,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1602,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1606,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1610,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1614,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1620,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2877,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2541,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2545,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2548,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_allTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2552,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 672,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_status",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5751,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 5754,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_boostType",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(StringSet)12387_storage"
      },
      {
        "astId": 5758,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_boostNumerator",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5762,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_redeemDeadline",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5766,
        "contract": "contracts/HoprBoost.sol:HoprBoost",
        "label": "_boostTypeIndexOfId",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)5487_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)5487_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)57_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)5487_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5486,
            "contract": "contracts/HoprBoost.sol:HoprBoost",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5216_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)57_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 54,
            "contract": "contracts/HoprBoost.sol:HoprBoost",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 56,
            "contract": "contracts/HoprBoost.sol:HoprBoost",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5216_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5211,
            "contract": "contracts/HoprBoost.sol:HoprBoost",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5215,
            "contract": "contracts/HoprBoost.sol:HoprBoost",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StringSet)12387_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableStringSet.StringSet",
        "members": [
          {
            "astId": 12382,
            "contract": "contracts/HoprBoost.sol:HoprBoost",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 12386,
            "contract": "contracts/HoprBoost.sol:HoprBoost",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_string_memory_ptr,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}