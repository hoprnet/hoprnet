{
  "address": "0x880bb248F5d2E3fCaa3A81E8EC155f3B509aAc48",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isRequirementFulfilled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ownerAddAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "ownerBatchAddAccounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "ownerBatchRemoveAccounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ownerRemoveAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x02c496e413a10d2d8fc9f3f3dc1a79375a8b5e5dfceed83ac851518d81fdb641",
  "receipt": {
    "to": null,
    "from": "0xA18732DC751BE0dB04157eb92C92BA9d0fC09FC5",
    "contractAddress": "0x880bb248F5d2E3fCaa3A81E8EC155f3B509aAc48",
    "transactionIndex": 8,
    "gasUsed": "412660",
    "logsBloom": "0x
    "blockHash": "0xef46822e710daa838e1cd99dc75d23586b6eac38f0e56b5cb89ffd07dc7bc4d2",
    "transactionHash": "0x02c496e413a10d2d8fc9f3f3dc1a79375a8b5e5dfceed83ac851518d81fdb641",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 6877081,
        "transactionHash": "0x02c496e413a10d2d8fc9f3f3dc1a79375a8b5e5dfceed83ac851518d81fdb641",
        "address": "0x880bb248F5d2E3fCaa3A81E8EC155f3B509aAc48",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a18732dc751be0db04157eb92c92ba9d0fc09fc5"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xef46822e710daa838e1cd99dc75d23586b6eac38f0e56b5cb89ffd07dc7bc4d2"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 6877081,
        "transactionHash": "0x02c496e413a10d2d8fc9f3f3dc1a79375a8b5e5dfceed83ac851518d81fdb641",
        "address": "0x880bb248F5d2E3fCaa3A81E8EC155f3B509aAc48",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000a18732dc751be0db04157eb92c92ba9d0fc09fc5",
          "0x0000000000000000000000002402da10a6172ed018aeea22ca60ede1f766655c"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xef46822e710daa838e1cd99dc75d23586b6eac38f0e56b5cb89ffd07dc7bc4d2"
      }
    ],
    "blockNumber": 6877081,
    "cumulativeGasUsed": "3513569",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2402da10A6172ED018AEEa22CA60EDe1F766655C"
  ],
  "numDeployments": 1,
  "solcInputHash": "7a98702c916fa190ef1f4f51d7f2814c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRequirementFulfilled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ownerAddAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"ownerBatchAddAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"ownerBatchRemoveAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ownerRemoveAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Dummy roxy which return true if an address is registered by the owner\",\"kind\":\"dev\",\"methods\":{\"isRequirementFulfilled(address)\":{\"details\":\"Checks if the provided account is registered by the owner\",\"params\":{\"account\":\"address of the account that runs a hopr node\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerAddAccount(address)\":{\"details\":\"Owner add account onto the registry list\",\"params\":{\"account\":\"address to be added onto the registry\"}},\"ownerBatchAddAccounts(address[])\":{\"details\":\"Owner add accounts onto the registry list in batch.\",\"params\":{\"accounts\":\"addresses to be removed from the registry\"}},\"ownerBatchRemoveAccounts(address[])\":{\"details\":\"Owner removes from list of eligible NFTs in batch.\",\"params\":{\"accounts\":\"addresses to be removed from the registry\"}},\"ownerRemoveAccount(address)\":{\"details\":\"Owner move account from the registry list\",\"params\":{\"account\":\"address to be removed from the registry\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/proxy/HoprDummyProxyForNetworkRegistry.sol\":\"HoprDummyProxyForNetworkRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IHoprNetworkRegistryRequirement.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IHoprNetworkRegistryRequirement {\\n  function isRequirementFulfilled(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x28d5713841152502b5f324014b2e52ad51274792abed1786120bf18152037c2d\",\"license\":\"GPL-3.0\"},\"contracts/proxy/HoprDummyProxyForNetworkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '../IHoprNetworkRegistryRequirement.sol';\\n\\n/**\\n * @dev Dummy roxy which return true if an address is registered by the owner\\n */\\ncontract HoprDummyProxyForNetworkRegistry is IHoprNetworkRegistryRequirement, Ownable {\\n  mapping(address => bool) registeredAccounts;\\n  event AccountRegistered(address indexed account);\\n  event AccountDeregistered(address indexed account);\\n\\n  constructor(address newOwner) {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Checks if the provided account is registered by the owner\\n   * @param account address of the account that runs a hopr node\\n   */\\n  function isRequirementFulfilled(address account) external view returns (bool) {\\n    return registeredAccounts[account];\\n  }\\n\\n  /**\\n   * @dev Owner add accounts onto the registry list in batch.\\n   * @param accounts addresses to be removed from the registry\\n   */\\n  function ownerBatchAddAccounts(address[] calldata accounts) external onlyOwner {\\n    for (uint256 index = 0; index < accounts.length; index++) {\\n      _addAccount(accounts[index]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Owner removes from list of eligible NFTs in batch.\\n   * @param accounts addresses to be removed from the registry\\n   */\\n  function ownerBatchRemoveAccounts(address[] calldata accounts) external onlyOwner {\\n    for (uint256 index = 0; index < accounts.length; index++) {\\n      _removeAccount(accounts[index]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Owner add account onto the registry list\\n   * @param account address to be added onto the registry\\n   */\\n  function ownerAddAccount(address account) external onlyOwner {\\n    _addAccount(account);\\n  }\\n\\n  /**\\n   * @dev Owner move account from the registry list\\n   * @param account address to be removed from the registry\\n   */\\n  function ownerRemoveAccount(address account) external onlyOwner {\\n    _removeAccount(account);\\n  }\\n\\n  /**\\n   * @dev add account onto the registry list\\n   * @param account address to be added into the registry\\n   */\\n  function _addAccount(address account) private {\\n    if (!registeredAccounts[account]) {\\n      registeredAccounts[account] = true;\\n      emit AccountRegistered(account);\\n    }\\n  }\\n\\n  /**\\n   * @dev remove account from the registry list\\n   * @param account address to be removed from the registry\\n   */\\n  function _removeAccount(address account) private {\\n    if (registeredAccounts[account]) {\\n      delete registeredAccounts[account];\\n      emit AccountDeregistered(account);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5914f869a43707ea4f8b6d12b816eb8bd9b4d25deb905adda157feed0c017b4e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516106d13803806106d183398101604081905261002f91610097565b61003833610047565b61004181610047565b506100c7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100a957600080fd5b81516001600160a01b03811681146100c057600080fd5b9392505050565b6105fb806100d66000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806386ca5f311161005b57806386ca5f31146100d05780638da5cb5b14610111578063a71b1b741461012c578063f2fde38b1461013f57600080fd5b80634051f2571461008d578063486354e2146100a25780635c5471e7146100b5578063715018a6146100c8575b600080fd5b6100a061009b3660046104ac565b610152565b005b6100a06100b03660046104dc565b610191565b6100a06100c33660046104dc565b61020c565b6100a0610282565b6100fc6100de3660046104ac565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b039091168152602001610108565b6100a061013a3660046104ac565b6102b8565b6100a061014d3660046104ac565b6102eb565b6000546001600160a01b031633146101855760405162461bcd60e51b815260040161017c90610551565b60405180910390fd5b61018e81610383565b50565b6000546001600160a01b031633146101bb5760405162461bcd60e51b815260040161017c90610551565b60005b81811015610207576101f58383838181106101db576101db610586565b90506020020160208101906101f091906104ac565b6103ed565b806101ff8161059c565b9150506101be565b505050565b6000546001600160a01b031633146102365760405162461bcd60e51b815260040161017c90610551565b60005b818110156102075761027083838381811061025657610256610586565b905060200201602081019061026b91906104ac565b610383565b8061027a8161059c565b915050610239565b6000546001600160a01b031633146102ac5760405162461bcd60e51b815260040161017c90610551565b6102b6600061045c565b565b6000546001600160a01b031633146102e25760405162461bcd60e51b815260040161017c90610551565b61018e816103ed565b6000546001600160a01b031633146103155760405162461bcd60e51b815260040161017c90610551565b6001600160a01b03811661037a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161017c565b61018e8161045c565b6001600160a01b03811660009081526001602052604090205460ff161561018e576001600160a01b038116600081815260016020526040808220805460ff19169055517f0e63d629afe34b3ca5107c10f90abff5091b31551b371758bd50af76834dc0749190a250565b6001600160a01b03811660009081526001602052604090205460ff1661018e576001600160a01b0381166000818152600160208190526040808320805460ff1916909217909155517fcd822dc9688e20acea68724a2fbcfe4f3e526d20ecaa37b18fe3047ab377d6a59190a250565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156104be57600080fd5b81356001600160a01b03811681146104d557600080fd5b9392505050565b600080602083850312156104ef57600080fd5b823567ffffffffffffffff8082111561050757600080fd5b818501915085601f83011261051b57600080fd5b81358181111561052a57600080fd5b8660208260051b850101111561053f57600080fd5b60209290920196919550909350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156105be57634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122000619e859e558612aade59201e230d56d039e80b6e0b0c14e2266a751aa98b4264736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806386ca5f311161005b57806386ca5f31146100d05780638da5cb5b14610111578063a71b1b741461012c578063f2fde38b1461013f57600080fd5b80634051f2571461008d578063486354e2146100a25780635c5471e7146100b5578063715018a6146100c8575b600080fd5b6100a061009b3660046104ac565b610152565b005b6100a06100b03660046104dc565b610191565b6100a06100c33660046104dc565b61020c565b6100a0610282565b6100fc6100de3660046104ac565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6000546040516001600160a01b039091168152602001610108565b6100a061013a3660046104ac565b6102b8565b6100a061014d3660046104ac565b6102eb565b6000546001600160a01b031633146101855760405162461bcd60e51b815260040161017c90610551565b60405180910390fd5b61018e81610383565b50565b6000546001600160a01b031633146101bb5760405162461bcd60e51b815260040161017c90610551565b60005b81811015610207576101f58383838181106101db576101db610586565b90506020020160208101906101f091906104ac565b6103ed565b806101ff8161059c565b9150506101be565b505050565b6000546001600160a01b031633146102365760405162461bcd60e51b815260040161017c90610551565b60005b818110156102075761027083838381811061025657610256610586565b905060200201602081019061026b91906104ac565b610383565b8061027a8161059c565b915050610239565b6000546001600160a01b031633146102ac5760405162461bcd60e51b815260040161017c90610551565b6102b6600061045c565b565b6000546001600160a01b031633146102e25760405162461bcd60e51b815260040161017c90610551565b61018e816103ed565b6000546001600160a01b031633146103155760405162461bcd60e51b815260040161017c90610551565b6001600160a01b03811661037a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161017c565b61018e8161045c565b6001600160a01b03811660009081526001602052604090205460ff161561018e576001600160a01b038116600081815260016020526040808220805460ff19169055517f0e63d629afe34b3ca5107c10f90abff5091b31551b371758bd50af76834dc0749190a250565b6001600160a01b03811660009081526001602052604090205460ff1661018e576001600160a01b0381166000818152600160208190526040808320805460ff1916909217909155517fcd822dc9688e20acea68724a2fbcfe4f3e526d20ecaa37b18fe3047ab377d6a59190a250565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156104be57600080fd5b81356001600160a01b03811681146104d557600080fd5b9392505050565b600080602083850312156104ef57600080fd5b823567ffffffffffffffff8082111561050757600080fd5b818501915085601f83011261051b57600080fd5b81358181111561052a57600080fd5b8660208260051b850101111561053f57600080fd5b60209290920196919550909350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156105be57634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122000619e859e558612aade59201e230d56d039e80b6e0b0c14e2266a751aa98b4264736f6c63430008090033",
  "devdoc": {
    "details": "Dummy roxy which return true if an address is registered by the owner",
    "kind": "dev",
    "methods": {
      "isRequirementFulfilled(address)": {
        "details": "Checks if the provided account is registered by the owner",
        "params": {
          "account": "address of the account that runs a hopr node"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerAddAccount(address)": {
        "details": "Owner add account onto the registry list",
        "params": {
          "account": "address to be added onto the registry"
        }
      },
      "ownerBatchAddAccounts(address[])": {
        "details": "Owner add accounts onto the registry list in batch.",
        "params": {
          "accounts": "addresses to be removed from the registry"
        }
      },
      "ownerBatchRemoveAccounts(address[])": {
        "details": "Owner removes from list of eligible NFTs in batch.",
        "params": {
          "accounts": "addresses to be removed from the registry"
        }
      },
      "ownerRemoveAccount(address)": {
        "details": "Owner move account from the registry list",
        "params": {
          "account": "address to be removed from the registry"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/proxy/HoprDummyProxyForNetworkRegistry.sol:HoprDummyProxyForNetworkRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3972,
        "contract": "contracts/proxy/HoprDummyProxyForNetworkRegistry.sol:HoprDummyProxyForNetworkRegistry",
        "label": "registeredAccounts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}