{
  "address": "0xB85e0972BA068032cfe07d41885dfD5eD5b96ae9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minStake",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "nftRank",
          "type": "string"
        }
      ],
      "name": "NftTypeAndRankAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "nftRank",
          "type": "string"
        }
      ],
      "name": "NftTypeAndRankRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "nftRank",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maxRegistration",
          "type": "uint256"
        }
      ],
      "name": "SpecialNftTypeAndRankAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "nftRank",
          "type": "string"
        }
      ],
      "name": "SpecialNftTypeAndRankRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakeContract",
          "type": "address"
        }
      ],
      "name": "StakeContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "ThresholdUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "eligibleNftTypeAndRank",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "nftRank",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "maxAllowedRegistrations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maxRegistrationsPerSpecialNft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "nftRank",
          "type": "string"
        }
      ],
      "name": "ownerAddNftTypeAndRank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "nftTypes",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "nftRanks",
          "type": "string[]"
        }
      ],
      "name": "ownerBatchAddNftTypeAndRank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "nftTypes",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "nftRanks",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "maxRegistrations",
          "type": "uint256[]"
        }
      ],
      "name": "ownerBatchAddSpecialNftTypeAndRank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "nftTypes",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "nftRanks",
          "type": "string[]"
        }
      ],
      "name": "ownerBatchRemoveNftTypeAndRank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "nftTypes",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "nftRanks",
          "type": "string[]"
        }
      ],
      "name": "ownerBatchRemoveSpecialNftTypeAndRank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "nftRank",
          "type": "string"
        }
      ],
      "name": "ownerRemoveNftTypeAndRank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "ownerUpdateThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "specialNftTypeAndRank",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "nftRank",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeContract",
      "outputs": [
        {
          "internalType": "contract IHoprStake",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeContract",
          "type": "address"
        }
      ],
      "name": "updateStakeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe0c5e7bdc86b647493d702187894e76c01a78c41691804bf647734942a10e8f3",
  "receipt": {
    "to": null,
    "from": "0x4fF4e61052a4DFb1bE72866aB711AE08DD861976",
    "contractAddress": "0xB85e0972BA068032cfe07d41885dfD5eD5b96ae9",
    "transactionIndex": 65,
    "gasUsed": "1765579",
    "logsBloom": "0x
    "blockHash": "0xfdb5571295db311a713de96bec8b2d05b461210a4dc88f7db814239cbadfd441",
    "transactionHash": "0xe0c5e7bdc86b647493d702187894e76c01a78c41691804bf647734942a10e8f3",
    "logs": [
      {
        "transactionIndex": 65,
        "blockNumber": 7843364,
        "transactionHash": "0xe0c5e7bdc86b647493d702187894e76c01a78c41691804bf647734942a10e8f3",
        "address": "0xB85e0972BA068032cfe07d41885dfD5eD5b96ae9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ff4e61052a4dfb1be72866ab711ae08dd861976"
        ],
        "data": "0x",
        "logIndex": 236,
        "blockHash": "0xfdb5571295db311a713de96bec8b2d05b461210a4dc88f7db814239cbadfd441"
      },
      {
        "transactionIndex": 65,
        "blockNumber": 7843364,
        "transactionHash": "0xe0c5e7bdc86b647493d702187894e76c01a78c41691804bf647734942a10e8f3",
        "address": "0xB85e0972BA068032cfe07d41885dfD5eD5b96ae9",
        "topics": [
          "0x573bbfa679af6fdcdbd9cf191c5ef3e526599ac2bf75e9177d47adb8530b9c69",
          "0x0000000000000000000000003eb3e9f5e2f9c348d29506a950f1cb7030b7df0d"
        ],
        "data": "0x",
        "logIndex": 237,
        "blockHash": "0xfdb5571295db311a713de96bec8b2d05b461210a4dc88f7db814239cbadfd441"
      },
      {
        "transactionIndex": 65,
        "blockNumber": 7843364,
        "transactionHash": "0xe0c5e7bdc86b647493d702187894e76c01a78c41691804bf647734942a10e8f3",
        "address": "0xB85e0972BA068032cfe07d41885dfD5eD5b96ae9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004ff4e61052a4dfb1be72866ab711ae08dd861976",
          "0x0000000000000000000000004ff4e61052a4dfb1be72866ab711ae08dd861976"
        ],
        "data": "0x",
        "logIndex": 238,
        "blockHash": "0xfdb5571295db311a713de96bec8b2d05b461210a4dc88f7db814239cbadfd441"
      },
      {
        "transactionIndex": 65,
        "blockNumber": 7843364,
        "transactionHash": "0xe0c5e7bdc86b647493d702187894e76c01a78c41691804bf647734942a10e8f3",
        "address": "0xB85e0972BA068032cfe07d41885dfD5eD5b96ae9",
        "topics": [
          "0xadfa8ecb21b6962ebcd0adbd9ab985b7b4c5b5eb3b0dead683171565c7bfe171",
          "0x00000000000000000000000000000000000000000000003635c9adc5dea00000"
        ],
        "data": "0x",
        "logIndex": 239,
        "blockHash": "0xfdb5571295db311a713de96bec8b2d05b461210a4dc88f7db814239cbadfd441"
      }
    ],
    "blockNumber": 7843364,
    "cumulativeGasUsed": "12894640",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3EB3e9f5E2F9C348d29506A950f1cb7030B7df0D",
    "0x4fF4e61052a4DFb1bE72866aB711AE08DD861976",
    "1000000000000000000000"
  ],
  "numDeployments": 8,
  "solcInputHash": "5df65ebd0c28782c4516459e582e302e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nftRank\",\"type\":\"string\"}],\"name\":\"NftTypeAndRankAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nftRank\",\"type\":\"string\"}],\"name\":\"NftTypeAndRankRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nftRank\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxRegistration\",\"type\":\"uint256\"}],\"name\":\"SpecialNftTypeAndRankAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nftRank\",\"type\":\"string\"}],\"name\":\"SpecialNftTypeAndRankRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeContract\",\"type\":\"address\"}],\"name\":\"StakeContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ThresholdUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eligibleNftTypeAndRank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nftRank\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"maxAllowedRegistrations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxRegistrationsPerSpecialNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nftRank\",\"type\":\"string\"}],\"name\":\"ownerAddNftTypeAndRank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftTypes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"nftRanks\",\"type\":\"string[]\"}],\"name\":\"ownerBatchAddNftTypeAndRank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftTypes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"nftRanks\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxRegistrations\",\"type\":\"uint256[]\"}],\"name\":\"ownerBatchAddSpecialNftTypeAndRank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftTypes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"nftRanks\",\"type\":\"string[]\"}],\"name\":\"ownerBatchRemoveNftTypeAndRank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftTypes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"nftRanks\",\"type\":\"string[]\"}],\"name\":\"ownerBatchRemoveSpecialNftTypeAndRank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nftRank\",\"type\":\"string\"}],\"name\":\"ownerRemoveNftTypeAndRank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"ownerUpdateThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"specialNftTypeAndRank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nftRank\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeContract\",\"outputs\":[{\"internalType\":\"contract IHoprStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeContract\",\"type\":\"address\"}],\"name\":\"updateStakeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Proxy for staking (v2/v3/v4) contract, which an \\\"HoprNetworkRegistry requirement\\\" is implemented Two types of accounts are considered eligible: 1) Accounts with HoprBoost NFTs that are of the type and rank in the `eligibleNftTypeAndRank` array are considered as eligible, when their stake is also above the `stakeThreshold`. The maximum allowed registration of these accounts are defined by their stake. 2) Acounts with HoprBoost NFTs of `specialNftTypeAndRank`. Its maximum allowed registration is set by the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Set stake contract address, transfer ownership, and set the maximum registrations per special NFT to the default value: upperbound of of uint256.\"},\"maxAllowedRegistrations(address)\":{\"details\":\"Returns the maximum allowed registration a) for each special NFTs staked, consider their `maxRegistrationsPerSpecialNft` b) if NFT of eligibleNftTypeAndRank are redeemed, consider floor(`stake`/`threshold`) returns the maximum of the above mentioned categories\",\"params\":{\"account\":\"staker address that has a hopr nodes running\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerAddNftTypeAndRank(uint256,string)\":{\"details\":\"Owner adds/updates NFT type and rank to the list of eligibles NFTs.\",\"params\":{\"nftRank\":\"HoprBoost rank which is associated to the eligible NFT, in string\",\"nftType\":\"Type index of the eligible HoprBoost NFT\"}},\"ownerBatchAddNftTypeAndRank(uint256[],string[])\":{\"details\":\"Owner adds/updates NFT type and rank to the list of eligibles NFTs in batch.\",\"params\":{\"nftRanks\":\"Array of HOPR boost rank, which is associated to the eligible NFT, in string[]\",\"nftTypes\":\"Array of type indexes of the eligible HoprBoost NFT\"}},\"ownerBatchAddSpecialNftTypeAndRank(uint256[],string[],uint256[])\":{\"details\":\"Owner adds/updates NFT type and rank to the list of special NFTs in batch.\",\"params\":{\"maxRegistrations\":\"Array of maximum registration per special NFT type\",\"nftRanks\":\"Array of HOPR boost rank, which is associated to the special NFT, in string[]\",\"nftTypes\":\"Array of type indexes of the special HoprBoost NFT\"}},\"ownerBatchRemoveNftTypeAndRank(uint256[],string[])\":{\"details\":\"Owner removes from list of eligible NFTs in batch.\",\"params\":{\"nftRanks\":\"Array of HOPR boost rank, which is associated to the eligible NFT, in string[]\",\"nftTypes\":\"Array of type index of the eligible HoprBoost NFT\"}},\"ownerBatchRemoveSpecialNftTypeAndRank(uint256[],string[])\":{\"details\":\"Owner removes from list of special NFTs in batch.\",\"params\":{\"nftRanks\":\"Array of HOPR boost rank, which is associated to the special NFT, in string[]\",\"nftTypes\":\"Array of type index of the special HoprBoost NFT\"}},\"ownerRemoveNftTypeAndRank(uint256,string)\":{\"details\":\"Owner removes from list of eligible NFTs\",\"params\":{\"nftRank\":\"HoprBoost rank which is associated to the eligible NFT, in string\",\"nftType\":\"Type index of the eligible HoprBoost NFT\"}},\"ownerUpdateThreshold(uint256)\":{\"details\":\"Owner updates the minimal staking amount required for users to add themselves onto the HoprNetworkRegistry\",\"params\":{\"newThreshold\":\"Minimum stake of HOPR token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateStakeContract(address)\":{\"details\":\"update linked stake contract\",\"params\":{\"_stakeContract\":\"address of the staking contract from which registration info is obtained.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/proxy/HoprStakingProxyForNetworkRegistry.sol\":\"HoprStakingProxyForNetworkRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"contracts/IHoprNetworkRegistryRequirement.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface for HoprNetworkRegistryProxy\\n * @dev Network Registry contract (NR) delegates its eligibility check to Network\\n * Registry Proxy (NR Proxy) contract. This interface must be implemented by the\\n * NR Proxy contract.\\n */\\ninterface IHoprNetworkRegistryRequirement {\\n  /**\\n   * @dev Get the maximum number of nodes' peer ids that an account can register.\\n   * This check is only performed when registering new nodes, i.e. if the number gets\\n   * reduced later, it does not affect registered nodes.\\n   *\\n   * @param account Address that can register other nodes\\n   */\\n  function maxAllowedRegistrations(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7f7d4fd00d9c81cd5707c70e74ac46444a44b7f63e06dd2dcab56483b213d125\",\"license\":\"GPL-3.0\"},\"contracts/proxy/HoprStakingProxyForNetworkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\nimport '../IHoprNetworkRegistryRequirement.sol';\\n\\n/**\\n * @dev Interface for staking contract\\n * source code at https://github.com/hoprnet/hopr-stake/tree/main/contracts\\n * staking v2 is deployed at https://blockscout.com/xdai/mainnet/address/0x2cDD13ddB0346E0F620C8E5826Da5d7230341c6E\\n * staking v3 is deployed at https://blockscout.com/xdai/mainnet/address/0xae933331ef0bE122f9499512d3ed4Fa3896DCf20\\n */\\ncontract IHoprStake {\\n  function stakedHoprTokens(address _account) public view returns (uint256) {}\\n\\n  function isNftTypeAndRankRedeemed2(\\n    uint256 nftTypeIndex,\\n    string memory nftRank,\\n    address hodler\\n  ) external view returns (bool) {}\\n}\\n\\n/**\\n * @dev Proxy for staking (v2/v3/v4) contract, which an \\\"HoprNetworkRegistry requirement\\\" is implemented\\n * Two types of accounts are considered eligible:\\n * 1) Accounts with HoprBoost NFTs that are of the type and rank in the `eligibleNftTypeAndRank` array\\n * are considered as eligible, when their stake is also above the `stakeThreshold`. The maximum allowed\\n * registration of these accounts are defined by their stake.\\n * 2) Acounts with HoprBoost NFTs of `specialNftTypeAndRank`. Its maximum allowed registration is set\\n * by the owner.\\n */\\ncontract HoprStakingProxyForNetworkRegistry is IHoprNetworkRegistryRequirement, Ownable {\\n  using Math for uint256;\\n\\n  struct NftTypeAndRank {\\n    uint256 nftType;\\n    string nftRank;\\n  }\\n\\n  IHoprStake public stakeContract; // contract of HoprStake contract\\n  // minimum amount HOPR tokens being staked in the staking contract to be considered eligible\\n  // for every stakeThreshold, one peer id can be registered.\\n  uint256 public stakeThreshold;\\n  NftTypeAndRank[] public eligibleNftTypeAndRank; // list of NFTs whose owner are considered as eligible to the network if the `stakeThreshold` is also met\\n  uint256[] public maxRegistrationsPerSpecialNft; // for holders of special NFT, it's the cap of peer ids one address can register.\\n  NftTypeAndRank[] public specialNftTypeAndRank; // list of NFTs whose owner are considered as eligible to the network without meeting the `stakeThreshold`, e.g. \\\"Network_registry NFT\\\"\\n\\n  event NftTypeAndRankAdded(uint256 indexed nftType, string nftRank); // emit when a new NFT type and rank gets included in the eligibility list\\n  event NftTypeAndRankRemoved(uint256 indexed nftType, string nftRank); // emit when a NFT type and rank gets removed from the eligibility list\\n  event SpecialNftTypeAndRankAdded(uint256 indexed nftType, string nftRank, uint256 indexed maxRegistration); // emit when a new special type and rank of NFT gets included in the eligibility list\\n  event SpecialNftTypeAndRankRemoved(uint256 indexed nftType, string nftRank); // emit when a special type and rank of NFT gets removed from the eligibility list\\n  event ThresholdUpdated(uint256 indexed threshold); // emit when the staking threshold gets updated.\\n  event StakeContractUpdated(address indexed stakeContract); // emit when the staking threshold gets updated.\\n\\n  /**\\n   * @dev Set stake contract address, transfer ownership, and set the maximum registrations per\\n   * special NFT to the default value: upperbound of of uint256.\\n   */\\n  constructor(\\n    address _stakeContract,\\n    address _newOwner,\\n    uint256 _minStake\\n  ) {\\n    _updateStakeContract(_stakeContract);\\n    _transferOwnership(_newOwner);\\n    stakeThreshold = _minStake;\\n    emit ThresholdUpdated(stakeThreshold);\\n  }\\n\\n  /**\\n   * @dev Returns the maximum allowed registration\\n   * a) for each special NFTs staked, consider their `maxRegistrationsPerSpecialNft`\\n   * b) if NFT of eligibleNftTypeAndRank are redeemed, consider floor(`stake`/`threshold`)\\n   * returns the maximum of the above mentioned categories\\n   * @param account staker address that has a hopr nodes running\\n   */\\n  function maxAllowedRegistrations(address account) external view returns (uint256) {\\n    uint256 allowedRegistration;\\n    // if the account owns a special NFT, requirement is fulfilled\\n    for (uint256 i = 0; i < specialNftTypeAndRank.length; i++) {\\n      NftTypeAndRank memory eligible = specialNftTypeAndRank[i];\\n      if (stakeContract.isNftTypeAndRankRedeemed2(eligible.nftType, eligible.nftRank, account)) {\\n        allowedRegistration = allowedRegistration.max(maxRegistrationsPerSpecialNft[i]);\\n      }\\n    }\\n\\n    // when no special NFT is present, the account needs to 1) reach the minimum stake, 2) own an eligible NFT\\n    // for self-claiming accounts, check against the current criteria\\n    uint256 amount = stakeContract.stakedHoprTokens(account);\\n    if (amount < stakeThreshold) {\\n      // threshold does not meet\\n      return allowedRegistration;\\n    }\\n    // check on regular eligible NFTs.\\n    for (uint256 i = 0; i < eligibleNftTypeAndRank.length; i++) {\\n      NftTypeAndRank memory eligible = eligibleNftTypeAndRank[i];\\n      if (stakeContract.isNftTypeAndRankRedeemed2(eligible.nftType, eligible.nftRank, account)) {\\n        allowedRegistration = allowedRegistration.max(amount / stakeThreshold);\\n      }\\n    }\\n\\n    return allowedRegistration;\\n  }\\n\\n  /**\\n   * @dev Owner adds/updates NFT type and rank to the list of special NFTs in batch.\\n   * @param nftTypes Array of type indexes of the special HoprBoost NFT\\n   * @param nftRanks Array of HOPR boost rank, which is associated to the special NFT, in string[]\\n   * @param maxRegistrations Array of maximum registration per special NFT type\\n   */\\n  function ownerBatchAddSpecialNftTypeAndRank(\\n    uint256[] calldata nftTypes,\\n    string[] calldata nftRanks,\\n    uint256[] calldata maxRegistrations\\n  ) external onlyOwner {\\n    require(\\n      nftTypes.length == nftRanks.length,\\n      'HoprStakingProxyForNetworkRegistry: ownerBatchAddSpecialNftTypeAndRank nftTypes and nftRanks lengths mismatch'\\n    );\\n    require(\\n      nftTypes.length == maxRegistrations.length,\\n      'HoprStakingProxyForNetworkRegistry: ownerBatchAddSpecialNftTypeAndRank nftTypes and maxRegistrations lengths mismatch'\\n    );\\n    for (uint256 index = 0; index < nftTypes.length; index++) {\\n      _addSpecialNftTypeAndRank(nftTypes[index], nftRanks[index], maxRegistrations[index]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Owner removes from list of special NFTs in batch.\\n   * @param nftTypes Array of type index of the special HoprBoost NFT\\n   * @param nftRanks Array of HOPR boost rank, which is associated to the special NFT, in string[]\\n   */\\n  function ownerBatchRemoveSpecialNftTypeAndRank(uint256[] calldata nftTypes, string[] calldata nftRanks)\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      nftTypes.length == nftRanks.length,\\n      'HoprStakingProxyForNetworkRegistry: ownerBatchRemoveSpecialNftTypeAndRank lengths mismatch'\\n    );\\n    for (uint256 index = 0; index < nftTypes.length; index++) {\\n      _removeSpecialNftTypeAndRank(nftTypes[index], nftRanks[index]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Owner adds/updates NFT type and rank to the list of eligibles NFTs in batch.\\n   * @param nftTypes Array of type indexes of the eligible HoprBoost NFT\\n   * @param nftRanks Array of HOPR boost rank, which is associated to the eligible NFT, in string[]\\n   */\\n  function ownerBatchAddNftTypeAndRank(uint256[] calldata nftTypes, string[] calldata nftRanks) external onlyOwner {\\n    require(\\n      nftTypes.length == nftRanks.length,\\n      'HoprStakingProxyForNetworkRegistry: ownerBatchAddNftTypeAndRank lengths mismatch'\\n    );\\n    for (uint256 index = 0; index < nftTypes.length; index++) {\\n      _addNftTypeAndRank(nftTypes[index], nftRanks[index]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Owner removes from list of eligible NFTs in batch.\\n   * @param nftTypes Array of type index of the eligible HoprBoost NFT\\n   * @param nftRanks Array of HOPR boost rank, which is associated to the eligible NFT, in string[]\\n   */\\n  function ownerBatchRemoveNftTypeAndRank(uint256[] calldata nftTypes, string[] calldata nftRanks) external onlyOwner {\\n    require(\\n      nftTypes.length == nftRanks.length,\\n      'HoprStakingProxyForNetworkRegistry: ownerBatchRemoveNftTypeAndRank lengths mismatch'\\n    );\\n    for (uint256 index = 0; index < nftTypes.length; index++) {\\n      _removeNftTypeAndRank(nftTypes[index], nftRanks[index]);\\n    }\\n  }\\n\\n  /**\\n   * @dev Owner adds/updates NFT type and rank to the list of eligibles NFTs.\\n   * @param nftType Type index of the eligible HoprBoost NFT\\n   * @param nftRank HoprBoost rank which is associated to the eligible NFT, in string\\n   */\\n  function ownerAddNftTypeAndRank(uint256 nftType, string memory nftRank) external onlyOwner {\\n    _addNftTypeAndRank(nftType, nftRank);\\n  }\\n\\n  /**\\n   * @dev Owner removes from list of eligible NFTs\\n   * @param nftType Type index of the eligible HoprBoost NFT\\n   * @param nftRank HoprBoost rank which is associated to the eligible NFT, in string\\n   */\\n  function ownerRemoveNftTypeAndRank(uint256 nftType, string memory nftRank) external onlyOwner {\\n    _removeNftTypeAndRank(nftType, nftRank);\\n  }\\n\\n  /**\\n   * @dev Owner updates the minimal staking amount required for users to add themselves onto the HoprNetworkRegistry\\n   * @param newThreshold Minimum stake of HOPR token\\n   */\\n  function ownerUpdateThreshold(uint256 newThreshold) external onlyOwner {\\n    require(\\n      stakeThreshold != newThreshold,\\n      'HoprStakingProxyForNetworkRegistry: try to update with the same staking threshold'\\n    );\\n    stakeThreshold = newThreshold;\\n    emit ThresholdUpdated(stakeThreshold);\\n  }\\n\\n  /**\\n   * @dev update linked stake contract\\n   * @param _stakeContract address of the staking contract from which registration info is obtained.\\n   */\\n  function updateStakeContract(address _stakeContract) external {\\n    _updateStakeContract(_stakeContract);\\n  }\\n\\n  /**\\n   * @dev adds NFT type and rank to the list of special NFTs.\\n   * @param nftType Type index of the special HoprBoost NFT\\n   * @param nftRank HoprBoost rank which is associated to the special NFT, in string\\n   * @param maxRegistration maximum registration of HOPR node per special NFT\\n   */\\n  function _addSpecialNftTypeAndRank(\\n    uint256 nftType,\\n    string memory nftRank,\\n    uint256 maxRegistration\\n  ) private {\\n    uint256 i = 0;\\n    for (i; i < specialNftTypeAndRank.length; i++) {\\n      // walk through all the types\\n      if (\\n        specialNftTypeAndRank[i].nftType == nftType &&\\n        keccak256(bytes(specialNftTypeAndRank[i].nftRank)) == keccak256(bytes(nftRank))\\n      ) {\\n        // already exist, overwrite maxRegistration\\n        maxRegistrationsPerSpecialNft[i] = maxRegistration;\\n      }\\n    }\\n    specialNftTypeAndRank.push(NftTypeAndRank({nftType: nftType, nftRank: nftRank}));\\n    maxRegistrationsPerSpecialNft.push(maxRegistration);\\n    emit SpecialNftTypeAndRankAdded(nftType, nftRank, maxRegistration);\\n  }\\n\\n  /**\\n   * @dev Remove from list of special NFTs\\n   * @param nftType Type index of the special HoprBoost NFT\\n   * @param nftRank HoprBoost rank which is associated to the special NFT, in string\\n   */\\n  function _removeSpecialNftTypeAndRank(uint256 nftType, string memory nftRank) private {\\n    // walk through\\n    for (uint256 i = 0; i < specialNftTypeAndRank.length; i++) {\\n      if (\\n        specialNftTypeAndRank[i].nftType == nftType &&\\n        keccak256(bytes(specialNftTypeAndRank[i].nftRank)) == keccak256(bytes(nftRank))\\n      ) {\\n        // overwrite with the last element in the array\\n        specialNftTypeAndRank[i] = specialNftTypeAndRank[specialNftTypeAndRank.length - 1];\\n        specialNftTypeAndRank.pop();\\n        maxRegistrationsPerSpecialNft[i] = maxRegistrationsPerSpecialNft[maxRegistrationsPerSpecialNft.length - 1];\\n        maxRegistrationsPerSpecialNft.pop();\\n        emit SpecialNftTypeAndRankRemoved(nftType, nftRank);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev adds NFT type and rank to the list of eligibles NFTs.\\n   * @param nftType Type index of the eligible HoprBoost NFT\\n   * @param nftRank HoprBoost rank which is associated to the eligible NFT, in string\\n   */\\n  function _addNftTypeAndRank(uint256 nftType, string memory nftRank) private {\\n    uint256 i = 0;\\n    for (i; i < eligibleNftTypeAndRank.length; i++) {\\n      // walk through all the types\\n      if (\\n        eligibleNftTypeAndRank[i].nftType == nftType &&\\n        keccak256(bytes(eligibleNftTypeAndRank[i].nftRank)) == keccak256(bytes(nftRank))\\n      ) {\\n        // already exist;\\n        return;\\n      }\\n    }\\n    eligibleNftTypeAndRank.push(NftTypeAndRank({nftType: nftType, nftRank: nftRank}));\\n    emit NftTypeAndRankAdded(nftType, nftRank);\\n  }\\n\\n  /**\\n   * @dev Remove from list of eligible NFTs\\n   * @param nftType Type index of the eligible HoprBoost NFT\\n   * @param nftRank HoprBoost rank which is associated to the eligible NFT, in string\\n   */\\n  function _removeNftTypeAndRank(uint256 nftType, string memory nftRank) private {\\n    // walk through\\n    for (uint256 i = 0; i < eligibleNftTypeAndRank.length; i++) {\\n      if (\\n        eligibleNftTypeAndRank[i].nftType == nftType &&\\n        keccak256(bytes(eligibleNftTypeAndRank[i].nftRank)) == keccak256(bytes(nftRank))\\n      ) {\\n        // overwrite with the last element in the array\\n        eligibleNftTypeAndRank[i] = eligibleNftTypeAndRank[eligibleNftTypeAndRank.length - 1];\\n        eligibleNftTypeAndRank.pop();\\n        emit NftTypeAndRankRemoved(nftType, nftRank);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Update stake contract address\\n   * @param _stakeContract address of the staking contract\\n   */\\n  function _updateStakeContract(address _stakeContract) private {\\n    stakeContract = IHoprStake(_stakeContract);\\n    emit StakeContractUpdated(_stakeContract);\\n  }\\n}\\n\",\"keccak256\":\"0xd402aef907204b8b40a8406a1df2639e7cb73319cb8f6d2f59daae9fcadd59f2\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001f2338038062001f23833981016040819052620000349162000145565b6200003f336200008e565b6200004a83620000de565b62000055826200008e565b600281905560405181907fadfa8ecb21b6962ebcd0adbd9ab985b7b4c5b5eb3b0dead683171565c7bfe17190600090a250505062000186565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f573bbfa679af6fdcdbd9cf191c5ef3e526599ac2bf75e9177d47adb8530b9c6990600090a250565b80516001600160a01b03811681146200014057600080fd5b919050565b6000806000606084860312156200015b57600080fd5b620001668462000128565b9250620001766020850162000128565b9150604084015190509250925092565b611d8d80620001966000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80639b97076f116100a2578063de626c0e11610071578063de626c0e14610222578063ee50c7c414610235578063f11f77f914610248578063f2fde38b14610251578063fb66ac571461026457600080fd5b80639b97076f146101c8578063b05e8ba9146101db578063b3544e82146101ee578063ba1cef231461020f57600080fd5b80636a3b64b6116100de5780636a3b64b614610189578063715018a61461019c578063830c6cc2146101a45780638da5cb5b146101b757600080fd5b80631a186227146101105780632c3ec80b14610140578063506472cc14610161578063654251eb14610176575b600080fd5b600154610123906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61015361014e3660046117fc565b610277565b604051610137929190611862565b61017461016f3660046118cf565b61032f565b005b610174610184366004611951565b61047c565b610174610197366004611a0c565b6104b4565b6101746106df565b6101746101b2366004611aa6565b610715565b6000546001600160a01b0316610123565b6101746101d6366004611951565b610721565b6101746101e93660046118cf565b610755565b6102016101fc366004611aa6565b61089f565b604051908152602001610137565b61020161021d3660046117fc565b610c81565b6101536102303660046117fc565b610ca2565b6101746102433660046117fc565b610cb2565b61020160025481565b61017461025f366004611aa6565b610d8f565b6101746102723660046118cf565b610e27565b6005818154811061028757600080fd5b600091825260209091206002909102018054600182018054919350906102ac90611acf565b80601f01602080910402602001604051908101604052809291908181526020018280546102d890611acf565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b5050505050905082565b6000546001600160a01b031633146103625760405162461bcd60e51b815260040161035990611b0a565b60405180910390fd5b8281146103de5760405162461bcd60e51b81526020600482015260506024820152600080516020611d3883398151915260448201527f72793a206f776e657242617463684164644e667454797065416e6452616e6b2060648201526f0d8cadccee8d0e640dad2e6dac2e8c6d60831b608482015260a401610359565b60005b83811015610475576104638585838181106103fe576103fe611b3f565b9050602002013584848481811061041757610417611b3f565b90506020028101906104299190611b55565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f6792505050565b8061046d81611bb2565b9150506103e1565b5050505050565b6000546001600160a01b031633146104a65760405162461bcd60e51b815260040161035990611b0a565b6104b082826110c8565b5050565b6000546001600160a01b031633146104de5760405162461bcd60e51b815260040161035990611b0a565b84831461057d5760405162461bcd60e51b815260206004820152606d6024820152600080516020611d3883398151915260448201527f72793a206f776e657242617463684164645370656369616c4e6674547970654160648201527f6e6452616e6b206e6674547970657320616e64206e667452616e6b73206c656e60848201526c0cee8d0e640dad2e6dac2e8c6d609b1b60a482015260c401610359565b8481146106245760405162461bcd60e51b81526020600482015260756024820152600080516020611d3883398151915260448201527f72793a206f776e657242617463684164645370656369616c4e6674547970654160648201527f6e6452616e6b206e6674547970657320616e64206d61785265676973747261746084820152740d2dedce640d8cadccee8d0e640dad2e6dac2e8c6d605b1b60a482015260c401610359565b60005b858110156106d6576106c487878381811061064457610644611b3f565b9050602002013586868481811061065d5761065d611b3f565b905060200281019061066f9190611b55565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791508690508181106106b8576106b8611b3f565b90506020020135611252565b806106ce81611bb2565b915050610627565b50505050505050565b6000546001600160a01b031633146107095760405162461bcd60e51b815260040161035990611b0a565b6107136000611409565b565b61071e81611459565b50565b6000546001600160a01b0316331461074b5760405162461bcd60e51b815260040161035990611b0a565b6104b08282610f67565b6000546001600160a01b0316331461077f5760405162461bcd60e51b815260040161035990611b0a565b8281146108085760405162461bcd60e51b815260206004820152605a6024820152600080516020611d3883398151915260448201527f72793a206f776e6572426174636852656d6f76655370656369616c4e6674547960648201527f7065416e6452616e6b206c656e67746873206d69736d61746368000000000000608482015260a401610359565b60005b838110156104755761088d85858381811061082857610828611b3f565b9050602002013584848481811061084157610841611b3f565b90506020028101906108539190611b55565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114a392505050565b8061089781611bb2565b91505061080b565b60008060005b600554811015610a50576000600582815481106108c4576108c4611b3f565b9060005260206000209060020201604051806040016040529081600082015481526020016001820180546108f790611acf565b80601f016020809104026020016040519081016040528092919081815260200182805461092390611acf565b80156109705780601f1061094557610100808354040283529160200191610970565b820191906000526020600020905b81548152906001019060200180831161095357829003601f168201915b505050919092525050600154825160208401516040516396a9cd7d60e01b81529495506001600160a01b03909216936396a9cd7d93506109b592908a90600401611bcd565b60206040518083038186803b1580156109cd57600080fd5b505afa1580156109e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a059190611bfe565b15610a3d57610a3a60048381548110610a2057610a20611b3f565b90600052602060002001548461169990919063ffffffff16565b92505b5080610a4881611bb2565b9150506108a5565b5060015460405163f978fff160e01b81526001600160a01b038581166004830152600092169063f978fff19060240160206040518083038186803b158015610a9757600080fd5b505afa158015610aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acf9190611c20565b9050600254811015610ae2575092915050565b60005b600354811015610c7857600060038281548110610b0457610b04611b3f565b906000526020600020906002020160405180604001604052908160008201548152602001600182018054610b3790611acf565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6390611acf565b8015610bb05780601f10610b8557610100808354040283529160200191610bb0565b820191906000526020600020905b815481529060010190602001808311610b9357829003601f168201915b505050919092525050600154825160208401516040516396a9cd7d60e01b81529495506001600160a01b03909216936396a9cd7d9350610bf592908b90600401611bcd565b60206040518083038186803b158015610c0d57600080fd5b505afa158015610c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c459190611bfe565b15610c6557610c6260025484610c5b9190611c39565b8590611699565b93505b5080610c7081611bb2565b915050610ae5565b50909392505050565b60048181548110610c9157600080fd5b600091825260209091200154905081565b6003818154811061028757600080fd5b6000546001600160a01b03163314610cdc5760405162461bcd60e51b815260040161035990611b0a565b806002541415610d5c5760405162461bcd60e51b81526020600482015260516024820152600080516020611d3883398151915260448201527f72793a2074727920746f207570646174652077697468207468652073616d65206064820152701cdd185ada5b99c81d1a1c995cda1bdb19607a1b608482015260a401610359565b600281905560405181907fadfa8ecb21b6962ebcd0adbd9ab985b7b4c5b5eb3b0dead683171565c7bfe17190600090a250565b6000546001600160a01b03163314610db95760405162461bcd60e51b815260040161035990611b0a565b6001600160a01b038116610e1e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610359565b61071e81611409565b6000546001600160a01b03163314610e515760405162461bcd60e51b815260040161035990611b0a565b828114610ed05760405162461bcd60e51b81526020600482015260536024820152600080516020611d3883398151915260448201527f72793a206f776e6572426174636852656d6f76654e667454797065416e6452616064820152720dcd640d8cadccee8d0e640dad2e6dac2e8c6d606b1b608482015260a401610359565b60005b8381101561047557610f55858583818110610ef057610ef0611b3f565b90506020020135848484818110610f0957610f09611b3f565b9050602002810190610f1b9190611b55565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110c892505050565b80610f5f81611bb2565b915050610ed3565b60005b600354811015611001578260038281548110610f8857610f88611b3f565b906000526020600020906002020160000154148015610fe55750818051906020012060038281548110610fbd57610fbd611b3f565b9060005260206000209060020201600101604051610fdb9190611c5b565b6040518091039020145b15610fef57505050565b80610ff981611bb2565b915050610f6a565b60408051808201909152838152602080820184815260038054600181018255600091909152835160029091027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b8101918255915180519193611088937fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c01929101906116b2565b505050827f2360ee3e77485441cfa07e30e8dc5b031fac38455647c89a763434f58733fcc1836040516110bb9190611cf7565b60405180910390a2505050565b60005b60035481101561124d5782600382815481106110e9576110e9611b3f565b906000526020600020906002020160000154148015611146575081805190602001206003828154811061111e5761111e611b3f565b906000526020600020906002020160010160405161113c9190611c5b565b6040518091039020145b1561123b576003805461115b90600190611d0a565b8154811061116b5761116b611b3f565b90600052602060002090600202016003828154811061118c5761118c611b3f565b90600052602060002090600202016000820154816000015560018201816001019080546111b890611acf565b6111c3929190611736565b5090505060038054806111d8576111d8611d21565b600082815260208120600260001990930192830201818155906111fe60018301826117b1565b50509055827fb1323e42d97b2b3d45f9d4641bf4b6b3f9d0d01e90832ae7b7413109b7a5d347836040516112329190611cf7565b60405180910390a25b8061124581611bb2565b9150506110cb565b505050565b60005b60055481101561130857836005828154811061127357611273611b3f565b9060005260206000209060020201600001541480156112d057508280519060200120600582815481106112a8576112a8611b3f565b90600052602060002090600202016001016040516112c69190611c5b565b6040518091039020145b156112f65781600482815481106112e9576112e9611b3f565b6000918252602090912001555b8061130081611bb2565b915050611255565b60408051808201909152848152602080820185815260058054600181018255600091909152835160029091027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0810191825591518051919361138f937f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db101929101906116b2565b5050600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0183905550604051829085907fe43bf5f5f8a1211930e5726ba0abceacb1748f97b2966db30a818ba10961cbcc906113fb908790611cf7565b60405180910390a350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f573bbfa679af6fdcdbd9cf191c5ef3e526599ac2bf75e9177d47adb8530b9c6990600090a250565b60005b60055481101561124d5782600582815481106114c4576114c4611b3f565b90600052602060002090600202016000015414801561152157508180519060200120600582815481106114f9576114f9611b3f565b90600052602060002090600202016001016040516115179190611c5b565b6040518091039020145b15611687576005805461153690600190611d0a565b8154811061154657611546611b3f565b90600052602060002090600202016005828154811061156757611567611b3f565b906000526020600020906002020160008201548160000155600182018160010190805461159390611acf565b61159e929190611736565b5090505060058054806115b3576115b3611d21565b600082815260208120600260001990930192830201818155906115d960018301826117b1565b50509055600480546115ed90600190611d0a565b815481106115fd576115fd611b3f565b90600052602060002001546004828154811061161b5761161b611b3f565b600091825260209091200155600480548061163857611638611d21565b60019003818190600052602060002001600090559055827fdb75199103504bd1d3653de758d4295bf00d4587e1d53dfc114464cc47ed97b78360405161167e9190611cf7565b60405180910390a25b8061169181611bb2565b9150506114a6565b6000818310156116a957816116ab565b825b9392505050565b8280546116be90611acf565b90600052602060002090601f0160209004810192826116e05760008555611726565b82601f106116f957805160ff1916838001178555611726565b82800160010185558215611726579182015b8281111561172657825182559160200191906001019061170b565b506117329291506117e7565b5090565b82805461174290611acf565b90600052602060002090601f0160209004810192826117645760008555611726565b82601f106117755780548555611726565b8280016001018555821561172657600052602060002091601f016020900482015b82811115611726578254825591600101919060010190611796565b5080546117bd90611acf565b6000825580601f106117cd575050565b601f01602090049060005260206000209081019061071e91905b5b8082111561173257600081556001016117e8565b60006020828403121561180e57600080fd5b5035919050565b6000815180845260005b8181101561183b5760208185018101518683018201520161181f565b8181111561184d576000602083870101525b50601f01601f19169290920160200192915050565b82815260406020820152600061187b6040830184611815565b949350505050565b60008083601f84011261189557600080fd5b50813567ffffffffffffffff8111156118ad57600080fd5b6020830191508360208260051b85010111156118c857600080fd5b9250929050565b600080600080604085870312156118e557600080fd5b843567ffffffffffffffff808211156118fd57600080fd5b61190988838901611883565b9096509450602087013591508082111561192257600080fd5b5061192f87828801611883565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561196457600080fd5b82359150602083013567ffffffffffffffff8082111561198357600080fd5b818501915085601f83011261199757600080fd5b8135818111156119a9576119a961193b565b604051601f8201601f19908116603f011681019083821181831017156119d1576119d161193b565b816040528281528860208487010111156119ea57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060008060008060608789031215611a2557600080fd5b863567ffffffffffffffff80821115611a3d57600080fd5b611a498a838b01611883565b90985096506020890135915080821115611a6257600080fd5b611a6e8a838b01611883565b90965094506040890135915080821115611a8757600080fd5b50611a9489828a01611883565b979a9699509497509295939492505050565b600060208284031215611ab857600080fd5b81356001600160a01b03811681146116ab57600080fd5b600181811c90821680611ae357607f821691505b60208210811415611b0457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112611b6c57600080fd5b83018035915067ffffffffffffffff821115611b8757600080fd5b6020019150368190038213156118c857600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611bc657611bc6611b9c565b5060010190565b838152606060208201526000611be66060830185611815565b905060018060a01b0383166040830152949350505050565b600060208284031215611c1057600080fd5b815180151581146116ab57600080fd5b600060208284031215611c3257600080fd5b5051919050565b600082611c5657634e487b7160e01b600052601260045260246000fd5b500490565b600080835481600182811c915080831680611c7757607f831692505b6020808410821415611c9757634e487b7160e01b86526022600452602486fd5b818015611cab5760018114611cbc57611ce9565b60ff19861689528489019650611ce9565b60008a81526020902060005b86811015611ce15781548b820152908501908301611cc8565b505084890196505b509498975050505050505050565b6020815260006116ab6020830184611815565b600082821015611d1c57611d1c611b9c565b500390565b634e487b7160e01b600052603160045260246000fdfe486f70725374616b696e6750726f7879466f724e6574776f726b526567697374a2646970667358221220dcd34ef27e9b40360ea54e1a2beeaf794941c950d1d63a4586df2956efce8a3c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80639b97076f116100a2578063de626c0e11610071578063de626c0e14610222578063ee50c7c414610235578063f11f77f914610248578063f2fde38b14610251578063fb66ac571461026457600080fd5b80639b97076f146101c8578063b05e8ba9146101db578063b3544e82146101ee578063ba1cef231461020f57600080fd5b80636a3b64b6116100de5780636a3b64b614610189578063715018a61461019c578063830c6cc2146101a45780638da5cb5b146101b757600080fd5b80631a186227146101105780632c3ec80b14610140578063506472cc14610161578063654251eb14610176575b600080fd5b600154610123906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61015361014e3660046117fc565b610277565b604051610137929190611862565b61017461016f3660046118cf565b61032f565b005b610174610184366004611951565b61047c565b610174610197366004611a0c565b6104b4565b6101746106df565b6101746101b2366004611aa6565b610715565b6000546001600160a01b0316610123565b6101746101d6366004611951565b610721565b6101746101e93660046118cf565b610755565b6102016101fc366004611aa6565b61089f565b604051908152602001610137565b61020161021d3660046117fc565b610c81565b6101536102303660046117fc565b610ca2565b6101746102433660046117fc565b610cb2565b61020160025481565b61017461025f366004611aa6565b610d8f565b6101746102723660046118cf565b610e27565b6005818154811061028757600080fd5b600091825260209091206002909102018054600182018054919350906102ac90611acf565b80601f01602080910402602001604051908101604052809291908181526020018280546102d890611acf565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b5050505050905082565b6000546001600160a01b031633146103625760405162461bcd60e51b815260040161035990611b0a565b60405180910390fd5b8281146103de5760405162461bcd60e51b81526020600482015260506024820152600080516020611d3883398151915260448201527f72793a206f776e657242617463684164644e667454797065416e6452616e6b2060648201526f0d8cadccee8d0e640dad2e6dac2e8c6d60831b608482015260a401610359565b60005b83811015610475576104638585838181106103fe576103fe611b3f565b9050602002013584848481811061041757610417611b3f565b90506020028101906104299190611b55565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f6792505050565b8061046d81611bb2565b9150506103e1565b5050505050565b6000546001600160a01b031633146104a65760405162461bcd60e51b815260040161035990611b0a565b6104b082826110c8565b5050565b6000546001600160a01b031633146104de5760405162461bcd60e51b815260040161035990611b0a565b84831461057d5760405162461bcd60e51b815260206004820152606d6024820152600080516020611d3883398151915260448201527f72793a206f776e657242617463684164645370656369616c4e6674547970654160648201527f6e6452616e6b206e6674547970657320616e64206e667452616e6b73206c656e60848201526c0cee8d0e640dad2e6dac2e8c6d609b1b60a482015260c401610359565b8481146106245760405162461bcd60e51b81526020600482015260756024820152600080516020611d3883398151915260448201527f72793a206f776e657242617463684164645370656369616c4e6674547970654160648201527f6e6452616e6b206e6674547970657320616e64206d61785265676973747261746084820152740d2dedce640d8cadccee8d0e640dad2e6dac2e8c6d605b1b60a482015260c401610359565b60005b858110156106d6576106c487878381811061064457610644611b3f565b9050602002013586868481811061065d5761065d611b3f565b905060200281019061066f9190611b55565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508791508690508181106106b8576106b8611b3f565b90506020020135611252565b806106ce81611bb2565b915050610627565b50505050505050565b6000546001600160a01b031633146107095760405162461bcd60e51b815260040161035990611b0a565b6107136000611409565b565b61071e81611459565b50565b6000546001600160a01b0316331461074b5760405162461bcd60e51b815260040161035990611b0a565b6104b08282610f67565b6000546001600160a01b0316331461077f5760405162461bcd60e51b815260040161035990611b0a565b8281146108085760405162461bcd60e51b815260206004820152605a6024820152600080516020611d3883398151915260448201527f72793a206f776e6572426174636852656d6f76655370656369616c4e6674547960648201527f7065416e6452616e6b206c656e67746873206d69736d61746368000000000000608482015260a401610359565b60005b838110156104755761088d85858381811061082857610828611b3f565b9050602002013584848481811061084157610841611b3f565b90506020028101906108539190611b55565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114a392505050565b8061089781611bb2565b91505061080b565b60008060005b600554811015610a50576000600582815481106108c4576108c4611b3f565b9060005260206000209060020201604051806040016040529081600082015481526020016001820180546108f790611acf565b80601f016020809104026020016040519081016040528092919081815260200182805461092390611acf565b80156109705780601f1061094557610100808354040283529160200191610970565b820191906000526020600020905b81548152906001019060200180831161095357829003601f168201915b505050919092525050600154825160208401516040516396a9cd7d60e01b81529495506001600160a01b03909216936396a9cd7d93506109b592908a90600401611bcd565b60206040518083038186803b1580156109cd57600080fd5b505afa1580156109e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a059190611bfe565b15610a3d57610a3a60048381548110610a2057610a20611b3f565b90600052602060002001548461169990919063ffffffff16565b92505b5080610a4881611bb2565b9150506108a5565b5060015460405163f978fff160e01b81526001600160a01b038581166004830152600092169063f978fff19060240160206040518083038186803b158015610a9757600080fd5b505afa158015610aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acf9190611c20565b9050600254811015610ae2575092915050565b60005b600354811015610c7857600060038281548110610b0457610b04611b3f565b906000526020600020906002020160405180604001604052908160008201548152602001600182018054610b3790611acf565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6390611acf565b8015610bb05780601f10610b8557610100808354040283529160200191610bb0565b820191906000526020600020905b815481529060010190602001808311610b9357829003601f168201915b505050919092525050600154825160208401516040516396a9cd7d60e01b81529495506001600160a01b03909216936396a9cd7d9350610bf592908b90600401611bcd565b60206040518083038186803b158015610c0d57600080fd5b505afa158015610c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c459190611bfe565b15610c6557610c6260025484610c5b9190611c39565b8590611699565b93505b5080610c7081611bb2565b915050610ae5565b50909392505050565b60048181548110610c9157600080fd5b600091825260209091200154905081565b6003818154811061028757600080fd5b6000546001600160a01b03163314610cdc5760405162461bcd60e51b815260040161035990611b0a565b806002541415610d5c5760405162461bcd60e51b81526020600482015260516024820152600080516020611d3883398151915260448201527f72793a2074727920746f207570646174652077697468207468652073616d65206064820152701cdd185ada5b99c81d1a1c995cda1bdb19607a1b608482015260a401610359565b600281905560405181907fadfa8ecb21b6962ebcd0adbd9ab985b7b4c5b5eb3b0dead683171565c7bfe17190600090a250565b6000546001600160a01b03163314610db95760405162461bcd60e51b815260040161035990611b0a565b6001600160a01b038116610e1e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610359565b61071e81611409565b6000546001600160a01b03163314610e515760405162461bcd60e51b815260040161035990611b0a565b828114610ed05760405162461bcd60e51b81526020600482015260536024820152600080516020611d3883398151915260448201527f72793a206f776e6572426174636852656d6f76654e667454797065416e6452616064820152720dcd640d8cadccee8d0e640dad2e6dac2e8c6d606b1b608482015260a401610359565b60005b8381101561047557610f55858583818110610ef057610ef0611b3f565b90506020020135848484818110610f0957610f09611b3f565b9050602002810190610f1b9190611b55565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110c892505050565b80610f5f81611bb2565b915050610ed3565b60005b600354811015611001578260038281548110610f8857610f88611b3f565b906000526020600020906002020160000154148015610fe55750818051906020012060038281548110610fbd57610fbd611b3f565b9060005260206000209060020201600101604051610fdb9190611c5b565b6040518091039020145b15610fef57505050565b80610ff981611bb2565b915050610f6a565b60408051808201909152838152602080820184815260038054600181018255600091909152835160029091027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b8101918255915180519193611088937fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c01929101906116b2565b505050827f2360ee3e77485441cfa07e30e8dc5b031fac38455647c89a763434f58733fcc1836040516110bb9190611cf7565b60405180910390a2505050565b60005b60035481101561124d5782600382815481106110e9576110e9611b3f565b906000526020600020906002020160000154148015611146575081805190602001206003828154811061111e5761111e611b3f565b906000526020600020906002020160010160405161113c9190611c5b565b6040518091039020145b1561123b576003805461115b90600190611d0a565b8154811061116b5761116b611b3f565b90600052602060002090600202016003828154811061118c5761118c611b3f565b90600052602060002090600202016000820154816000015560018201816001019080546111b890611acf565b6111c3929190611736565b5090505060038054806111d8576111d8611d21565b600082815260208120600260001990930192830201818155906111fe60018301826117b1565b50509055827fb1323e42d97b2b3d45f9d4641bf4b6b3f9d0d01e90832ae7b7413109b7a5d347836040516112329190611cf7565b60405180910390a25b8061124581611bb2565b9150506110cb565b505050565b60005b60055481101561130857836005828154811061127357611273611b3f565b9060005260206000209060020201600001541480156112d057508280519060200120600582815481106112a8576112a8611b3f565b90600052602060002090600202016001016040516112c69190611c5b565b6040518091039020145b156112f65781600482815481106112e9576112e9611b3f565b6000918252602090912001555b8061130081611bb2565b915050611255565b60408051808201909152848152602080820185815260058054600181018255600091909152835160029091027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0810191825591518051919361138f937f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db101929101906116b2565b5050600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0183905550604051829085907fe43bf5f5f8a1211930e5726ba0abceacb1748f97b2966db30a818ba10961cbcc906113fb908790611cf7565b60405180910390a350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f573bbfa679af6fdcdbd9cf191c5ef3e526599ac2bf75e9177d47adb8530b9c6990600090a250565b60005b60055481101561124d5782600582815481106114c4576114c4611b3f565b90600052602060002090600202016000015414801561152157508180519060200120600582815481106114f9576114f9611b3f565b90600052602060002090600202016001016040516115179190611c5b565b6040518091039020145b15611687576005805461153690600190611d0a565b8154811061154657611546611b3f565b90600052602060002090600202016005828154811061156757611567611b3f565b906000526020600020906002020160008201548160000155600182018160010190805461159390611acf565b61159e929190611736565b5090505060058054806115b3576115b3611d21565b600082815260208120600260001990930192830201818155906115d960018301826117b1565b50509055600480546115ed90600190611d0a565b815481106115fd576115fd611b3f565b90600052602060002001546004828154811061161b5761161b611b3f565b600091825260209091200155600480548061163857611638611d21565b60019003818190600052602060002001600090559055827fdb75199103504bd1d3653de758d4295bf00d4587e1d53dfc114464cc47ed97b78360405161167e9190611cf7565b60405180910390a25b8061169181611bb2565b9150506114a6565b6000818310156116a957816116ab565b825b9392505050565b8280546116be90611acf565b90600052602060002090601f0160209004810192826116e05760008555611726565b82601f106116f957805160ff1916838001178555611726565b82800160010185558215611726579182015b8281111561172657825182559160200191906001019061170b565b506117329291506117e7565b5090565b82805461174290611acf565b90600052602060002090601f0160209004810192826117645760008555611726565b82601f106117755780548555611726565b8280016001018555821561172657600052602060002091601f016020900482015b82811115611726578254825591600101919060010190611796565b5080546117bd90611acf565b6000825580601f106117cd575050565b601f01602090049060005260206000209081019061071e91905b5b8082111561173257600081556001016117e8565b60006020828403121561180e57600080fd5b5035919050565b6000815180845260005b8181101561183b5760208185018101518683018201520161181f565b8181111561184d576000602083870101525b50601f01601f19169290920160200192915050565b82815260406020820152600061187b6040830184611815565b949350505050565b60008083601f84011261189557600080fd5b50813567ffffffffffffffff8111156118ad57600080fd5b6020830191508360208260051b85010111156118c857600080fd5b9250929050565b600080600080604085870312156118e557600080fd5b843567ffffffffffffffff808211156118fd57600080fd5b61190988838901611883565b9096509450602087013591508082111561192257600080fd5b5061192f87828801611883565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561196457600080fd5b82359150602083013567ffffffffffffffff8082111561198357600080fd5b818501915085601f83011261199757600080fd5b8135818111156119a9576119a961193b565b604051601f8201601f19908116603f011681019083821181831017156119d1576119d161193b565b816040528281528860208487010111156119ea57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060008060008060608789031215611a2557600080fd5b863567ffffffffffffffff80821115611a3d57600080fd5b611a498a838b01611883565b90985096506020890135915080821115611a6257600080fd5b611a6e8a838b01611883565b90965094506040890135915080821115611a8757600080fd5b50611a9489828a01611883565b979a9699509497509295939492505050565b600060208284031215611ab857600080fd5b81356001600160a01b03811681146116ab57600080fd5b600181811c90821680611ae357607f821691505b60208210811415611b0457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112611b6c57600080fd5b83018035915067ffffffffffffffff821115611b8757600080fd5b6020019150368190038213156118c857600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611bc657611bc6611b9c565b5060010190565b838152606060208201526000611be66060830185611815565b905060018060a01b0383166040830152949350505050565b600060208284031215611c1057600080fd5b815180151581146116ab57600080fd5b600060208284031215611c3257600080fd5b5051919050565b600082611c5657634e487b7160e01b600052601260045260246000fd5b500490565b600080835481600182811c915080831680611c7757607f831692505b6020808410821415611c9757634e487b7160e01b86526022600452602486fd5b818015611cab5760018114611cbc57611ce9565b60ff19861689528489019650611ce9565b60008a81526020902060005b86811015611ce15781548b820152908501908301611cc8565b505084890196505b509498975050505050505050565b6020815260006116ab6020830184611815565b600082821015611d1c57611d1c611b9c565b500390565b634e487b7160e01b600052603160045260246000fdfe486f70725374616b696e6750726f7879466f724e6574776f726b526567697374a2646970667358221220dcd34ef27e9b40360ea54e1a2beeaf794941c950d1d63a4586df2956efce8a3c64736f6c63430008090033",
  "devdoc": {
    "details": "Proxy for staking (v2/v3/v4) contract, which an \"HoprNetworkRegistry requirement\" is implemented Two types of accounts are considered eligible: 1) Accounts with HoprBoost NFTs that are of the type and rank in the `eligibleNftTypeAndRank` array are considered as eligible, when their stake is also above the `stakeThreshold`. The maximum allowed registration of these accounts are defined by their stake. 2) Acounts with HoprBoost NFTs of `specialNftTypeAndRank`. Its maximum allowed registration is set by the owner.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Set stake contract address, transfer ownership, and set the maximum registrations per special NFT to the default value: upperbound of of uint256."
      },
      "maxAllowedRegistrations(address)": {
        "details": "Returns the maximum allowed registration a) for each special NFTs staked, consider their `maxRegistrationsPerSpecialNft` b) if NFT of eligibleNftTypeAndRank are redeemed, consider floor(`stake`/`threshold`) returns the maximum of the above mentioned categories",
        "params": {
          "account": "staker address that has a hopr nodes running"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerAddNftTypeAndRank(uint256,string)": {
        "details": "Owner adds/updates NFT type and rank to the list of eligibles NFTs.",
        "params": {
          "nftRank": "HoprBoost rank which is associated to the eligible NFT, in string",
          "nftType": "Type index of the eligible HoprBoost NFT"
        }
      },
      "ownerBatchAddNftTypeAndRank(uint256[],string[])": {
        "details": "Owner adds/updates NFT type and rank to the list of eligibles NFTs in batch.",
        "params": {
          "nftRanks": "Array of HOPR boost rank, which is associated to the eligible NFT, in string[]",
          "nftTypes": "Array of type indexes of the eligible HoprBoost NFT"
        }
      },
      "ownerBatchAddSpecialNftTypeAndRank(uint256[],string[],uint256[])": {
        "details": "Owner adds/updates NFT type and rank to the list of special NFTs in batch.",
        "params": {
          "maxRegistrations": "Array of maximum registration per special NFT type",
          "nftRanks": "Array of HOPR boost rank, which is associated to the special NFT, in string[]",
          "nftTypes": "Array of type indexes of the special HoprBoost NFT"
        }
      },
      "ownerBatchRemoveNftTypeAndRank(uint256[],string[])": {
        "details": "Owner removes from list of eligible NFTs in batch.",
        "params": {
          "nftRanks": "Array of HOPR boost rank, which is associated to the eligible NFT, in string[]",
          "nftTypes": "Array of type index of the eligible HoprBoost NFT"
        }
      },
      "ownerBatchRemoveSpecialNftTypeAndRank(uint256[],string[])": {
        "details": "Owner removes from list of special NFTs in batch.",
        "params": {
          "nftRanks": "Array of HOPR boost rank, which is associated to the special NFT, in string[]",
          "nftTypes": "Array of type index of the special HoprBoost NFT"
        }
      },
      "ownerRemoveNftTypeAndRank(uint256,string)": {
        "details": "Owner removes from list of eligible NFTs",
        "params": {
          "nftRank": "HoprBoost rank which is associated to the eligible NFT, in string",
          "nftType": "Type index of the eligible HoprBoost NFT"
        }
      },
      "ownerUpdateThreshold(uint256)": {
        "details": "Owner updates the minimal staking amount required for users to add themselves onto the HoprNetworkRegistry",
        "params": {
          "newThreshold": "Minimum stake of HOPR token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateStakeContract(address)": {
        "details": "update linked stake contract",
        "params": {
          "_stakeContract": "address of the staking contract from which registration info is obtained."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 539,
        "contract": "contracts/proxy/HoprStakingProxyForNetworkRegistry.sol:HoprStakingProxyForNetworkRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9469,
        "contract": "contracts/proxy/HoprStakingProxyForNetworkRegistry.sol:HoprStakingProxyForNetworkRegistry",
        "label": "stakeContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IHoprStake)9453"
      },
      {
        "astId": 9471,
        "contract": "contracts/proxy/HoprStakingProxyForNetworkRegistry.sol:HoprStakingProxyForNetworkRegistry",
        "label": "stakeThreshold",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9475,
        "contract": "contracts/proxy/HoprStakingProxyForNetworkRegistry.sol:HoprStakingProxyForNetworkRegistry",
        "label": "eligibleNftTypeAndRank",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(NftTypeAndRank)9466_storage)dyn_storage"
      },
      {
        "astId": 9478,
        "contract": "contracts/proxy/HoprStakingProxyForNetworkRegistry.sol:HoprStakingProxyForNetworkRegistry",
        "label": "maxRegistrationsPerSpecialNft",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 9482,
        "contract": "contracts/proxy/HoprStakingProxyForNetworkRegistry.sol:HoprStakingProxyForNetworkRegistry",
        "label": "specialNftTypeAndRank",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(NftTypeAndRank)9466_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(NftTypeAndRank)9466_storage)dyn_storage": {
        "base": "t_struct(NftTypeAndRank)9466_storage",
        "encoding": "dynamic_array",
        "label": "struct HoprStakingProxyForNetworkRegistry.NftTypeAndRank[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IHoprStake)9453": {
        "encoding": "inplace",
        "label": "contract IHoprStake",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(NftTypeAndRank)9466_storage": {
        "encoding": "inplace",
        "label": "struct HoprStakingProxyForNetworkRegistry.NftTypeAndRank",
        "members": [
          {
            "astId": 9463,
            "contract": "contracts/proxy/HoprStakingProxyForNetworkRegistry.sol:HoprStakingProxyForNetworkRegistry",
            "label": "nftType",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9465,
            "contract": "contracts/proxy/HoprStakingProxyForNetworkRegistry.sol:HoprStakingProxyForNetworkRegistry",
            "label": "nftRank",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}