{
  "address": "0x1b7714DC1D40ef37F612967Bed94a6dF84a93b85",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_secsClosure",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "multiaddr",
          "type": "bytes"
        }
      ],
      "name": "Announcement",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "partyABalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "partyBBalance",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "partyACommitment",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "partyBCommitment",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "partyATicketEpoch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "partyBTicketEpoch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "partyATicketIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "partyBTicketIndex",
              "type": "uint256"
            },
            {
              "internalType": "enum HoprChannels.ChannelStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "channelEpoch",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "closureTime",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "closureByPartyA",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct HoprChannels.Channel",
          "name": "newState",
          "type": "tuple"
        }
      ],
      "name": "ChannelUpdate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FUND_CHANNEL_MULTI_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKENS_RECIPIENT_INTERFACE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "multiaddr",
          "type": "bytes"
        }
      ],
      "name": "announce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "newCommitment",
          "type": "bytes32"
        }
      ],
      "name": "bumpChannel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "interfaceHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canImplementInterfaceForAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "channels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "partyABalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "partyBBalance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "partyACommitment",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "partyBCommitment",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "partyATicketEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "partyBTicketEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "partyATicketIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "partyBTicketIndex",
          "type": "uint256"
        },
        {
          "internalType": "enum HoprChannels.ChannelStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "channelEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "closureTime",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "closureByPartyA",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "response",
          "type": "bytes32"
        }
      ],
      "name": "computeChallenge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        }
      ],
      "name": "finalizeChannelClosure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount2",
          "type": "uint256"
        }
      ],
      "name": "fundChannelMulti",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        }
      ],
      "name": "initiateChannelClosure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "nextCommitment",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "ticketEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ticketIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "proofOfRelaySecret",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "winProb",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "redeemTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secsClosure",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x08175df683485c6aada78bd09e02ad1edaa4decd59c736e6287336154d5e8248",
  "receipt": {
    "to": null,
    "from": "0xA18732DC751BE0dB04157eb92C92BA9d0fC09FC5",
    "contractAddress": "0x1b7714DC1D40ef37F612967Bed94a6dF84a93b85",
    "transactionIndex": 32,
    "gasUsed": "4020802",
    "logsBloom": "0x
    "blockHash": "0xbc8d25294bc49875b21642a31dc947fb1ae02561883af8c4f5d9acb004372211",
    "transactionHash": "0x08175df683485c6aada78bd09e02ad1edaa4decd59c736e6287336154d5e8248",
    "logs": [
      {
        "transactionIndex": 32,
        "blockNumber": 4812124,
        "transactionHash": "0x08175df683485c6aada78bd09e02ad1edaa4decd59c736e6287336154d5e8248",
        "address": "0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24",
        "topics": [
          "0x93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db153",
          "0x0000000000000000000000001b7714dc1d40ef37f612967bed94a6df84a93b85",
          "0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b",
          "0x0000000000000000000000001b7714dc1d40ef37f612967bed94a6df84a93b85"
        ],
        "data": "0x",
        "logIndex": 49,
        "blockHash": "0xbc8d25294bc49875b21642a31dc947fb1ae02561883af8c4f5d9acb004372211"
      }
    ],
    "blockNumber": 4812124,
    "cumulativeGasUsed": "7978687",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x566a5c774bb8ABE1A88B4f187e24d4cD55C207A5",
    600
  ],
  "solcInputHash": "1c532be722d97a6de6bd4a6249bddc18",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_secsClosure\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"multiaddr\",\"type\":\"bytes\"}],\"name\":\"Announcement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"partyABalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partyBBalance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"partyACommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"partyBCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"partyATicketEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partyBTicketEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partyATicketIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partyBTicketIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum HoprChannels.ChannelStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"channelEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"closureTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"closureByPartyA\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct HoprChannels.Channel\",\"name\":\"newState\",\"type\":\"tuple\"}],\"name\":\"ChannelUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FUND_CHANNEL_MULTI_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKENS_RECIPIENT_INTERFACE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"multiaddr\",\"type\":\"bytes\"}],\"name\":\"announce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"newCommitment\",\"type\":\"bytes32\"}],\"name\":\"bumpChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canImplementInterfaceForAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"channels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"partyABalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partyBBalance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"partyACommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"partyBCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"partyATicketEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partyBTicketEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partyATicketIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partyBTicketIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum HoprChannels.ChannelStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"channelEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"closureTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"closureByPartyA\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"response\",\"type\":\"bytes32\"}],\"name\":\"computeChallenge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"}],\"name\":\"finalizeChannelClosure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount2\",\"type\":\"uint256\"}],\"name\":\"fundChannelMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"}],\"name\":\"initiateChannelClosure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nextCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"ticketEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"proofOfRelaySecret\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winProb\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"redeemTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secsClosure\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"announce(bytes)\":{\"details\":\"Announces msg.sender's multiaddress. Confirmation should be done off-chain.\",\"params\":{\"multiaddr\":\"the multiaddress\"}},\"bumpChannel(address,bytes32)\":{\"details\":\"Request a channelIteration bump, so we can make a new set of commitments\",\"params\":{\"counterparty\":\"the address of the counterparty\",\"newCommitment\":\", a secret derived from this new commitment\"}},\"computeChallenge(bytes32)\":{\"params\":{\"response\":\"response that is used to recompute the challenge\"}},\"constructor\":{\"params\":{\"_secsClosure\":\"seconds until a channel can be closed\",\"_token\":\"HoprToken address\"}},\"finalizeChannelClosure(address)\":{\"details\":\"Finalize channel closure, if cool-off period is over it will close the channel and transfer funds to the parties involved, then emits {ChannelUpdate} event.\",\"params\":{\"counterparty\":\"the address of the counterparty\"}},\"fundChannelMulti(address,address,uint256,uint256)\":{\"details\":\"Funds a channel, in both directions, then emits {ChannelUpdate} event.\",\"params\":{\"account1\":\"the address of account1\",\"account2\":\"the address of account2\",\"amount1\":\"amount to fund account1\",\"amount2\":\"amount to fund account2\"}},\"initiateChannelClosure(address)\":{\"details\":\"Initialize channel closure, updates channel'r closure time, when the cool-off period is over, user may finalize closure, then emits {ChannelUpdate} event.\",\"params\":{\"counterparty\":\"the address of the counterparty\"}},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"params\":{\"amount\":\"uint256 amount of tokens to transfer\",\"from\":\"address token holder address\",\"operator\":\"address operator requesting the transfer\",\"operatorData\":\"bytes extra information provided by the operator (if any)\",\"to\":\"address recipient address\",\"userData\":\"bytes extra information provided by the token holder (if any)\"}}},\"stateVariables\":{\"channels\":{\"details\":\"Stored channels keyed by their channel ids\"},\"secsClosure\":{\"details\":\"Seconds it takes until we can finalize channel closure once, channel closure has been initialized.\"},\"token\":{\"details\":\"HoprToken, the token that will be used to settle payments\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canImplementInterfaceForAddress(bytes32,address)\":{\"notice\":\"See {IERC1820Implementer-canImplementInterfaceForAddress}.\"},\"computeChallenge(bytes32)\":{\"notice\":\"Uses the response to recompute the challenge. This is done by multiplying the base point of the curve with the given response. Due to the lack of embedded ECMUL functionality in the current version of the EVM, this is done by misusing the `ecrecover`  functionality. `ecrecover` performs the point multiplication and  converts the output to an Ethereum address (sliced hash of the product of base point and scalar). See https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384\"},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"notice\":\"A hook triggered when HOPR tokens are sent to this contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HoprChannels.sol\":\"HoprChannels\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0fd59f83d16f090c27a8105db0f4ad05b0f5d127f9878b82ebf0ad2bbc4e3f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x752ac2a89da774de5c98f8ca1adcad306ce00d0ebb547ad7be8ba7e95468aa73\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC1820Implementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1820Implementer.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC1820Implementer} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\\n * declare their willingness to be implementers.\\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\\n * registration to be complete.\\n */\\ncontract ERC1820Implementer is IERC1820Implementer {\\n    bytes32 private constant _ERC1820_ACCEPT_MAGIC = keccak256(\\\"ERC1820_ACCEPT_MAGIC\\\");\\n\\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\\n\\n    /**\\n     * See {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) public view virtual override returns (bytes32) {\\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\\n    }\\n\\n    /**\\n     * @dev Declares the contract as willing to be an implementer of\\n     * `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer} and\\n     * {IERC1820Registry-interfaceHash}.\\n     */\\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\\n        _supportedInterfaces[interfaceHash][account] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x2e2702327c253928cc5e6e5aa5ac1bc64a04f992cd41f9ec53a74f22fe260a2c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC1820Implementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for an ERC1820 implementer, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\\n * Used by contracts that will be registered as implementers in the\\n * {IERC1820Registry}.\\n */\\ninterface IERC1820Implementer {\\n    /**\\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\\n     * implements `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd658a25ce73a588bba55fa518ea79b3a581f14c411fb44a38e78f87e3a09ffcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0x49f0bb79f8a5c60b2a8779d0b501f16bd3110814b9e72498caad3bc339e33def\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/HoprChannels.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC1820Implementer.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract HoprChannels is IERC777Recipient, ERC1820Implementer {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // required by ERC1820 spec\\n    IERC1820Registry internal constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n    // required by ERC777 spec\\n    bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n    // used by {tokensReceived} to distinguish which function to call after tokens are sent\\n    uint256 public FUND_CHANNEL_MULTI_SIZE = abi.encode(address(0), address(0), uint256(0), uint256(0)).length;\\n\\n    /**\\n     * @dev Possible channel statuses.\\n     */\\n    enum ChannelStatus { CLOSED, OPEN, PENDING_TO_CLOSE }\\n\\n    /**\\n     * @dev A channel struct, used to represent a channel's state\\n     */\\n    struct Channel {\\n        uint256 partyABalance;\\n        uint256 partyBBalance;\\n\\n        bytes32 partyACommitment;\\n        bytes32 partyBCommitment;\\n        uint256 partyATicketEpoch;\\n        uint256 partyBTicketEpoch;\\n        uint256 partyATicketIndex;\\n        uint256 partyBTicketIndex;\\n\\n        ChannelStatus status;\\n        uint channelEpoch; \\n\\n        // the time when the channel can be closed by either party\\n        // overloads at year >2105\\n        uint32 closureTime;\\n\\n        // channel closure was initiated by party A\\n        bool closureByPartyA;\\n    }\\n\\n    /**\\n     * @dev Stored channels keyed by their channel ids\\n     */\\n    mapping(bytes32 => Channel) public channels;\\n\\n    /**\\n     * @dev HoprToken, the token that will be used to settle payments\\n     */\\n    IERC20 public token;\\n\\n    /**\\n     * @dev Seconds it takes until we can finalize channel closure once,\\n     * channel closure has been initialized.\\n     */\\n    uint32 public secsClosure;\\n\\n    event Announcement(\\n        address indexed account,\\n        bytes multiaddr\\n    );\\n\\n    event ChannelUpdate(\\n        address indexed partyA,\\n        address indexed partyB,\\n        Channel newState\\n    );\\n\\n    /**\\n     * @param _token HoprToken address\\n     * @param _secsClosure seconds until a channel can be closed\\n     */\\n    constructor(address _token, uint32 _secsClosure) {\\n        token = IERC20(_token);\\n        secsClosure = _secsClosure;\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\\n    }\\n\\n    /**\\n     * @dev Announces msg.sender's multiaddress.\\n     * Confirmation should be done off-chain.\\n     * @param multiaddr the multiaddress\\n     */\\n    function announce(bytes calldata multiaddr) external {\\n        emit Announcement(msg.sender, multiaddr);\\n    }\\n\\n    /**\\n     * @dev Funds a channel, in both directions,\\n     * then emits {ChannelUpdate} event.\\n     * @param account1 the address of account1\\n     * @param account2 the address of account2\\n     * @param amount1 amount to fund account1\\n     * @param amount2 amount to fund account2\\n     */\\n    function fundChannelMulti(\\n        address account1,\\n        address account2,\\n        uint256 amount1,\\n        uint256 amount2\\n    ) external {\\n        token.safeTransferFrom(msg.sender, address(this), amount1.add(amount2));\\n        _fundChannel(\\n            account1,\\n            account2,\\n            amount1,\\n            amount2\\n        );\\n    }\\n\\n    function redeemTicket(\\n        address counterparty,\\n        bytes32 nextCommitment,\\n        uint256 ticketEpoch,\\n        uint256 ticketIndex,\\n        bytes32 proofOfRelaySecret,\\n        uint256 amount,\\n        uint256 winProb,\\n        bytes memory signature\\n    ) external {\\n        _redeemTicket(\\n            msg.sender,\\n            counterparty,\\n            nextCommitment,\\n            ticketEpoch,\\n            ticketIndex,\\n            proofOfRelaySecret,\\n            amount,\\n            winProb,\\n            signature\\n        );\\n    }\\n\\n    /**\\n     * @dev Initialize channel closure, updates channel'r\\n     * closure time, when the cool-off period is over,\\n     * user may finalize closure, then emits\\n     * {ChannelUpdate} event.\\n     * @param counterparty the address of the counterparty\\n     */\\n    function initiateChannelClosure(\\n        address counterparty\\n    ) external {\\n        _initiateChannelClosure(msg.sender, counterparty);\\n    }\\n\\n    /**\\n     * @dev Finalize channel closure, if cool-off period\\n     * is over it will close the channel and transfer funds\\n     * to the parties involved, then emits\\n     * {ChannelUpdate} event.\\n     * @param counterparty the address of the counterparty\\n     */\\n    function finalizeChannelClosure(\\n        address counterparty\\n    ) external {\\n        _finalizeChannelClosure(\\n            msg.sender,\\n            counterparty\\n        );\\n    }\\n\\n    /**\\n    * @dev Request a channelIteration bump, so we can make a new set of\\n    * commitments\\n    * @param counterparty the address of the counterparty\\n    * @param newCommitment, a secret derived from this new commitment\\n    */\\n    function bumpChannel(\\n      address counterparty,\\n      bytes32 newCommitment\\n    ) external {\\n        require(msg.sender != address(0), \\\"sender must not be empty\\\");\\n        require(counterparty != address(0), \\\"counterparty must not be empty\\\");\\n        require(msg.sender != counterparty, \\\"accountA and accountB must not be the same\\\");\\n\\n        (,,, Channel storage channel) = _getChannel(\\n            msg.sender,\\n            counterparty\\n        );\\n\\n        if (_isPartyA(msg.sender, counterparty)){\\n          channel.partyACommitment = newCommitment;\\n          channel.partyATicketEpoch = channel.partyATicketEpoch.add(1);\\n        } else {\\n          channel.partyBCommitment = newCommitment;\\n          channel.partyATicketEpoch = channel.partyBTicketEpoch.add(1);\\n        }\\n    }\\n\\n    /**\\n     * A hook triggered when HOPR tokens are sent to this contract.\\n     *\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        // solhint-disable-next-line no-unused-vars\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        // solhint-disable-next-line no-unused-vars\\n        bytes calldata operatorData\\n    ) external override {\\n        require(msg.sender == address(token), \\\"caller must be HoprToken\\\");\\n\\n        if (\\n            operator == address(this) || // must not be triggered by HoprChannels\\n            from == address(0) // ignore 'mint'\\n        ) {\\n            return;\\n        }\\n\\n        // must be one of our supported functions\\n        require(\\n            userData.length == FUND_CHANNEL_MULTI_SIZE,\\n            \\\"userData must match one of our supported functions\\\"\\n        );\\n\\n        address account1;\\n        address account2;\\n        uint256 amount1;\\n        uint256 amount2;\\n\\n        (account1, account2, amount1, amount2) = abi.decode(userData, (address, address, uint256, uint256));\\n        require(amount == amount1.add(amount2), \\\"amount sent must be equal to amount specified\\\");\\n\\n        //require(from == account1 || from == account2, \\\"funder must be either account1 or account2\\\");\\n        _fundChannel(account1, account2, amount1, amount2);\\n    }\\n\\n    // internal code\\n\\n    /**\\n     * @dev Funds a channel, then emits\\n     * {ChannelUpdate} event.\\n     * @param account1 the address of account1\\n     * @param account2 the address of account2\\n     * @param amount1 amount to fund account1\\n     * @param amount2 amount to fund account2\\n     */\\n    function _fundChannel(\\n        address account1,\\n        address account2,\\n        uint256 amount1,\\n        uint256 amount2\\n    ) internal {\\n        require(account1 != account2, \\\"accountA and accountB must not be the same\\\");\\n        require(account1 != address(0), \\\"accountA must not be empty\\\");\\n        require(account2 != address(0), \\\"accountB must not be empty\\\");\\n        require(amount1 > 0 || amount2 > 0, \\\"amountA or amountB must be greater than 0\\\");\\n\\n        address partyA;\\n        address partyB;\\n        uint256 amountA;\\n        uint256 amountB;\\n        \\n        if (_isPartyA(account1, account2)){\\n          partyA = account1;\\n          partyB = account2;\\n          amountA = amount1;\\n          amountB = amount2;\\n        } else {\\n          partyA = account2;\\n          partyB = account1;\\n          amountA = amount2;\\n          amountB = amount1;\\n        }\\n        (,,, Channel storage channel) = _getChannel(partyA, partyB);\\n\\n        require(channel.status != ChannelStatus.PENDING_TO_CLOSE, \\\"Cannot fund a closing channel\\\");\\n        \\n        if (channel.status == ChannelStatus.CLOSED) {\\n          // We are reopening the channel\\n          channel.channelEpoch = channel.channelEpoch.add(1);\\n          channel.status = ChannelStatus.OPEN;\\n          channel.partyATicketIndex = 0;\\n          channel.partyBTicketIndex = 0;\\n        }\\n\\n        channel.partyABalance = channel.partyABalance.add(amountA);\\n        channel.partyBBalance = channel.partyBBalance.add(amountB);\\n        emit ChannelUpdate(partyA, partyB, channel);\\n    }\\n\\n    /**\\n     * @dev Initialize channel closure, updates channel's\\n     * closure time, when the cool-off period is over,\\n     * user may finalize closure, then emits\\n     * {ChannelUpdate} event.\\n     * @param initiator the address of the initiator\\n     * @param counterparty the address of the counterparty\\n     */\\n    function _initiateChannelClosure(\\n        address initiator,\\n        address counterparty\\n    ) internal {\\n        require(initiator != counterparty, \\\"initiator and counterparty must not be the same\\\");\\n        require(initiator != address(0), \\\"initiator must not be empty\\\");\\n        require(counterparty != address(0), \\\"counterparty must not be empty\\\");\\n\\n        (,,, Channel storage channel) = _getChannel(initiator, counterparty);\\n        require(channel.status == ChannelStatus.OPEN, \\\"channel must be open\\\");\\n\\n        // @TODO: check with team, do we need SafeMath check here?\\n        channel.closureTime = _currentBlockTimestamp() + secsClosure;\\n        channel.status = ChannelStatus.PENDING_TO_CLOSE;\\n\\n        bool isPartyA = _isPartyA(initiator, counterparty);\\n        if (isPartyA) {\\n            channel.closureByPartyA = true;\\n        }\\n\\n        emit ChannelUpdate(initiator, counterparty, channel);\\n    }\\n\\n    /**\\n     * @dev Finalize channel closure, if cool-off period\\n     * is over it will close the channel and transfer funds\\n     * to the parties involved, then emits\\n     * {ChannelUpdate} event.\\n     * @param initiator the address of the initiator\\n     * @param counterparty the address of the counterparty\\n     */\\n    function _finalizeChannelClosure(\\n        address initiator,\\n        address counterparty\\n    ) internal {\\n        require(address(token) != address(0), \\\"token must not be empty\\\");\\n        require(initiator != counterparty, \\\"initiator and counterparty must not be the same\\\");\\n        require(initiator != address(0), \\\"initiator must not be empty\\\");\\n        require(counterparty != address(0), \\\"counterparty must not be empty\\\");\\n\\n        (address partyA, address partyB,, Channel storage channel) = _getChannel(initiator, counterparty);\\n        require(channel.status == ChannelStatus.PENDING_TO_CLOSE, \\\"channel must be pending to close\\\");\\n\\n        if (\\n            channel.closureByPartyA && (initiator == partyA) ||\\n            !channel.closureByPartyA && (initiator == partyB)\\n        ) {\\n            require(channel.closureTime < _currentBlockTimestamp(), \\\"closureTime must be before now\\\");\\n        }\\n\\n        // settle balances\\n        if (channel.partyABalance > 0) {\\n            token.transfer(partyA, channel.partyABalance);\\n        }\\n        if (channel.partyBBalance > 0) {\\n            token.transfer(partyB, channel.partyBBalance);\\n        }\\n\\n        delete channel.partyABalance; // channel.partyABalance = 0\\n        delete channel.partyBBalance; \\n        delete channel.closureTime; // channel.closureTime = 0\\n        delete channel.closureByPartyA; // channel.closureByPartyA = false\\n        channel.status = ChannelStatus.CLOSED;\\n\\n        emit ChannelUpdate(initiator, counterparty, channel);\\n    }\\n\\n    /**\\n     * @param account1 the address of accountA\\n     * @param account2 the address of accountB\\n     * @return a tuple of partyA, partyB, channelId, channel\\n     */\\n    function _getChannel(address account1, address account2)\\n        internal\\n        view\\n        returns (\\n            address,\\n            address,\\n            bytes32,\\n            Channel storage\\n        )\\n    {\\n        (address partyA, address partyB) = _sortAddresses(account1, account2);\\n        bytes32 channelId = _getChannelId(partyA, partyB);\\n        Channel storage channel = channels[channelId];\\n\\n        return (partyA, partyB, channelId, channel);\\n    }\\n\\n    /**\\n     * @param partyA the address of partyA\\n     * @param partyB the address of partyB\\n     * @return the channel id by hashing partyA and partyB\\n     */\\n    function _getChannelId(address partyA, address partyB) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(partyA, partyB));\\n    }\\n\\n    /**\\n     * Parties are ordered - find the lower one.\\n     * @param query the address of which we are asking 'is this party A'\\n     * @param other the other address \\n     * @return query is partyA \\n     */\\n    function _isPartyA(address query, address other) internal pure returns (bool) {\\n        return uint160(query) < uint160(other);\\n    }\\n\\n    /**\\n     * @param accountA the address of accountA\\n     * @param accountB the address of accountB\\n     * @return a tuple representing partyA and partyB\\n     */\\n    function _sortAddresses(address accountA, address accountB) internal pure returns (address, address) {\\n        if (_isPartyA(accountA, accountB)) {\\n            return (accountA, accountB);\\n        } else {\\n            return (accountB, accountA);\\n        }\\n    }\\n\\n    /**\\n     * @return the current timestamp\\n     */\\n    function _currentBlockTimestamp() internal view returns (uint32) {\\n        // solhint-disable-next-line\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    /**\\n     * @dev Redeem a ticket\\n     * @param redeemer the redeemer address\\n     * @param counterparty the counterparty address\\n     * @param nextCommitment the commitment that hashes to the redeemers previous commitment\\n     * @param proofOfRelaySecret the proof of relay secret\\n     * @param winProb the winning probability of the ticket\\n     * @param amount the amount in the ticket\\n     * @param signature signature\\n     */\\n    function _redeemTicket(\\n        address redeemer,\\n        address counterparty,\\n        bytes32 nextCommitment,\\n        uint256 ticketEpoch,\\n        uint256 ticketIndex,\\n        bytes32 proofOfRelaySecret,\\n        uint256 amount,\\n        uint256 winProb,\\n        bytes memory signature\\n    ) internal {\\n        require(redeemer != address(0), \\\"redeemer must not be empty\\\");\\n        require(counterparty != address(0), \\\"counterparty must not be empty\\\");\\n        require(nextCommitment != bytes32(0), \\\"nextCommitment must not be empty\\\");\\n        require(amount != uint256(0), \\\"amount must not be empty\\\");\\n        (,,, Channel storage channel) = _getChannel(\\n            redeemer,\\n            counterparty\\n        );\\n        \\n        uint256 prevTicketEpoch;\\n        if (_isPartyA(redeemer, counterparty)) {\\n          require(channel.partyACommitment == keccak256(abi.encodePacked(nextCommitment)), \\\"commitment must be hash of next commitment\\\");\\n          require(channel.partyATicketEpoch == ticketEpoch, \\\"ticket epoch must match\\\");\\n          require(channel.partyATicketIndex < ticketIndex, \\\"redemptions must be in order\\\");\\n          prevTicketEpoch = channel.partyATicketEpoch;\\n        } else {\\n          require(channel.partyBCommitment == keccak256(abi.encodePacked(nextCommitment)), \\\"commitment must be hash of next commitment\\\");\\n          require(channel.partyBTicketEpoch == ticketEpoch, \\\"ticket epoch must match\\\");\\n          require(channel.partyBTicketIndex < ticketIndex, \\\"redemptions must be in order\\\");\\n          prevTicketEpoch = channel.partyBTicketEpoch;\\n        }\\n        require(channel.status != ChannelStatus.CLOSED, \\\"channel must be open or pending to close\\\");\\n\\n        bytes32 ticketHash = ECDSA.toEthSignedMessageHash(\\n            keccak256(\\n              _getEncodedTicket(\\n                  redeemer,\\n                  prevTicketEpoch,\\n                  proofOfRelaySecret,\\n                  channel.channelEpoch,\\n                  amount,\\n                  ticketIndex,\\n                  winProb\\n              )\\n            )\\n        );\\n\\n        require(ECDSA.recover(ticketHash, signature) == counterparty, \\\"signer must match the counterparty\\\");\\n        require(\\n            uint256(_getTicketLuck(\\n                ticketHash,\\n                nextCommitment,\\n                winProb\\n            )) <= winProb,\\n            \\\"ticket must be a win\\\"\\n        );\\n\\n        if (_isPartyA(redeemer, counterparty)) {\\n            channel.partyACommitment = nextCommitment;\\n            channel.partyABalance = channel.partyABalance.add(amount);\\n            channel.partyBBalance = channel.partyBBalance.sub(amount);\\n            channel.partyATicketEpoch = channel.partyATicketEpoch.add(1);\\n            channel.partyATicketIndex = ticketIndex;\\n            emit ChannelUpdate(redeemer, counterparty, channel);\\n        } else {\\n            channel.partyABalance = channel.partyABalance.sub(amount);\\n            channel.partyBBalance = channel.partyBBalance.add(amount);\\n            channel.partyBCommitment = nextCommitment;\\n            channel.partyBTicketEpoch = channel.partyBTicketEpoch.add(1);\\n            channel.partyBTicketIndex = ticketIndex;\\n            emit ChannelUpdate(counterparty, redeemer, channel);\\n        }\\n    }\\n\\n    /**\\n     * Uses the response to recompute the challenge. This is done\\n     * by multiplying the base point of the curve with the given response.\\n     * Due to the lack of embedded ECMUL functionality in the current\\n     * version of the EVM, this is done by misusing the `ecrecover` \\n     * functionality. `ecrecover` performs the point multiplication and \\n     * converts the output to an Ethereum address (sliced hash of the product\\n     * of base point and scalar).\\n     * See https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384\\n     * @param response response that is used to recompute the challenge\\n     */\\n    function computeChallenge(bytes32 response) public pure returns (address)  {\\n        // Field order of the base field\\n        uint256 FIELD_ORDER = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\\n\\n        // x-coordinate of the base point\\n        uint256 gx = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798;\\n        // y-coordinate of base-point is even, so v is 27\\n        uint8 gv = 27;\\n\\n        address signer = ecrecover(0, gv, bytes32(gx), bytes32(mulmod(uint256(response), gx, FIELD_ORDER)));\\n\\n        return signer;\\n    }\\n    /**\\n     * @dev Encode ticket data\\n     * @return bytes\\n     */\\n    function _getEncodedTicket(\\n        address recipient,\\n        uint256 recipientCounter,\\n        bytes32 proofOfRelaySecret,\\n        uint256 channelIteration,\\n        uint256 amount,\\n        uint256 ticketIndex,\\n        uint256 winProb\\n    ) internal pure returns (bytes memory) {\\n        address challenge = computeChallenge(proofOfRelaySecret);\\n\\n        return abi.encodePacked(\\n            recipient,\\n            challenge,\\n            recipientCounter,\\n            amount,\\n            winProb,\\n            ticketIndex,\\n            channelIteration\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get the ticket's \\\"luck\\\" by\\n     * hashing provided values.\\n     * @return luck\\n     */\\n    function _getTicketLuck(\\n        bytes32 ticketHash,\\n        bytes32 nextCommitment,\\n        uint256 winProb\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(ticketHash, nextCommitment, winProb));\\n    }\\n}\\n\",\"keccak256\":\"0x17de8fd440648bc2cecd9c6d2a7d50d937a29ddccf5721b22235637a48759351\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526000806000806040516020016200001f949392919062000218565b604051602081830303815290604052516001553480156200003f57600080fd5b50604051620049df380380620049df8339818101604052810190620000659190620001a4565b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360146101000a81548163ffffffff021916908363ffffffff160217905550731820a4b7618bde71dce8cdc73aab6c95905fad2473ffffffffffffffffffffffffffffffffffffffff166329965a1d307fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b306040518463ffffffff1660e01b81526004016200013a9392919062000265565b600060405180830381600087803b1580156200015557600080fd5b505af11580156200016a573d6000803e3d6000fd5b5050505050506200032e565b6000815190506200018781620002fa565b92915050565b6000815190506200019e8162000314565b92915050565b60008060408385031215620001b857600080fd5b6000620001c88582860162000176565b9250506020620001db858286016200018d565b9150509250929050565b620001f081620002a2565b82525050565b6200020181620002b6565b82525050565b6200021281620002e0565b82525050565b60006080820190506200022f6000830187620001e5565b6200023e6020830186620001e5565b6200024d604083018562000207565b6200025c606083018462000207565b95945050505050565b60006060820190506200027c6000830186620001e5565b6200028b6020830185620001f6565b6200029a6040830184620001e5565b949350505050565b6000620002af82620002c0565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b6200030581620002a2565b81146200031157600080fd5b50565b6200031f81620002ea565b81146200032b57600080fd5b50565b6146a1806200033e6000396000f3fe608060405234801561001057600080fd5b50600436106100e95760003560e01c806372581cc01161008c578063b4037e8011610066578063b4037e801461023f578063b7bbca8a1461025b578063c3af8c5614610277578063fc0c546a146102a7576100e9565b806372581cc0146101ca5780637a7ebd7b146101e8578063b216706c14610223576100e9565b8063249cb3fa116100c8578063249cb3fa14610144578063275621d1146101745780632bcead2f146101925780634341abdd146101ae576100e9565b806223de29146100ee578063048a097d1461010a578063075e389f14610128575b600080fd5b61010860048036038101906101039190612770565b6102c5565b005b6101126104a0565b60405161011f91906138f0565b60405180910390f35b610142600480360381019061013d91906126e4565b6104a6565b005b61015e600480360381019061015991906129ee565b6104b3565b60405161016b91906133ce565b60405180910390f35b61017c610549565b60405161018991906139c5565b60405180910390f35b6101ac60048036038101906101a791906128d2565b61055f565b005b6101c860048036038101906101c39190612833565b61057a565b005b6101d26105ed565b6040516101df91906133ce565b60405180910390f35b61020260048036038101906101fd91906129c5565b610611565b60405161021a9c9b9a9998979695949392919061390b565b60405180910390f35b61023d60048036038101906102389190612a2a565b61069b565b005b610259600480360381019061025491906126e4565b6106ef565b005b61027560048036038101906102709190612896565b6106fc565b005b610291600480360381019061028c91906129c5565b6108c8565b60405161029e9190613353565b60405180910390f35b6102af6109b9565b6040516102bc9190613452565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034c90613634565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614806103bb5750600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16145b156103c557610496565b600154848490501461040c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040390613654565b60405180910390fd5b6000806000808787810190610421919061270d565b8094508195508296508397505050505061044481836109df90919063ffffffff16565b8914610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047c90613594565b60405180910390fd5b610491848484846109f5565b505050505b5050505050505050565b60015481565b6104b03382610e5a565b50565b600080600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661051f576000801b610541565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b905092915050565b600360149054906101000a900463ffffffff1681565b61057033898989898989898961149b565b5050505050505050565b6105db333061059284866109df90919063ffffffff16565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611baa909392919063ffffffff16565b6105e7848484846109f5565b50505050565b7fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b81565b60026020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060154908060070154908060080160009054906101000a900460ff169080600901549080600a0160009054906101000a900463ffffffff169080600a0160049054906101000a900460ff1690508c565b3373ffffffffffffffffffffffffffffffffffffffff167f7463de96ba8fbb96ef3e622fddfff321bdbdfef94b95cbcf27f6bfcac8fe83aa83836040516106e392919061342e565b60405180910390a25050565b6106f93382611c33565b50565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561076c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610763906135b4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d390613674565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561084b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084290613514565b60405180910390fd5b60006108573384611f8e565b93505050506108663384611fe3565b156108995781816002018190555061088c600182600401546109df90919063ffffffff16565b81600401819055506108c3565b8181600301819055506108ba600182600501546109df90919063ffffffff16565b81600401819055505b505050565b6000807ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141905060007f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179890506000601b9050600060016000838560001b8780610959577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b878b60001c0960001b6040516000815260200160405260405161097f949392919061346d565b6020604051602081039080840390855afa1580156109a1573d6000803e3d6000fd5b50505060206040510351905080945050505050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081836109ed9190613a84565b905092915050565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610a64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5b90613514565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610ad4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acb90613734565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3b906136f4565b60405180910390fd5b6000821180610b535750600081115b610b92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8990613874565b60405180910390fd5b600080600080610ba28888611fe3565b15610bb857879350869250859150849050610bc5565b8693508792508491508590505b6000610bd18585611f8e565b9350505050600280811115610c0f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160080160009054906101000a900460ff166002811115610c59577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610c9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9190613774565b60405180910390fd5b60006002811115610cd4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160080160009054906101000a900460ff166002811115610d1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610dac57610d3c600182600901546109df90919063ffffffff16565b816009018190555060018160080160006101000a81548160ff02191690836002811115610d92577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060008160060181905550600081600701819055505b610dc38382600001546109df90919063ffffffff16565b8160000181905550610de28282600101546109df90919063ffffffff16565b81600101819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f4910a2e1baf8597d438cd08f3a64cff447af531f02d91138c8bef6e311f970f483604051610e4791906138d4565b60405180910390a3505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610eec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee390613794565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5290613834565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc290613754565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561103b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103290613674565b60405180910390fd5b600080600061104a8585611f8e565b9350509250925060028081111561108a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160080160009054906101000a900460ff1660028111156110d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14611114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110b90613554565b60405180910390fd5b80600a0160049054906101000a900460ff16801561115d57508273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b806111ae575080600a0160049054906101000a900460ff161580156111ad57508173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b5b1561121d576111bb61201c565b63ffffffff1681600a0160009054906101000a900463ffffffff1663ffffffff161061121c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611213906137f4565b60405180910390fd5b5b6000816000015411156112df57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8483600001546040518363ffffffff1660e01b815260040161128b9291906133a5565b602060405180830381600087803b1580156112a557600080fd5b505af11580156112b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dd919061299c565b505b6000816001015411156113a157600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8383600101546040518363ffffffff1660e01b815260040161134d9291906133a5565b602060405180830381600087803b15801561136757600080fd5b505af115801561137b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139f919061299c565b505b8060000160009055806001016000905580600a0160006101000a81549063ffffffff021916905580600a0160046101000a81549060ff021916905560008160080160006101000a81548160ff0219169083600281111561142a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f4910a2e1baf8597d438cd08f3a64cff447af531f02d91138c8bef6e311f970f48360405161148c91906138d4565b60405180910390a35050505050565b600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16141561150b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150290613854565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561157b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157290613674565b60405180910390fd5b6000801b8714156115c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b890613894565b60405180910390fd5b6000831415611605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fc906136b4565b60405180910390fd5b60006116118a8a611f8e565b935050505060006116228b8b611fe3565b1561172b578860405160200161163891906132be565b60405160208183030381529060405280519060200120826002015414611693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168a90613694565b60405180910390fd5b878260040154146116d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d0906137d4565b60405180910390fd5b8682600601541061171f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171690613574565b60405180910390fd5b8160040154905061182b565b8860405160200161173c91906132be565b60405160208183030381529060405280519060200120826003015414611797576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178e90613694565b60405180910390fd5b878260050154146117dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d4906137d4565b60405180910390fd5b86826007015410611823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181a90613574565b60405180910390fd5b816005015490505b60006002811115611865577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260080160009054906101000a900460ff1660028111156118af577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156118f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e790613534565b60405180910390fd5b60006119146119088d848a87600901548b8e8c612034565b8051906020012061207d565b90508a73ffffffffffffffffffffffffffffffffffffffff1661193782866120ad565b73ffffffffffffffffffffffffffffffffffffffff161461198d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198490613714565b60405180910390fd5b84611999828c88612127565b60001c11156119dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d4906138b4565b60405180910390fd5b6119e78c8c611fe3565b15611ac657898360020181905550611a0c8684600001546109df90919063ffffffff16565b8360000181905550611a2b86846001015461215d90919063ffffffff16565b8360010181905550611a4b600184600401546109df90919063ffffffff16565b83600401819055508783600601819055508a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167f4910a2e1baf8597d438cd08f3a64cff447af531f02d91138c8bef6e311f970f485604051611ab991906138d4565b60405180910390a3611b9c565b611add86846000015461215d90919063ffffffff16565b8360000181905550611afc8684600101546109df90919063ffffffff16565b8360010181905550898360030181905550611b25600184600501546109df90919063ffffffff16565b83600501819055508783600701819055508b73ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167f4910a2e1baf8597d438cd08f3a64cff447af531f02d91138c8bef6e311f970f485604051611b9391906138d4565b60405180910390a35b505050505050505050505050565b611c2d846323b872dd60e01b858585604051602401611bcb9392919061336e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612173565b50505050565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ca2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9990613834565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0990613754565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7990613674565b60405180910390fd5b6000611d8e8383611f8e565b935050505060016002811115611dcd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160080160009054906101000a900460ff166002811115611e17577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14611e57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4e906135d4565b60405180910390fd5b600360149054906101000a900463ffffffff16611e7261201c565b611e7c9190613ada565b81600a0160006101000a81548163ffffffff021916908363ffffffff16021790555060028160080160006101000a81548160ff02191690836002811115611eec577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055506000611efd8484611fe3565b90508015611f2357600182600a0160046101000a81548160ff0219169083151502179055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f4910a2e1baf8597d438cd08f3a64cff447af531f02d91138c8bef6e311f970f484604051611f8091906138d4565b60405180910390a350505050565b600080600080600080611fa1888861223a565b915091506000611fb18383612265565b905060006002600083815260200190815260200160002090508383838397509750975097505050505092959194509250565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1610905092915050565b60006401000000004261202f9190613da1565b905090565b60606000612041876108c8565b90508881898786888b604051602001612060979695949392919061323d565b604051602081830303815290604052915050979650505050505050565b600081604051602001612090919061332d565b604051602081830303815290604052805190602001209050919050565b600060418251146120f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ea906134f4565b60405180910390fd5b60008060006020850151925060408501519150606085015160001a905061211c86828585612298565b935050505092915050565b600083838360405160200161213e939291906132d9565b6040516020818303038152906040528051906020012090509392505050565b6000818361216b9190613b14565b905092915050565b60006121d5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166124239092919063ffffffff16565b905060008151111561223557808060200190518101906121f5919061299c565b612234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222b90613814565b60405180910390fd5b5b505050565b6000806122478484611fe3565b156122575783839150915061225e565b8284915091505b9250929050565b6000828260405160200161227a929190613211565b60405160208183030381529060405280519060200120905092915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115612300576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f7906135f4565b60405180910390fd5b601b8460ff1614806123155750601c8460ff16145b612354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234b906136d4565b60405180910390fd5b60006001868686866040516000815260200160405260405161237994939291906133e9565b6020604051602081039080840390855afa15801561239b573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240e906134d4565b60405180910390fd5b80915050949350505050565b6060612432848460008561243b565b90509392505050565b606082471015612480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247790613614565b60405180910390fd5b6124898561254f565b6124c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124bf906137b4565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516124f19190613316565b60006040518083038185875af1925050503d806000811461252e576040519150601f19603f3d011682016040523d82523d6000602084013e612533565b606091505b5091509150612543828286612562565b92505050949350505050565b600080823b905060008111915050919050565b60608315612572578290506125c2565b6000835111156125855782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b991906134b2565b60405180910390fd5b9392505050565b60006125dc6125d784613a05565b6139e0565b9050828152602081018484840111156125f457600080fd5b6125ff848285613c74565b509392505050565b600081359050612616816145f8565b92915050565b60008135905061262b8161460f565b92915050565b60008151905061264081614626565b92915050565b6000813590506126558161463d565b92915050565b60008083601f84011261266d57600080fd5b8235905067ffffffffffffffff81111561268657600080fd5b60208301915083600182028301111561269e57600080fd5b9250929050565b600082601f8301126126b657600080fd5b81356126c68482602086016125c9565b91505092915050565b6000813590506126de81614654565b92915050565b6000602082840312156126f657600080fd5b600061270484828501612607565b91505092915050565b6000806000806080858703121561272357600080fd5b60006127318782880161261c565b94505060206127428782880161261c565b9350506040612753878288016126cf565b9250506060612764878288016126cf565b91505092959194509250565b60008060008060008060008060c0898b03121561278c57600080fd5b600061279a8b828c01612607565b98505060206127ab8b828c01612607565b97505060406127bc8b828c01612607565b96505060606127cd8b828c016126cf565b955050608089013567ffffffffffffffff8111156127ea57600080fd5b6127f68b828c0161265b565b945094505060a089013567ffffffffffffffff81111561281557600080fd5b6128218b828c0161265b565b92509250509295985092959890939650565b6000806000806080858703121561284957600080fd5b600061285787828801612607565b945050602061286887828801612607565b9350506040612879878288016126cf565b925050606061288a878288016126cf565b91505092959194509250565b600080604083850312156128a957600080fd5b60006128b785828601612607565b92505060206128c885828601612646565b9150509250929050565b600080600080600080600080610100898b0312156128ef57600080fd5b60006128fd8b828c01612607565b985050602061290e8b828c01612646565b975050604061291f8b828c016126cf565b96505060606129308b828c016126cf565b95505060806129418b828c01612646565b94505060a06129528b828c016126cf565b93505060c06129638b828c016126cf565b92505060e089013567ffffffffffffffff81111561298057600080fd5b61298c8b828c016126a5565b9150509295985092959890939650565b6000602082840312156129ae57600080fd5b60006129bc84828501612631565b91505092915050565b6000602082840312156129d757600080fd5b60006129e584828501612646565b91505092915050565b60008060408385031215612a0157600080fd5b6000612a0f85828601612646565b9250506020612a2085828601612607565b9150509250929050565b60008060208385031215612a3d57600080fd5b600083013567ffffffffffffffff811115612a5757600080fd5b612a638582860161265b565b92509250509250929050565b612a7881613b86565b82525050565b612a8f612a8a82613b86565b613d69565b82525050565b612a9e81613baa565b82525050565b612aad81613baa565b82525050565b612abc81613bb6565b82525050565b612acb81613bb6565b82525050565b612ae2612add82613bb6565b613d7b565b82525050565b6000612af48385613a4c565b9350612b01838584613c74565b612b0a83613e8e565b840190509392505050565b6000612b2082613a36565b612b2a8185613a5d565b9350612b3a818560208601613c83565b80840191505092915050565b612b4f81613c24565b82525050565b612b5e81613c48565b82525050565b612b6d81613c48565b82525050565b612b7c81613c5a565b82525050565b6000612b8d82613a41565b612b978185613a68565b9350612ba7818560208601613c83565b612bb081613e8e565b840191505092915050565b6000612bc8601883613a68565b9150612bd382613ed3565b602082019050919050565b6000612beb601f83613a68565b9150612bf682613efc565b602082019050919050565b6000612c0e601c83613a79565b9150612c1982613f25565b601c82019050919050565b6000612c31602a83613a68565b9150612c3c82613f4e565b604082019050919050565b6000612c54602883613a68565b9150612c5f82613f9d565b604082019050919050565b6000612c77602083613a68565b9150612c8282613fec565b602082019050919050565b6000612c9a601c83613a68565b9150612ca582614015565b602082019050919050565b6000612cbd602d83613a68565b9150612cc88261403e565b604082019050919050565b6000612ce0601883613a68565b9150612ceb8261408d565b602082019050919050565b6000612d03601483613a68565b9150612d0e826140b6565b602082019050919050565b6000612d26602283613a68565b9150612d31826140df565b604082019050919050565b6000612d49602683613a68565b9150612d548261412e565b604082019050919050565b6000612d6c601883613a68565b9150612d778261417d565b602082019050919050565b6000612d8f603283613a68565b9150612d9a826141a6565b604082019050919050565b6000612db2601e83613a68565b9150612dbd826141f5565b602082019050919050565b6000612dd5602a83613a68565b9150612de08261421e565b604082019050919050565b6000612df8601883613a68565b9150612e038261426d565b602082019050919050565b6000612e1b602283613a68565b9150612e2682614296565b604082019050919050565b6000612e3e601a83613a68565b9150612e49826142e5565b602082019050919050565b6000612e61602283613a68565b9150612e6c8261430e565b604082019050919050565b6000612e84601a83613a68565b9150612e8f8261435d565b602082019050919050565b6000612ea7601b83613a68565b9150612eb282614386565b602082019050919050565b6000612eca601d83613a68565b9150612ed5826143af565b602082019050919050565b6000612eed601783613a68565b9150612ef8826143d8565b602082019050919050565b6000612f10601d83613a68565b9150612f1b82614401565b602082019050919050565b6000612f33601783613a68565b9150612f3e8261442a565b602082019050919050565b6000612f56601e83613a68565b9150612f6182614453565b602082019050919050565b6000612f79602a83613a68565b9150612f848261447c565b604082019050919050565b6000612f9c602f83613a68565b9150612fa7826144cb565b604082019050919050565b6000612fbf601a83613a68565b9150612fca8261451a565b602082019050919050565b6000612fe2602983613a68565b9150612fed82614543565b604082019050919050565b6000613005602083613a68565b915061301082614592565b602082019050919050565b6000613028601483613a68565b9150613033826145bb565b602082019050919050565b6101808201600080830154905061305481613cea565b61306160008601826131af565b506001830154905061307281613cea565b61307f60208601826131af565b506002830154905061309081613cb6565b61309d6040860182612ab3565b50600383015490506130ae81613cb6565b6130bb6060860182612ab3565b50600483015490506130cc81613cea565b6130d960808601826131af565b50600583015490506130ea81613cea565b6130f760a08601826131af565b506006830154905061310881613cea565b61311560c08601826131af565b506007830154905061312681613cea565b61313360e08601826131af565b506008830154905061314481613cd0565b613152610100860182612b55565b506009830154905061316381613cea565b6131716101208601826131af565b50600a830154905061318281613d04565b6131906101408601826131e4565b5061319a81613d1e565b6131a8610160860182612a95565b5050505050565b6131b881613bfd565b82525050565b6131c781613bfd565b82525050565b6131de6131d982613bfd565b613d97565b82525050565b6131ed81613c07565b82525050565b6131fc81613c07565b82525050565b61320b81613c17565b82525050565b600061321d8285612a7e565b60148201915061322d8284612a7e565b6014820191508190509392505050565b6000613249828a612a7e565b6014820191506132598289612a7e565b60148201915061326982886131cd565b60208201915061327982876131cd565b60208201915061328982866131cd565b60208201915061329982856131cd565b6020820191506132a982846131cd565b60208201915081905098975050505050505050565b60006132ca8284612ad1565b60208201915081905092915050565b60006132e58286612ad1565b6020820191506132f58285612ad1565b60208201915061330582846131cd565b602082019150819050949350505050565b60006133228284612b15565b915081905092915050565b600061333882612c01565b91506133448284612ad1565b60208201915081905092915050565b60006020820190506133686000830184612a6f565b92915050565b60006060820190506133836000830186612a6f565b6133906020830185612a6f565b61339d60408301846131be565b949350505050565b60006040820190506133ba6000830185612a6f565b6133c760208301846131be565b9392505050565b60006020820190506133e36000830184612ac2565b92915050565b60006080820190506133fe6000830187612ac2565b61340b6020830186613202565b6134186040830185612ac2565b6134256060830184612ac2565b95945050505050565b60006020820190508181036000830152613449818486612ae8565b90509392505050565b60006020820190506134676000830184612b46565b92915050565b60006080820190506134826000830187612b73565b61348f6020830186613202565b61349c6040830185612ac2565b6134a96060830184612ac2565b95945050505050565b600060208201905081810360008301526134cc8184612b82565b905092915050565b600060208201905081810360008301526134ed81612bbb565b9050919050565b6000602082019050818103600083015261350d81612bde565b9050919050565b6000602082019050818103600083015261352d81612c24565b9050919050565b6000602082019050818103600083015261354d81612c47565b9050919050565b6000602082019050818103600083015261356d81612c6a565b9050919050565b6000602082019050818103600083015261358d81612c8d565b9050919050565b600060208201905081810360008301526135ad81612cb0565b9050919050565b600060208201905081810360008301526135cd81612cd3565b9050919050565b600060208201905081810360008301526135ed81612cf6565b9050919050565b6000602082019050818103600083015261360d81612d19565b9050919050565b6000602082019050818103600083015261362d81612d3c565b9050919050565b6000602082019050818103600083015261364d81612d5f565b9050919050565b6000602082019050818103600083015261366d81612d82565b9050919050565b6000602082019050818103600083015261368d81612da5565b9050919050565b600060208201905081810360008301526136ad81612dc8565b9050919050565b600060208201905081810360008301526136cd81612deb565b9050919050565b600060208201905081810360008301526136ed81612e0e565b9050919050565b6000602082019050818103600083015261370d81612e31565b9050919050565b6000602082019050818103600083015261372d81612e54565b9050919050565b6000602082019050818103600083015261374d81612e77565b9050919050565b6000602082019050818103600083015261376d81612e9a565b9050919050565b6000602082019050818103600083015261378d81612ebd565b9050919050565b600060208201905081810360008301526137ad81612ee0565b9050919050565b600060208201905081810360008301526137cd81612f03565b9050919050565b600060208201905081810360008301526137ed81612f26565b9050919050565b6000602082019050818103600083015261380d81612f49565b9050919050565b6000602082019050818103600083015261382d81612f6c565b9050919050565b6000602082019050818103600083015261384d81612f8f565b9050919050565b6000602082019050818103600083015261386d81612fb2565b9050919050565b6000602082019050818103600083015261388d81612fd5565b9050919050565b600060208201905081810360008301526138ad81612ff8565b9050919050565b600060208201905081810360008301526138cd8161301b565b9050919050565b6000610180820190506138ea600083018461303e565b92915050565b600060208201905061390560008301846131be565b92915050565b600061018082019050613921600083018f6131be565b61392e602083018e6131be565b61393b604083018d612ac2565b613948606083018c612ac2565b613955608083018b6131be565b61396260a083018a6131be565b61396f60c08301896131be565b61397c60e08301886131be565b61398a610100830187612b64565b6139986101208301866131be565b6139a66101408301856131f3565b6139b4610160830184612aa4565b9d9c50505050505050505050505050565b60006020820190506139da60008301846131f3565b92915050565b60006139ea6139fb565b90506139f68282613d38565b919050565b6000604051905090565b600067ffffffffffffffff821115613a2057613a1f613e5f565b5b613a2982613e8e565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000613a8f82613bfd565b9150613a9a83613bfd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613acf57613ace613dd2565b5b828201905092915050565b6000613ae582613c07565b9150613af083613c07565b92508263ffffffff03821115613b0957613b08613dd2565b5b828201905092915050565b6000613b1f82613bfd565b9150613b2a83613bfd565b925082821015613b3d57613b3c613dd2565b5b828203905092915050565b600060ff82169050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b6000613b9182613bdd565b9050919050565b6000613ba382613bdd565b9050919050565b60008115159050919050565b6000819050919050565b6000819050613bce826145e4565b919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b6000613c2f82613c36565b9050919050565b6000613c4182613bdd565b9050919050565b6000613c5382613bc0565b9050919050565b6000613c6d613c6883613bd3565b613e9f565b9050919050565b82818337600083830152505050565b60005b83811015613ca1578082015181840152602081019050613c86565b83811115613cb0576000848401525b50505050565b6000613cc9613cc483613eb9565b613b55565b9050919050565b6000613ce3613cde83613eb9565b613b5f565b9050919050565b6000613cfd613cf883613eb9565b613b6c565b9050919050565b6000613d17613d1283613eb9565b613b76565b9050919050565b6000613d31613d2c83613ec6565b613b48565b9050919050565b613d4182613e8e565b810181811067ffffffffffffffff82111715613d6057613d5f613e5f565b5b80604052505050565b6000613d7482613d85565b9050919050565b6000819050919050565b6000613d9082613eac565b9050919050565b6000819050919050565b6000613dac82613bfd565b9150613db783613bfd565b925082613dc757613dc6613e01565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160001b9050919050565b60008160601b9050919050565b60008160001c9050919050565b60008160201c9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f6163636f756e744120616e64206163636f756e7442206d757374206e6f74206260008201527f65207468652073616d6500000000000000000000000000000000000000000000602082015250565b7f6368616e6e656c206d757374206265206f70656e206f722070656e64696e672060008201527f746f20636c6f7365000000000000000000000000000000000000000000000000602082015250565b7f6368616e6e656c206d7573742062652070656e64696e6720746f20636c6f7365600082015250565b7f726564656d7074696f6e73206d75737420626520696e206f7264657200000000600082015250565b7f616d6f756e742073656e74206d75737420626520657175616c20746f20616d6f60008201527f756e742073706563696669656400000000000000000000000000000000000000602082015250565b7f73656e646572206d757374206e6f7420626520656d7074790000000000000000600082015250565b7f6368616e6e656c206d757374206265206f70656e000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f63616c6c6572206d75737420626520486f7072546f6b656e0000000000000000600082015250565b7f7573657244617461206d757374206d61746368206f6e65206f66206f7572207360008201527f7570706f727465642066756e6374696f6e730000000000000000000000000000602082015250565b7f636f756e7465727061727479206d757374206e6f7420626520656d7074790000600082015250565b7f636f6d6d69746d656e74206d7573742062652068617368206f66206e6578742060008201527f636f6d6d69746d656e7400000000000000000000000000000000000000000000602082015250565b7f616d6f756e74206d757374206e6f7420626520656d7074790000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f6163636f756e7442206d757374206e6f7420626520656d707479000000000000600082015250565b7f7369676e6572206d757374206d617463682074686520636f756e74657270617260008201527f7479000000000000000000000000000000000000000000000000000000000000602082015250565b7f6163636f756e7441206d757374206e6f7420626520656d707479000000000000600082015250565b7f696e69746961746f72206d757374206e6f7420626520656d7074790000000000600082015250565b7f43616e6e6f742066756e64206120636c6f73696e67206368616e6e656c000000600082015250565b7f746f6b656e206d757374206e6f7420626520656d707479000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f7469636b65742065706f6368206d757374206d61746368000000000000000000600082015250565b7f636c6f7375726554696d65206d757374206265206265666f7265206e6f770000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f696e69746961746f7220616e6420636f756e7465727061727479206d7573742060008201527f6e6f74206265207468652073616d650000000000000000000000000000000000602082015250565b7f72656465656d6572206d757374206e6f7420626520656d707479000000000000600082015250565b7f616d6f756e7441206f7220616d6f756e7442206d75737420626520677265617460008201527f6572207468616e20300000000000000000000000000000000000000000000000602082015250565b7f6e657874436f6d6d69746d656e74206d757374206e6f7420626520656d707479600082015250565b7f7469636b6574206d75737420626520612077696e000000000000000000000000600082015250565b600381106145f5576145f4613e30565b5b50565b61460181613b86565b811461460c57600080fd5b50565b61461881613b98565b811461462357600080fd5b50565b61462f81613baa565b811461463a57600080fd5b50565b61464681613bb6565b811461465157600080fd5b50565b61465d81613bfd565b811461466857600080fd5b5056fea2646970667358221220648cd3a752298c0cb14bfc3b4cce6574f13f9a9eebc8e06dfd29f03920eac95264736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100e95760003560e01c806372581cc01161008c578063b4037e8011610066578063b4037e801461023f578063b7bbca8a1461025b578063c3af8c5614610277578063fc0c546a146102a7576100e9565b806372581cc0146101ca5780637a7ebd7b146101e8578063b216706c14610223576100e9565b8063249cb3fa116100c8578063249cb3fa14610144578063275621d1146101745780632bcead2f146101925780634341abdd146101ae576100e9565b806223de29146100ee578063048a097d1461010a578063075e389f14610128575b600080fd5b61010860048036038101906101039190612770565b6102c5565b005b6101126104a0565b60405161011f91906138f0565b60405180910390f35b610142600480360381019061013d91906126e4565b6104a6565b005b61015e600480360381019061015991906129ee565b6104b3565b60405161016b91906133ce565b60405180910390f35b61017c610549565b60405161018991906139c5565b60405180910390f35b6101ac60048036038101906101a791906128d2565b61055f565b005b6101c860048036038101906101c39190612833565b61057a565b005b6101d26105ed565b6040516101df91906133ce565b60405180910390f35b61020260048036038101906101fd91906129c5565b610611565b60405161021a9c9b9a9998979695949392919061390b565b60405180910390f35b61023d60048036038101906102389190612a2a565b61069b565b005b610259600480360381019061025491906126e4565b6106ef565b005b61027560048036038101906102709190612896565b6106fc565b005b610291600480360381019061028c91906129c5565b6108c8565b60405161029e9190613353565b60405180910390f35b6102af6109b9565b6040516102bc9190613452565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034c90613634565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614806103bb5750600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16145b156103c557610496565b600154848490501461040c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040390613654565b60405180910390fd5b6000806000808787810190610421919061270d565b8094508195508296508397505050505061044481836109df90919063ffffffff16565b8914610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047c90613594565b60405180910390fd5b610491848484846109f5565b505050505b5050505050505050565b60015481565b6104b03382610e5a565b50565b600080600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661051f576000801b610541565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b905092915050565b600360149054906101000a900463ffffffff1681565b61057033898989898989898961149b565b5050505050505050565b6105db333061059284866109df90919063ffffffff16565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611baa909392919063ffffffff16565b6105e7848484846109f5565b50505050565b7fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b81565b60026020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060154908060070154908060080160009054906101000a900460ff169080600901549080600a0160009054906101000a900463ffffffff169080600a0160049054906101000a900460ff1690508c565b3373ffffffffffffffffffffffffffffffffffffffff167f7463de96ba8fbb96ef3e622fddfff321bdbdfef94b95cbcf27f6bfcac8fe83aa83836040516106e392919061342e565b60405180910390a25050565b6106f93382611c33565b50565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561076c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610763906135b4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d390613674565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561084b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084290613514565b60405180910390fd5b60006108573384611f8e565b93505050506108663384611fe3565b156108995781816002018190555061088c600182600401546109df90919063ffffffff16565b81600401819055506108c3565b8181600301819055506108ba600182600501546109df90919063ffffffff16565b81600401819055505b505050565b6000807ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141905060007f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179890506000601b9050600060016000838560001b8780610959577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b878b60001c0960001b6040516000815260200160405260405161097f949392919061346d565b6020604051602081039080840390855afa1580156109a1573d6000803e3d6000fd5b50505060206040510351905080945050505050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081836109ed9190613a84565b905092915050565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610a64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5b90613514565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610ad4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acb90613734565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3b906136f4565b60405180910390fd5b6000821180610b535750600081115b610b92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8990613874565b60405180910390fd5b600080600080610ba28888611fe3565b15610bb857879350869250859150849050610bc5565b8693508792508491508590505b6000610bd18585611f8e565b9350505050600280811115610c0f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160080160009054906101000a900460ff166002811115610c59577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610c9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9190613774565b60405180910390fd5b60006002811115610cd4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160080160009054906101000a900460ff166002811115610d1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610dac57610d3c600182600901546109df90919063ffffffff16565b816009018190555060018160080160006101000a81548160ff02191690836002811115610d92577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060008160060181905550600081600701819055505b610dc38382600001546109df90919063ffffffff16565b8160000181905550610de28282600101546109df90919063ffffffff16565b81600101819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f4910a2e1baf8597d438cd08f3a64cff447af531f02d91138c8bef6e311f970f483604051610e4791906138d4565b60405180910390a3505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610eec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee390613794565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5290613834565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc290613754565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561103b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103290613674565b60405180910390fd5b600080600061104a8585611f8e565b9350509250925060028081111561108a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160080160009054906101000a900460ff1660028111156110d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14611114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110b90613554565b60405180910390fd5b80600a0160049054906101000a900460ff16801561115d57508273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b806111ae575080600a0160049054906101000a900460ff161580156111ad57508173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b5b1561121d576111bb61201c565b63ffffffff1681600a0160009054906101000a900463ffffffff1663ffffffff161061121c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611213906137f4565b60405180910390fd5b5b6000816000015411156112df57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8483600001546040518363ffffffff1660e01b815260040161128b9291906133a5565b602060405180830381600087803b1580156112a557600080fd5b505af11580156112b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dd919061299c565b505b6000816001015411156113a157600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8383600101546040518363ffffffff1660e01b815260040161134d9291906133a5565b602060405180830381600087803b15801561136757600080fd5b505af115801561137b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139f919061299c565b505b8060000160009055806001016000905580600a0160006101000a81549063ffffffff021916905580600a0160046101000a81549060ff021916905560008160080160006101000a81548160ff0219169083600281111561142a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f4910a2e1baf8597d438cd08f3a64cff447af531f02d91138c8bef6e311f970f48360405161148c91906138d4565b60405180910390a35050505050565b600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16141561150b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150290613854565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561157b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157290613674565b60405180910390fd5b6000801b8714156115c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b890613894565b60405180910390fd5b6000831415611605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fc906136b4565b60405180910390fd5b60006116118a8a611f8e565b935050505060006116228b8b611fe3565b1561172b578860405160200161163891906132be565b60405160208183030381529060405280519060200120826002015414611693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168a90613694565b60405180910390fd5b878260040154146116d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d0906137d4565b60405180910390fd5b8682600601541061171f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171690613574565b60405180910390fd5b8160040154905061182b565b8860405160200161173c91906132be565b60405160208183030381529060405280519060200120826003015414611797576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178e90613694565b60405180910390fd5b878260050154146117dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d4906137d4565b60405180910390fd5b86826007015410611823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181a90613574565b60405180910390fd5b816005015490505b60006002811115611865577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260080160009054906101000a900460ff1660028111156118af577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156118f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e790613534565b60405180910390fd5b60006119146119088d848a87600901548b8e8c612034565b8051906020012061207d565b90508a73ffffffffffffffffffffffffffffffffffffffff1661193782866120ad565b73ffffffffffffffffffffffffffffffffffffffff161461198d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198490613714565b60405180910390fd5b84611999828c88612127565b60001c11156119dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d4906138b4565b60405180910390fd5b6119e78c8c611fe3565b15611ac657898360020181905550611a0c8684600001546109df90919063ffffffff16565b8360000181905550611a2b86846001015461215d90919063ffffffff16565b8360010181905550611a4b600184600401546109df90919063ffffffff16565b83600401819055508783600601819055508a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167f4910a2e1baf8597d438cd08f3a64cff447af531f02d91138c8bef6e311f970f485604051611ab991906138d4565b60405180910390a3611b9c565b611add86846000015461215d90919063ffffffff16565b8360000181905550611afc8684600101546109df90919063ffffffff16565b8360010181905550898360030181905550611b25600184600501546109df90919063ffffffff16565b83600501819055508783600701819055508b73ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167f4910a2e1baf8597d438cd08f3a64cff447af531f02d91138c8bef6e311f970f485604051611b9391906138d4565b60405180910390a35b505050505050505050505050565b611c2d846323b872dd60e01b858585604051602401611bcb9392919061336e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612173565b50505050565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ca2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9990613834565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0990613754565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7990613674565b60405180910390fd5b6000611d8e8383611f8e565b935050505060016002811115611dcd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160080160009054906101000a900460ff166002811115611e17577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14611e57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4e906135d4565b60405180910390fd5b600360149054906101000a900463ffffffff16611e7261201c565b611e7c9190613ada565b81600a0160006101000a81548163ffffffff021916908363ffffffff16021790555060028160080160006101000a81548160ff02191690836002811115611eec577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055506000611efd8484611fe3565b90508015611f2357600182600a0160046101000a81548160ff0219169083151502179055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f4910a2e1baf8597d438cd08f3a64cff447af531f02d91138c8bef6e311f970f484604051611f8091906138d4565b60405180910390a350505050565b600080600080600080611fa1888861223a565b915091506000611fb18383612265565b905060006002600083815260200190815260200160002090508383838397509750975097505050505092959194509250565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1610905092915050565b60006401000000004261202f9190613da1565b905090565b60606000612041876108c8565b90508881898786888b604051602001612060979695949392919061323d565b604051602081830303815290604052915050979650505050505050565b600081604051602001612090919061332d565b604051602081830303815290604052805190602001209050919050565b600060418251146120f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ea906134f4565b60405180910390fd5b60008060006020850151925060408501519150606085015160001a905061211c86828585612298565b935050505092915050565b600083838360405160200161213e939291906132d9565b6040516020818303038152906040528051906020012090509392505050565b6000818361216b9190613b14565b905092915050565b60006121d5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166124239092919063ffffffff16565b905060008151111561223557808060200190518101906121f5919061299c565b612234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222b90613814565b60405180910390fd5b5b505050565b6000806122478484611fe3565b156122575783839150915061225e565b8284915091505b9250929050565b6000828260405160200161227a929190613211565b60405160208183030381529060405280519060200120905092915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115612300576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f7906135f4565b60405180910390fd5b601b8460ff1614806123155750601c8460ff16145b612354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234b906136d4565b60405180910390fd5b60006001868686866040516000815260200160405260405161237994939291906133e9565b6020604051602081039080840390855afa15801561239b573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240e906134d4565b60405180910390fd5b80915050949350505050565b6060612432848460008561243b565b90509392505050565b606082471015612480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247790613614565b60405180910390fd5b6124898561254f565b6124c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124bf906137b4565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516124f19190613316565b60006040518083038185875af1925050503d806000811461252e576040519150601f19603f3d011682016040523d82523d6000602084013e612533565b606091505b5091509150612543828286612562565b92505050949350505050565b600080823b905060008111915050919050565b60608315612572578290506125c2565b6000835111156125855782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b991906134b2565b60405180910390fd5b9392505050565b60006125dc6125d784613a05565b6139e0565b9050828152602081018484840111156125f457600080fd5b6125ff848285613c74565b509392505050565b600081359050612616816145f8565b92915050565b60008135905061262b8161460f565b92915050565b60008151905061264081614626565b92915050565b6000813590506126558161463d565b92915050565b60008083601f84011261266d57600080fd5b8235905067ffffffffffffffff81111561268657600080fd5b60208301915083600182028301111561269e57600080fd5b9250929050565b600082601f8301126126b657600080fd5b81356126c68482602086016125c9565b91505092915050565b6000813590506126de81614654565b92915050565b6000602082840312156126f657600080fd5b600061270484828501612607565b91505092915050565b6000806000806080858703121561272357600080fd5b60006127318782880161261c565b94505060206127428782880161261c565b9350506040612753878288016126cf565b9250506060612764878288016126cf565b91505092959194509250565b60008060008060008060008060c0898b03121561278c57600080fd5b600061279a8b828c01612607565b98505060206127ab8b828c01612607565b97505060406127bc8b828c01612607565b96505060606127cd8b828c016126cf565b955050608089013567ffffffffffffffff8111156127ea57600080fd5b6127f68b828c0161265b565b945094505060a089013567ffffffffffffffff81111561281557600080fd5b6128218b828c0161265b565b92509250509295985092959890939650565b6000806000806080858703121561284957600080fd5b600061285787828801612607565b945050602061286887828801612607565b9350506040612879878288016126cf565b925050606061288a878288016126cf565b91505092959194509250565b600080604083850312156128a957600080fd5b60006128b785828601612607565b92505060206128c885828601612646565b9150509250929050565b600080600080600080600080610100898b0312156128ef57600080fd5b60006128fd8b828c01612607565b985050602061290e8b828c01612646565b975050604061291f8b828c016126cf565b96505060606129308b828c016126cf565b95505060806129418b828c01612646565b94505060a06129528b828c016126cf565b93505060c06129638b828c016126cf565b92505060e089013567ffffffffffffffff81111561298057600080fd5b61298c8b828c016126a5565b9150509295985092959890939650565b6000602082840312156129ae57600080fd5b60006129bc84828501612631565b91505092915050565b6000602082840312156129d757600080fd5b60006129e584828501612646565b91505092915050565b60008060408385031215612a0157600080fd5b6000612a0f85828601612646565b9250506020612a2085828601612607565b9150509250929050565b60008060208385031215612a3d57600080fd5b600083013567ffffffffffffffff811115612a5757600080fd5b612a638582860161265b565b92509250509250929050565b612a7881613b86565b82525050565b612a8f612a8a82613b86565b613d69565b82525050565b612a9e81613baa565b82525050565b612aad81613baa565b82525050565b612abc81613bb6565b82525050565b612acb81613bb6565b82525050565b612ae2612add82613bb6565b613d7b565b82525050565b6000612af48385613a4c565b9350612b01838584613c74565b612b0a83613e8e565b840190509392505050565b6000612b2082613a36565b612b2a8185613a5d565b9350612b3a818560208601613c83565b80840191505092915050565b612b4f81613c24565b82525050565b612b5e81613c48565b82525050565b612b6d81613c48565b82525050565b612b7c81613c5a565b82525050565b6000612b8d82613a41565b612b978185613a68565b9350612ba7818560208601613c83565b612bb081613e8e565b840191505092915050565b6000612bc8601883613a68565b9150612bd382613ed3565b602082019050919050565b6000612beb601f83613a68565b9150612bf682613efc565b602082019050919050565b6000612c0e601c83613a79565b9150612c1982613f25565b601c82019050919050565b6000612c31602a83613a68565b9150612c3c82613f4e565b604082019050919050565b6000612c54602883613a68565b9150612c5f82613f9d565b604082019050919050565b6000612c77602083613a68565b9150612c8282613fec565b602082019050919050565b6000612c9a601c83613a68565b9150612ca582614015565b602082019050919050565b6000612cbd602d83613a68565b9150612cc88261403e565b604082019050919050565b6000612ce0601883613a68565b9150612ceb8261408d565b602082019050919050565b6000612d03601483613a68565b9150612d0e826140b6565b602082019050919050565b6000612d26602283613a68565b9150612d31826140df565b604082019050919050565b6000612d49602683613a68565b9150612d548261412e565b604082019050919050565b6000612d6c601883613a68565b9150612d778261417d565b602082019050919050565b6000612d8f603283613a68565b9150612d9a826141a6565b604082019050919050565b6000612db2601e83613a68565b9150612dbd826141f5565b602082019050919050565b6000612dd5602a83613a68565b9150612de08261421e565b604082019050919050565b6000612df8601883613a68565b9150612e038261426d565b602082019050919050565b6000612e1b602283613a68565b9150612e2682614296565b604082019050919050565b6000612e3e601a83613a68565b9150612e49826142e5565b602082019050919050565b6000612e61602283613a68565b9150612e6c8261430e565b604082019050919050565b6000612e84601a83613a68565b9150612e8f8261435d565b602082019050919050565b6000612ea7601b83613a68565b9150612eb282614386565b602082019050919050565b6000612eca601d83613a68565b9150612ed5826143af565b602082019050919050565b6000612eed601783613a68565b9150612ef8826143d8565b602082019050919050565b6000612f10601d83613a68565b9150612f1b82614401565b602082019050919050565b6000612f33601783613a68565b9150612f3e8261442a565b602082019050919050565b6000612f56601e83613a68565b9150612f6182614453565b602082019050919050565b6000612f79602a83613a68565b9150612f848261447c565b604082019050919050565b6000612f9c602f83613a68565b9150612fa7826144cb565b604082019050919050565b6000612fbf601a83613a68565b9150612fca8261451a565b602082019050919050565b6000612fe2602983613a68565b9150612fed82614543565b604082019050919050565b6000613005602083613a68565b915061301082614592565b602082019050919050565b6000613028601483613a68565b9150613033826145bb565b602082019050919050565b6101808201600080830154905061305481613cea565b61306160008601826131af565b506001830154905061307281613cea565b61307f60208601826131af565b506002830154905061309081613cb6565b61309d6040860182612ab3565b50600383015490506130ae81613cb6565b6130bb6060860182612ab3565b50600483015490506130cc81613cea565b6130d960808601826131af565b50600583015490506130ea81613cea565b6130f760a08601826131af565b506006830154905061310881613cea565b61311560c08601826131af565b506007830154905061312681613cea565b61313360e08601826131af565b506008830154905061314481613cd0565b613152610100860182612b55565b506009830154905061316381613cea565b6131716101208601826131af565b50600a830154905061318281613d04565b6131906101408601826131e4565b5061319a81613d1e565b6131a8610160860182612a95565b5050505050565b6131b881613bfd565b82525050565b6131c781613bfd565b82525050565b6131de6131d982613bfd565b613d97565b82525050565b6131ed81613c07565b82525050565b6131fc81613c07565b82525050565b61320b81613c17565b82525050565b600061321d8285612a7e565b60148201915061322d8284612a7e565b6014820191508190509392505050565b6000613249828a612a7e565b6014820191506132598289612a7e565b60148201915061326982886131cd565b60208201915061327982876131cd565b60208201915061328982866131cd565b60208201915061329982856131cd565b6020820191506132a982846131cd565b60208201915081905098975050505050505050565b60006132ca8284612ad1565b60208201915081905092915050565b60006132e58286612ad1565b6020820191506132f58285612ad1565b60208201915061330582846131cd565b602082019150819050949350505050565b60006133228284612b15565b915081905092915050565b600061333882612c01565b91506133448284612ad1565b60208201915081905092915050565b60006020820190506133686000830184612a6f565b92915050565b60006060820190506133836000830186612a6f565b6133906020830185612a6f565b61339d60408301846131be565b949350505050565b60006040820190506133ba6000830185612a6f565b6133c760208301846131be565b9392505050565b60006020820190506133e36000830184612ac2565b92915050565b60006080820190506133fe6000830187612ac2565b61340b6020830186613202565b6134186040830185612ac2565b6134256060830184612ac2565b95945050505050565b60006020820190508181036000830152613449818486612ae8565b90509392505050565b60006020820190506134676000830184612b46565b92915050565b60006080820190506134826000830187612b73565b61348f6020830186613202565b61349c6040830185612ac2565b6134a96060830184612ac2565b95945050505050565b600060208201905081810360008301526134cc8184612b82565b905092915050565b600060208201905081810360008301526134ed81612bbb565b9050919050565b6000602082019050818103600083015261350d81612bde565b9050919050565b6000602082019050818103600083015261352d81612c24565b9050919050565b6000602082019050818103600083015261354d81612c47565b9050919050565b6000602082019050818103600083015261356d81612c6a565b9050919050565b6000602082019050818103600083015261358d81612c8d565b9050919050565b600060208201905081810360008301526135ad81612cb0565b9050919050565b600060208201905081810360008301526135cd81612cd3565b9050919050565b600060208201905081810360008301526135ed81612cf6565b9050919050565b6000602082019050818103600083015261360d81612d19565b9050919050565b6000602082019050818103600083015261362d81612d3c565b9050919050565b6000602082019050818103600083015261364d81612d5f565b9050919050565b6000602082019050818103600083015261366d81612d82565b9050919050565b6000602082019050818103600083015261368d81612da5565b9050919050565b600060208201905081810360008301526136ad81612dc8565b9050919050565b600060208201905081810360008301526136cd81612deb565b9050919050565b600060208201905081810360008301526136ed81612e0e565b9050919050565b6000602082019050818103600083015261370d81612e31565b9050919050565b6000602082019050818103600083015261372d81612e54565b9050919050565b6000602082019050818103600083015261374d81612e77565b9050919050565b6000602082019050818103600083015261376d81612e9a565b9050919050565b6000602082019050818103600083015261378d81612ebd565b9050919050565b600060208201905081810360008301526137ad81612ee0565b9050919050565b600060208201905081810360008301526137cd81612f03565b9050919050565b600060208201905081810360008301526137ed81612f26565b9050919050565b6000602082019050818103600083015261380d81612f49565b9050919050565b6000602082019050818103600083015261382d81612f6c565b9050919050565b6000602082019050818103600083015261384d81612f8f565b9050919050565b6000602082019050818103600083015261386d81612fb2565b9050919050565b6000602082019050818103600083015261388d81612fd5565b9050919050565b600060208201905081810360008301526138ad81612ff8565b9050919050565b600060208201905081810360008301526138cd8161301b565b9050919050565b6000610180820190506138ea600083018461303e565b92915050565b600060208201905061390560008301846131be565b92915050565b600061018082019050613921600083018f6131be565b61392e602083018e6131be565b61393b604083018d612ac2565b613948606083018c612ac2565b613955608083018b6131be565b61396260a083018a6131be565b61396f60c08301896131be565b61397c60e08301886131be565b61398a610100830187612b64565b6139986101208301866131be565b6139a66101408301856131f3565b6139b4610160830184612aa4565b9d9c50505050505050505050505050565b60006020820190506139da60008301846131f3565b92915050565b60006139ea6139fb565b90506139f68282613d38565b919050565b6000604051905090565b600067ffffffffffffffff821115613a2057613a1f613e5f565b5b613a2982613e8e565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000613a8f82613bfd565b9150613a9a83613bfd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613acf57613ace613dd2565b5b828201905092915050565b6000613ae582613c07565b9150613af083613c07565b92508263ffffffff03821115613b0957613b08613dd2565b5b828201905092915050565b6000613b1f82613bfd565b9150613b2a83613bfd565b925082821015613b3d57613b3c613dd2565b5b828203905092915050565b600060ff82169050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b6000613b9182613bdd565b9050919050565b6000613ba382613bdd565b9050919050565b60008115159050919050565b6000819050919050565b6000819050613bce826145e4565b919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b6000613c2f82613c36565b9050919050565b6000613c4182613bdd565b9050919050565b6000613c5382613bc0565b9050919050565b6000613c6d613c6883613bd3565b613e9f565b9050919050565b82818337600083830152505050565b60005b83811015613ca1578082015181840152602081019050613c86565b83811115613cb0576000848401525b50505050565b6000613cc9613cc483613eb9565b613b55565b9050919050565b6000613ce3613cde83613eb9565b613b5f565b9050919050565b6000613cfd613cf883613eb9565b613b6c565b9050919050565b6000613d17613d1283613eb9565b613b76565b9050919050565b6000613d31613d2c83613ec6565b613b48565b9050919050565b613d4182613e8e565b810181811067ffffffffffffffff82111715613d6057613d5f613e5f565b5b80604052505050565b6000613d7482613d85565b9050919050565b6000819050919050565b6000613d9082613eac565b9050919050565b6000819050919050565b6000613dac82613bfd565b9150613db783613bfd565b925082613dc757613dc6613e01565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160001b9050919050565b60008160601b9050919050565b60008160001c9050919050565b60008160201c9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f6163636f756e744120616e64206163636f756e7442206d757374206e6f74206260008201527f65207468652073616d6500000000000000000000000000000000000000000000602082015250565b7f6368616e6e656c206d757374206265206f70656e206f722070656e64696e672060008201527f746f20636c6f7365000000000000000000000000000000000000000000000000602082015250565b7f6368616e6e656c206d7573742062652070656e64696e6720746f20636c6f7365600082015250565b7f726564656d7074696f6e73206d75737420626520696e206f7264657200000000600082015250565b7f616d6f756e742073656e74206d75737420626520657175616c20746f20616d6f60008201527f756e742073706563696669656400000000000000000000000000000000000000602082015250565b7f73656e646572206d757374206e6f7420626520656d7074790000000000000000600082015250565b7f6368616e6e656c206d757374206265206f70656e000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f63616c6c6572206d75737420626520486f7072546f6b656e0000000000000000600082015250565b7f7573657244617461206d757374206d61746368206f6e65206f66206f7572207360008201527f7570706f727465642066756e6374696f6e730000000000000000000000000000602082015250565b7f636f756e7465727061727479206d757374206e6f7420626520656d7074790000600082015250565b7f636f6d6d69746d656e74206d7573742062652068617368206f66206e6578742060008201527f636f6d6d69746d656e7400000000000000000000000000000000000000000000602082015250565b7f616d6f756e74206d757374206e6f7420626520656d7074790000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f6163636f756e7442206d757374206e6f7420626520656d707479000000000000600082015250565b7f7369676e6572206d757374206d617463682074686520636f756e74657270617260008201527f7479000000000000000000000000000000000000000000000000000000000000602082015250565b7f6163636f756e7441206d757374206e6f7420626520656d707479000000000000600082015250565b7f696e69746961746f72206d757374206e6f7420626520656d7074790000000000600082015250565b7f43616e6e6f742066756e64206120636c6f73696e67206368616e6e656c000000600082015250565b7f746f6b656e206d757374206e6f7420626520656d707479000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f7469636b65742065706f6368206d757374206d61746368000000000000000000600082015250565b7f636c6f7375726554696d65206d757374206265206265666f7265206e6f770000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f696e69746961746f7220616e6420636f756e7465727061727479206d7573742060008201527f6e6f74206265207468652073616d650000000000000000000000000000000000602082015250565b7f72656465656d6572206d757374206e6f7420626520656d707479000000000000600082015250565b7f616d6f756e7441206f7220616d6f756e7442206d75737420626520677265617460008201527f6572207468616e20300000000000000000000000000000000000000000000000602082015250565b7f6e657874436f6d6d69746d656e74206d757374206e6f7420626520656d707479600082015250565b7f7469636b6574206d75737420626520612077696e000000000000000000000000600082015250565b600381106145f5576145f4613e30565b5b50565b61460181613b86565b811461460c57600080fd5b50565b61461881613b98565b811461462357600080fd5b50565b61462f81613baa565b811461463a57600080fd5b50565b61464681613bb6565b811461465157600080fd5b50565b61465d81613bfd565b811461466857600080fd5b5056fea2646970667358221220648cd3a752298c0cb14bfc3b4cce6574f13f9a9eebc8e06dfd29f03920eac95264736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "announce(bytes)": {
        "details": "Announces msg.sender's multiaddress. Confirmation should be done off-chain.",
        "params": {
          "multiaddr": "the multiaddress"
        }
      },
      "bumpChannel(address,bytes32)": {
        "details": "Request a channelIteration bump, so we can make a new set of commitments",
        "params": {
          "counterparty": "the address of the counterparty",
          "newCommitment": ", a secret derived from this new commitment"
        }
      },
      "computeChallenge(bytes32)": {
        "params": {
          "response": "response that is used to recompute the challenge"
        }
      },
      "constructor": {
        "params": {
          "_secsClosure": "seconds until a channel can be closed",
          "_token": "HoprToken address"
        }
      },
      "finalizeChannelClosure(address)": {
        "details": "Finalize channel closure, if cool-off period is over it will close the channel and transfer funds to the parties involved, then emits {ChannelUpdate} event.",
        "params": {
          "counterparty": "the address of the counterparty"
        }
      },
      "fundChannelMulti(address,address,uint256,uint256)": {
        "details": "Funds a channel, in both directions, then emits {ChannelUpdate} event.",
        "params": {
          "account1": "the address of account1",
          "account2": "the address of account2",
          "amount1": "amount to fund account1",
          "amount2": "amount to fund account2"
        }
      },
      "initiateChannelClosure(address)": {
        "details": "Initialize channel closure, updates channel'r closure time, when the cool-off period is over, user may finalize closure, then emits {ChannelUpdate} event.",
        "params": {
          "counterparty": "the address of the counterparty"
        }
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "params": {
          "amount": "uint256 amount of tokens to transfer",
          "from": "address token holder address",
          "operator": "address operator requesting the transfer",
          "operatorData": "bytes extra information provided by the operator (if any)",
          "to": "address recipient address",
          "userData": "bytes extra information provided by the token holder (if any)"
        }
      }
    },
    "stateVariables": {
      "channels": {
        "details": "Stored channels keyed by their channel ids"
      },
      "secsClosure": {
        "details": "Seconds it takes until we can finalize channel closure once, channel closure has been initialized."
      },
      "token": {
        "details": "HoprToken, the token that will be used to settle payments"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canImplementInterfaceForAddress(bytes32,address)": {
        "notice": "See {IERC1820Implementer-canImplementInterfaceForAddress}."
      },
      "computeChallenge(bytes32)": {
        "notice": "Uses the response to recompute the challenge. This is done by multiplying the base point of the curve with the given response. Due to the lack of embedded ECMUL functionality in the current version of the EVM, this is done by misusing the `ecrecover`  functionality. `ecrecover` performs the point multiplication and  converts the output to an Ethereum address (sliced hash of the product of base point and scalar). See https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384"
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "notice": "A hook triggered when HOPR tokens are sent to this contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 770,
        "contract": "contracts/HoprChannels.sol:HoprChannels",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1282,
        "contract": "contracts/HoprChannels.sol:HoprChannels",
        "label": "FUND_CHANNEL_MULTI_SIZE",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1318,
        "contract": "contracts/HoprChannels.sol:HoprChannels",
        "label": "channels",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Channel)1312_storage)"
      },
      {
        "astId": 1322,
        "contract": "contracts/HoprChannels.sol:HoprChannels",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 1325,
        "contract": "contracts/HoprChannels.sol:HoprChannels",
        "label": "secsClosure",
        "offset": 20,
        "slot": "3",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(ChannelStatus)1286": {
        "encoding": "inplace",
        "label": "enum HoprChannels.ChannelStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(Channel)1312_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct HoprChannels.Channel)",
        "numberOfBytes": "32",
        "value": "t_struct(Channel)1312_storage"
      },
      "t_struct(Channel)1312_storage": {
        "encoding": "inplace",
        "label": "struct HoprChannels.Channel",
        "members": [
          {
            "astId": 1288,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "partyABalance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1290,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "partyBBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1292,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "partyACommitment",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 1294,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "partyBCommitment",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 1296,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "partyATicketEpoch",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1298,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "partyBTicketEpoch",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1300,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "partyATicketIndex",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1302,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "partyBTicketIndex",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1305,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "status",
            "offset": 0,
            "slot": "8",
            "type": "t_enum(ChannelStatus)1286"
          },
          {
            "astId": 1307,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "channelEpoch",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 1309,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "closureTime",
            "offset": 0,
            "slot": "10",
            "type": "t_uint32"
          },
          {
            "astId": 1311,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "closureByPartyA",
            "offset": 4,
            "slot": "10",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}