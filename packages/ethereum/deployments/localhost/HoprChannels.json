{
  "address": "0x902602174a9cEb452f60c09043BE5EBC52096200",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_secsClosure",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pubKeyFirstHalf",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pubKeySecondHalf",
          "type": "uint256"
        }
      ],
      "name": "AccountInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "AccountSecretUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partyAAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partyBAmount",
          "type": "uint256"
        }
      ],
      "name": "ChannelClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partyABalance",
          "type": "uint256"
        }
      ],
      "name": "ChannelFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "opener",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        }
      ],
      "name": "ChannelOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "closureTime",
          "type": "uint256"
        }
      ],
      "name": "ChannelPendingToClose",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOKENS_RECIPIENT_INTERFACE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accounts",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "counter",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "interfaceHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canImplementInterfaceForAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "channels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "partyABalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "closureTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "closureByPartyA",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        }
      ],
      "name": "finalizeChannelClosure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accountA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "accountB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "fundAndOpenChannel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accountA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "accountB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "fundChannel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "pubKeyFirstHalf",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pubKeySecondHalf",
          "type": "uint256"
        }
      ],
      "name": "initializeAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        }
      ],
      "name": "initiateChannelClosure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        }
      ],
      "name": "openChannel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "secretPreImage",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "proofOfRelaySecret",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "winProb",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "redeemTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secsClosure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "tickets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "updateAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8df24f7dacea176ffe67b1144b85eaf4ad8dedafe3b915475807cf7422197b03",
  "receipt": {
    "to": null,
    "from": "0xB3Aa2138DE698597e2e3F84f60eF415d13731b6f",
    "contractAddress": "0x902602174a9cEb452f60c09043BE5EBC52096200",
    "transactionIndex": 0,
    "gasUsed": "1733595",
    "logsBloom": "0x
    "blockHash": "0xba41d44db46554e8961511e7f7e6eb87b44c90184001939ce362951f9ace82ab",
    "transactionHash": "0x8df24f7dacea176ffe67b1144b85eaf4ad8dedafe3b915475807cf7422197b03",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x8df24f7dacea176ffe67b1144b85eaf4ad8dedafe3b915475807cf7422197b03",
        "address": "0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24",
        "topics": [
          "0x93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db153",
          "0x000000000000000000000000902602174a9ceb452f60c09043be5ebc52096200",
          "0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b",
          "0x000000000000000000000000902602174a9ceb452f60c09043be5ebc52096200"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xba41d44db46554e8961511e7f7e6eb87b44c90184001939ce362951f9ace82ab"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "1733595",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x66DB78F4ADD912a6Cb92b672Dfa09028ecc3085E", 60],
  "solcInputHash": "eaefbf7e512f526af1a82308ddbaf14e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_secsClosure\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pubKeyFirstHalf\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pubKeySecondHalf\",\"type\":\"uint256\"}],\"name\":\"AccountInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"AccountSecretUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partyAAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partyBAmount\",\"type\":\"uint256\"}],\"name\":\"ChannelClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partyABalance\",\"type\":\"uint256\"}],\"name\":\"ChannelFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"opener\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"}],\"name\":\"ChannelOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closureTime\",\"type\":\"uint256\"}],\"name\":\"ChannelPendingToClose\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKENS_RECIPIENT_INTERFACE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canImplementInterfaceForAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"channels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partyABalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closureTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"closureByPartyA\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"}],\"name\":\"finalizeChannelClosure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"fundAndOpenChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"fundChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pubKeyFirstHalf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubKeySecondHalf\",\"type\":\"uint256\"}],\"name\":\"initializeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"}],\"name\":\"initiateChannelClosure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"}],\"name\":\"openChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"secretPreImage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"proofOfRelaySecret\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"winProb\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"redeemTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secsClosure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"updateAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"constructor\":{\"params\":{\"_secsClosure\":\"seconds until a channel can be closed\",\"_token\":\"HoprToken address\"}},\"finalizeChannelClosure(address)\":{\"details\":\"Finalize channel closure, if cool-off period is over it will close the channel and transfer funds to the parties involved, then emits {ChannelClosed} event.\",\"params\":{\"counterparty\":\"the address of the counterparty\"}},\"fundAndOpenChannel(address,address,uint256,uint256)\":{\"details\":\"Fund channel and then open it, then emits {ChannelFunded} and {ChannelOpened} events.\",\"params\":{\"accountA\":\"the address of accountA\",\"accountB\":\"the address of accountB\",\"amountA\":\"amount to fund accountA\",\"amountB\":\"amount to fund accountB\"}},\"fundChannel(address,address,uint256,uint256)\":{\"details\":\"Funds a channel, then emits {ChannelFunded} event.\",\"params\":{\"accountA\":\"the address of accountA\",\"accountB\":\"the address of accountB\",\"amountA\":\"amount to fund accountA\",\"amountB\":\"amount to fund accountB\"}},\"initializeAccount(bytes32,uint256,uint256)\":{\"details\":\"Initializes an account, stores it's public key, secret and counter, then emits {AccountInitialized} and {AccountSecretUpdated} events.\",\"params\":{\"pubKeyFirstHalf\":\"first half of the public key\",\"pubKeySecondHalf\":\"second half of the public key\",\"secret\":\"account's secret\"}},\"initiateChannelClosure(address)\":{\"details\":\"Initialize channel closure, updates channel's closure time, when the cool-off period is over, user may finalize closure, then emits {ChannelPendingToClose} event.\",\"params\":{\"counterparty\":\"the address of the counterparty\"}},\"openChannel(address)\":{\"details\":\"Opens a channel, then emits {ChannelOpened} event.\",\"params\":{\"counterparty\":\"the address of the counterparty\"}},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"params\":{\"amount\":\"uint256 amount of tokens to transfer\",\"from\":\"address token holder address\",\"operator\":\"address operator requesting the transfer\",\"operatorData\":\"bytes extra information provided by the operator (if any)\",\"to\":\"address recipient address\",\"userData\":\"bytes extra information provided by the token holder (if any)\"}},\"updateAccount(bytes32)\":{\"details\":\"Updates account's secret and counter, then emits {AccountSecretUpdated} event.\",\"params\":{\"secret\":\"account's secret\"}}}},\"userdoc\":{\"methods\":{\"canImplementInterfaceForAddress(bytes32,address)\":{\"notice\":\"See {IERC1820Implementer-canImplementInterfaceForAddress}.\"},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"notice\":\"A hook triggered when HOPR tokens are send to this contract.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/HoprChannels/HoprChannels.sol\":\"HoprChannels\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/ERC1820Implementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1820Implementer.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC1820Implementer} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\\n * declare their willingness to be implementers.\\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\\n * registration to be complete.\\n */\\ncontract ERC1820Implementer is IERC1820Implementer {\\n    bytes32 constant private _ERC1820_ACCEPT_MAGIC = keccak256(abi.encodePacked(\\\"ERC1820_ACCEPT_MAGIC\\\"));\\n\\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\\n\\n    /**\\n     * See {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) public view override returns (bytes32) {\\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\\n    }\\n\\n    /**\\n     * @dev Declares the contract as willing to be an implementer of\\n     * `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer} and\\n     * {IERC1820Registry-interfaceHash}.\\n     */\\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\\n        _supportedInterfaces[interfaceHash][account] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x035d03af9718068b8a38614275df709624c3d7bfc0b1cfd6caa549578666f55d\"},\"@openzeppelin/contracts/introspection/IERC1820Implementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface for an ERC1820 implementer, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\\n * Used by contracts that will be registered as implementers in the\\n * {IERC1820Registry}.\\n */\\ninterface IERC1820Implementer {\\n    /**\\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\\n     * implements `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x924528e397be10da447cf74935877b5455567cbcdb11058f0d336597805784b1\"},\"@openzeppelin/contracts/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0x02e3523816b92b805f99dcecf8cbada55c34ca9983a79e2a114a232f466f2f3d\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1e884229423b544c0b07106f59311ea7291ca25a863e9d8f8dd9debe17669cfe\"},\"contracts/HoprChannels/Accounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.0;\\n\\nimport \\\"../utils/ECDSA.sol\\\";\\n\\ncontract Accounts {\\n    /**\\n     * @dev An account struct\\n     */\\n    struct Account {\\n        bytes32 secret; // account's hashed secret\\n        uint256 counter; // increases everytime 'secret' is changed\\n    }\\n\\n    /**\\n     * @dev Stored accounts keyed by their address\\n     */\\n    mapping(address => Account) public accounts;\\n\\n    /**\\n     * @dev Initializes an account,\\n     * stores it's public key, secret and counter,\\n     * then emits {AccountInitialized} and {AccountSecretUpdated} events.\\n     * @param account the address of the account\\n     * @param pubKeyFirstHalf first half of the public key\\n     * @param pubKeySecondHalf second half of the public key\\n     * @param secret account's secret\\n     */\\n    function _initializeAccount(\\n        address account,\\n        uint256 pubKeyFirstHalf,\\n        uint256 pubKeySecondHalf,\\n        bytes32 secret\\n    ) internal {\\n        require(\\n            ECDSA.pubKeyToEthereumAddress(pubKeyFirstHalf, pubKeySecondHalf) == account,\\n            \\\"public key does not match account\\\"\\n        );\\n\\n        _updateAccount(account, secret);\\n\\n        emit AccountInitialized(account, pubKeyFirstHalf, pubKeySecondHalf);\\n    }\\n\\n    /**\\n     * @dev Updates account's secret and counter,\\n     * then emits {AccountSecretUpdated} event.\\n     * @param account the address of the account\\n     * @param secret account's secret\\n     */\\n    function _updateAccount(\\n        address account,\\n        bytes32 secret\\n    ) internal {\\n        require(secret != bytes32(0), \\\"secret must not be empty\\\");\\n\\n        Account storage accountData = accounts[account];\\n        require(secret != accountData.secret, \\\"secret must not be the same as before\\\");\\n\\n        accountData.secret = secret;\\n        accountData.counter += 1;\\n\\n        emit AccountSecretUpdated(account, secret);\\n    }\\n\\n    event AccountInitialized(\\n        // @TODO: remove this and rely on `msg.sender`\\n        address indexed account,\\n        uint256 pubKeyFirstHalf,\\n        uint256 pubKeySecondHalf\\n    );\\n\\n    event AccountSecretUpdated(\\n        // @TODO: remove this and rely on `msg.sender`\\n        address indexed account,\\n        bytes32 secret\\n    );\\n}\",\"keccak256\":\"0x9fa9647d73fc99344d369de13611961ead30802ffc3ba13259efb466211e0ba9\"},\"contracts/HoprChannels/Channels.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/console.sol\\\";\\n\\ncontract Channels {\\n    /**\\n     * @dev Possible channel statuses.\\n     * We find out the channel's status by\\n     * using {_getChannelStatus}.\\n     */\\n    enum ChannelStatus { CLOSED, OPEN, PENDING_TO_CLOSE }\\n\\n    /**\\n     * @dev A channel struct\\n     */\\n    struct Channel {\\n        uint256 deposit; // total tokens in deposit\\n        uint256 partyABalance; // tokens that are claimable by partyA\\n        uint256 closureTime; // the time when the channel can be closed by either party\\n        uint256 status; // status of the channel\\n        bool closureByPartyA; // channel closure was initiated by party A\\n    }\\n\\n    /**\\n     * @dev Seconds it takes until we can finalize channel closure once,\\n     * channel closure has been initialized.\\n     */\\n    uint256 public secsClosure;\\n\\n    /**\\n     * @dev Stored channels keyed by their channel ids\\n     */\\n    mapping(bytes32 => Channel) public channels;\\n\\n    /**\\n     * @dev Funds a channel, then emits\\n     * {ChannelFunded} event.\\n     * @param funder the address of the funder\\n     * @param accountA the address of accountA\\n     * @param accountB the address of accountB\\n     * @param amountA amount to fund accountA\\n     * @param amountB amount to fund accountB\\n     */\\n    function _fundChannel(\\n        address funder,\\n        address accountA,\\n        address accountB,\\n        uint256 amountA,\\n        uint256 amountB\\n    ) internal {\\n        require(accountA != accountB, \\\"accountA and accountB must not be the same\\\");\\n        require(accountA != address(0), \\\"accountA must not be empty\\\");\\n        require(accountB != address(0), \\\"accountB must not be empty\\\");\\n        require(amountA > 0 || amountB > 0, \\\"amountA or amountB must be greater than 0\\\");\\n\\n        (,,, Channel storage channel) = _getChannel(accountA, accountB);\\n\\n        // @TODO: use SafeMath\\n        channel.deposit += (amountA + amountB);\\n        channel.partyABalance += amountA;\\n\\n        emit ChannelFunded(\\n            accountA,\\n            accountB,\\n            funder,\\n            channel.deposit,\\n            channel.partyABalance\\n        );\\n    }\\n\\n    /**\\n     * @dev Opens a channel, then emits\\n     * {ChannelOpened} event.\\n     * @param opener the address of the opener\\n     * @param counterparty the address of the counterparty\\n     */\\n    function _openChannel(\\n        address opener,\\n        address counterparty\\n    ) internal {\\n        require(opener != counterparty, \\\"opener and counterparty must not be the same\\\");\\n        require(opener != address(0), \\\"opener must not be empty\\\");\\n        require(counterparty != address(0), \\\"counterparty must not be empty\\\");\\n\\n        (,,, Channel storage channel) = _getChannel(opener, counterparty);\\n        require(channel.deposit > 0, \\\"channel must be funded\\\");\\n\\n        ChannelStatus channelStatus = _getChannelStatus(channel.status);\\n        require(channelStatus == ChannelStatus.CLOSED, \\\"channel must be closed in order to open\\\");\\n\\n        channel.status += 1;\\n\\n        emit ChannelOpened(opener, counterparty);\\n    }\\n\\n    /**\\n     * @dev Initialize channel closure, updates channel's\\n     * closure time, when the cool-off period is over,\\n     * user may finalize closure, then emits\\n     * {ChannelPendingToClose} event.\\n     * @param initiator the address of the initiator\\n     * @param counterparty the address of the counterparty\\n     */\\n    function _initiateChannelClosure(\\n        address initiator,\\n        address counterparty\\n    ) internal {\\n        require(initiator != counterparty, \\\"initiator and counterparty must not be the same\\\");\\n        require(initiator != address(0), \\\"initiator must not be empty\\\");\\n        require(counterparty != address(0), \\\"counterparty must not be empty\\\");\\n\\n        (,,, Channel storage channel) = _getChannel(initiator, counterparty);\\n        ChannelStatus channelStatus = _getChannelStatus(channel.status);\\n        require(\\n            channelStatus == ChannelStatus.OPEN,\\n            \\\"channel must be open\\\"\\n        );\\n\\n        // solhint-disable-next-line\\n        channel.closureTime = now + secsClosure;\\n        channel.status += 1;\\n\\n        bool isPartyA = _isPartyA(initiator, counterparty);\\n        if (isPartyA) {\\n            channel.closureByPartyA = true;\\n        }\\n\\n        emit ChannelPendingToClose(initiator, counterparty, channel.closureTime);\\n    }\\n\\n    /**\\n     * @dev Finalize channel closure, if cool-off period\\n     * is over it will close the channel and transfer funds\\n     * to the parties involved, then emits\\n     * {ChannelClosed} event.\\n     * @param token an ERC20 compatible token\\n     * @param initiator the address of the initiator\\n     * @param counterparty the address of the counterparty\\n     */\\n    function _finalizeChannelClosure(\\n        IERC20 token,\\n        address initiator,\\n        address counterparty\\n    ) internal {\\n        require(address(token) != address(0), \\\"token must not be empty\\\");\\n        require(initiator != counterparty, \\\"initiator and counterparty must not be the same\\\");\\n        require(initiator != address(0), \\\"initiator must not be empty\\\");\\n        require(counterparty != address(0), \\\"counterparty must not be empty\\\");\\n\\n        (address partyA, address partyB,, Channel storage channel) = _getChannel(initiator, counterparty);\\n        ChannelStatus channelStatus = _getChannelStatus(channel.status);\\n        require(\\n            channelStatus == ChannelStatus.PENDING_TO_CLOSE,\\n            \\\"channel must be pending to close\\\"\\n        );\\n\\n        if (\\n            channel.closureByPartyA && (initiator == partyA) ||\\n            !channel.closureByPartyA && (initiator == partyB)\\n        ) {\\n            require(channel.closureTime < now, \\\"closureTime must be before now\\\");\\n        }\\n\\n        uint256 partyAAmount = channel.partyABalance;\\n        uint256 partyBAmount = channel.deposit - channel.partyABalance;\\n\\n        // settle balances\\n        if (partyAAmount > 0) {\\n            token.transfer(partyA, partyAAmount);\\n        }\\n        if (partyBAmount > 0) {\\n            token.transfer(partyB, partyBAmount);\\n        }\\n\\n        channel.status += 8;\\n        delete channel.deposit; // channel.deposit = 0\\n        delete channel.partyABalance; // channel.partyABalance = 0\\n        delete channel.closureTime; // channel.closureTime = 0\\n        delete channel.closureByPartyA; // channel.closureByPartyA = false\\n\\n        emit ChannelClosed(initiator, counterparty, partyAAmount, partyBAmount);\\n    }\\n\\n    /**\\n     * @param accountA the address of accountA\\n     * @param accountB the address of accountB\\n     * @return a tuple of partyA, partyB, channelId, channel\\n     */\\n    function _getChannel(address accountA, address accountB)\\n        internal\\n        view\\n        returns (\\n            address,\\n            address,\\n            bytes32,\\n            Channel storage\\n        )\\n    {\\n        (address partyA, address partyB) = _getParties(accountA, accountB);\\n        bytes32 channelId = _getChannelId(partyA, partyB);\\n        Channel storage channel = channels[channelId];\\n\\n        return (partyA, partyB, channelId, channel);\\n    }\\n\\n    /**\\n     * @param partyA the address of partyA\\n     * @param partyB the address of partyB\\n     * @return the channel id by hashing partyA and partyB\\n     */\\n    function _getChannelId(address partyA, address partyB) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(partyA, partyB));\\n    }\\n\\n    /**\\n     * @param status channel's status\\n     * @return the channel's status in 'ChannelStatus'\\n     */\\n    function _getChannelStatus(uint256 status) internal pure returns (ChannelStatus) {\\n        return ChannelStatus(status % 10);\\n    }\\n\\n    /**\\n     * @param status channel's status\\n     * @return the channel's iteration\\n     */\\n    function _getChannelIteration(uint256 status) internal pure returns (uint256) {\\n        return (status / 10) + 1;\\n    }\\n\\n    /**\\n     * @param accountA the address of accountA\\n     * @param accountB the address of accountB\\n     * @return true if accountA is partyA\\n     */\\n    function _isPartyA(address accountA, address accountB) internal pure returns (bool) {\\n        return uint160(accountA) < uint160(accountB);\\n    }\\n\\n    /**\\n     * @param accountA the address of accountA\\n     * @param accountB the address of accountB\\n     * @return a tuple representing partyA and partyB\\n     */\\n    function _getParties(address accountA, address accountB) internal pure returns (address, address) {\\n        if (_isPartyA(accountA, accountB)) {\\n            return (accountA, accountB);\\n        } else {\\n            return (accountB, accountA);\\n        }\\n    }\\n\\n    event ChannelFunded(\\n        address indexed accountA,\\n        address indexed accountB,\\n        // @TODO: remove this and rely on `msg.sender`\\n        address funder,\\n        uint256 deposit,\\n        uint256 partyABalance\\n    );\\n\\n    event ChannelOpened(\\n        // @TODO: remove this and rely on `msg.sender`\\n        address indexed opener,\\n        address indexed counterparty\\n    );\\n\\n    event ChannelPendingToClose(\\n        // @TODO: remove this and rely on `msg.sender`\\n        address indexed initiator,\\n        address indexed counterparty,\\n        uint256 closureTime\\n    );\\n\\n    event ChannelClosed(\\n        // @TODO: remove this and rely on `msg.sender`\\n        address indexed initiator,\\n        address indexed counterparty,\\n        uint256 partyAAmount,\\n        uint256 partyBAmount\\n    );\\n}\",\"keccak256\":\"0x46b8504be723dd642edc674468b5dec5c2b6e09939546bfb3387132774d07831\"},\"contracts/HoprChannels/HoprChannels.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/introspection/IERC1820Registry.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/ERC1820Implementer.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./Accounts.sol\\\";\\nimport \\\"./Channels.sol\\\";\\nimport \\\"./Tickets.sol\\\";\\n\\ncontract HoprChannels is IERC777Recipient, ERC1820Implementer, Accounts, Channels, Tickets {\\n    // required by ERC1820 spec\\n    IERC1820Registry internal constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n    // required by ERC777 spec\\n    bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n    /**\\n     * @dev HoprToken, the token that will be used to settle payments\\n     */\\n    IERC20 public token;\\n\\n    /**\\n     * @param _token HoprToken address\\n     * @param _secsClosure seconds until a channel can be closed\\n     */\\n    constructor(address _token, uint256 _secsClosure) public {\\n        token = IERC20(_token);\\n        secsClosure = _secsClosure;\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\\n    }\\n\\n    /**\\n     * @dev Initializes an account,\\n     * stores it's public key, secret and counter,\\n     * then emits {AccountInitialized} and {AccountSecretUpdated} events.\\n     * @param secret account's secret\\n     * @param pubKeyFirstHalf first half of the public key\\n     * @param pubKeySecondHalf second half of the public key\\n     */\\n    function initializeAccount(\\n        bytes32 secret,\\n        uint256 pubKeyFirstHalf,\\n        uint256 pubKeySecondHalf\\n    ) external {\\n        _initializeAccount(\\n            msg.sender,\\n            pubKeyFirstHalf,\\n            pubKeySecondHalf,\\n            secret\\n        );\\n    }\\n\\n    /**\\n     * @dev Updates account's secret and counter,\\n     * then emits {AccountSecretUpdated} event.\\n     * @param secret account's secret\\n     */\\n    function updateAccount(\\n        bytes32 secret\\n    ) external {\\n        _updateAccount(msg.sender, secret);\\n    }\\n\\n    /**\\n     * @dev Funds a channel, then emits\\n     * {ChannelFunded} event.\\n     * @param accountA the address of accountA\\n     * @param accountB the address of accountB\\n     * @param amountA amount to fund accountA\\n     * @param amountB amount to fund accountB\\n     */\\n    function fundChannel(\\n        address accountA,\\n        address accountB,\\n        uint256 amountA,\\n        uint256 amountB\\n    ) external {\\n        _fundChannel(\\n            msg.sender,\\n            accountA,\\n            accountB,\\n            amountA,\\n            amountB\\n        );\\n    }\\n\\n    /**\\n     * @dev Opens a channel, then emits\\n     * {ChannelOpened} event.\\n     * @param counterparty the address of the counterparty\\n     */\\n    function openChannel(address counterparty) external {\\n        _openChannel(msg.sender, counterparty);\\n    }\\n\\n    /**\\n     * @dev Fund channel and then open it, then emits\\n     * {ChannelFunded} and {ChannelOpened} events.\\n     * @param accountA the address of accountA\\n     * @param accountB the address of accountB\\n     * @param amountA amount to fund accountA\\n     * @param amountB amount to fund accountB\\n     */\\n    function fundAndOpenChannel(\\n        address accountA,\\n        address accountB,\\n        uint256 amountA,\\n        uint256 amountB\\n    ) external {\\n        address opener = msg.sender;\\n        require(\\n            opener == accountA || opener == accountB,\\n            \\\"opener must be accountA or accountB\\\"\\n        );\\n\\n        address counterparty;\\n        if (opener == accountA) {\\n            counterparty = accountB;\\n        } else {\\n            counterparty = accountA;\\n        }\\n\\n        _fundChannel(opener, accountA, accountB, amountA, amountB);\\n        _openChannel(opener, counterparty);\\n    }\\n\\n    function redeemTicket(\\n        address counterparty,\\n        bytes32 secretPreImage,\\n        bytes32 proofOfRelaySecret,\\n        uint256 amount,\\n        bytes32 winProb,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) external {\\n        _redeemTicket(\\n            msg.sender,\\n            counterparty,\\n            secretPreImage,\\n            proofOfRelaySecret,\\n            amount,\\n            winProb,\\n            r,\\n            s,\\n            v\\n        );\\n    }\\n\\n    /**\\n     * @dev Initialize channel closure, updates channel's\\n     * closure time, when the cool-off period is over,\\n     * user may finalize closure, then emits\\n     * {ChannelPendingToClose} event.\\n     * @param counterparty the address of the counterparty\\n     */\\n    function initiateChannelClosure(\\n        address counterparty\\n    ) external {\\n        _initiateChannelClosure(msg.sender, counterparty);\\n    }\\n\\n    /**\\n     * @dev Finalize channel closure, if cool-off period\\n     * is over it will close the channel and transfer funds\\n     * to the parties involved, then emits\\n     * {ChannelClosed} event.\\n     * @param counterparty the address of the counterparty\\n     */\\n    function finalizeChannelClosure(\\n        address counterparty\\n    ) external {\\n        _finalizeChannelClosure(\\n            token,\\n            msg.sender,\\n            counterparty\\n        );\\n    }\\n\\n    /**\\n     * A hook triggered when HOPR tokens are send to this contract.\\n     *\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        // solhint-disable-next-line no-unused-vars\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        // solhint-disable-next-line no-unused-vars\\n        bytes calldata operatorData\\n    ) external override {\\n        require(msg.sender == address(token), \\\"caller must be HoprToken\\\");\\n\\n        // only call 'fundChannel' when the operator is not HoprChannels\\n        if (operator != address(this)) {\\n            (address recipient, address counterparty) = abi.decode(userData, (address, address));\\n            _fundChannel(from, recipient, counterparty, amount, 0);\\n        }\\n    }\\n}\",\"keccak256\":\"0xdfd9c9241cb0a2b128433091ea3e06f0fd9594e7f622ad62f637a62b6cb40500\"},\"contracts/HoprChannels/Tickets.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Accounts.sol\\\";\\nimport \\\"./Channels.sol\\\";\\nimport \\\"../utils/ECDSA.sol\\\";\\n\\ncontract Tickets is Accounts, Channels {\\n    /**\\n     * @dev Stored hashes of tickets keyed by their challenge,\\n     * true if ticket has been redeemed.\\n     */\\n    mapping(bytes32 => bool) public tickets;\\n\\n    /**\\n     * @dev Redeem a ticket\\n     * @param recipient the recipient address\\n     * @param counterparty the counterparty address\\n     * @param secretPreImage the secretPreImage that results to the recipients account secret\\n     * @param proofOfRelaySecret the proof of relay secret\\n     * @param winProb the winning probability of the ticket\\n     * @param amount the amount in the ticket\\n     * @param r part of the signature\\n     * @param s part of the signature\\n     * @param v part of the signature\\n     */\\n    function _redeemTicket(\\n        address recipient,\\n        address counterparty,\\n        bytes32 secretPreImage,\\n        bytes32 proofOfRelaySecret,\\n        uint256 amount,\\n        bytes32 winProb,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) internal {\\n        Account storage account = accounts[recipient];\\n        require(\\n            account.secret == keccak256(abi.encodePacked(secretPreImage)),\\n            \\\"secretPreImage must be the hash of recipient's secret\\\"\\n        );\\n\\n        (,,, Channel storage channel) = _getChannel(\\n            recipient,\\n            counterparty\\n        );\\n        require(\\n            _getChannelStatus(channel.status) != ChannelStatus.CLOSED,\\n            \\\"channel must be open or pending to close\\\"\\n        );\\n\\n        bytes32 ticketHash = _getTicketHash(\\n            _getEncodedTicket(\\n                recipient,\\n                account.counter,\\n                proofOfRelaySecret,\\n                _getChannelIteration(channel.status),\\n                amount,\\n                winProb\\n            )\\n        );\\n        require(!tickets[ticketHash], \\\"ticket must not be used twice\\\");\\n        require(ECDSA.recover(ticketHash, r, s, v) == counterparty, \\\"signer must match the counterparty\\\");\\n        require(\\n            uint256(_getTicketLuck(\\n                ticketHash,\\n                secretPreImage,\\n                proofOfRelaySecret,\\n                winProb\\n            )) <= uint256(winProb),\\n            \\\"ticket must be a win\\\"\\n        );\\n\\n        account.secret = secretPreImage;\\n        tickets[ticketHash] = true;\\n\\n        if (_isPartyA(recipient, counterparty)) {\\n            // @TODO: add SafeMath\\n            channel.partyABalance += amount;\\n        } else {\\n            // @TODO: add SafeMath\\n            channel.partyABalance -= amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Encode ticket data\\n     * @return bytes\\n     */\\n    function _getEncodedTicket(\\n        address recipient,\\n        uint256 recipientCounter,\\n        bytes32 proofOfRelaySecret,\\n        uint256 channelIteration,\\n        uint256 amount,\\n        bytes32 winProb\\n    ) internal pure returns (bytes memory) {\\n        bytes32 challenge = keccak256(abi.encodePacked(proofOfRelaySecret));\\n\\n        return abi.encodePacked(\\n            recipient,\\n            challenge,\\n            recipientCounter,\\n            amount,\\n            winProb,\\n            channelIteration\\n        );\\n    }\\n\\n    /**\\n     * @dev Prefix the ticket message and return\\n     * the actual hash that was used to sign\\n     * the ticket with.\\n     * @return prefixed ticket hash\\n     */\\n    function _getTicketHash(\\n        bytes memory packedTicket\\n    ) internal pure returns (bytes32) {\\n        return ECDSA.toEthSignedMessageHash(\\n            \\\"187\\\",\\n            packedTicket\\n        );\\n    }\\n\\n    /**\\n     * @dev Get the ticket's \\\"luck\\\" by\\n     * hashing provided values.\\n     * @return luck\\n     */\\n    function _getTicketLuck(\\n        bytes32 ticketHash,\\n        bytes32 secretPreImage,\\n        bytes32 proofOfRelaySecret,\\n        bytes32 winProb\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(ticketHash, secretPreImage, proofOfRelaySecret, winProb));\\n    }\\n}\",\"keccak256\":\"0xfd298815f937d57758e1e953bcec9fcd7507f2cc8dbff2f1675e9f170970200a\"},\"contracts/utils/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n */\\nlibrary ECDSA {\\n    // y^2 = x^3 + 7 mod p, where p is FIELD_ORDER\\n    uint256 constant FIELD_ORDER = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f;\\n    uint256 constant CURVE_ORDER = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141;\\n    uint256 constant HALF_CURVE_ORDER = (CURVE_ORDER - 1) / 2;\\n\\n    /**\\n     * @dev Computes the Ethereum address from a public key given as an\\n     * uncompressed EC-point.\\n     */\\n    function pubKeyToEthereumAddress(uint256 x, uint256 y) internal pure returns (address) {\\n        require(validate(x, y), \\\"Point must be on the curve.\\\");\\n        return address(bytes20(bytes32(keccak256(abi.encodePacked(x, y)) << 96)));\\n    }\\n\\n    /**\\n     * @dev @TODO: update\\n     */\\n    function validate(uint256 x, uint256 y) internal pure returns (bool) {\\n        uint256 rightHandSide = addmod(7, mulmod(mulmod(x, x, FIELD_ORDER), x, FIELD_ORDER), FIELD_ORDER);\\n        uint256 leftHandSide = mulmod(y, y, FIELD_ORDER);\\n\\n        return leftHandSide == rightHandSide;\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > HALF_CURVE_ORDER) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum and HOPRnet Signed Message.\\n     * Replicates the behavior of the https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method but also includes \\\"HOPRnet\\\" in the message.\\n     */\\n    function toEthSignedMessageHash(string memory length, bytes memory message) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", length, \\\"HOPRnet\\\", message));\\n    }\\n}\\n\",\"keccak256\":\"0x8139e9beefc4ee9b0ba33974ca520b81fe799ad3472cc6619188151445efd5d7\"},\"contracts/utils/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// copied from https://github.com/nomiclabs/hardhat\\n// @TODO: use library (currently blocked by hoisting)\\npragma solidity >= 0.4.22 <0.8.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logByte(byte p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(byte)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x20c980c69a625b4741381c46b6034fedae34c4bb688c73184c026d406183d3f0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051611e31380380611e318339818101604052604081101561003357600080fd5b508051602090910151600580546001600160a01b0384166001600160a01b03199091161790556002819055604080517f455243373737546f6b656e73526563697069656e740000000000000000000000815281519081900360150181206329965a1d60e01b82523060048301819052602483019190915260448201529051731820a4b7618bde71dce8cdc73aab6c95905fad24916329965a1d91606480830192600092919082900301818387803b1580156100ed57600080fd5b505af1158015610101573d6000803e3d6000fd5b505050505050611d1b806101166000396000f3fe608060405234801561001057600080fd5b50600436106100ff5760003560e01c806372581cc011610097578063c6400a2b11610066578063c6400a2b146103bb578063c8cb8df5146103f7578063df0dd0d51461044b578063fc0c546a1461047c576100ff565b806372581cc0146103265780637a7ebd7b1461032e5780637c2101ca14610378578063b4037e8014610395576100ff565b80632abb5e9d116100d35780632abb5e9d1461025c5780633da79ce8146102825780635e5c06e2146102ab5780636c49a38e146102ea576100ff565b806223de2914610104578063075e389f146101f0578063249cb3fa14610216578063275621d114610254575b600080fd5b6101ee600480360360c081101561011a57600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a08101608082013564010000000081111561015d57600080fd5b82018360208201111561016f57600080fd5b8035906020019184600183028401116401000000008311171561019157600080fd5b9193909290916020810190356401000000008111156101af57600080fd5b8201836020820111156101c157600080fd5b803590602001918460018302840111640100000000831117156101e357600080fd5b5090925090506104a0565b005b6101ee6004803603602081101561020657600080fd5b50356001600160a01b0316610555565b6102426004803603604081101561022c57600080fd5b50803590602001356001600160a01b031661056f565b60408051918252519081900360200190f35b6102426105e4565b6101ee6004803603602081101561027257600080fd5b50356001600160a01b03166105ea565b6101ee6004803603606081101561029857600080fd5b50803590602081013590604001356105f4565b6102d1600480360360208110156102c157600080fd5b50356001600160a01b0316610605565b6040805192835260208301919091528051918290030190f35b6101ee6004803603608081101561030057600080fd5b506001600160a01b0381358116916020810135909116906040810135906060013561061e565b6102426106c7565b61034b6004803603602081101561034457600080fd5b50356106f4565b60408051958652602086019490945284840192909252606084015215156080830152519081900360a00190f35b6101ee6004803603602081101561038e57600080fd5b5035610727565b6101ee600480360360208110156103ab57600080fd5b50356001600160a01b0316610731565b6101ee600480360360808110156103d157600080fd5b506001600160a01b0381358116916020810135909116906040810135906060013561073b565b6101ee600480360361010081101561040e57600080fd5b5080356001600160a01b03169060208101359060408101359060608101359060808101359060a08101359060c08101359060e0013560ff1661074e565b6104686004803603602081101561046157600080fd5b503561075f565b604080519115158252519081900360200190f35b610484610774565b604080516001600160a01b039092168252519081900360200190f35b6005546001600160a01b031633146104ff576040805162461bcd60e51b815260206004820152601860248201527f63616c6c6572206d75737420626520486f7072546f6b656e0000000000000000604482015290519081900360640190fd5b6001600160a01b038816301461054b576000808585604081101561052257600080fd5b506001600160a01b038135811693506020909101351690506105488983838a6000610783565b50505b5050505050505050565b60055461056c906001600160a01b03163383610956565b50565b6000828152602081815260408083206001600160a01b038516845290915281205460ff1661059e5760006105dd565b604051602001808073455243313832305f4143434550545f4d4147494360601b8152506014019050604051602081830303815290604052805190602001205b9392505050565b60025481565b61056c3382610d9b565b61060033838386610faa565b505050565b6001602081905260009182526040909120805491015482565b336001600160a01b0385168114806106475750836001600160a01b0316816001600160a01b0316145b6106825760405162461bcd60e51b8152600401808060200182810382526023815260200180611c3f6023913960400191505060405180910390fd5b6000856001600160a01b0316826001600160a01b031614156106a55750836106a8565b50845b6106b58287878787610783565b6106bf8282610d9b565b505050505050565b6040805174115490cdcdcdd51bdad95b9cd49958da5c1a595b9d605a1b8152905190819003601501902081565b60036020819052600091825260409091208054600182015460028301549383015460049093015491939092909160ff1685565b61056c3382611056565b61056c3382611153565b6107483385858585610783565b50505050565b61054b338989898989898989611362565b60046020526000908152604090205460ff1681565b6005546001600160a01b031681565b826001600160a01b0316846001600160a01b031614156107d45760405162461bcd60e51b815260040180806020018281038252602a815260200180611ae5602a913960400191505060405180910390fd5b6001600160a01b03841661082f576040805162461bcd60e51b815260206004820152601a60248201527f6163636f756e7441206d757374206e6f7420626520656d707479000000000000604482015290519081900360640190fd5b6001600160a01b03831661088a576040805162461bcd60e51b815260206004820152601a60248201527f6163636f756e7442206d757374206e6f7420626520656d707479000000000000604482015290519081900360640190fd5b60008211806108995750600081115b6108d45760405162461bcd60e51b8152600401808060200182810382526029815260200180611cbd6029913960400191505060405180910390fd5b60006108e085856115e1565b805487870101808255600182018054890190819055604080516001600160a01b038e8116825260208201949094528082019290925251929650818a169550908a1693507f074d4367955152e97ae53474f3e30b8042462b3dd1169333c66a590386671fba925081900360600190a3505050505050565b6001600160a01b0383166109b1576040805162461bcd60e51b815260206004820152601760248201527f746f6b656e206d757374206e6f7420626520656d707479000000000000000000604482015290519081900360640190fd5b806001600160a01b0316826001600160a01b03161415610a025760405162461bcd60e51b815260040180806020018281038252602f815260200180611c62602f913960400191505060405180910390fd5b6001600160a01b038216610a5d576040805162461bcd60e51b815260206004820152601b60248201527f696e69746961746f72206d757374206e6f7420626520656d7074790000000000604482015290519081900360640190fd5b6001600160a01b038116610ab8576040805162461bcd60e51b815260206004820152601e60248201527f636f756e7465727061727479206d757374206e6f7420626520656d7074790000604482015290519081900360640190fd5b6000806000610ac785856115e1565b935050925092506000610add8260030154611623565b90506002816002811115610aed57fe5b14610b3f576040805162461bcd60e51b815260206004820181905260248201527f6368616e6e656c206d7573742062652070656e64696e6720746f20636c6f7365604482015290519081900360640190fd5b600482015460ff168015610b645750836001600160a01b0316866001600160a01b0316145b80610b905750600482015460ff16158015610b905750826001600160a01b0316866001600160a01b0316145b15610bed5742826002015410610bed576040805162461bcd60e51b815260206004820152601e60248201527f636c6f7375726554696d65206d757374206265206265666f7265206e6f770000604482015290519081900360640190fd5b600182015482548190038115610c8a57886001600160a01b031663a9059cbb87846040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610c5d57600080fd5b505af1158015610c71573d6000803e3d6000fd5b505050506040513d6020811015610c8757600080fd5b50505b8015610d1d57886001600160a01b031663a9059cbb86836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610cf057600080fd5b505af1158015610d04573d6000803e3d6000fd5b505050506040513d6020811015610d1a57600080fd5b50505b6003840180546008019055600080855560018501819055600285015560048401805460ff19169055604080518381526020810183905281516001600160a01b03808b1693908c16927f8e096653b2e51f16fbc2f7c554ace94c1938ee5da0815dbcce55d3d03e319260929081900390910190a3505050505050505050565b806001600160a01b0316826001600160a01b03161415610dec5760405162461bcd60e51b815260040180806020018281038252602c815260200180611c91602c913960400191505060405180910390fd5b6001600160a01b038216610e47576040805162461bcd60e51b815260206004820152601860248201527f6f70656e6572206d757374206e6f7420626520656d7074790000000000000000604482015290519081900360640190fd5b6001600160a01b038116610ea2576040805162461bcd60e51b815260206004820152601e60248201527f636f756e7465727061727479206d757374206e6f7420626520656d7074790000604482015290519081900360640190fd5b6000610eae83836115e1565b93505050506000816000015411610f05576040805162461bcd60e51b815260206004820152601660248201527518da185b9b995b081b5d5cdd08189948199d5b99195960521b604482015290519081900360640190fd5b6000610f148260030154611623565b90506000816002811115610f2457fe5b14610f605760405162461bcd60e51b8152600401808060200182810382526027815260200180611baf6027913960400191505060405180910390fd5b60038201805460010190556040516001600160a01b0380851691908616907fdd90f938230335e59dc925c57ecb0e27a28c2d87356e31f00cd5554abd6c1b2d90600090a350505050565b836001600160a01b0316610fbe848461163a565b6001600160a01b0316146110035760405162461bcd60e51b8152600401808060200182810382526021815260200180611b376021913960400191505060405180910390fd5b61100d8482611056565b604080518481526020810184905281516001600160a01b038716927f2b22861a1ef88f6a07c435dd5b2979a60ebb1c487b1f2e5498d78c07dcd787ef928290030190a250505050565b806110a8576040805162461bcd60e51b815260206004820152601860248201527f736563726574206d757374206e6f7420626520656d7074790000000000000000604482015290519081900360640190fd5b6001600160a01b038216600090815260016020526040902080548214156111005760405162461bcd60e51b8152600401808060200182810382526025815260200180611c1a6025913960400191505060405180910390fd5b8181556001808201805490910190556040805183815290516001600160a01b038516917fde6c2e081309e5fa1ad76048c881e5c55a38b51661915a26b58ce40065fc66af919081900360200190a2505050565b806001600160a01b0316826001600160a01b031614156111a45760405162461bcd60e51b815260040180806020018281038252602f815260200180611c62602f913960400191505060405180910390fd5b6001600160a01b0382166111ff576040805162461bcd60e51b815260206004820152601b60248201527f696e69746961746f72206d757374206e6f7420626520656d7074790000000000604482015290519081900360640190fd5b6001600160a01b03811661125a576040805162461bcd60e51b815260206004820152601e60248201527f636f756e7465727061727479206d757374206e6f7420626520656d7074790000604482015290519081900360640190fd5b600061126683836115e1565b9350505050600061127a8260030154611623565b9050600181600281111561128a57fe5b146112d3576040805162461bcd60e51b815260206004820152601460248201527331b430b73732b61036bab9ba1031329037b832b760611b604482015290519081900360640190fd5b60028054420190830155600382018054600101905560006112f485856116cd565b9050801561130c5760048301805460ff191660011790555b836001600160a01b0316856001600160a01b03167fd69791bd3750bf9f659220208e4228b8170380f08ffbfc5b88b37c1d594bf94485600201546040518082815260200191505060405180910390a35050505050565b6001600160a01b03891660009081526001602090815260409182902082518083018b9052835180820384018152908401909352825192909101919091208154146113dd5760405162461bcd60e51b8152600401808060200182810382526035815260200180611b7a6035913960400191505060405180910390fd5b60006113e98b8b6115e1565b9350600092506113f7915050565b6114048260030154611623565b600281111561140f57fe5b141561144c5760405162461bcd60e51b8152600401808060200182810382526028815260200180611b0f6028913960400191505060405180910390fd5b600061147461146f8d85600101548c61146887600301546116de565b8d8d6116e8565b611760565b60008181526004602052604090205490915060ff16156114db576040805162461bcd60e51b815260206004820152601d60248201527f7469636b6574206d757374206e6f742062652075736564207477696365000000604482015290519081900360640190fd5b8a6001600160a01b03166114f182888888611787565b6001600160a01b0316146115365760405162461bcd60e51b8152600401808060200182810382526022815260200180611bf86022913960400191505060405180910390fd5b86611543828c8c84611905565b111561158d576040805162461bcd60e51b81526020600482015260146024820152733a34b1b5b2ba1036bab9ba1031329030903bb4b760611b604482015290519081900360640190fd5b8983556000818152600460205260409020805460ff191660011790556115b38c8c6116cd565b156115c757600182018054890190556115d3565b60018201805489900390555b505050505050505050505050565b6000806000806000806115f48888611943565b915091506000611604838361196c565b6000818152600360205260409020939a92995097509195509350505050565b6000600a8206600281111561163457fe5b92915050565b600061164683836119b3565b611697576040805162461bcd60e51b815260206004820152601b60248201527f506f696e74206d757374206265206f6e207468652063757276652e0000000000604482015290519081900360640190fd5b5060408051602080820194909452808201929092528051808303820181526060909201905280519101206001600160a01b031690565b6001600160a01b0390811691161090565b600a900460010190565b6040805160208082019690965281518082038701815281830183528051960195909520606097881b6bffffffffffffffffffffffff1916978601979097526074850196909652609484019490945260b483015260d482019290925260f480820192909252825180820390920182526101140190915290565b60006116346040518060400160405280600381526020016231383760e81b815250836119e7565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156117e85760405162461bcd60e51b8152600401808060200182810382526022815260200180611b586022913960400191505060405180910390fd5b8160ff16601b1415801561180057508160ff16601c14155b1561183c5760405162461bcd60e51b8152600401808060200182810382526022815260200180611bd66022913960400191505060405180910390fd5b604080516000808252602080830180855289905260ff86168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa158015611894573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166118fc576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b604080516020808201969096528082019490945260608401929092526080808401919091528151808403909101815260a09092019052805191012090565b60008061195084846116cd565b1561195f575082905081611965565b50819050825b9250929050565b604080516bffffffffffffffffffffffff19606094851b81166020808401919091529390941b90931660348401528051602881850301815260489093019052815191012090565b6000806401000003d01980856401000003d01987880909600708905060006401000003d01984850991909114949350505050565b6000828260405160200180807f19457468657265756d205369676e6564204d6573736167653a0a000000000000815250601a0183805190602001908083835b60208310611a455780518252601f199092019160209182019101611a26565b51815160209384036101000a6000190180199092169116179052661213d4149b995d60ca1b919093019081528451600790910192850191508083835b60208310611aa05780518252601f199092019160209182019101611a81565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040528051906020012090509291505056fe6163636f756e744120616e64206163636f756e7442206d757374206e6f74206265207468652073616d656368616e6e656c206d757374206265206f70656e206f722070656e64696e6720746f20636c6f73657075626c6963206b657920646f6573206e6f74206d61746368206163636f756e7445434453413a20696e76616c6964207369676e6174757265202773272076616c7565736563726574507265496d616765206d757374206265207468652068617368206f6620726563697069656e742773207365637265746368616e6e656c206d75737420626520636c6f73656420696e206f7264657220746f206f70656e45434453413a20696e76616c6964207369676e6174757265202776272076616c75657369676e6572206d757374206d617463682074686520636f756e7465727061727479736563726574206d757374206e6f74206265207468652073616d65206173206265666f72656f70656e6572206d757374206265206163636f756e7441206f72206163636f756e7442696e69746961746f7220616e6420636f756e7465727061727479206d757374206e6f74206265207468652073616d656f70656e657220616e6420636f756e7465727061727479206d757374206e6f74206265207468652073616d65616d6f756e7441206f7220616d6f756e7442206d7573742062652067726561746572207468616e2030a26469706673582212209bf38bd7c0acdfa2ac248ba3d8b1622969399ead817f5197a962dfaf86848e8d64736f6c63430006060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ff5760003560e01c806372581cc011610097578063c6400a2b11610066578063c6400a2b146103bb578063c8cb8df5146103f7578063df0dd0d51461044b578063fc0c546a1461047c576100ff565b806372581cc0146103265780637a7ebd7b1461032e5780637c2101ca14610378578063b4037e8014610395576100ff565b80632abb5e9d116100d35780632abb5e9d1461025c5780633da79ce8146102825780635e5c06e2146102ab5780636c49a38e146102ea576100ff565b806223de2914610104578063075e389f146101f0578063249cb3fa14610216578063275621d114610254575b600080fd5b6101ee600480360360c081101561011a57600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a08101608082013564010000000081111561015d57600080fd5b82018360208201111561016f57600080fd5b8035906020019184600183028401116401000000008311171561019157600080fd5b9193909290916020810190356401000000008111156101af57600080fd5b8201836020820111156101c157600080fd5b803590602001918460018302840111640100000000831117156101e357600080fd5b5090925090506104a0565b005b6101ee6004803603602081101561020657600080fd5b50356001600160a01b0316610555565b6102426004803603604081101561022c57600080fd5b50803590602001356001600160a01b031661056f565b60408051918252519081900360200190f35b6102426105e4565b6101ee6004803603602081101561027257600080fd5b50356001600160a01b03166105ea565b6101ee6004803603606081101561029857600080fd5b50803590602081013590604001356105f4565b6102d1600480360360208110156102c157600080fd5b50356001600160a01b0316610605565b6040805192835260208301919091528051918290030190f35b6101ee6004803603608081101561030057600080fd5b506001600160a01b0381358116916020810135909116906040810135906060013561061e565b6102426106c7565b61034b6004803603602081101561034457600080fd5b50356106f4565b60408051958652602086019490945284840192909252606084015215156080830152519081900360a00190f35b6101ee6004803603602081101561038e57600080fd5b5035610727565b6101ee600480360360208110156103ab57600080fd5b50356001600160a01b0316610731565b6101ee600480360360808110156103d157600080fd5b506001600160a01b0381358116916020810135909116906040810135906060013561073b565b6101ee600480360361010081101561040e57600080fd5b5080356001600160a01b03169060208101359060408101359060608101359060808101359060a08101359060c08101359060e0013560ff1661074e565b6104686004803603602081101561046157600080fd5b503561075f565b604080519115158252519081900360200190f35b610484610774565b604080516001600160a01b039092168252519081900360200190f35b6005546001600160a01b031633146104ff576040805162461bcd60e51b815260206004820152601860248201527f63616c6c6572206d75737420626520486f7072546f6b656e0000000000000000604482015290519081900360640190fd5b6001600160a01b038816301461054b576000808585604081101561052257600080fd5b506001600160a01b038135811693506020909101351690506105488983838a6000610783565b50505b5050505050505050565b60055461056c906001600160a01b03163383610956565b50565b6000828152602081815260408083206001600160a01b038516845290915281205460ff1661059e5760006105dd565b604051602001808073455243313832305f4143434550545f4d4147494360601b8152506014019050604051602081830303815290604052805190602001205b9392505050565b60025481565b61056c3382610d9b565b61060033838386610faa565b505050565b6001602081905260009182526040909120805491015482565b336001600160a01b0385168114806106475750836001600160a01b0316816001600160a01b0316145b6106825760405162461bcd60e51b8152600401808060200182810382526023815260200180611c3f6023913960400191505060405180910390fd5b6000856001600160a01b0316826001600160a01b031614156106a55750836106a8565b50845b6106b58287878787610783565b6106bf8282610d9b565b505050505050565b6040805174115490cdcdcdd51bdad95b9cd49958da5c1a595b9d605a1b8152905190819003601501902081565b60036020819052600091825260409091208054600182015460028301549383015460049093015491939092909160ff1685565b61056c3382611056565b61056c3382611153565b6107483385858585610783565b50505050565b61054b338989898989898989611362565b60046020526000908152604090205460ff1681565b6005546001600160a01b031681565b826001600160a01b0316846001600160a01b031614156107d45760405162461bcd60e51b815260040180806020018281038252602a815260200180611ae5602a913960400191505060405180910390fd5b6001600160a01b03841661082f576040805162461bcd60e51b815260206004820152601a60248201527f6163636f756e7441206d757374206e6f7420626520656d707479000000000000604482015290519081900360640190fd5b6001600160a01b03831661088a576040805162461bcd60e51b815260206004820152601a60248201527f6163636f756e7442206d757374206e6f7420626520656d707479000000000000604482015290519081900360640190fd5b60008211806108995750600081115b6108d45760405162461bcd60e51b8152600401808060200182810382526029815260200180611cbd6029913960400191505060405180910390fd5b60006108e085856115e1565b805487870101808255600182018054890190819055604080516001600160a01b038e8116825260208201949094528082019290925251929650818a169550908a1693507f074d4367955152e97ae53474f3e30b8042462b3dd1169333c66a590386671fba925081900360600190a3505050505050565b6001600160a01b0383166109b1576040805162461bcd60e51b815260206004820152601760248201527f746f6b656e206d757374206e6f7420626520656d707479000000000000000000604482015290519081900360640190fd5b806001600160a01b0316826001600160a01b03161415610a025760405162461bcd60e51b815260040180806020018281038252602f815260200180611c62602f913960400191505060405180910390fd5b6001600160a01b038216610a5d576040805162461bcd60e51b815260206004820152601b60248201527f696e69746961746f72206d757374206e6f7420626520656d7074790000000000604482015290519081900360640190fd5b6001600160a01b038116610ab8576040805162461bcd60e51b815260206004820152601e60248201527f636f756e7465727061727479206d757374206e6f7420626520656d7074790000604482015290519081900360640190fd5b6000806000610ac785856115e1565b935050925092506000610add8260030154611623565b90506002816002811115610aed57fe5b14610b3f576040805162461bcd60e51b815260206004820181905260248201527f6368616e6e656c206d7573742062652070656e64696e6720746f20636c6f7365604482015290519081900360640190fd5b600482015460ff168015610b645750836001600160a01b0316866001600160a01b0316145b80610b905750600482015460ff16158015610b905750826001600160a01b0316866001600160a01b0316145b15610bed5742826002015410610bed576040805162461bcd60e51b815260206004820152601e60248201527f636c6f7375726554696d65206d757374206265206265666f7265206e6f770000604482015290519081900360640190fd5b600182015482548190038115610c8a57886001600160a01b031663a9059cbb87846040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610c5d57600080fd5b505af1158015610c71573d6000803e3d6000fd5b505050506040513d6020811015610c8757600080fd5b50505b8015610d1d57886001600160a01b031663a9059cbb86836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610cf057600080fd5b505af1158015610d04573d6000803e3d6000fd5b505050506040513d6020811015610d1a57600080fd5b50505b6003840180546008019055600080855560018501819055600285015560048401805460ff19169055604080518381526020810183905281516001600160a01b03808b1693908c16927f8e096653b2e51f16fbc2f7c554ace94c1938ee5da0815dbcce55d3d03e319260929081900390910190a3505050505050505050565b806001600160a01b0316826001600160a01b03161415610dec5760405162461bcd60e51b815260040180806020018281038252602c815260200180611c91602c913960400191505060405180910390fd5b6001600160a01b038216610e47576040805162461bcd60e51b815260206004820152601860248201527f6f70656e6572206d757374206e6f7420626520656d7074790000000000000000604482015290519081900360640190fd5b6001600160a01b038116610ea2576040805162461bcd60e51b815260206004820152601e60248201527f636f756e7465727061727479206d757374206e6f7420626520656d7074790000604482015290519081900360640190fd5b6000610eae83836115e1565b93505050506000816000015411610f05576040805162461bcd60e51b815260206004820152601660248201527518da185b9b995b081b5d5cdd08189948199d5b99195960521b604482015290519081900360640190fd5b6000610f148260030154611623565b90506000816002811115610f2457fe5b14610f605760405162461bcd60e51b8152600401808060200182810382526027815260200180611baf6027913960400191505060405180910390fd5b60038201805460010190556040516001600160a01b0380851691908616907fdd90f938230335e59dc925c57ecb0e27a28c2d87356e31f00cd5554abd6c1b2d90600090a350505050565b836001600160a01b0316610fbe848461163a565b6001600160a01b0316146110035760405162461bcd60e51b8152600401808060200182810382526021815260200180611b376021913960400191505060405180910390fd5b61100d8482611056565b604080518481526020810184905281516001600160a01b038716927f2b22861a1ef88f6a07c435dd5b2979a60ebb1c487b1f2e5498d78c07dcd787ef928290030190a250505050565b806110a8576040805162461bcd60e51b815260206004820152601860248201527f736563726574206d757374206e6f7420626520656d7074790000000000000000604482015290519081900360640190fd5b6001600160a01b038216600090815260016020526040902080548214156111005760405162461bcd60e51b8152600401808060200182810382526025815260200180611c1a6025913960400191505060405180910390fd5b8181556001808201805490910190556040805183815290516001600160a01b038516917fde6c2e081309e5fa1ad76048c881e5c55a38b51661915a26b58ce40065fc66af919081900360200190a2505050565b806001600160a01b0316826001600160a01b031614156111a45760405162461bcd60e51b815260040180806020018281038252602f815260200180611c62602f913960400191505060405180910390fd5b6001600160a01b0382166111ff576040805162461bcd60e51b815260206004820152601b60248201527f696e69746961746f72206d757374206e6f7420626520656d7074790000000000604482015290519081900360640190fd5b6001600160a01b03811661125a576040805162461bcd60e51b815260206004820152601e60248201527f636f756e7465727061727479206d757374206e6f7420626520656d7074790000604482015290519081900360640190fd5b600061126683836115e1565b9350505050600061127a8260030154611623565b9050600181600281111561128a57fe5b146112d3576040805162461bcd60e51b815260206004820152601460248201527331b430b73732b61036bab9ba1031329037b832b760611b604482015290519081900360640190fd5b60028054420190830155600382018054600101905560006112f485856116cd565b9050801561130c5760048301805460ff191660011790555b836001600160a01b0316856001600160a01b03167fd69791bd3750bf9f659220208e4228b8170380f08ffbfc5b88b37c1d594bf94485600201546040518082815260200191505060405180910390a35050505050565b6001600160a01b03891660009081526001602090815260409182902082518083018b9052835180820384018152908401909352825192909101919091208154146113dd5760405162461bcd60e51b8152600401808060200182810382526035815260200180611b7a6035913960400191505060405180910390fd5b60006113e98b8b6115e1565b9350600092506113f7915050565b6114048260030154611623565b600281111561140f57fe5b141561144c5760405162461bcd60e51b8152600401808060200182810382526028815260200180611b0f6028913960400191505060405180910390fd5b600061147461146f8d85600101548c61146887600301546116de565b8d8d6116e8565b611760565b60008181526004602052604090205490915060ff16156114db576040805162461bcd60e51b815260206004820152601d60248201527f7469636b6574206d757374206e6f742062652075736564207477696365000000604482015290519081900360640190fd5b8a6001600160a01b03166114f182888888611787565b6001600160a01b0316146115365760405162461bcd60e51b8152600401808060200182810382526022815260200180611bf86022913960400191505060405180910390fd5b86611543828c8c84611905565b111561158d576040805162461bcd60e51b81526020600482015260146024820152733a34b1b5b2ba1036bab9ba1031329030903bb4b760611b604482015290519081900360640190fd5b8983556000818152600460205260409020805460ff191660011790556115b38c8c6116cd565b156115c757600182018054890190556115d3565b60018201805489900390555b505050505050505050505050565b6000806000806000806115f48888611943565b915091506000611604838361196c565b6000818152600360205260409020939a92995097509195509350505050565b6000600a8206600281111561163457fe5b92915050565b600061164683836119b3565b611697576040805162461bcd60e51b815260206004820152601b60248201527f506f696e74206d757374206265206f6e207468652063757276652e0000000000604482015290519081900360640190fd5b5060408051602080820194909452808201929092528051808303820181526060909201905280519101206001600160a01b031690565b6001600160a01b0390811691161090565b600a900460010190565b6040805160208082019690965281518082038701815281830183528051960195909520606097881b6bffffffffffffffffffffffff1916978601979097526074850196909652609484019490945260b483015260d482019290925260f480820192909252825180820390920182526101140190915290565b60006116346040518060400160405280600381526020016231383760e81b815250836119e7565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156117e85760405162461bcd60e51b8152600401808060200182810382526022815260200180611b586022913960400191505060405180910390fd5b8160ff16601b1415801561180057508160ff16601c14155b1561183c5760405162461bcd60e51b8152600401808060200182810382526022815260200180611bd66022913960400191505060405180910390fd5b604080516000808252602080830180855289905260ff86168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa158015611894573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166118fc576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b604080516020808201969096528082019490945260608401929092526080808401919091528151808403909101815260a09092019052805191012090565b60008061195084846116cd565b1561195f575082905081611965565b50819050825b9250929050565b604080516bffffffffffffffffffffffff19606094851b81166020808401919091529390941b90931660348401528051602881850301815260489093019052815191012090565b6000806401000003d01980856401000003d01987880909600708905060006401000003d01984850991909114949350505050565b6000828260405160200180807f19457468657265756d205369676e6564204d6573736167653a0a000000000000815250601a0183805190602001908083835b60208310611a455780518252601f199092019160209182019101611a26565b51815160209384036101000a6000190180199092169116179052661213d4149b995d60ca1b919093019081528451600790910192850191508083835b60208310611aa05780518252601f199092019160209182019101611a81565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040528051906020012090509291505056fe6163636f756e744120616e64206163636f756e7442206d757374206e6f74206265207468652073616d656368616e6e656c206d757374206265206f70656e206f722070656e64696e6720746f20636c6f73657075626c6963206b657920646f6573206e6f74206d61746368206163636f756e7445434453413a20696e76616c6964207369676e6174757265202773272076616c7565736563726574507265496d616765206d757374206265207468652068617368206f6620726563697069656e742773207365637265746368616e6e656c206d75737420626520636c6f73656420696e206f7264657220746f206f70656e45434453413a20696e76616c6964207369676e6174757265202776272076616c75657369676e6572206d757374206d617463682074686520636f756e7465727061727479736563726574206d757374206e6f74206265207468652073616d65206173206265666f72656f70656e6572206d757374206265206163636f756e7441206f72206163636f756e7442696e69746961746f7220616e6420636f756e7465727061727479206d757374206e6f74206265207468652073616d656f70656e657220616e6420636f756e7465727061727479206d757374206e6f74206265207468652073616d65616d6f756e7441206f7220616d6f756e7442206d7573742062652067726561746572207468616e2030a26469706673582212209bf38bd7c0acdfa2ac248ba3d8b1622969399ead817f5197a962dfaf86848e8d64736f6c63430006060033",
  "devdoc": {
    "methods": {
      "constructor": {
        "params": {
          "_secsClosure": "seconds until a channel can be closed",
          "_token": "HoprToken address"
        }
      },
      "finalizeChannelClosure(address)": {
        "details": "Finalize channel closure, if cool-off period is over it will close the channel and transfer funds to the parties involved, then emits {ChannelClosed} event.",
        "params": {
          "counterparty": "the address of the counterparty"
        }
      },
      "fundAndOpenChannel(address,address,uint256,uint256)": {
        "details": "Fund channel and then open it, then emits {ChannelFunded} and {ChannelOpened} events.",
        "params": {
          "accountA": "the address of accountA",
          "accountB": "the address of accountB",
          "amountA": "amount to fund accountA",
          "amountB": "amount to fund accountB"
        }
      },
      "fundChannel(address,address,uint256,uint256)": {
        "details": "Funds a channel, then emits {ChannelFunded} event.",
        "params": {
          "accountA": "the address of accountA",
          "accountB": "the address of accountB",
          "amountA": "amount to fund accountA",
          "amountB": "amount to fund accountB"
        }
      },
      "initializeAccount(bytes32,uint256,uint256)": {
        "details": "Initializes an account, stores it's public key, secret and counter, then emits {AccountInitialized} and {AccountSecretUpdated} events.",
        "params": {
          "pubKeyFirstHalf": "first half of the public key",
          "pubKeySecondHalf": "second half of the public key",
          "secret": "account's secret"
        }
      },
      "initiateChannelClosure(address)": {
        "details": "Initialize channel closure, updates channel's closure time, when the cool-off period is over, user may finalize closure, then emits {ChannelPendingToClose} event.",
        "params": {
          "counterparty": "the address of the counterparty"
        }
      },
      "openChannel(address)": {
        "details": "Opens a channel, then emits {ChannelOpened} event.",
        "params": {
          "counterparty": "the address of the counterparty"
        }
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "params": {
          "amount": "uint256 amount of tokens to transfer",
          "from": "address token holder address",
          "operator": "address operator requesting the transfer",
          "operatorData": "bytes extra information provided by the operator (if any)",
          "to": "address recipient address",
          "userData": "bytes extra information provided by the token holder (if any)"
        }
      },
      "updateAccount(bytes32)": {
        "details": "Updates account's secret and counter, then emits {AccountSecretUpdated} event.",
        "params": {
          "secret": "account's secret"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "canImplementInterfaceForAddress(bytes32,address)": {
        "notice": "See {IERC1820Implementer-canImplementInterfaceForAddress}."
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "notice": "A hook triggered when HOPR tokens are send to this contract."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 325,
        "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3310,
        "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
        "label": "accounts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Account)3306_storage)"
      },
      {
        "astId": 3431,
        "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
        "label": "secsClosure",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3435,
        "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
        "label": "channels",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(Channel)3429_storage)"
      },
      {
        "astId": 4365,
        "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
        "label": "tickets",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 4073,
        "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
        "label": "token",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)818"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)818": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Account)3306_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Accounts.Account)",
        "numberOfBytes": "32",
        "value": "t_struct(Account)3306_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(Channel)3429_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Channels.Channel)",
        "numberOfBytes": "32",
        "value": "t_struct(Channel)3429_storage"
      },
      "t_struct(Account)3306_storage": {
        "encoding": "inplace",
        "label": "struct Accounts.Account",
        "members": [
          {
            "astId": 3303,
            "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
            "label": "secret",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 3305,
            "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
            "label": "counter",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Channel)3429_storage": {
        "encoding": "inplace",
        "label": "struct Channels.Channel",
        "members": [
          {
            "astId": 3420,
            "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3422,
            "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
            "label": "partyABalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3424,
            "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
            "label": "closureTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3426,
            "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3428,
            "contract": "contracts/HoprChannels/HoprChannels.sol:HoprChannels",
            "label": "closureByPartyA",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
