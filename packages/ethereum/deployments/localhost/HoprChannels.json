{
  "address": "0x902602174a9cEb452f60c09043BE5EBC52096200",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_secsClosure",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes27",
          "name": "secretHash",
          "type": "bytes27"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "counter",
          "type": "uint32"
        }
      ],
      "name": "SecretHashSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOKENS_RECIPIENT_INTERFACE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accountX",
          "type": "uint256"
        },
        {
          "internalType": "bytes27",
          "name": "hashedSecret",
          "type": "bytes27"
        },
        {
          "internalType": "uint32",
          "name": "counter",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "oddY",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "interfaceHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canImplementInterfaceForAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "channels",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "deposit",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "partyABalance",
          "type": "uint96"
        },
        {
          "internalType": "uint40",
          "name": "closureTime",
          "type": "uint40"
        },
        {
          "internalType": "uint24",
          "name": "stateCounter",
          "type": "uint24"
        },
        {
          "internalType": "bool",
          "name": "closureByPartyA",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        }
      ],
      "name": "claimChannelClosure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "additionalDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "partyAAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "notAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stateCounter",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "fundChannelWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "senderX",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "senderY",
          "type": "uint256"
        },
        {
          "internalType": "bytes27",
          "name": "hashedSecret",
          "type": "bytes27"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        }
      ],
      "name": "initiateChannelClosure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        }
      ],
      "name": "openChannel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "preImage",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "hashedSecretASecretB",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "winProb",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "redeemTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "redeemedTickets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secsClosure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes27",
          "name": "hashedSecret",
          "type": "bytes27"
        }
      ],
      "name": "setHashedSecret",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeefc6db0242959bffc56d8167e2837e70f4977ac4c73ed2d5c2f6e55e5d66444",
  "receipt": {
    "to": null,
    "from": "0xB3Aa2138DE698597e2e3F84f60eF415d13731b6f",
    "contractAddress": "0x902602174a9cEb452f60c09043BE5EBC52096200",
    "transactionIndex": 0,
    "gasUsed": "2924498",
    "logsBloom": "0x
    "blockHash": "0x710834a1e7ef768fc8de2eb508ff598c438f15d5be2460e7f291c833ab87b5a0",
    "transactionHash": "0xeefc6db0242959bffc56d8167e2837e70f4977ac4c73ed2d5c2f6e55e5d66444",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0xeefc6db0242959bffc56d8167e2837e70f4977ac4c73ed2d5c2f6e55e5d66444",
        "address": "0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24",
        "topics": [
          "0x93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db153",
          "0x000000000000000000000000902602174a9ceb452f60c09043be5ebc52096200",
          "0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b",
          "0x000000000000000000000000902602174a9ceb452f60c09043be5ebc52096200"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x710834a1e7ef768fc8de2eb508ff598c438f15d5be2460e7f291c833ab87b5a0"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "2924498",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x66DB78F4ADD912a6Cb92b672Dfa09028ecc3085E",
    60
  ],
  "solcInputHash": "862c239d9796ef57cadfdf3979ac49bd",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_secsClosure\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes27\",\"name\":\"secretHash\",\"type\":\"bytes27\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"counter\",\"type\":\"uint32\"}],\"name\":\"SecretHashSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKENS_RECIPIENT_INTERFACE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accountX\",\"type\":\"uint256\"},{\"internalType\":\"bytes27\",\"name\":\"hashedSecret\",\"type\":\"bytes27\"},{\"internalType\":\"uint32\",\"name\":\"counter\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"oddY\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canImplementInterfaceForAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"channels\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"deposit\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"partyABalance\",\"type\":\"uint96\"},{\"internalType\":\"uint40\",\"name\":\"closureTime\",\"type\":\"uint40\"},{\"internalType\":\"uint24\",\"name\":\"stateCounter\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"closureByPartyA\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"}],\"name\":\"claimChannelClosure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"additionalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partyAAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stateCounter\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"fundChannelWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"senderY\",\"type\":\"uint256\"},{\"internalType\":\"bytes27\",\"name\":\"hashedSecret\",\"type\":\"bytes27\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"}],\"name\":\"initiateChannelClosure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"}],\"name\":\"openChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"preImage\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"hashedSecretASecretB\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"winProb\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"redeemTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"redeemedTickets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secsClosure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes27\",\"name\":\"hashedSecret\",\"type\":\"bytes27\"}],\"name\":\"setHashedSecret\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"claimChannelClosure(address)\":{\"params\":{\"counterparty\":\"address counter party of 'msg.sender'\"}},\"fundChannelWithSig(uint256,uint256,uint256,uint256,bytes32,bytes32,uint8)\":{\"params\":{\"additionalDeposit\":\"uint256\",\"notAfter\":\"uint256\",\"partyAAmount\":\"uint256\",\"r\":\"bytes32\",\"s\":\"bytes32\",\"stateCounter\":\"uint128\",\"v\":\"uint8\"}},\"init(uint256,uint256,bytes27)\":{\"params\":{\"hashedSecret\":\"initial value for hashedSecret\",\"senderX\":\"uint256 first component of msg.sender's public key\",\"senderY\":\"uint256 second component of msg.sender's public key\"}},\"initiateChannelClosure(address)\":{\"params\":{\"counterparty\":\"address counter party of 'msg.sender'\"}},\"openChannel(address)\":{\"params\":{\"counterparty\":\"address the counterParty of 'msg.sender'\"}},\"redeemTicket(bytes32,bytes32,uint256,bytes32,address,bytes32,bytes32,uint8)\":{\"params\":{\"amount\":\"uint256 amount 'msg.sender' will receive\",\"hashedSecretASecretB\":\"bytes32 hash of secretA concatenated with secretB\",\"preImage\":\"bytes32 the value that once hashed produces recipients hashedSecret\",\"r\":\"bytes32\",\"s\":\"bytes32\",\"v\":\"uint8\",\"winProb\":\"bytes32 win probability\"}},\"setHashedSecret(bytes27)\":{\"params\":{\"hashedSecret\":\"bytes27 hashedSecret to store\"}},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"params\":{\"amount\":\"uint256 amount of tokens to transfer\",\"from\":\"address token holder address\",\"operator\":\"address operator requesting the transfer\",\"operatorData\":\"bytes extra information provided by the operator (if any)\",\"to\":\"address recipient address\",\"userData\":\"bytes extra information provided by the token holder (if any)\"}}}},\"userdoc\":{\"methods\":{\"canImplementInterfaceForAddress(bytes32,address)\":{\"notice\":\"See {IERC1820Implementer-canImplementInterfaceForAddress}.\"},\"claimChannelClosure(address)\":{\"notice\":\"If the timeout is reached without the 'counterParty' reedeming a ticket, then the tokens can be claimed by 'msg.sender'.claim channel's closure\"},\"fundChannelWithSig(uint256,uint256,uint256,uint256,bytes32,bytes32,uint8)\":{\"notice\":\"Fund a channel between 'initiator' and 'counterParty' using a signature, specified tokens must be approved beforehand.fund a channel\"},\"init(uint256,uint256,bytes27)\":{\"notice\":\"Initialize the account's on-chain variables.\"},\"initiateChannelClosure(address)\":{\"notice\":\"A channel's party can initiate channel closure at any time, it starts a timeout.initiate channel's closure\"},\"openChannel(address)\":{\"notice\":\"open a channel\"},\"redeemTicket(bytes32,bytes32,uint256,bytes32,address,bytes32,bytes32,uint8)\":{\"notice\":\"redeem ticket\"},\"setHashedSecret(bytes27)\":{\"notice\":\"sets caller's hashedSecret\"},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"notice\":\"A hook triggered when HOPR tokens are send to this contract.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/HoprChannels.sol\":\"HoprChannels\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/ERC1820Implementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC1820Implementer.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC1820Implementer} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\\n * declare their willingness to be implementers.\\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\\n * registration to be complete.\\n */\\ncontract ERC1820Implementer is IERC1820Implementer {\\n    bytes32 constant private _ERC1820_ACCEPT_MAGIC = keccak256(abi.encodePacked(\\\"ERC1820_ACCEPT_MAGIC\\\"));\\n\\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\\n\\n    /**\\n     * See {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) public view override returns (bytes32) {\\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\\n    }\\n\\n    /**\\n     * @dev Declares the contract as willing to be an implementer of\\n     * `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer} and\\n     * {IERC1820Registry-interfaceHash}.\\n     */\\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\\n        _supportedInterfaces[interfaceHash][account] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x59af7cbb2e7c648862450f97e794167927184a7facce502b506a7172e0e56681\"},\"@openzeppelin/contracts/introspection/IERC1820Implementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface for an ERC1820 implementer, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\\n * Used by contracts that will be registered as implementers in the\\n * {IERC1820Registry}.\\n */\\ninterface IERC1820Implementer {\\n    /**\\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\\n     * implements `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x767438663e2edf334d971caeb353668cbc99630df1cd9f55dab5a4c433917c42\"},\"@openzeppelin/contracts/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0xdf8d7d1a119fc0d9f73a5c7a5d21bb0a4e0acb2a61e393c26334d397db628768\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc9e219f9060c261ab6d140f448ccdcb207ce9835f0d2868d2c5d4a93486d2208\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\"},\"contracts/HoprChannels.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\nimport \\\"@openzeppelin/contracts/introspection/IERC1820Registry.sol\\\";\\nimport \\\"@openzeppelin/contracts/introspection/ERC1820Implementer.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./utils/ECDSA.sol\\\";\\n\\ncontract HoprChannels is IERC777Recipient, ERC1820Implementer {\\n    using SafeMath for uint256;\\n\\n    // an account has set a new secret hash\\n    event SecretHashSet(address indexed account, bytes27 secretHash, uint32 counter);\\n\\n    struct Account {\\n        uint256 accountX; // second part of account's public key\\n        bytes27 hashedSecret; // account's hashedSecret\\n        uint32 counter; // increases everytime 'setHashedSecret' is called by the account\\n        uint8 oddY;\\n    }\\n\\n    enum ChannelStatus {UNINITIALISED, FUNDED, OPEN, PENDING}\\n\\n    struct Channel {\\n        uint96 deposit; // tokens in the deposit\\n        uint96 partyABalance; // tokens that are claimable by party 'A'\\n        uint40 closureTime; // the time when the channel can be closed by either party\\n        uint24 stateCounter;\\n        /* stateCounter mod 10 == 0: uninitialised\\n         * stateCounter mod 10 == 1: funding\\n         * stateCounter mod 10 == 2: open\\n         * stateCounter mod 10 == 3: pending\\n         */\\n        bool closureByPartyA; // channel closure was initiated by party A\\n    }\\n\\n    // setup ERC1820\\n    IERC1820Registry internal constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n    bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n\\n    // @TODO: update this whenever adding / removing states.\\n    uint8 constant NUMBER_OF_STATES = 4;\\n\\n    IERC20 public token; // the token that will be used to settle payments\\n    uint256 public secsClosure; // seconds it takes to allow closing of channel after channel's -\\n    // initiated channel closure, in case counter-party does not act -\\n    // within this time period\\n\\n    // store accounts' state\\n    mapping(address => Account) public accounts;\\n\\n    // store channels' state e.g: channels[hash(party_a, party_b)]\\n    mapping(bytes32 => Channel) public channels;\\n\\n    mapping(bytes32 => bool) public redeemedTickets;\\n\\n    constructor(IERC20 _token, uint256 _secsClosure) public {\\n        token = _token;\\n\\n        require(_secsClosure < (1 << 40), \\\"HoprChannels: Closure timeout must be strictly smaller than 2**40\\\");\\n\\n        secsClosure = _secsClosure;\\n\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\\n    }\\n\\n    /**\\n     * @notice sets caller's hashedSecret\\n     * @param hashedSecret bytes27 hashedSecret to store\\n     */\\n    function setHashedSecret(bytes27 hashedSecret) external {\\n        require(hashedSecret != bytes27(0), \\\"HoprChannels: hashedSecret is empty\\\");\\n\\n        Account storage account = accounts[msg.sender];\\n        require(account.accountX != uint256(0), \\\"HoprChannels: msg.sender must have called init() before\\\");\\n        require(account.hashedSecret != hashedSecret, \\\"HoprChannels: new and old hashedSecrets are the same\\\");\\n        require(account.counter + 1 < (1 << 32), \\\"HoprChannels: Preventing account counter overflow\\\");\\n\\n        account.hashedSecret = hashedSecret;\\n        account.counter += 1;\\n\\n        emit SecretHashSet(msg.sender, hashedSecret, account.counter);\\n    }\\n\\n    /**\\n     * Initialize the account's on-chain variables.\\n     *\\n     * @param senderX uint256 first component of msg.sender's public key\\n     * @param senderY uint256 second component of msg.sender's public key\\n     * @param hashedSecret initial value for hashedSecret\\n     */\\n    function init(\\n        uint256 senderX,\\n        uint256 senderY,\\n        bytes27 hashedSecret\\n    ) external {\\n        require(senderX != uint256(0), \\\"HoprChannels: first component of public key must not be zero.\\\");\\n        require(hashedSecret != bytes27(0), \\\"HoprChannels: HashedSecret must not be empty.\\\");\\n\\n        require(\\n            ECDSA.pubKeyToEthereumAddress(senderX, senderY) == msg.sender,\\n            \\\"HoprChannels: Given public key must match 'msg.sender'\\\"\\n        );\\n\\n        (, uint8 oddY) = ECDSA.compress(senderX, senderY);\\n\\n        Account storage account = accounts[msg.sender];\\n\\n        require(account.accountX == uint256(0), \\\"HoprChannels: Account must not be set\\\");\\n\\n        accounts[msg.sender] = Account(senderX, hashedSecret, uint32(1), oddY);\\n\\n        emit SecretHashSet(msg.sender, hashedSecret, uint32(1));\\n    }\\n\\n    /**\\n     * Fund a channel between 'initiator' and 'counterParty' using a signature,\\n     * specified tokens must be approved beforehand.\\n     *\\n     * @notice fund a channel\\n     * @param additionalDeposit uint256\\n     * @param partyAAmount uint256\\n     * @param notAfter uint256\\n     * @param r bytes32\\n     * @param s bytes32\\n     * @param v uint8\\n     * @param stateCounter uint128\\n     */\\n    function fundChannelWithSig(\\n        uint256 additionalDeposit,\\n        uint256 partyAAmount,\\n        uint256 notAfter,\\n        uint256 stateCounter,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) external {\\n        address initiator = msg.sender;\\n\\n        // verification\\n        require(additionalDeposit > 0, \\\"HoprChannels: 'additionalDeposit' must be strictly greater than zero\\\");\\n        require(additionalDeposit < (1 << 96), \\\"HoprChannels: Invalid amount\\\");\\n        require(\\n            partyAAmount <= additionalDeposit,\\n            \\\"HoprChannels: 'partyAAmount' must be strictly smaller than 'additionalDeposit'\\\"\\n        );\\n        // require(partyAAmount < (1 << 96), \\\"Invalid amount\\\");\\n        require(notAfter >= now, \\\"HoprChannels: signature must not be expired\\\");\\n\\n        address counterparty = ECDSA.recover(\\n            ECDSA.toEthSignedMessageHash(\\n                \\\"167\\\",\\n                abi.encode(stateCounter, initiator, additionalDeposit, partyAAmount, notAfter)\\n            ),\\n            r,\\n            s,\\n            uint8(v)\\n        );\\n\\n        require(accounts[msg.sender].accountX != uint256(0), \\\"HoprChannels: initiator must have called init before\\\");\\n        require(\\n            accounts[counterparty].accountX != uint256(0),\\n            \\\"HoprChannels: counterparty must have called init before\\\"\\n        );\\n        require(initiator != counterparty, \\\"HoprChannels: initiator and counterparty must not be the same\\\");\\n\\n        (address partyA, , Channel storage channel, ChannelStatus status) = getChannel(initiator, counterparty);\\n\\n        require(\\n            channel.stateCounter == stateCounter,\\n            \\\"HoprChannels: stored stateCounter and signed stateCounter must be the same\\\"\\n        );\\n\\n        require(\\n            status == ChannelStatus.UNINITIALISED || status == ChannelStatus.FUNDED,\\n            \\\"HoprChannels: channel must be 'UNINITIALISED' or 'FUNDED'\\\"\\n        );\\n\\n        uint256 partyBAmount = additionalDeposit - partyAAmount;\\n\\n        if (initiator == partyA) {\\n            token.transferFrom(initiator, address(this), partyAAmount);\\n            token.transferFrom(counterparty, address(this), partyBAmount);\\n        } else {\\n            token.transferFrom(initiator, address(this), partyBAmount);\\n            token.transferFrom(counterparty, address(this), partyAAmount);\\n        }\\n\\n        channel.deposit = uint96(additionalDeposit);\\n        channel.partyABalance = uint96(partyAAmount);\\n\\n        if (status == ChannelStatus.UNINITIALISED) {\\n            // The state counter indicates the recycling generation and ensures that both parties are using the correct generation.\\n            channel.stateCounter += 1;\\n        }\\n\\n        if (initiator == partyA) {\\n            emitFundedChannel(address(0), initiator, counterparty, partyAAmount, partyBAmount);\\n        } else {\\n            emitFundedChannel(address(0), counterparty, initiator, partyAAmount, partyBAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice open a channel\\n     * @param counterparty address the counterParty of 'msg.sender'\\n     */\\n    function openChannel(address counterparty) public {\\n        address opener = msg.sender;\\n\\n        require(opener != counterparty, \\\"HoprChannels: 'opener' and 'counterParty' must not be the same\\\");\\n        require(counterparty != address(0), \\\"HoprChannels: 'counterParty' address is empty\\\");\\n\\n        (, , Channel storage channel, ChannelStatus status) = getChannel(opener, counterparty);\\n\\n        require(status == ChannelStatus.FUNDED, \\\"HoprChannels: channel must be in 'FUNDED' state\\\");\\n\\n        // The state counter indicates the recycling generation and ensures that both parties are using the correct generation.\\n        channel.stateCounter += 1;\\n\\n        emitOpenedChannel(opener, counterparty);\\n    }\\n\\n    /**\\n     * @notice redeem ticket\\n     * @param preImage bytes32 the value that once hashed produces recipients hashedSecret\\n     * @param hashedSecretASecretB bytes32 hash of secretA concatenated with secretB\\n     * @param amount uint256 amount 'msg.sender' will receive\\n     * @param winProb bytes32 win probability\\n     * @param r bytes32\\n     * @param s bytes32\\n     * @param v uint8\\n     */\\n    function redeemTicket(\\n        bytes32 preImage,\\n        bytes32 hashedSecretASecretB,\\n        uint256 amount,\\n        bytes32 winProb,\\n        address counterparty,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) external {\\n        require(amount > 0, \\\"HoprChannels: amount must be strictly greater than zero\\\");\\n        require(amount < (1 << 96), \\\"HoprChannels: Invalid amount\\\");\\n        require(\\n            accounts[msg.sender].hashedSecret == bytes27(keccak256(abi.encodePacked(bytes27(preImage)))),\\n            \\\"HoprChannels: Given value is not a pre-image of the stored on-chain secret\\\"\\n        );\\n\\n        (address partyA, , Channel storage channel, ChannelStatus status) = getChannel(\\n            msg.sender,\\n            counterparty\\n        );\\n        bytes32 challenge = keccak256(abi.encodePacked(hashedSecretASecretB));\\n        bytes32 hashedTicket = ECDSA.toEthSignedMessageHash(\\n            \\\"109\\\",\\n            abi.encodePacked(\\n                msg.sender,\\n                challenge,\\n                uint24(accounts[msg.sender].counter),\\n                uint96(amount),\\n                winProb,\\n                uint24(getChannelIteration(channel))\\n            )\\n        );\\n        require(ECDSA.recover(hashedTicket, r, s, v) == counterparty, \\\"HashedTicket signer does not match our counterparty\\\");\\n        require(channel.stateCounter != uint24(0), \\\"HoprChannels: Channel does not exist\\\");\\n        require(!redeemedTickets[hashedTicket], \\\"Ticket must not be used twice\\\");\\n\\n        bytes32 luck = keccak256(abi.encodePacked(hashedTicket, bytes27(preImage), hashedSecretASecretB));\\n        require(uint256(luck) <= uint256(winProb), \\\"HoprChannels: ticket must be a win\\\");\\n        require(\\n            status == ChannelStatus.OPEN || status == ChannelStatus.PENDING,\\n            \\\"HoprChannels: channel must be 'OPEN' or 'PENDING'\\\"\\n        );\\n\\n        accounts[msg.sender].hashedSecret = bytes27(preImage);\\n        redeemedTickets[hashedTicket] = true;\\n\\n        if (msg.sender == partyA) {\\n            require(channel.partyABalance + amount < (1 << 96), \\\"HoprChannels: Invalid amount\\\");\\n            channel.partyABalance += uint96(amount);\\n        } else {\\n            require(channel.partyABalance >= amount, \\\"HoprChannels: Invalid amount\\\");\\n            channel.partyABalance -= uint96(amount);\\n        }\\n\\n        require(\\n            channel.partyABalance <= channel.deposit,\\n            \\\"HoprChannels: partyABalance must be strictly smaller than deposit balance\\\"\\n        );\\n    }\\n\\n    /**\\n     * A channel's party can initiate channel closure at any time,\\n     * it starts a timeout.\\n     *\\n     * @notice initiate channel's closure\\n     * @param counterparty address counter party of 'msg.sender'\\n     */\\n    function initiateChannelClosure(address counterparty) external {\\n        address initiator = msg.sender;\\n\\n        (address partyA, , Channel storage channel, ChannelStatus status) = getChannel(initiator, counterparty);\\n\\n        require(status == ChannelStatus.OPEN, \\\"HoprChannels: channel must be 'OPEN'\\\");\\n\\n        require(now + secsClosure < (1 << 40), \\\"HoprChannels: Preventing timestamp overflow\\\");\\n        channel.closureTime = uint40(now + secsClosure);\\n        // The state counter indicates the recycling generation and ensures that both parties are using the correct generation.\\n\\n        require(channel.stateCounter + 1 < (1 << 24), \\\"HoprChannels: Preventing stateCounter overflow\\\");\\n        channel.stateCounter += 1;\\n\\n        if (initiator == partyA) {\\n            channel.closureByPartyA = true;\\n        }\\n\\n        emitInitiatedChannelClosure(initiator, counterparty, channel.closureTime);\\n    }\\n\\n    /**\\n     * If the timeout is reached without the 'counterParty' reedeming a ticket,\\n     * then the tokens can be claimed by 'msg.sender'.\\n     *\\n     * @notice claim channel's closure\\n     * @param counterparty address counter party of 'msg.sender'\\n     */\\n    function claimChannelClosure(address counterparty) external {\\n        address initiator = msg.sender;\\n\\n        (address partyA, address partyB, Channel storage channel, ChannelStatus status) = getChannel(\\n            initiator,\\n            counterparty\\n        );\\n\\n        require(channel.stateCounter + 7 < (1 << 24), \\\"Preventing stateCounter overflow\\\");\\n        require(status == ChannelStatus.PENDING, \\\"HoprChannels: channel must be 'PENDING'\\\");\\n\\n        if (\\n            channel.closureByPartyA && (initiator == partyA) ||\\n            !channel.closureByPartyA && (initiator == partyB)\\n        ) {\\n            require(now >= uint256(channel.closureTime), \\\"HoprChannels: 'closureTime' has not passed\\\");\\n        }\\n\\n        // settle balances\\n        if (channel.partyABalance > 0) {\\n            token.transfer(partyA, channel.partyABalance);\\n            channel.deposit -= channel.partyABalance;\\n        }\\n\\n        if (channel.deposit > 0) {\\n            token.transfer(partyB, channel.deposit);\\n        }\\n\\n        emitClosedChannel(initiator, counterparty, channel.partyABalance, channel.deposit);\\n\\n        delete channel.deposit; // channel.deposit = 0\\n        delete channel.partyABalance; // channel.partyABalance = 0\\n        delete channel.closureTime; // channel.closureTime = 0\\n        delete channel.closureByPartyA; // channel.closureByPartyA = false\\n\\n        // The state counter indicates the recycling generation and ensures that both parties are using the correct generation.\\n        // Increase state counter so that we can re-use the same channel after it has been closed.\\n        channel.stateCounter += 7;\\n    }\\n\\n    /**\\n     * A hook triggered when HOPR tokens are send to this contract.\\n     *\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        // solhint-disable-next-line no-unused-vars\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        // solhint-disable-next-line no-unused-vars\\n        bytes calldata operatorData\\n    ) external override {\\n        require(msg.sender == address(token), \\\"HoprChannels: Invalid token\\\");\\n\\n        // only call 'fundChannel' when the operator is not self\\n        if (operator != address(this)) {\\n            (address recipient, address counterParty) = abi.decode(userData, (address, address));\\n\\n            fundChannel(amount, from, recipient, counterParty);\\n        }\\n    }\\n\\n    /**\\n     * Fund a channel between 'accountA' and 'accountB',\\n     * specified tokens must be approved beforehand.\\n     * Called when HOPR tokens are send to this contract.\\n     *\\n     * @notice fund a channel\\n     * @param additionalDeposit uint256 amount to fund the channel\\n     * @param funder address account which the funds are for\\n     * @param recipient address account of first participant of the payment channel\\n     * @param counterparty address account of the second participant of the payment channel\\n     */\\n    function fundChannel(\\n        uint256 additionalDeposit,\\n        address funder,\\n        address recipient,\\n        address counterparty\\n    ) internal {\\n        require(recipient != counterparty, \\\"HoprChannels: 'recipient' and 'counterParty' must not be the same\\\");\\n        require(recipient != address(0), \\\"HoprChannels: 'recipient' address is empty\\\");\\n        require(counterparty != address(0), \\\"HoprChannels: 'counterParty' address is empty\\\");\\n        require(additionalDeposit > 0, \\\"HoprChannels: 'additionalDeposit' must be greater than 0\\\");\\n        require(additionalDeposit < (1 << 96), \\\"HoprChannels: preventing 'amount' overflow\\\");\\n\\n        require(accounts[recipient].accountX != uint256(0), \\\"HoprChannels: initiator must have called init() before\\\");\\n        require(\\n            accounts[counterparty].accountX != uint256(0),\\n            \\\"HoprChannels: counterparty must have called init() before\\\"\\n        );\\n\\n        (address partyA, , Channel storage channel, ChannelStatus status) = getChannel(recipient, counterparty);\\n\\n        require(\\n            status == ChannelStatus.UNINITIALISED || status == ChannelStatus.FUNDED,\\n            \\\"HoprChannels: channel must be 'UNINITIALISED' or 'FUNDED'\\\"\\n        );\\n        require(\\n            recipient != partyA || channel.partyABalance + additionalDeposit < (1 << 96),\\n            \\\"HoprChannels: Invalid amount\\\"\\n        );\\n        require(channel.deposit + additionalDeposit < (1 << 96), \\\"HoprChannels: Invalid amount\\\");\\n        require(channel.stateCounter + 1 < (1 << 24), \\\"HoprChannels: Preventing stateCounter overflow\\\");\\n\\n        channel.deposit += uint96(additionalDeposit);\\n\\n        if (recipient == partyA) {\\n            channel.partyABalance += uint96(additionalDeposit);\\n        }\\n\\n        if (status == ChannelStatus.UNINITIALISED) {\\n            // The state counter indicates the recycling generation and ensures that both parties are using the correct generation.\\n            channel.stateCounter += 1;\\n        }\\n\\n        emitFundedChannel(funder, recipient, counterparty, additionalDeposit, 0);\\n    }\\n\\n    /**\\n     * @notice returns channel data\\n     * @param accountA address of account 'A'\\n     * @param accountB address of account 'B'\\n     */\\n    function getChannel(address accountA, address accountB)\\n        internal\\n        view\\n        returns (\\n            address,\\n            address,\\n            Channel storage,\\n            ChannelStatus\\n        )\\n    {\\n        (address partyA, address partyB) = getParties(accountA, accountB);\\n        bytes32 channelId = getChannelId(partyA, partyB);\\n        Channel storage channel = channels[channelId];\\n\\n        ChannelStatus status = getChannelStatus(channel);\\n\\n        return (partyA, partyB, channel, status);\\n    }\\n\\n    /**\\n     * @notice return true if accountA is party_a\\n     * @param accountA address of account 'A'\\n     * @param accountB address of account 'B'\\n     */\\n    function isPartyA(address accountA, address accountB) internal pure returns (bool) {\\n        return uint160(accountA) < uint160(accountB);\\n    }\\n\\n    /**\\n     * @notice return party_a and party_b\\n     * @param accountA address of account 'A'\\n     * @param accountB address of account 'B'\\n     */\\n    function getParties(address accountA, address accountB) internal pure returns (address, address) {\\n        if (isPartyA(accountA, accountB)) {\\n            return (accountA, accountB);\\n        } else {\\n            return (accountB, accountA);\\n        }\\n    }\\n\\n    /**\\n     * @notice return channel id\\n     * @param party_a address of party 'A'\\n     * @param party_b address of party 'B'\\n     */\\n    function getChannelId(address party_a, address party_b) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(party_a, party_b));\\n    }\\n\\n    /**\\n     * @notice returns 'ChannelStatus'\\n     * @param channel a channel\\n     */\\n    function getChannelStatus(Channel memory channel) internal pure returns (ChannelStatus) {\\n        return ChannelStatus(channel.stateCounter % 10);\\n    }\\n\\n    /**\\n     * @param channel a channel\\n     * @return channel's iteration\\n     */\\n    function getChannelIteration(Channel memory channel) internal pure returns (uint24) {\\n        return (channel.stateCounter / 10) + 1;\\n    }\\n\\n    /**\\n     * @dev Emits a FundedChannel event that contains the public keys of recipient\\n     * and counterparty as compressed EC-points.\\n     */\\n    function emitFundedChannel(\\n        address funder,\\n        address recipient,\\n        address counterparty,\\n        uint256 recipientAmount,\\n        uint256 counterpartyAmount\\n    ) private {\\n        /* FundedChannel(\\n         *   address funder,\\n         *   uint256 indexed recipient,\\n         *   uint256 indexed counterParty,\\n         *   uint256 recipientAmount,\\n         *   uint256 counterPartyAmount\\n         * )\\n         */\\n        bytes32 FundedChannel = keccak256(\\\"FundedChannel(address,uint,uint,uint,uint)\\\");\\n\\n        Account storage recipientAccount = accounts[recipient];\\n        Account storage counterpartyAccount = accounts[counterparty];\\n\\n        uint256 recipientX = recipientAccount.accountX;\\n        uint8 recipientOddY = recipientAccount.oddY;\\n\\n        uint256 counterpartyX = counterpartyAccount.accountX;\\n        uint8 counterpartyOddY = counterpartyAccount.oddY;\\n\\n        assembly {\\n            let topic0 := or(or(shl(2, shr(2, FundedChannel)), shl(1, recipientOddY)), counterpartyOddY)\\n\\n            let memPtr := mload(0x40)\\n\\n            mstore(memPtr, recipientAmount)\\n            mstore(add(memPtr, 0x20), counterpartyAmount)\\n            mstore(add(memPtr, 0x40), funder)\\n\\n            log3(memPtr, 0x60, topic0, recipientX, counterpartyX)\\n        }\\n    }\\n\\n    /**\\n     * @dev Emits a OpenedChannel event that contains the public keys of opener\\n     * and counterparty as compressed EC-points.\\n     */\\n    function emitOpenedChannel(address opener, address counterparty) private {\\n        /* OpenedChannel(\\n         *   uint256 indexed opener,\\n         *   uint256 indexed counterParty\\n         * )\\n         */\\n        bytes32 OpenedChannel = keccak256(\\\"OpenedChannel(uint,uint)\\\");\\n\\n        Account storage openerAccount = accounts[opener];\\n        Account storage counterpartyAccount = accounts[counterparty];\\n\\n        uint256 openerX = openerAccount.accountX;\\n        uint8 openerOddY = openerAccount.oddY;\\n\\n        uint256 counterpartyX = counterpartyAccount.accountX;\\n        uint8 counterpartyOddY = counterpartyAccount.oddY;\\n        assembly {\\n            let topic0 := or(or(shl(2, shr(2, OpenedChannel)), shl(1, openerOddY)), counterpartyOddY)\\n\\n            log3(0x00, 0x00, topic0, openerX, counterpartyX)\\n        }\\n    }\\n\\n    /**\\n     * @dev Emits a InitiatedChannelClosure event that contains the public keys of initiator\\n     * and counterparty as compressed EC-points.\\n     */\\n    function emitInitiatedChannelClosure(\\n        address initiator,\\n        address counterparty,\\n        uint256 closureTime\\n    ) private {\\n        /* InitiatedChannelClosure(\\n         *   uint256 indexed initiator,\\n         *   uint256 indexed counterParty,\\n         *   uint256 closureTime\\n         * )\\n         */\\n        bytes32 InitiatedChannelClosure = keccak256(\\\"InitiatedChannelClosure(uint,uint,uint)\\\");\\n\\n        Account storage initiatorAccount = accounts[initiator];\\n        Account storage counterpartyAccount = accounts[counterparty];\\n\\n        uint256 initiatorX = initiatorAccount.accountX;\\n        uint8 initiatorOddY = initiatorAccount.oddY;\\n\\n        uint256 counterpartyX = counterpartyAccount.accountX;\\n        uint8 counterpartyOddY = counterpartyAccount.oddY;\\n\\n        assembly {\\n            let topic0 := or(or(shl(2, shr(2, InitiatedChannelClosure)), shl(1, initiatorOddY)), counterpartyOddY)\\n\\n            let memPtr := mload(0x40)\\n\\n            mstore(memPtr, closureTime)\\n\\n            log3(memPtr, 0x20, topic0, initiatorX, counterpartyX)\\n        }\\n    }\\n\\n    /**\\n     * @dev Emits a ClosedChannel event that contains the public keys of initiator\\n     * and counterparty as compressed EC-points.\\n     */\\n    function emitClosedChannel(\\n        address initiator,\\n        address counterparty,\\n        uint256 partyAAmount,\\n        uint256 partyBAmount\\n    ) private {\\n        /*\\n         * ClosedChannel(\\n         *   uint256 indexed initiator,\\n         *   uint256 indexed counterParty,\\n         *   uint256 partyAAmount,\\n         *   uint256 partyBAmount\\n         */\\n        bytes32 ClosedChannel = keccak256(\\\"ClosedChannel(uint,uint,uint,uint)\\\");\\n\\n        Account storage initiatorAccount = accounts[initiator];\\n        Account storage counterpartyAccount = accounts[counterparty];\\n\\n        uint256 initiatorX = initiatorAccount.accountX;\\n        uint8 initiatorOddY = initiatorAccount.oddY;\\n\\n        uint256 counterpartyX = counterpartyAccount.accountX;\\n        uint8 counterpartyOddY = counterpartyAccount.oddY;\\n\\n        assembly {\\n            let topic0 := or(or(shl(2, shr(2, ClosedChannel)), shl(1, initiatorOddY)), counterpartyOddY)\\n\\n            let memPtr := mload(0x40)\\n\\n            mstore(memPtr, partyAAmount)\\n            mstore(add(0x20, memPtr), partyBAmount)\\n\\n            log3(memPtr, 0x40, topic0, initiatorX, counterpartyX)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x86a7650b4af203281980af7b5752dfb6bf732709c36c9d63d2063725a6d83746\"},\"contracts/utils/ECDSA.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    // y^2 = x^3 + 7 mod p, where p is FIELD_ORDER\\n    uint256 constant FIELD_ORDER = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f;\\n    uint256 constant CURVE_ORDER = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141;\\n    uint256 constant HALF_CURVE_ORDER = (CURVE_ORDER - 1) / 2;\\n\\n    /**\\n     * @dev Computes the Ethereum address from a public key given as an\\n     * uncompressed EC-point.\\n     */\\n    function pubKeyToEthereumAddress(uint256 x, uint256 y) internal pure returns (address) {\\n        require(validate(x, y), \\\"Point must be on the curve.\\\");\\n        return address(bytes20(bytes32(keccak256(abi.encodePacked(x, y)) << 96)));\\n    }\\n\\n    /**\\n     * @dev Computes the Ethereum address from a public key given as a\\n     * compressed EC-point.\\n     */\\n    function compressedPubKeyToEthereumAddress(uint256 compressedX, uint8 odd) internal returns (address) {\\n        (uint256 x, uint256 y) = decompress(compressedX, odd);\\n        return pubKeyToEthereumAddress(x, y);\\n    }\\n\\n    function compress(uint256 x, uint256 y) internal pure returns (uint256, uint8) {\\n        return (x, uint8(y % 2));\\n    }\\n\\n    /**\\n     * @dev Decompresses a compressed elliptic curve point and\\n     * returns the uncompressed version.\\n     * @notice secp256k1: y^2 = x^3 + 7 (mod p)\\n     * \\\"Converts from (x, 1 / 0) to (x,y)\\\"\\n     */\\n    function decompress(uint256 x, uint8 odd) internal returns (uint256, uint256) {\\n        uint256 sqrY = addmod(7, mulmod(mulmod(x, x, FIELD_ORDER), x, FIELD_ORDER), FIELD_ORDER);\\n\\n        uint256 sqrtExponent = (FIELD_ORDER + 1) / 4;\\n\\n        uint256 y;\\n\\n        /* solhint-disable no-inline-assembly */\\n        assembly {\\n            // free memory pointer\\n            let memPtr := mload(0x40)\\n\\n            // length of base, exponent, modulus\\n            mstore(memPtr, 0x20)\\n            mstore(add(memPtr, 0x20), 0x20)\\n            mstore(add(memPtr, 0x40), 0x20)\\n\\n            // assign base, exponent, modulus\\n            mstore(add(memPtr, 0x60), sqrY)\\n            mstore(add(memPtr, 0x80), sqrtExponent)\\n            mstore(add(memPtr, 0xa0), FIELD_ORDER)\\n\\n            // call the precompiled contract BigModExp (0x05)\\n            let success := call(gas(), 0x05, 0x0, memPtr, 0xc0, memPtr, 0x20)\\n\\n            switch success\\n                case 0 {\\n                    revert(0x0, 0x0)\\n                }\\n                default {\\n                    y := mload(memPtr)\\n                }\\n        }\\n        /* solhint-enable no-inline-assembly */\\n\\n        bool isOdd = y % 2 == 1;\\n\\n        if ((isOdd && odd == 0) || (!isOdd && odd == 1)) {\\n            y = FIELD_ORDER - y;\\n        }\\n\\n        return (x, y);\\n    }\\n\\n    function validate(uint256 x, uint256 y) public pure returns (bool) {\\n        uint256 rightHandSide = addmod(7, mulmod(mulmod(x, x, FIELD_ORDER), x, FIELD_ORDER), FIELD_ORDER);\\n\\n        uint256 leftHandSide = mulmod(y, y, FIELD_ORDER);\\n\\n        return leftHandSide == rightHandSide;\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > HALF_CURVE_ORDER) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum and HOPRnet Signed Message.\\n     * Replicates the behavior of the https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method but also includes \\\"HOPRnet\\\" in the message.\\n     */\\n    function toEthSignedMessageHash(string memory length, bytes memory message) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", length, \\\"HOPRnet\\\", message));\\n    }\\n}\\n\",\"keccak256\":\"0x7e32e2370265c2efbd9606fbd9b4a1cbc35b9f35f11dc63c96387237b56db25b\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200343a3803806200343a833981810160405260408110156200003757600080fd5b508051602090910151600180546001600160a01b0319166001600160a01b038416179055650100000000008110620000a15760405162461bcd60e51b8152600401808060200182810382526041815260200180620033f96041913960600191505060405180910390fd5b6002819055604080517f455243373737546f6b656e73526563697069656e740000000000000000000000815281519081900360150181206329965a1d60e01b82523060048301819052602483019190915260448201529051731820a4b7618bde71dce8cdc73aab6c95905fad24916329965a1d91606480830192600092919082900301818387803b1580156200013657600080fd5b505af11580156200014b573d6000803e3d6000fd5b50505050505061329880620001616000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c806372581cc011610097578063e108854c11610066578063e108854c146103f9578063edc4c6ff1461041e578063f5391c921461044f578063fc0c546a14610480576100f4565b806372581cc0146103165780637a7ebd7b1461031e5780639e53264d1461037f578063b4037e80146103d3576100f4565b8063275621d1116100d3578063275621d1146102495780632abb5e9d146102515780633bd7fff4146102775780635e5c06e2146102bb576100f4565b806223de29146100f95780630f121113146101e5578063249cb3fa1461020b575b600080fd5b6101e3600480360360c081101561010f57600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a08101608082013564010000000081111561015257600080fd5b82018360208201111561016457600080fd5b8035906020019184600183028401116401000000008311171561018657600080fd5b9193909290916020810190356401000000008111156101a457600080fd5b8201836020820111156101b657600080fd5b803590602001918460018302840111640100000000831117156101d857600080fd5b5090925090506104a4565b005b6101e3600480360360208110156101fb57600080fd5b50356001600160a01b0316610557565b6102376004803603604081101561022157600080fd5b50803590602001356001600160a01b0316610893565b60408051918252519081900360200190f35b610237610908565b6101e36004803603602081101561026757600080fd5b50356001600160a01b031661090e565b6101e3600480360360e081101561028d57600080fd5b5080359060208101359060408101359060608101359060808101359060a08101359060c0013560ff16610a36565b6102e1600480360360208110156102d157600080fd5b50356001600160a01b03166110f5565b6040805194855264ffffffffff19909316602085015263ffffffff9091168383015260ff166060830152519081900360800190f35b61023761112c565b61033b6004803603602081101561033457600080fd5b5035611159565b604080516001600160601b03968716815294909516602085015264ffffffffff9092168385015262ffffff1660608301521515608082015290519081900360a00190f35b6101e3600480360361010081101561039657600080fd5b5080359060208101359060408101359060608101359060808101356001600160a01b03169060a08101359060c08101359060e0013560ff166111a8565b6101e3600480360360208110156103e957600080fd5b50356001600160a01b03166118aa565b6101e36004803603602081101561040f57600080fd5b503564ffffffffff1916611a3f565b6101e36004803603606081101561043457600080fd5b508035906020810135906040013564ffffffffff1916611c0a565b61046c6004803603602081101561046557600080fd5b5035611e12565b604080519115158252519081900360200190f35b610488611e27565b604080516001600160a01b039092168252519081900360200190f35b6001546001600160a01b03163314610503576040805162461bcd60e51b815260206004820152601b60248201527f486f70724368616e6e656c733a20496e76616c696420746f6b656e0000000000604482015290519081900360640190fd5b6001600160a01b038816301461054d576000808585604081101561052657600080fd5b506001600160a01b0381358116935060209091013516905061054a878a8484611e36565b50505b5050505050505050565b3360008080806105678587612281565b8154939750919550935091506301000000600160e81b90910462ffffff90811660070116106105dd576040805162461bcd60e51b815260206004820181905260248201527f50726576656e74696e67207374617465436f756e746572206f766572666c6f77604482015290519081900360640190fd5b60038160038111156105eb57fe5b146106275760405162461bcd60e51b81526004018080602001828103825260278152602001806130526027913960400191505060405180910390fd5b600182015460ff16801561064c5750836001600160a01b0316856001600160a01b0316145b806106785750600182015460ff161580156106785750826001600160a01b0316856001600160a01b0316145b156106cb578154600160c01b900464ffffffffff164210156106cb5760405162461bcd60e51b815260040180806020018281038252602a815260200180612c4b602a913960400191505060405180910390fd5b8154600160601b90046001600160601b03161561079d5760015482546040805163a9059cbb60e01b81526001600160a01b038881166004830152600160601b9093046001600160601b031660248201529051919092169163a9059cbb9160448083019260209291908290030181600087803b15801561074957600080fd5b505af115801561075d573d6000803e3d6000fd5b505050506040513d602081101561077357600080fd5b505081546001600160601b03600160601b8204811681831603166001600160601b03199091161782555b81546001600160601b03161561083b5760015482546040805163a9059cbb60e01b81526001600160a01b0387811660048301526001600160601b0390931660248201529051919092169163a9059cbb9160448083019260209291908290030181600087803b15801561080e57600080fd5b505af1158015610822573d6000803e3d6000fd5b505050506040513d602081101561083857600080fd5b50505b815461085d90869088906001600160601b03600160601b820481169116612332565b50805460018201805460ff1916905562ffffff600160e81b6001600160e81b031990921682900481166007011602905550505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff166108c2576000610901565b604051602001808073455243313832305f4143434550545f4d4147494360601b8152506014019050604051602081830303815290604052805190602001205b9392505050565b60025481565b336001600160a01b0382168114156109575760405162461bcd60e51b815260040180806020018281038252603e815260200180613198603e913960400191505060405180910390fd5b6001600160a01b03821661099c5760405162461bcd60e51b815260040180806020018281038252602d815260200180612edd602d913960400191505060405180910390fd5b6000806109a98385612281565b9094509250600191506109b99050565b8160038111156109c557fe5b14610a015760405162461bcd60e51b815260040180806020018281038252602f815260200180612c9f602f913960400191505060405180910390fd5b815462ffffff600160e81b8083048216600101909116026001600160e81b03909116178255610a3083856123d1565b50505050565b3387610a735760405162461bcd60e51b815260040180806020018281038252604481526020018061321f6044913960600191505060405180910390fd5b600160601b8810610ab9576040805162461bcd60e51b815260206004820152601c6024820152600080516020612cce833981519152604482015290519081900360640190fd5b87871115610af85760405162461bcd60e51b815260040180806020018281038252604e815260200180612f57604e913960600191505060405180910390fd5b42861015610b375760405162461bcd60e51b815260040180806020018281038252602b815260200180612e34602b913960400191505060405180910390fd5b604080518082018252600381526231363760e81b60208083019190915282519081018890526001600160a01b03841681840152606081018b9052608081018a905260a08082018a90528351808303909101815260c0909101909252600091610baa91610ba291612477565b868686612574565b33600090815260036020526040902054909150610bf85760405162461bcd60e51b8152600401808060200182810382526034815260200180612b206034913960400191505060405180910390fd5b6001600160a01b038116600090815260036020526040902054610c4c5760405162461bcd60e51b8152600401808060200182810382526037815260200180612dfd6037913960400191505060405180910390fd5b806001600160a01b0316826001600160a01b03161415610c9d5760405162461bcd60e51b815260040180806020018281038252603d815260200180612a6e603d913960400191505060405180910390fd5b6000806000610cac8585612281565b8154939650909450925050600160e81b900462ffffff168914610d005760405162461bcd60e51b815260040180806020018281038252604a815260200180612d10604a913960600191505060405180910390fd5b6000816003811115610d0e57fe5b1480610d2557506001816003811115610d2357fe5b145b610d605760405162461bcd60e51b8152600401808060200182810382526039815260200180612a356039913960400191505060405180910390fd5b8a8c036001600160a01b038681169085161415610ec057600160009054906101000a90046001600160a01b03166001600160a01b03166323b872dd87308f6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015610e0657600080fd5b505af1158015610e1a573d6000803e3d6000fd5b505050506040513d6020811015610e3057600080fd5b5050600154604080516323b872dd60e01b81526001600160a01b03888116600483015230602483015260448201859052915191909216916323b872dd9160648083019260209291908290030181600087803b158015610e8e57600080fd5b505af1158015610ea2573d6000803e3d6000fd5b505050506040513d6020811015610eb857600080fd5b506110149050565b600154604080516323b872dd60e01b81526001600160a01b03898116600483015230602483015260448201859052915191909216916323b872dd9160648083019260209291908290030181600087803b158015610f1c57600080fd5b505af1158015610f30573d6000803e3d6000fd5b505050506040513d6020811015610f4657600080fd5b810190808051906020019092919050505050600160009054906101000a90046001600160a01b03166001600160a01b03166323b872dd86308f6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015610fe757600080fd5b505af1158015610ffb573d6000803e3d6000fd5b505050506040513d602081101561101157600080fd5b50505b8c8360000160006101000a8154816001600160601b0302191690836001600160601b031602179055508b83600001600c6101000a8154816001600160601b0302191690836001600160601b031602179055506000600381111561107357fe5b82600381111561107f57fe5b14156110ab57825462ffffff600160e81b8083048216600101909116026001600160e81b039091161783555b836001600160a01b0316866001600160a01b031614156110d8576110d3600087878f856126f2565b6110e6565b6110e6600086888f856126f2565b50505050505050505050505050565b60036020526000908152604090208054600190910154602881901b90600160d81b810463ffffffff1690600160f81b900460ff1684565b6040805174115490cdcdcdd51bdad95b9cd49958da5c1a595b9d605a1b8152905190819003601501902081565b600460205260009081526040902080546001909101546001600160601b0380831692600160601b810490911691600160c01b820464ffffffffff1691600160e81b900462ffffff169060ff1685565b600086116111e75760405162461bcd60e51b8152600401808060200182810382526037815260200180612bb96037913960400191505060405180910390fd5b600160601b861061122d576040805162461bcd60e51b815260206004820152601c6024820152600080516020612cce833981519152604482015290519081900360640190fd5b6040805164ffffffffff19808b166020808401919091528351808403601b018152603b90930184528251928101929092203360009081526003909352929091206001015460281b81169116146112b45760405162461bcd60e51b815260040180806020018281038252604a815260200180612e5f604a913960600191505060405180910390fd5b60008060006112c33388612281565b9350935050925060008a6040516020018082815260200191505060405160208183030381529060405280519060200120905060006114b76040518060400160405280600381526020016231303960e81b815250338460036000336001600160a01b03166001600160a01b03168152602001908152602001600020600101601b9054906101000a900463ffffffff168f8f61142c8b6040518060a00160405290816000820160009054906101000a90046001600160601b03166001600160601b03166001600160601b0316815260200160008201600c9054906101000a90046001600160601b03166001600160601b03166001600160601b031681526020016000820160189054906101000a900464ffffffffff1664ffffffffff1664ffffffffff16815260200160008201601d9054906101000a900462ffffff1662ffffff1662ffffff1681526020016001820160009054906101000a900460ff1615151515815250506127d6565b60405160200180876001600160a01b03166001600160a01b031660601b81526014018681526020018562ffffff1662ffffff1660e81b8152600301846001600160601b03166001600160601b031660a01b8152600c018381526020018262ffffff1662ffffff1660e81b81526003019650505050505050604051602081830303815290604052612477565b9050886001600160a01b03166114cf828a8a8a612574565b6001600160a01b0316146115145760405162461bcd60e51b8152600401808060200182810382526033815260200180612dca6033913960400191505060405180910390fd5b8354600160e81b900462ffffff1661155d5760405162461bcd60e51b8152600401808060200182810382526024815260200180612b546024913960400191505060405180910390fd5b60008181526005602052604090205460ff16156115c1576040805162461bcd60e51b815260206004820152601d60248201527f5469636b6574206d757374206e6f742062652075736564207477696365000000604482015290519081900360640190fd5b6000818e8e604051602001808481526020018364ffffffffff191664ffffffffff19168152601b0182815260200193505050506040516020818303038152906040528051906020012090508a60001c8160001c11156116515760405162461bcd60e51b81526004018080602001828103825260228152602001806130796022913960400191505060405180910390fd5b600284600381111561165f57fe5b14806116765750600384600381111561167457fe5b145b6116b15760405162461bcd60e51b815260040180806020018281038252603181526020018061309b6031913960400191505060405180910390fd5b8d60036000336001600160a01b03166001600160a01b0316815260200190815260200160002060010160006101000a8154816001600160d81b03021916908360281c021790555060016005600084815260200190815260200160002060006101000a81548160ff021916908315150217905550856001600160a01b0316336001600160a01b031614156117c5578454600160601b908190046001600160601b03168d0110611794576040805162461bcd60e51b815260206004820152601c6024820152600080516020612cce833981519152604482015290519081900360640190fd5b84546001600160601b03600160601b80830482168f0190911602600160601b600160c01b0319909116178555611847565b8454600160601b90046001600160601b03168c1115611819576040805162461bcd60e51b815260206004820152601c6024820152600080516020612cce833981519152604482015290519081900360640190fd5b84546001600160601b03600160601b80830482168f900390911602600160601b600160c01b03199091161785555b84546001600160601b03808216600160601b90920416111561189a5760405162461bcd60e51b8152600401808060200182810382526049815260200180612d816049913960600191505060405180910390fd5b5050505050505050505050505050565b33600080806118b98486612281565b9295509350909150600290508160038111156118d157fe5b1461190d5760405162461bcd60e51b81526004018080602001828103825260248152602001806131fb6024913960400191505060405180910390fd5b650100000000006002544201106119555760405162461bcd60e51b815260040180806020018281038252602b815260200180612f0a602b913960400191505060405180910390fd5b600254825464ffffffffff60c01b1916600160c01b4290920164ffffffffff1691909102178083556301000000600160e81b90910462ffffff90811660010116106119d15760405162461bcd60e51b815260040180806020018281038252602e815260200180613139602e913960400191505060405180910390fd5b815462ffffff600160e81b8083048216600101909116026001600160e81b039091161782556001600160a01b038481169084161415611a1b576001828101805460ff191690911790555b8154611a389085908790600160c01b900464ffffffffff166127f6565b5050505050565b64ffffffffff198116611a835760405162461bcd60e51b8152600401808060200182810382526023815260200180612fa56023913960400191505060405180910390fd5b3360009081526003602052604090208054611acf5760405162461bcd60e51b81526004018080602001828103825260378152602001806130cc6037913960400191505060405180910390fd5b600181015460281b64ffffffffff199081169083161415611b215760405162461bcd60e51b8152600401808060200182810382526034815260200180612ea96034913960400191505060405180910390fd5b60018082015464010000000063ffffffff600160d81b90920482169092011610611b7c5760405162461bcd60e51b81526004018080602001828103825260318152602001806131676031913960400191505060405180910390fd5b6001818101805463ffffffff60d81b196001600160d81b0319909116602886901c17908116600160d81b9182900463ffffffff9081169094018416820217918290556040805164ffffffffff1987168152919092049092166020830152805133927fe277423b3c010b1e242fb9be2199ad75ffbbc39eea686e8f29edbda512b1935492908290030190a25050565b82611c465760405162461bcd60e51b815260040180806020018281038252603d815260200180612ae3603d913960400191505060405180910390fd5b64ffffffffff198116611c8a5760405162461bcd60e51b815260040180806020018281038252602d815260200180612a08602d913960400191505060405180910390fd5b33611c95848461288e565b6001600160a01b031614611cda5760405162461bcd60e51b815260040180806020018281038252603681526020018061301c6036913960400191505060405180910390fd5b6000611ce68484612921565b3360009081526003602052604090208054919350915015611d385760405162461bcd60e51b81526004018080602001828103825260258152602001806131d66025913960400191505060405180910390fd5b6040805160808101825286815264ffffffffff1985166020808301828152600184860181815260ff89811660608801908152336000818152600388528a90209851895594519784018054935191516001600160d81b031990941660289990991c9890981763ffffffff60d81b1916600160d81b63ffffffff90921691909102176001600160f81b0316600160f81b929091169190910217909455845192835290820192909252825191927fe277423b3c010b1e242fb9be2199ad75ffbbc39eea686e8f29edbda512b1935492918290030190a25050505050565b60056020526000908152604090205460ff1681565b6001546001600160a01b031681565b806001600160a01b0316826001600160a01b03161415611e875760405162461bcd60e51b8152600401808060200182810382526041815260200180612b786041913960600191505060405180910390fd5b6001600160a01b038216611ecc5760405162461bcd60e51b815260040180806020018281038252602a815260200180612ff2602a913960400191505060405180910390fd5b6001600160a01b038116611f115760405162461bcd60e51b815260040180806020018281038252602d815260200180612edd602d913960400191505060405180910390fd5b60008411611f505760405162461bcd60e51b8152600401808060200182810382526038815260200180612aab6038913960400191505060405180910390fd5b600160601b8410611f925760405162461bcd60e51b815260040180806020018281038252602a815260200180612fc8602a913960400191505060405180910390fd5b6001600160a01b038216600090815260036020526040902054611fe65760405162461bcd60e51b81526004018080602001828103825260368152602001806131036036913960400191505060405180910390fd5b6001600160a01b03811660009081526003602052604090205461203a5760405162461bcd60e51b8152600401808060200182810382526039815260200180612c126039913960400191505060405180910390fd5b60008060006120498585612281565b92955093509091506000905081600381111561206157fe5b14806120785750600181600381111561207657fe5b145b6120b35760405162461bcd60e51b8152600401808060200182810382526039815260200180612a356039913960400191505060405180910390fd5b826001600160a01b0316856001600160a01b03161415806120e757508154600160601b908190046001600160601b03168801105b612126576040805162461bcd60e51b815260206004820152601c6024820152600080516020612cce833981519152604482015290519081900360640190fd5b8154600160601b6001600160601b0390911688011061217a576040805162461bcd60e51b815260206004820152601c6024820152600080516020612cce833981519152604482015290519081900360640190fd5b81546301000000600160e81b90910462ffffff90811660010116106121d05760405162461bcd60e51b815260040180806020018281038252602e815260200180613139602e913960400191505060405180910390fd5b81546001600160601b038082168901166001600160601b03199091161782556001600160a01b0385811690841614156122305781546001600160601b03600160601b80830482168a0190911602600160601b600160c01b03199091161782555b600081600381111561223e57fe5b141561226a57815462ffffff600160e81b8083048216600101909116026001600160e81b039091161782555b6122788686868a60006126f2565b50505050505050565b600080600080600080612294888861292e565b9150915060006122a48383612954565b6000818152600460209081526040808320815160a08101835281546001600160601b038082168352600160601b82041694820194909452600160c01b840464ffffffffff1692810192909252600160e81b90920462ffffff166060820152600182015460ff16151560808201529293509161231e90612996565b949b939a5090985092965090945050505050565b60006040518080612bf060229139604080519182900360220182206001600160a01b03808a16600090815260036020908152848220928b1682529084902082546001808501548354828501548e8b52958a018d9052969a509498509196909560ff600160f81b95869004818116979690950416936003198b166101fe9190941b169290921783179184908790849084a350505050505050505050505050565b604080517f4f70656e65644368616e6e656c2875696e742c75696e74290000000000000000815281516018918190039190910190206001600160a01b0384811660009081526003602052838120918516815292832081546001808401548354828501549697959694959394600160f81b9283900460ff81811696939594909204909116921b6101fe1660031989161782179083908690839080a350505050505050505050565b6000828260405160200180807f19457468657265756d205369676e6564204d6573736167653a0a000000000000815250601a0183805190602001908083835b602083106124d55780518252601f1990920191602091820191016124b6565b51815160209384036101000a6000190180199092169116179052661213d4149b995d60ca1b919093019081528451600790910192850191508083835b602083106125305780518252601f199092019160209182019101612511565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405280519060200120905092915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156125d55760405162461bcd60e51b8152600401808060200182810382526022815260200180612cee6022913960400191505060405180910390fd5b8160ff16601b141580156125ed57508160ff16601c14155b156126295760405162461bcd60e51b8152600401808060200182810382526022815260200180612f356022913960400191505060405180910390fd5b604080516000808252602080830180855289905260ff86168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa158015612681573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166126e9576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b60006040518080612c75602a9139602a01905060405180910390209050600060036000876001600160a01b03166001600160a01b031681526020019081526020016000209050600060036000876001600160a01b03166001600160a01b031681526020019081526020016000209050600082600001549050600083600101601f9054906101000a900460ff169050600083600001549050600084600101601f9054906101000a900460ff169050808360011b8860021c60021b17176040518a81528960208201528d6040820152838683606084a35050505050505050505050505050565b6000600a826060015162ffffff16816127eb57fe5b046001019050919050565b60006040518080612d5a60279139604080519182900360270182206001600160a01b03808916600090815260036020908152848220928a16825293902081546001808401548354828501548c8a52969a509498509296919560ff600160f81b94859004818116979590950416936003198b166101fe9190931b16919091178317919084908790849084a3505050505050505050505050565b600061289a83836129c2565b6128eb576040805162461bcd60e51b815260206004820152601b60248201527f506f696e74206d757374206265206f6e207468652063757276652e0000000000604482015290519081900360640190fd5b5060408051602080820194909452808201929092528051808303820181526060909201905280519101206001600160a01b031690565b81600182165b9250929050565b60008061293b84846129f6565b1561294a575082905081612927565b5081905082612927565b604080516001600160601b0319606094851b81166020808401919091529390941b90931660348401528051602881850301815260489093019052815191012090565b6000600a826060015162ffffff16816129ab57fe5b0662ffffff1660038111156129bc57fe5b92915050565b6000806401000003d01980856401000003d01987880909600708905060006401000003d01984850991909114949350505050565b6001600160a01b039081169116109056fe486f70724368616e6e656c733a20486173686564536563726574206d757374206e6f7420626520656d7074792e486f70724368616e6e656c733a206368616e6e656c206d7573742062652027554e494e495449414c4953454427206f72202746554e44454427486f70724368616e6e656c733a20696e69746961746f7220616e6420636f756e7465727061727479206d757374206e6f74206265207468652073616d65486f70724368616e6e656c733a20276164646974696f6e616c4465706f73697427206d7573742062652067726561746572207468616e2030486f70724368616e6e656c733a20666972737420636f6d706f6e656e74206f66207075626c6963206b6579206d757374206e6f74206265207a65726f2e486f70724368616e6e656c733a20696e69746961746f72206d75737420686176652063616c6c656420696e6974206265666f7265486f70724368616e6e656c733a204368616e6e656c20646f6573206e6f74206578697374486f70724368616e6e656c733a2027726563697069656e742720616e642027636f756e746572506172747927206d757374206e6f74206265207468652073616d65486f70724368616e6e656c733a20616d6f756e74206d757374206265207374726963746c792067726561746572207468616e207a65726f436c6f7365644368616e6e656c2875696e742c75696e742c75696e742c75696e7429486f70724368616e6e656c733a20636f756e7465727061727479206d75737420686176652063616c6c656420696e69742829206265666f7265486f70724368616e6e656c733a2027636c6f7375726554696d652720686173206e6f742070617373656446756e6465644368616e6e656c28616464726573732c75696e742c75696e742c75696e742c75696e7429486f70724368616e6e656c733a206368616e6e656c206d75737420626520696e202746554e44454427207374617465486f70724368616e6e656c733a20496e76616c696420616d6f756e740000000045434453413a20696e76616c6964207369676e6174757265202773272076616c7565486f70724368616e6e656c733a2073746f726564207374617465436f756e74657220616e64207369676e6564207374617465436f756e746572206d757374206265207468652073616d65496e697469617465644368616e6e656c436c6f737572652875696e742c75696e742c75696e7429486f70724368616e6e656c733a2070617274794142616c616e6365206d757374206265207374726963746c7920736d616c6c6572207468616e206465706f7369742062616c616e63654861736865645469636b6574207369676e657220646f6573206e6f74206d61746368206f757220636f756e7465727061727479486f70724368616e6e656c733a20636f756e7465727061727479206d75737420686176652063616c6c656420696e6974206265666f7265486f70724368616e6e656c733a207369676e6174757265206d757374206e6f742062652065787069726564486f70724368616e6e656c733a20476976656e2076616c7565206973206e6f742061207072652d696d616765206f66207468652073746f726564206f6e2d636861696e20736563726574486f70724368616e6e656c733a206e657720616e64206f6c64206861736865645365637265747320617265207468652073616d65486f70724368616e6e656c733a2027636f756e746572506172747927206164647265737320697320656d707479486f70724368616e6e656c733a2050726576656e74696e672074696d657374616d70206f766572666c6f7745434453413a20696e76616c6964207369676e6174757265202776272076616c7565486f70724368616e6e656c733a2027706172747941416d6f756e7427206d757374206265207374726963746c7920736d616c6c6572207468616e20276164646974696f6e616c4465706f73697427486f70724368616e6e656c733a2068617368656453656372657420697320656d707479486f70724368616e6e656c733a2070726576656e74696e672027616d6f756e7427206f766572666c6f77486f70724368616e6e656c733a2027726563697069656e7427206164647265737320697320656d707479486f70724368616e6e656c733a20476976656e207075626c6963206b6579206d757374206d6174636820276d73672e73656e64657227486f70724368616e6e656c733a206368616e6e656c206d757374206265202750454e44494e4727486f70724368616e6e656c733a207469636b6574206d75737420626520612077696e486f70724368616e6e656c733a206368616e6e656c206d75737420626520274f50454e27206f72202750454e44494e4727486f70724368616e6e656c733a206d73672e73656e646572206d75737420686176652063616c6c656420696e69742829206265666f7265486f70724368616e6e656c733a20696e69746961746f72206d75737420686176652063616c6c656420696e69742829206265666f7265486f70724368616e6e656c733a2050726576656e74696e67207374617465436f756e746572206f766572666c6f77486f70724368616e6e656c733a2050726576656e74696e67206163636f756e7420636f756e746572206f766572666c6f77486f70724368616e6e656c733a20276f70656e65722720616e642027636f756e746572506172747927206d757374206e6f74206265207468652073616d65486f70724368616e6e656c733a204163636f756e74206d757374206e6f7420626520736574486f70724368616e6e656c733a206368616e6e656c206d75737420626520274f50454e27486f70724368616e6e656c733a20276164646974696f6e616c4465706f73697427206d757374206265207374726963746c792067726561746572207468616e207a65726fa264697066735822122079c79e65d785c67f01fa61fd2921f666ea295cd9a491baf9ae5289ac2c183be964736f6c63430006060033486f70724368616e6e656c733a20436c6f737572652074696d656f7574206d757374206265207374726963746c7920736d616c6c6572207468616e20322a2a3430",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f45760003560e01c806372581cc011610097578063e108854c11610066578063e108854c146103f9578063edc4c6ff1461041e578063f5391c921461044f578063fc0c546a14610480576100f4565b806372581cc0146103165780637a7ebd7b1461031e5780639e53264d1461037f578063b4037e80146103d3576100f4565b8063275621d1116100d3578063275621d1146102495780632abb5e9d146102515780633bd7fff4146102775780635e5c06e2146102bb576100f4565b806223de29146100f95780630f121113146101e5578063249cb3fa1461020b575b600080fd5b6101e3600480360360c081101561010f57600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a08101608082013564010000000081111561015257600080fd5b82018360208201111561016457600080fd5b8035906020019184600183028401116401000000008311171561018657600080fd5b9193909290916020810190356401000000008111156101a457600080fd5b8201836020820111156101b657600080fd5b803590602001918460018302840111640100000000831117156101d857600080fd5b5090925090506104a4565b005b6101e3600480360360208110156101fb57600080fd5b50356001600160a01b0316610557565b6102376004803603604081101561022157600080fd5b50803590602001356001600160a01b0316610893565b60408051918252519081900360200190f35b610237610908565b6101e36004803603602081101561026757600080fd5b50356001600160a01b031661090e565b6101e3600480360360e081101561028d57600080fd5b5080359060208101359060408101359060608101359060808101359060a08101359060c0013560ff16610a36565b6102e1600480360360208110156102d157600080fd5b50356001600160a01b03166110f5565b6040805194855264ffffffffff19909316602085015263ffffffff9091168383015260ff166060830152519081900360800190f35b61023761112c565b61033b6004803603602081101561033457600080fd5b5035611159565b604080516001600160601b03968716815294909516602085015264ffffffffff9092168385015262ffffff1660608301521515608082015290519081900360a00190f35b6101e3600480360361010081101561039657600080fd5b5080359060208101359060408101359060608101359060808101356001600160a01b03169060a08101359060c08101359060e0013560ff166111a8565b6101e3600480360360208110156103e957600080fd5b50356001600160a01b03166118aa565b6101e36004803603602081101561040f57600080fd5b503564ffffffffff1916611a3f565b6101e36004803603606081101561043457600080fd5b508035906020810135906040013564ffffffffff1916611c0a565b61046c6004803603602081101561046557600080fd5b5035611e12565b604080519115158252519081900360200190f35b610488611e27565b604080516001600160a01b039092168252519081900360200190f35b6001546001600160a01b03163314610503576040805162461bcd60e51b815260206004820152601b60248201527f486f70724368616e6e656c733a20496e76616c696420746f6b656e0000000000604482015290519081900360640190fd5b6001600160a01b038816301461054d576000808585604081101561052657600080fd5b506001600160a01b0381358116935060209091013516905061054a878a8484611e36565b50505b5050505050505050565b3360008080806105678587612281565b8154939750919550935091506301000000600160e81b90910462ffffff90811660070116106105dd576040805162461bcd60e51b815260206004820181905260248201527f50726576656e74696e67207374617465436f756e746572206f766572666c6f77604482015290519081900360640190fd5b60038160038111156105eb57fe5b146106275760405162461bcd60e51b81526004018080602001828103825260278152602001806130526027913960400191505060405180910390fd5b600182015460ff16801561064c5750836001600160a01b0316856001600160a01b0316145b806106785750600182015460ff161580156106785750826001600160a01b0316856001600160a01b0316145b156106cb578154600160c01b900464ffffffffff164210156106cb5760405162461bcd60e51b815260040180806020018281038252602a815260200180612c4b602a913960400191505060405180910390fd5b8154600160601b90046001600160601b03161561079d5760015482546040805163a9059cbb60e01b81526001600160a01b038881166004830152600160601b9093046001600160601b031660248201529051919092169163a9059cbb9160448083019260209291908290030181600087803b15801561074957600080fd5b505af115801561075d573d6000803e3d6000fd5b505050506040513d602081101561077357600080fd5b505081546001600160601b03600160601b8204811681831603166001600160601b03199091161782555b81546001600160601b03161561083b5760015482546040805163a9059cbb60e01b81526001600160a01b0387811660048301526001600160601b0390931660248201529051919092169163a9059cbb9160448083019260209291908290030181600087803b15801561080e57600080fd5b505af1158015610822573d6000803e3d6000fd5b505050506040513d602081101561083857600080fd5b50505b815461085d90869088906001600160601b03600160601b820481169116612332565b50805460018201805460ff1916905562ffffff600160e81b6001600160e81b031990921682900481166007011602905550505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff166108c2576000610901565b604051602001808073455243313832305f4143434550545f4d4147494360601b8152506014019050604051602081830303815290604052805190602001205b9392505050565b60025481565b336001600160a01b0382168114156109575760405162461bcd60e51b815260040180806020018281038252603e815260200180613198603e913960400191505060405180910390fd5b6001600160a01b03821661099c5760405162461bcd60e51b815260040180806020018281038252602d815260200180612edd602d913960400191505060405180910390fd5b6000806109a98385612281565b9094509250600191506109b99050565b8160038111156109c557fe5b14610a015760405162461bcd60e51b815260040180806020018281038252602f815260200180612c9f602f913960400191505060405180910390fd5b815462ffffff600160e81b8083048216600101909116026001600160e81b03909116178255610a3083856123d1565b50505050565b3387610a735760405162461bcd60e51b815260040180806020018281038252604481526020018061321f6044913960600191505060405180910390fd5b600160601b8810610ab9576040805162461bcd60e51b815260206004820152601c6024820152600080516020612cce833981519152604482015290519081900360640190fd5b87871115610af85760405162461bcd60e51b815260040180806020018281038252604e815260200180612f57604e913960600191505060405180910390fd5b42861015610b375760405162461bcd60e51b815260040180806020018281038252602b815260200180612e34602b913960400191505060405180910390fd5b604080518082018252600381526231363760e81b60208083019190915282519081018890526001600160a01b03841681840152606081018b9052608081018a905260a08082018a90528351808303909101815260c0909101909252600091610baa91610ba291612477565b868686612574565b33600090815260036020526040902054909150610bf85760405162461bcd60e51b8152600401808060200182810382526034815260200180612b206034913960400191505060405180910390fd5b6001600160a01b038116600090815260036020526040902054610c4c5760405162461bcd60e51b8152600401808060200182810382526037815260200180612dfd6037913960400191505060405180910390fd5b806001600160a01b0316826001600160a01b03161415610c9d5760405162461bcd60e51b815260040180806020018281038252603d815260200180612a6e603d913960400191505060405180910390fd5b6000806000610cac8585612281565b8154939650909450925050600160e81b900462ffffff168914610d005760405162461bcd60e51b815260040180806020018281038252604a815260200180612d10604a913960600191505060405180910390fd5b6000816003811115610d0e57fe5b1480610d2557506001816003811115610d2357fe5b145b610d605760405162461bcd60e51b8152600401808060200182810382526039815260200180612a356039913960400191505060405180910390fd5b8a8c036001600160a01b038681169085161415610ec057600160009054906101000a90046001600160a01b03166001600160a01b03166323b872dd87308f6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015610e0657600080fd5b505af1158015610e1a573d6000803e3d6000fd5b505050506040513d6020811015610e3057600080fd5b5050600154604080516323b872dd60e01b81526001600160a01b03888116600483015230602483015260448201859052915191909216916323b872dd9160648083019260209291908290030181600087803b158015610e8e57600080fd5b505af1158015610ea2573d6000803e3d6000fd5b505050506040513d6020811015610eb857600080fd5b506110149050565b600154604080516323b872dd60e01b81526001600160a01b03898116600483015230602483015260448201859052915191909216916323b872dd9160648083019260209291908290030181600087803b158015610f1c57600080fd5b505af1158015610f30573d6000803e3d6000fd5b505050506040513d6020811015610f4657600080fd5b810190808051906020019092919050505050600160009054906101000a90046001600160a01b03166001600160a01b03166323b872dd86308f6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015610fe757600080fd5b505af1158015610ffb573d6000803e3d6000fd5b505050506040513d602081101561101157600080fd5b50505b8c8360000160006101000a8154816001600160601b0302191690836001600160601b031602179055508b83600001600c6101000a8154816001600160601b0302191690836001600160601b031602179055506000600381111561107357fe5b82600381111561107f57fe5b14156110ab57825462ffffff600160e81b8083048216600101909116026001600160e81b039091161783555b836001600160a01b0316866001600160a01b031614156110d8576110d3600087878f856126f2565b6110e6565b6110e6600086888f856126f2565b50505050505050505050505050565b60036020526000908152604090208054600190910154602881901b90600160d81b810463ffffffff1690600160f81b900460ff1684565b6040805174115490cdcdcdd51bdad95b9cd49958da5c1a595b9d605a1b8152905190819003601501902081565b600460205260009081526040902080546001909101546001600160601b0380831692600160601b810490911691600160c01b820464ffffffffff1691600160e81b900462ffffff169060ff1685565b600086116111e75760405162461bcd60e51b8152600401808060200182810382526037815260200180612bb96037913960400191505060405180910390fd5b600160601b861061122d576040805162461bcd60e51b815260206004820152601c6024820152600080516020612cce833981519152604482015290519081900360640190fd5b6040805164ffffffffff19808b166020808401919091528351808403601b018152603b90930184528251928101929092203360009081526003909352929091206001015460281b81169116146112b45760405162461bcd60e51b815260040180806020018281038252604a815260200180612e5f604a913960600191505060405180910390fd5b60008060006112c33388612281565b9350935050925060008a6040516020018082815260200191505060405160208183030381529060405280519060200120905060006114b76040518060400160405280600381526020016231303960e81b815250338460036000336001600160a01b03166001600160a01b03168152602001908152602001600020600101601b9054906101000a900463ffffffff168f8f61142c8b6040518060a00160405290816000820160009054906101000a90046001600160601b03166001600160601b03166001600160601b0316815260200160008201600c9054906101000a90046001600160601b03166001600160601b03166001600160601b031681526020016000820160189054906101000a900464ffffffffff1664ffffffffff1664ffffffffff16815260200160008201601d9054906101000a900462ffffff1662ffffff1662ffffff1681526020016001820160009054906101000a900460ff1615151515815250506127d6565b60405160200180876001600160a01b03166001600160a01b031660601b81526014018681526020018562ffffff1662ffffff1660e81b8152600301846001600160601b03166001600160601b031660a01b8152600c018381526020018262ffffff1662ffffff1660e81b81526003019650505050505050604051602081830303815290604052612477565b9050886001600160a01b03166114cf828a8a8a612574565b6001600160a01b0316146115145760405162461bcd60e51b8152600401808060200182810382526033815260200180612dca6033913960400191505060405180910390fd5b8354600160e81b900462ffffff1661155d5760405162461bcd60e51b8152600401808060200182810382526024815260200180612b546024913960400191505060405180910390fd5b60008181526005602052604090205460ff16156115c1576040805162461bcd60e51b815260206004820152601d60248201527f5469636b6574206d757374206e6f742062652075736564207477696365000000604482015290519081900360640190fd5b6000818e8e604051602001808481526020018364ffffffffff191664ffffffffff19168152601b0182815260200193505050506040516020818303038152906040528051906020012090508a60001c8160001c11156116515760405162461bcd60e51b81526004018080602001828103825260228152602001806130796022913960400191505060405180910390fd5b600284600381111561165f57fe5b14806116765750600384600381111561167457fe5b145b6116b15760405162461bcd60e51b815260040180806020018281038252603181526020018061309b6031913960400191505060405180910390fd5b8d60036000336001600160a01b03166001600160a01b0316815260200190815260200160002060010160006101000a8154816001600160d81b03021916908360281c021790555060016005600084815260200190815260200160002060006101000a81548160ff021916908315150217905550856001600160a01b0316336001600160a01b031614156117c5578454600160601b908190046001600160601b03168d0110611794576040805162461bcd60e51b815260206004820152601c6024820152600080516020612cce833981519152604482015290519081900360640190fd5b84546001600160601b03600160601b80830482168f0190911602600160601b600160c01b0319909116178555611847565b8454600160601b90046001600160601b03168c1115611819576040805162461bcd60e51b815260206004820152601c6024820152600080516020612cce833981519152604482015290519081900360640190fd5b84546001600160601b03600160601b80830482168f900390911602600160601b600160c01b03199091161785555b84546001600160601b03808216600160601b90920416111561189a5760405162461bcd60e51b8152600401808060200182810382526049815260200180612d816049913960600191505060405180910390fd5b5050505050505050505050505050565b33600080806118b98486612281565b9295509350909150600290508160038111156118d157fe5b1461190d5760405162461bcd60e51b81526004018080602001828103825260248152602001806131fb6024913960400191505060405180910390fd5b650100000000006002544201106119555760405162461bcd60e51b815260040180806020018281038252602b815260200180612f0a602b913960400191505060405180910390fd5b600254825464ffffffffff60c01b1916600160c01b4290920164ffffffffff1691909102178083556301000000600160e81b90910462ffffff90811660010116106119d15760405162461bcd60e51b815260040180806020018281038252602e815260200180613139602e913960400191505060405180910390fd5b815462ffffff600160e81b8083048216600101909116026001600160e81b039091161782556001600160a01b038481169084161415611a1b576001828101805460ff191690911790555b8154611a389085908790600160c01b900464ffffffffff166127f6565b5050505050565b64ffffffffff198116611a835760405162461bcd60e51b8152600401808060200182810382526023815260200180612fa56023913960400191505060405180910390fd5b3360009081526003602052604090208054611acf5760405162461bcd60e51b81526004018080602001828103825260378152602001806130cc6037913960400191505060405180910390fd5b600181015460281b64ffffffffff199081169083161415611b215760405162461bcd60e51b8152600401808060200182810382526034815260200180612ea96034913960400191505060405180910390fd5b60018082015464010000000063ffffffff600160d81b90920482169092011610611b7c5760405162461bcd60e51b81526004018080602001828103825260318152602001806131676031913960400191505060405180910390fd5b6001818101805463ffffffff60d81b196001600160d81b0319909116602886901c17908116600160d81b9182900463ffffffff9081169094018416820217918290556040805164ffffffffff1987168152919092049092166020830152805133927fe277423b3c010b1e242fb9be2199ad75ffbbc39eea686e8f29edbda512b1935492908290030190a25050565b82611c465760405162461bcd60e51b815260040180806020018281038252603d815260200180612ae3603d913960400191505060405180910390fd5b64ffffffffff198116611c8a5760405162461bcd60e51b815260040180806020018281038252602d815260200180612a08602d913960400191505060405180910390fd5b33611c95848461288e565b6001600160a01b031614611cda5760405162461bcd60e51b815260040180806020018281038252603681526020018061301c6036913960400191505060405180910390fd5b6000611ce68484612921565b3360009081526003602052604090208054919350915015611d385760405162461bcd60e51b81526004018080602001828103825260258152602001806131d66025913960400191505060405180910390fd5b6040805160808101825286815264ffffffffff1985166020808301828152600184860181815260ff89811660608801908152336000818152600388528a90209851895594519784018054935191516001600160d81b031990941660289990991c9890981763ffffffff60d81b1916600160d81b63ffffffff90921691909102176001600160f81b0316600160f81b929091169190910217909455845192835290820192909252825191927fe277423b3c010b1e242fb9be2199ad75ffbbc39eea686e8f29edbda512b1935492918290030190a25050505050565b60056020526000908152604090205460ff1681565b6001546001600160a01b031681565b806001600160a01b0316826001600160a01b03161415611e875760405162461bcd60e51b8152600401808060200182810382526041815260200180612b786041913960600191505060405180910390fd5b6001600160a01b038216611ecc5760405162461bcd60e51b815260040180806020018281038252602a815260200180612ff2602a913960400191505060405180910390fd5b6001600160a01b038116611f115760405162461bcd60e51b815260040180806020018281038252602d815260200180612edd602d913960400191505060405180910390fd5b60008411611f505760405162461bcd60e51b8152600401808060200182810382526038815260200180612aab6038913960400191505060405180910390fd5b600160601b8410611f925760405162461bcd60e51b815260040180806020018281038252602a815260200180612fc8602a913960400191505060405180910390fd5b6001600160a01b038216600090815260036020526040902054611fe65760405162461bcd60e51b81526004018080602001828103825260368152602001806131036036913960400191505060405180910390fd5b6001600160a01b03811660009081526003602052604090205461203a5760405162461bcd60e51b8152600401808060200182810382526039815260200180612c126039913960400191505060405180910390fd5b60008060006120498585612281565b92955093509091506000905081600381111561206157fe5b14806120785750600181600381111561207657fe5b145b6120b35760405162461bcd60e51b8152600401808060200182810382526039815260200180612a356039913960400191505060405180910390fd5b826001600160a01b0316856001600160a01b03161415806120e757508154600160601b908190046001600160601b03168801105b612126576040805162461bcd60e51b815260206004820152601c6024820152600080516020612cce833981519152604482015290519081900360640190fd5b8154600160601b6001600160601b0390911688011061217a576040805162461bcd60e51b815260206004820152601c6024820152600080516020612cce833981519152604482015290519081900360640190fd5b81546301000000600160e81b90910462ffffff90811660010116106121d05760405162461bcd60e51b815260040180806020018281038252602e815260200180613139602e913960400191505060405180910390fd5b81546001600160601b038082168901166001600160601b03199091161782556001600160a01b0385811690841614156122305781546001600160601b03600160601b80830482168a0190911602600160601b600160c01b03199091161782555b600081600381111561223e57fe5b141561226a57815462ffffff600160e81b8083048216600101909116026001600160e81b039091161782555b6122788686868a60006126f2565b50505050505050565b600080600080600080612294888861292e565b9150915060006122a48383612954565b6000818152600460209081526040808320815160a08101835281546001600160601b038082168352600160601b82041694820194909452600160c01b840464ffffffffff1692810192909252600160e81b90920462ffffff166060820152600182015460ff16151560808201529293509161231e90612996565b949b939a5090985092965090945050505050565b60006040518080612bf060229139604080519182900360220182206001600160a01b03808a16600090815260036020908152848220928b1682529084902082546001808501548354828501548e8b52958a018d9052969a509498509196909560ff600160f81b95869004818116979690950416936003198b166101fe9190941b169290921783179184908790849084a350505050505050505050505050565b604080517f4f70656e65644368616e6e656c2875696e742c75696e74290000000000000000815281516018918190039190910190206001600160a01b0384811660009081526003602052838120918516815292832081546001808401548354828501549697959694959394600160f81b9283900460ff81811696939594909204909116921b6101fe1660031989161782179083908690839080a350505050505050505050565b6000828260405160200180807f19457468657265756d205369676e6564204d6573736167653a0a000000000000815250601a0183805190602001908083835b602083106124d55780518252601f1990920191602091820191016124b6565b51815160209384036101000a6000190180199092169116179052661213d4149b995d60ca1b919093019081528451600790910192850191508083835b602083106125305780518252601f199092019160209182019101612511565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405280519060200120905092915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156125d55760405162461bcd60e51b8152600401808060200182810382526022815260200180612cee6022913960400191505060405180910390fd5b8160ff16601b141580156125ed57508160ff16601c14155b156126295760405162461bcd60e51b8152600401808060200182810382526022815260200180612f356022913960400191505060405180910390fd5b604080516000808252602080830180855289905260ff86168385015260608301889052608083018790529251909260019260a080820193601f1981019281900390910190855afa158015612681573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166126e9576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b60006040518080612c75602a9139602a01905060405180910390209050600060036000876001600160a01b03166001600160a01b031681526020019081526020016000209050600060036000876001600160a01b03166001600160a01b031681526020019081526020016000209050600082600001549050600083600101601f9054906101000a900460ff169050600083600001549050600084600101601f9054906101000a900460ff169050808360011b8860021c60021b17176040518a81528960208201528d6040820152838683606084a35050505050505050505050505050565b6000600a826060015162ffffff16816127eb57fe5b046001019050919050565b60006040518080612d5a60279139604080519182900360270182206001600160a01b03808916600090815260036020908152848220928a16825293902081546001808401548354828501548c8a52969a509498509296919560ff600160f81b94859004818116979590950416936003198b166101fe9190931b16919091178317919084908790849084a3505050505050505050505050565b600061289a83836129c2565b6128eb576040805162461bcd60e51b815260206004820152601b60248201527f506f696e74206d757374206265206f6e207468652063757276652e0000000000604482015290519081900360640190fd5b5060408051602080820194909452808201929092528051808303820181526060909201905280519101206001600160a01b031690565b81600182165b9250929050565b60008061293b84846129f6565b1561294a575082905081612927565b5081905082612927565b604080516001600160601b0319606094851b81166020808401919091529390941b90931660348401528051602881850301815260489093019052815191012090565b6000600a826060015162ffffff16816129ab57fe5b0662ffffff1660038111156129bc57fe5b92915050565b6000806401000003d01980856401000003d01987880909600708905060006401000003d01984850991909114949350505050565b6001600160a01b039081169116109056fe486f70724368616e6e656c733a20486173686564536563726574206d757374206e6f7420626520656d7074792e486f70724368616e6e656c733a206368616e6e656c206d7573742062652027554e494e495449414c4953454427206f72202746554e44454427486f70724368616e6e656c733a20696e69746961746f7220616e6420636f756e7465727061727479206d757374206e6f74206265207468652073616d65486f70724368616e6e656c733a20276164646974696f6e616c4465706f73697427206d7573742062652067726561746572207468616e2030486f70724368616e6e656c733a20666972737420636f6d706f6e656e74206f66207075626c6963206b6579206d757374206e6f74206265207a65726f2e486f70724368616e6e656c733a20696e69746961746f72206d75737420686176652063616c6c656420696e6974206265666f7265486f70724368616e6e656c733a204368616e6e656c20646f6573206e6f74206578697374486f70724368616e6e656c733a2027726563697069656e742720616e642027636f756e746572506172747927206d757374206e6f74206265207468652073616d65486f70724368616e6e656c733a20616d6f756e74206d757374206265207374726963746c792067726561746572207468616e207a65726f436c6f7365644368616e6e656c2875696e742c75696e742c75696e742c75696e7429486f70724368616e6e656c733a20636f756e7465727061727479206d75737420686176652063616c6c656420696e69742829206265666f7265486f70724368616e6e656c733a2027636c6f7375726554696d652720686173206e6f742070617373656446756e6465644368616e6e656c28616464726573732c75696e742c75696e742c75696e742c75696e7429486f70724368616e6e656c733a206368616e6e656c206d75737420626520696e202746554e44454427207374617465486f70724368616e6e656c733a20496e76616c696420616d6f756e740000000045434453413a20696e76616c6964207369676e6174757265202773272076616c7565486f70724368616e6e656c733a2073746f726564207374617465436f756e74657220616e64207369676e6564207374617465436f756e746572206d757374206265207468652073616d65496e697469617465644368616e6e656c436c6f737572652875696e742c75696e742c75696e7429486f70724368616e6e656c733a2070617274794142616c616e6365206d757374206265207374726963746c7920736d616c6c6572207468616e206465706f7369742062616c616e63654861736865645469636b6574207369676e657220646f6573206e6f74206d61746368206f757220636f756e7465727061727479486f70724368616e6e656c733a20636f756e7465727061727479206d75737420686176652063616c6c656420696e6974206265666f7265486f70724368616e6e656c733a207369676e6174757265206d757374206e6f742062652065787069726564486f70724368616e6e656c733a20476976656e2076616c7565206973206e6f742061207072652d696d616765206f66207468652073746f726564206f6e2d636861696e20736563726574486f70724368616e6e656c733a206e657720616e64206f6c64206861736865645365637265747320617265207468652073616d65486f70724368616e6e656c733a2027636f756e746572506172747927206164647265737320697320656d707479486f70724368616e6e656c733a2050726576656e74696e672074696d657374616d70206f766572666c6f7745434453413a20696e76616c6964207369676e6174757265202776272076616c7565486f70724368616e6e656c733a2027706172747941416d6f756e7427206d757374206265207374726963746c7920736d616c6c6572207468616e20276164646974696f6e616c4465706f73697427486f70724368616e6e656c733a2068617368656453656372657420697320656d707479486f70724368616e6e656c733a2070726576656e74696e672027616d6f756e7427206f766572666c6f77486f70724368616e6e656c733a2027726563697069656e7427206164647265737320697320656d707479486f70724368616e6e656c733a20476976656e207075626c6963206b6579206d757374206d6174636820276d73672e73656e64657227486f70724368616e6e656c733a206368616e6e656c206d757374206265202750454e44494e4727486f70724368616e6e656c733a207469636b6574206d75737420626520612077696e486f70724368616e6e656c733a206368616e6e656c206d75737420626520274f50454e27206f72202750454e44494e4727486f70724368616e6e656c733a206d73672e73656e646572206d75737420686176652063616c6c656420696e69742829206265666f7265486f70724368616e6e656c733a20696e69746961746f72206d75737420686176652063616c6c656420696e69742829206265666f7265486f70724368616e6e656c733a2050726576656e74696e67207374617465436f756e746572206f766572666c6f77486f70724368616e6e656c733a2050726576656e74696e67206163636f756e7420636f756e746572206f766572666c6f77486f70724368616e6e656c733a20276f70656e65722720616e642027636f756e746572506172747927206d757374206e6f74206265207468652073616d65486f70724368616e6e656c733a204163636f756e74206d757374206e6f7420626520736574486f70724368616e6e656c733a206368616e6e656c206d75737420626520274f50454e27486f70724368616e6e656c733a20276164646974696f6e616c4465706f73697427206d757374206265207374726963746c792067726561746572207468616e207a65726fa264697066735822122079c79e65d785c67f01fa61fd2921f666ea295cd9a491baf9ae5289ac2c183be964736f6c63430006060033",
  "devdoc": {
    "methods": {
      "claimChannelClosure(address)": {
        "params": {
          "counterparty": "address counter party of 'msg.sender'"
        }
      },
      "fundChannelWithSig(uint256,uint256,uint256,uint256,bytes32,bytes32,uint8)": {
        "params": {
          "additionalDeposit": "uint256",
          "notAfter": "uint256",
          "partyAAmount": "uint256",
          "r": "bytes32",
          "s": "bytes32",
          "stateCounter": "uint128",
          "v": "uint8"
        }
      },
      "init(uint256,uint256,bytes27)": {
        "params": {
          "hashedSecret": "initial value for hashedSecret",
          "senderX": "uint256 first component of msg.sender's public key",
          "senderY": "uint256 second component of msg.sender's public key"
        }
      },
      "initiateChannelClosure(address)": {
        "params": {
          "counterparty": "address counter party of 'msg.sender'"
        }
      },
      "openChannel(address)": {
        "params": {
          "counterparty": "address the counterParty of 'msg.sender'"
        }
      },
      "redeemTicket(bytes32,bytes32,uint256,bytes32,address,bytes32,bytes32,uint8)": {
        "params": {
          "amount": "uint256 amount 'msg.sender' will receive",
          "hashedSecretASecretB": "bytes32 hash of secretA concatenated with secretB",
          "preImage": "bytes32 the value that once hashed produces recipients hashedSecret",
          "r": "bytes32",
          "s": "bytes32",
          "v": "uint8",
          "winProb": "bytes32 win probability"
        }
      },
      "setHashedSecret(bytes27)": {
        "params": {
          "hashedSecret": "bytes27 hashedSecret to store"
        }
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "params": {
          "amount": "uint256 amount of tokens to transfer",
          "from": "address token holder address",
          "operator": "address operator requesting the transfer",
          "operatorData": "bytes extra information provided by the operator (if any)",
          "to": "address recipient address",
          "userData": "bytes extra information provided by the token holder (if any)"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "canImplementInterfaceForAddress(bytes32,address)": {
        "notice": "See {IERC1820Implementer-canImplementInterfaceForAddress}."
      },
      "claimChannelClosure(address)": {
        "notice": "If the timeout is reached without the 'counterParty' reedeming a ticket, then the tokens can be claimed by 'msg.sender'.claim channel's closure"
      },
      "fundChannelWithSig(uint256,uint256,uint256,uint256,bytes32,bytes32,uint8)": {
        "notice": "Fund a channel between 'initiator' and 'counterParty' using a signature, specified tokens must be approved beforehand.fund a channel"
      },
      "init(uint256,uint256,bytes27)": {
        "notice": "Initialize the account's on-chain variables."
      },
      "initiateChannelClosure(address)": {
        "notice": "A channel's party can initiate channel closure at any time, it starts a timeout.initiate channel's closure"
      },
      "openChannel(address)": {
        "notice": "open a channel"
      },
      "redeemTicket(bytes32,bytes32,uint256,bytes32,address,bytes32,bytes32,uint8)": {
        "notice": "redeem ticket"
      },
      "setHashedSecret(bytes27)": {
        "notice": "sets caller's hashedSecret"
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "notice": "A hook triggered when HOPR tokens are send to this contract."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 434,
        "contract": "contracts/HoprChannels.sol:HoprChannels",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3640,
        "contract": "contracts/HoprChannels.sol:HoprChannels",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)927"
      },
      {
        "astId": 3642,
        "contract": "contracts/HoprChannels.sol:HoprChannels",
        "label": "secsClosure",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3646,
        "contract": "contracts/HoprChannels.sol:HoprChannels",
        "label": "accounts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Account)3609_storage)"
      },
      {
        "astId": 3650,
        "contract": "contracts/HoprChannels.sol:HoprChannels",
        "label": "channels",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(Channel)3625_storage)"
      },
      {
        "astId": 3654,
        "contract": "contracts/HoprChannels.sol:HoprChannels",
        "label": "redeemedTickets",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes27": {
        "encoding": "inplace",
        "label": "bytes27",
        "numberOfBytes": "27"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)927": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Account)3609_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct HoprChannels.Account)",
        "numberOfBytes": "32",
        "value": "t_struct(Account)3609_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(Channel)3625_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct HoprChannels.Channel)",
        "numberOfBytes": "32",
        "value": "t_struct(Channel)3625_storage"
      },
      "t_struct(Account)3609_storage": {
        "encoding": "inplace",
        "label": "struct HoprChannels.Account",
        "members": [
          {
            "astId": 3602,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "accountX",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3604,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "hashedSecret",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes27"
          },
          {
            "astId": 3606,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "counter",
            "offset": 27,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 3608,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "oddY",
            "offset": 31,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Channel)3625_storage": {
        "encoding": "inplace",
        "label": "struct HoprChannels.Channel",
        "members": [
          {
            "astId": 3616,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 3618,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "partyABalance",
            "offset": 12,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 3620,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "closureTime",
            "offset": 24,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 3622,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "stateCounter",
            "offset": 29,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 3624,
            "contract": "contracts/HoprChannels.sol:HoprChannels",
            "label": "closureByPartyA",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}