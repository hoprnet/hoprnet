{
  "language": "Solidity",
  "sources": {
    "contracts/HoprChannels.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC1820Implementer.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract HoprChannels is IERC777Recipient, ERC1820Implementer {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // required by ERC1820 spec\n    IERC1820Registry internal constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n    // required by ERC777 spec\n    bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\n    // used by {tokensReceived} to distinguish which function to call after tokens are sent\n    uint256 public FUND_CHANNEL_MULTI_SIZE = abi.encode(address(0), address(0), uint256(0), uint256(0)).length;\n\n    /**\n     * @dev Possible channel statuses.\n     */\n    enum ChannelStatus { CLOSED, OPEN, PENDING_TO_CLOSE }\n\n    /**\n     * @dev A channel struct, used to represent a channel's state\n     */\n    struct Channel {\n        uint256 partyABalance;\n        uint256 partyBBalance;\n\n        bytes32 partyACommitment;\n        bytes32 partyBCommitment;\n        uint256 partyATicketEpoch;\n        uint256 partyBTicketEpoch;\n        uint256 partyATicketIndex;\n        uint256 partyBTicketIndex;\n\n        ChannelStatus status;\n        uint channelEpoch; \n\n        // the time when the channel can be closed by either party\n        // overloads at year >2105\n        uint32 closureTime;\n\n        // channel closure was initiated by party A\n        bool closureByPartyA;\n    }\n\n    /**\n     * @dev Stored channels keyed by their channel ids\n     */\n    mapping(bytes32 => Channel) public channels;\n\n    /**\n     * @dev HoprToken, the token that will be used to settle payments\n     */\n    IERC20 public token;\n\n    /**\n     * @dev Seconds it takes until we can finalize channel closure once,\n     * channel closure has been initialized.\n     */\n    uint32 public secsClosure;\n\n    event Announcement(\n        address indexed account,\n        bytes multiaddr\n    );\n\n    event ChannelUpdate(\n        address indexed partyA,\n        address indexed partyB,\n        Channel newState\n    );\n\n    /**\n     * @param _token HoprToken address\n     * @param _secsClosure seconds until a channel can be closed\n     */\n    constructor(address _token, uint32 _secsClosure) {\n        token = IERC20(_token);\n        secsClosure = _secsClosure;\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n    }\n\n    /**\n     * @dev Announces msg.sender's multiaddress.\n     * Confirmation should be done off-chain.\n     * @param multiaddr the multiaddress\n     */\n    function announce(bytes calldata multiaddr) external {\n        emit Announcement(msg.sender, multiaddr);\n    }\n\n    /**\n     * @dev Funds a channel, in both directions,\n     * then emits {ChannelUpdate} event.\n     * @param account1 the address of account1\n     * @param account2 the address of account2\n     * @param amount1 amount to fund account1\n     * @param amount2 amount to fund account2\n     */\n    function fundChannelMulti(\n        address account1,\n        address account2,\n        uint256 amount1,\n        uint256 amount2\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount1.add(amount2));\n        _fundChannel(\n            account1,\n            account2,\n            amount1,\n            amount2\n        );\n    }\n\n    function redeemTicket(\n        address counterparty,\n        bytes32 nextCommitment,\n        uint256 ticketEpoch,\n        uint256 ticketIndex,\n        bytes32 proofOfRelaySecret,\n        uint256 amount,\n        uint256 winProb,\n        bytes memory signature\n    ) external {\n        _redeemTicket(\n            msg.sender,\n            counterparty,\n            nextCommitment,\n            ticketEpoch,\n            ticketIndex,\n            proofOfRelaySecret,\n            amount,\n            winProb,\n            signature\n        );\n    }\n\n    /**\n     * @dev Initialize channel closure, updates channel'r\n     * closure time, when the cool-off period is over,\n     * user may finalize closure, then emits\n     * {ChannelUpdate} event.\n     * @param counterparty the address of the counterparty\n     */\n    function initiateChannelClosure(\n        address counterparty\n    ) external {\n        _initiateChannelClosure(msg.sender, counterparty);\n    }\n\n    /**\n     * @dev Finalize channel closure, if cool-off period\n     * is over it will close the channel and transfer funds\n     * to the parties involved, then emits\n     * {ChannelUpdate} event.\n     * @param counterparty the address of the counterparty\n     */\n    function finalizeChannelClosure(\n        address counterparty\n    ) external {\n        _finalizeChannelClosure(\n            msg.sender,\n            counterparty\n        );\n    }\n\n    /**\n    * @dev Request a channelIteration bump, so we can make a new set of\n    * commitments\n    * @param counterparty the address of the counterparty\n    * @param newCommitment, a secret derived from this new commitment\n    */\n    function bumpChannel(\n      address counterparty,\n      bytes32 newCommitment\n    ) external {\n        require(msg.sender != address(0), \"sender must not be empty\");\n        require(counterparty != address(0), \"counterparty must not be empty\");\n        require(msg.sender != counterparty, \"accountA and accountB must not be the same\");\n\n        (,,, Channel storage channel) = _getChannel(\n            msg.sender,\n            counterparty\n        );\n\n        if (_isPartyA(msg.sender, counterparty)){\n          channel.partyACommitment = newCommitment;\n          channel.partyATicketEpoch = channel.partyATicketEpoch.add(1);\n        } else {\n          channel.partyBCommitment = newCommitment;\n          channel.partyATicketEpoch = channel.partyBTicketEpoch.add(1);\n        }\n    }\n\n    /**\n     * A hook triggered when HOPR tokens are send to this contract.\n     *\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        // solhint-disable-next-line no-unused-vars\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        // solhint-disable-next-line no-unused-vars\n        bytes calldata operatorData\n    ) external override {\n        require(msg.sender == address(token), \"caller must be HoprToken\");\n\n        if (\n            operator == address(this) || // must not be triggered by HoprChannels\n            from == address(0) // ignore 'mint'\n        ) {\n            return;\n        }\n\n        // must be one of our supported functions\n        require(\n            userData.length == FUND_CHANNEL_MULTI_SIZE,\n            \"userData must match one of our supported functions\"\n        );\n\n        address account1;\n        address account2;\n        uint256 amount1;\n        uint256 amount2;\n\n        (account1, account2, amount1, amount2) = abi.decode(userData, (address, address, uint256, uint256));\n        require(amount == amount1.add(amount2), \"amount sent must be equal to amount specified\");\n\n        //require(from == account1 || from == account2, \"funder must be either account1 or account2\");\n        _fundChannel(account1, account2, amount1, amount2);\n    }\n\n    // internal code\n\n    /**\n     * @dev Funds a channel, then emits\n     * {ChannelUpdate} event.\n     * @param account1 the address of account1\n     * @param account2 the address of account2\n     * @param amount1 amount to fund account1\n     * @param amount2 amount to fund account2\n     */\n    function _fundChannel(\n        address account1,\n        address account2,\n        uint256 amount1,\n        uint256 amount2\n    ) internal {\n        require(account1 != account2, \"accountA and accountB must not be the same\");\n        require(account1 != address(0), \"accountA must not be empty\");\n        require(account2 != address(0), \"accountB must not be empty\");\n        require(amount1 > 0 || amount2 > 0, \"amountA or amountB must be greater than 0\");\n\n        address partyA;\n        address partyB;\n        uint256 amountA;\n        uint256 amountB;\n        \n        if (_isPartyA(account1, account2)){\n          partyA = account1;\n          partyB = account2;\n          amountA = amount1;\n          amountB = amount2;\n        } else {\n          partyA = account2;\n          partyB = account1;\n          amountA = amount2;\n          amountB = amount1;\n        }\n        (,,, Channel storage channel) = _getChannel(partyA, partyB);\n\n        require(channel.status != ChannelStatus.PENDING_TO_CLOSE, \"Cannot fund a closing channel\");\n        \n        if (channel.status == ChannelStatus.CLOSED) {\n          // We are reopening the channel\n          channel.channelEpoch = channel.channelEpoch.add(1);\n          channel.status = ChannelStatus.OPEN;\n          channel.partyATicketIndex = 0;\n          channel.partyBTicketIndex = 0;\n        }\n\n        channel.partyABalance = channel.partyABalance.add(amountA);\n        channel.partyBBalance = channel.partyBBalance.add(amountB);\n        emit ChannelUpdate(partyA, partyB, channel);\n    }\n\n    /**\n     * @dev Initialize channel closure, updates channel's\n     * closure time, when the cool-off period is over,\n     * user may finalize closure, then emits\n     * {ChannelUpdate} event.\n     * @param initiator the address of the initiator\n     * @param counterparty the address of the counterparty\n     */\n    function _initiateChannelClosure(\n        address initiator,\n        address counterparty\n    ) internal {\n        require(initiator != counterparty, \"initiator and counterparty must not be the same\");\n        require(initiator != address(0), \"initiator must not be empty\");\n        require(counterparty != address(0), \"counterparty must not be empty\");\n\n        (,,, Channel storage channel) = _getChannel(initiator, counterparty);\n        require(channel.status == ChannelStatus.OPEN, \"channel must be open\");\n\n        // @TODO: check with team, do we need SafeMath check here?\n        channel.closureTime = _currentBlockTimestamp() + secsClosure;\n        channel.status = ChannelStatus.PENDING_TO_CLOSE;\n\n        bool isPartyA = _isPartyA(initiator, counterparty);\n        if (isPartyA) {\n            channel.closureByPartyA = true;\n        }\n\n        emit ChannelUpdate(initiator, counterparty, channel);\n    }\n\n    /**\n     * @dev Finalize channel closure, if cool-off period\n     * is over it will close the channel and transfer funds\n     * to the parties involved, then emits\n     * {ChannelUpdate} event.\n     * @param initiator the address of the initiator\n     * @param counterparty the address of the counterparty\n     */\n    function _finalizeChannelClosure(\n        address initiator,\n        address counterparty\n    ) internal {\n        require(address(token) != address(0), \"token must not be empty\");\n        require(initiator != counterparty, \"initiator and counterparty must not be the same\");\n        require(initiator != address(0), \"initiator must not be empty\");\n        require(counterparty != address(0), \"counterparty must not be empty\");\n\n        (address partyA, address partyB,, Channel storage channel) = _getChannel(initiator, counterparty);\n        require(channel.status == ChannelStatus.PENDING_TO_CLOSE, \"channel must be pending to close\");\n\n        if (\n            channel.closureByPartyA && (initiator == partyA) ||\n            !channel.closureByPartyA && (initiator == partyB)\n        ) {\n            require(channel.closureTime < _currentBlockTimestamp(), \"closureTime must be before now\");\n        }\n\n        // settle balances\n        if (channel.partyABalance > 0) {\n            token.transfer(partyA, channel.partyABalance);\n        }\n        if (channel.partyBBalance > 0) {\n            token.transfer(partyB, channel.partyBBalance);\n        }\n\n        delete channel.partyABalance; // channel.partyABalance = 0\n        delete channel.partyBBalance; \n        delete channel.closureTime; // channel.closureTime = 0\n        delete channel.closureByPartyA; // channel.closureByPartyA = false\n        channel.status = ChannelStatus.CLOSED;\n\n        emit ChannelUpdate(initiator, counterparty, channel);\n    }\n\n    /**\n     * @param account1 the address of accountA\n     * @param account2 the address of accountB\n     * @return a tuple of partyA, partyB, channelId, channel\n     */\n    function _getChannel(address account1, address account2)\n        internal\n        view\n        returns (\n            address,\n            address,\n            bytes32,\n            Channel storage\n        )\n    {\n        (address partyA, address partyB) = _sortAddresses(account1, account2);\n        bytes32 channelId = _getChannelId(partyA, partyB);\n        Channel storage channel = channels[channelId];\n\n        return (partyA, partyB, channelId, channel);\n    }\n\n    /**\n     * @param partyA the address of partyA\n     * @param partyB the address of partyB\n     * @return the channel id by hashing partyA and partyB\n     */\n    function _getChannelId(address partyA, address partyB) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(partyA, partyB));\n    }\n\n    /**\n     * Parties are ordered - find the lower one.\n     * @param query the address of which we are asking 'is this party A'\n     * @param other the other address \n     * @return query is partyA \n     */\n    function _isPartyA(address query, address other) internal pure returns (bool) {\n        return uint160(query) < uint160(other);\n    }\n\n    /**\n     * @param accountA the address of accountA\n     * @param accountB the address of accountB\n     * @return a tuple representing partyA and partyB\n     */\n    function _sortAddresses(address accountA, address accountB) internal pure returns (address, address) {\n        if (_isPartyA(accountA, accountB)) {\n            return (accountA, accountB);\n        } else {\n            return (accountB, accountA);\n        }\n    }\n\n    /**\n     * @return the current timestamp\n     */\n    function _currentBlockTimestamp() internal view returns (uint32) {\n        // solhint-disable-next-line\n        return uint32(block.timestamp % 2 ** 32);\n    }\n\n    /**\n     * @dev Redeem a ticket\n     * @param redeemer the redeemer address\n     * @param counterparty the counterparty address\n     * @param nextCommitment the commitment that hashes to the redeemers previous commitment\n     * @param proofOfRelaySecret the proof of relay secret\n     * @param winProb the winning probability of the ticket\n     * @param amount the amount in the ticket\n     * @param signature signature\n     */\n    function _redeemTicket(\n        address redeemer,\n        address counterparty,\n        bytes32 nextCommitment,\n        uint256 ticketEpoch,\n        uint256 ticketIndex,\n        bytes32 proofOfRelaySecret,\n        uint256 amount,\n        uint256 winProb,\n        bytes memory signature\n    ) internal {\n        require(redeemer != address(0), \"redeemer must not be empty\");\n        require(counterparty != address(0), \"counterparty must not be empty\");\n        require(nextCommitment != bytes32(0), \"nextCommitment must not be empty\");\n        require(proofOfRelaySecret != bytes32(0), \"proofOfRelaySecret must not be empty\");\n        require(amount != uint256(0), \"amount must not be empty\");\n        (,,, Channel storage channel) = _getChannel(\n            redeemer,\n            counterparty\n        );\n\n        uint256 prevTicketEpoch;\n        if (_isPartyA(redeemer, counterparty)) {\n          require(channel.partyACommitment == keccak256(abi.encodePacked(nextCommitment)), \"commitment must be hash of next commitment\");\n          require(channel.partyATicketEpoch == ticketEpoch, \"ticket epoch must match\");\n          require(channel.partyATicketIndex < ticketIndex, \"redemptions must be in order\");\n          prevTicketEpoch = channel.partyATicketEpoch;\n        } else {\n          require(channel.partyBCommitment == keccak256(abi.encodePacked(nextCommitment)), \"commitment must be hash of next commitment\");\n          require(channel.partyBTicketEpoch == ticketEpoch, \"ticket epoch must match\");\n          require(channel.partyBTicketIndex < ticketIndex, \"redemptions must be in order\");\n          prevTicketEpoch = channel.partyBTicketEpoch;\n        }\n        require(channel.status != ChannelStatus.CLOSED, \"channel must be open or pending to close\");\n\n        bytes32 ticketHash = ECDSA.toEthSignedMessageHash(\n            keccak256(\n              _getEncodedTicket(\n                  redeemer,\n                  prevTicketEpoch,\n                  proofOfRelaySecret,\n                  channel.channelEpoch,\n                  amount,\n                  winProb\n              )\n            )\n        );\n        require(ECDSA.recover(ticketHash, signature) == counterparty, \"signer must match the counterparty\");\n        require(\n            uint256(_getTicketLuck(\n                ticketHash,\n                nextCommitment,\n                proofOfRelaySecret,\n                winProb\n            )) <= winProb,\n            \"ticket must be a win\"\n        );\n\n        if (_isPartyA(redeemer, counterparty)) {\n            channel.partyACommitment = nextCommitment;\n            channel.partyABalance = channel.partyABalance.add(amount);\n            channel.partyBBalance = channel.partyBBalance.sub(amount);\n            channel.partyATicketEpoch = channel.partyATicketEpoch.add(1);\n            channel.partyATicketIndex = ticketIndex;\n            emit ChannelUpdate(redeemer, counterparty, channel);\n        } else {\n            channel.partyABalance = channel.partyABalance.sub(amount);\n            channel.partyBBalance = channel.partyBBalance.add(amount);\n            channel.partyBCommitment = nextCommitment;\n            channel.partyBTicketEpoch = channel.partyBTicketEpoch.add(1);\n            channel.partyBTicketIndex = ticketIndex;\n            emit ChannelUpdate(counterparty, redeemer, channel);\n        }\n    }\n\n    /**\n     * @dev Encode ticket data\n     * @return bytes\n     */\n    function _getEncodedTicket(\n        address recipient,\n        uint256 ticketEpoch,\n        bytes32 proofOfRelaySecret,\n        uint256 channelEpoch,\n        uint256 amount,\n        uint256 winProb\n    ) internal pure returns (bytes memory) {\n        bytes32 challenge = keccak256(abi.encodePacked(proofOfRelaySecret));\n\n        return abi.encodePacked(\n            recipient,\n            challenge,\n            ticketEpoch,\n            amount,\n            winProb,\n            channelEpoch\n        );\n    }\n\n    /**\n     * @dev Get the ticket's \"luck\" by\n     * hashing provided values.\n     * @return luck\n     */\n    function _getTicketLuck(\n        bytes32 ticketHash,\n        bytes32 nextCommitment,\n        bytes32 proofOfRelaySecret,\n        uint256 winProb\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(ticketHash, nextCommitment, proofOfRelaySecret, winProb));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the global ERC1820 Registry, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n * implementers for interfaces in this registry, as well as query support.\n *\n * Implementers may be shared by multiple accounts, and can also implement more\n * than a single interface for each account. Contracts can implement interfaces\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\n * contract.\n *\n * {IERC165} interfaces can also be queried via the registry.\n *\n * For an in-depth explanation and source code analysis, see the EIP text.\n */\ninterface IERC1820Registry {\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     */\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     *  @param account Address of the contract for which to update the cache.\n     *  @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\n     *  If the result is not cached a direct lookup on the contract address is performed.\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     *  {updateERC165Cache} with the contract address.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC1820Implementer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1820Implementer.sol\";\n\n/**\n * @dev Implementation of the {IERC1820Implementer} interface.\n *\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\n * declare their willingness to be implementers.\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\n * registration to be complete.\n */\ncontract ERC1820Implementer is IERC1820Implementer {\n    bytes32 private constant _ERC1820_ACCEPT_MAGIC = keccak256(\"ERC1820_ACCEPT_MAGIC\");\n\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\n\n    /**\n     * See {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) public view virtual override returns (bytes32) {\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\n    }\n\n    /**\n     * @dev Declares the contract as willing to be an implementer of\n     * `interfaceHash` for `account`.\n     *\n     * See {IERC1820Registry-setInterfaceImplementer} and\n     * {IERC1820Registry-interfaceHash}.\n     */\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\n        _supportedInterfaces[interfaceHash][account] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC1820Implementer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface for an ERC1820 implementer, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\n * Used by contracts that will be registered as implementers in the\n * {IERC1820Registry}.\n */\ninterface IERC1820Implementer {\n    /**\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\n     * implements `interfaceHash` for `account`.\n     *\n     * See {IERC1820Registry-setInterfaceImplementer}.\n     */\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/mocks/ChannelsMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8;\n\nimport \"../HoprChannels.sol\";\n\ncontract ChannelsMock is HoprChannels {\n    constructor(address _token, uint32 _secsClosure)\n    HoprChannels(_token, _secsClosure) {}\n\n    function getChannelInternal(\n        address accountA,\n        address accountB\n    ) external view returns (\n        address,\n        address,\n        bytes32\n    ) {\n        (address partyA, address partyB, bytes32 channelId,) = _getChannel(accountA, accountB);\n        return (partyA, partyB, channelId);\n    }\n\n    function getChannelIdInternal(\n        address partyA,\n        address partyB\n    ) external pure returns (bytes32) {\n        return _getChannelId(partyA, partyB);\n    }\n\n    function isPartyAInternal(\n        address accountA,\n        address accountB\n    ) external pure returns (bool) {\n        return _isPartyA(accountA, accountB);\n    }\n\n    function getPartiesInternal(\n        address account1,\n        address account2\n    ) external pure returns (address, address) {\n        return _sortAddresses(account1,account2);\n    }\n\n    function getEncodedTicketInternal(\n        address recipient,\n        uint256 recipientCounter,\n        bytes32 proofOfRelaySecret,\n        uint256 channelIteration,\n        uint256 amount,\n        uint256 winProb\n    ) external pure returns (bytes memory) {\n        return _getEncodedTicket(recipient, recipientCounter, proofOfRelaySecret, channelIteration, amount, winProb);\n    }\n\n    function getTicketLuckInternal(\n        bytes32 ticketHash,\n        bytes32 secretPreImage,\n        bytes32 proofOfRelaySecret,\n        uint256 winProb\n    ) external pure returns (bytes32) {\n        return _getTicketLuck(ticketHash, secretPreImage, proofOfRelaySecret, winProb);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}