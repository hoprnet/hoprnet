{
  "language": "Solidity",
  "sources": {
    "contracts/HoprChannels.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/introspection/IERC1820Registry.sol\";\nimport \"@openzeppelin/contracts/introspection/ERC1820Implementer.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./utils/ECDSA.sol\";\nimport \"./utils/SafeUint24.sol\";\n\ncontract HoprChannels is IERC777Recipient, ERC1820Implementer {\n    using SafeMath for uint256;\n    using SafeUint24 for uint24;\n    using SafeERC20 for IERC20;\n\n    // required by ERC1820 spec\n    IERC1820Registry internal constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n    // required by ERC777 spec\n    bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\n    // used by {tokensReceived} to distinguish which function to call after tokens are sent\n    uint256 public FUND_CHANNEL_SIZE = abi.encode(false, address(0), address(0)).length;\n    // used by {tokensReceived} to distinguish which function to call after tokens are sent\n    uint256 public FUND_CHANNEL_MULTI_SIZE = abi.encode(false, address(0), address(0), uint256(0), uint256(0)).length;\n\n    /**\n     * @dev An account struct, used to represent an account's state\n     */\n    struct Account {\n        // @TODO: optimize struct\n        bytes32 secret; // account's hashed secret\n        uint256 counter; // increases everytime 'secret' is changed\n    }\n\n    /**\n     * @dev Possible channel statuses.\n     * We find out the channel's status by\n     * using {_getChannelStatus}.\n     */\n    enum ChannelStatus { CLOSED, OPEN, PENDING_TO_CLOSE }\n\n    /**\n     * @dev A channel struct, used to represent a channel's state\n     */\n    struct Channel {\n        // @TODO: optimize struct\n        // total tokens in deposit\n        uint256 deposit;\n        // tokens that are claimable by partyA\n        uint256 partyABalance;\n        // the time when the channel can be closed by either party\n        // overloads at year >2105\n        uint32 closureTime;\n        // status of the channel\n        // overloads at >16777215\n        uint24 status;\n        // channel closure was initiated by party A\n        bool closureByPartyA;\n    }\n\n    /**\n     * @dev Stored accounts keyed by their address\n     */\n    mapping(address => Account) public accounts;\n\n    /**\n     * @dev Stored channels keyed by their channel ids\n     */\n    mapping(bytes32 => Channel) public channels;\n\n    /**\n     * @dev Stored hashes of tickets keyed by their challenge,\n     * true if ticket has been redeemed.\n     */\n    mapping(bytes32 => bool) public tickets;\n\n    /**\n     * @dev HoprToken, the token that will be used to settle payments\n     */\n    IERC20 public token;\n\n    /**\n     * @dev Seconds it takes until we can finalize channel closure once,\n     * channel closure has been initialized.\n     */\n    uint32 public secsClosure;\n\n    event AccountInitialized(\n        // @TODO: remove this and rely on `msg.sender`\n        address indexed account,\n        bytes uncompressedPubKey,\n        bytes32 secret\n    );\n\n    event AccountSecretUpdated(\n        // @TODO: remove this and rely on `msg.sender`\n        address indexed account,\n        bytes32 secret,\n        // @TODO: remove counter?\n        uint256 counter\n    );\n\n    event ChannelFunded(\n        address indexed accountA,\n        address indexed accountB,\n        // @TODO: remove this and rely on `msg.sender`\n        address funder,\n        uint256 deposit,\n        uint256 partyABalance\n    );\n\n    event ChannelOpened(\n        // @TODO: remove this and rely on `msg.sender`\n        address indexed opener,\n        address indexed counterparty\n    );\n\n    event ChannelPendingToClose(\n        // @TODO: remove this and rely on `msg.sender`\n        address indexed initiator,\n        address indexed counterparty,\n        uint256 closureTime\n    );\n\n    event ChannelClosed(\n        // @TODO: remove this and rely on `msg.sender`\n        address indexed initiator,\n        address indexed counterparty,\n        uint256 partyAAmount,\n        uint256 partyBAmount\n    );\n\n    event TicketRedeemed(\n        // @TODO: remove this and rely on `msg.sender`\n        address indexed redeemer,\n        address indexed counterparty,\n        uint256 amount\n    );\n\n    /**\n     * @param _token HoprToken address\n     * @param _secsClosure seconds until a channel can be closed\n     */\n    constructor(address _token, uint32 _secsClosure) {\n        token = IERC20(_token);\n        secsClosure = _secsClosure;\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n    }\n\n    /**\n     * @dev Initializes an account,\n     * stores it's public key, secret and counter,\n     * then emits {AccountInitialized} and {AccountSecretUpdated} events.\n     * @param secret account's secret\n     * @param uncompressedPubKey account's uncompressedPubKey\n     */\n    function initializeAccount(\n        bytes calldata uncompressedPubKey,\n        bytes32 secret\n    ) external {\n        _initializeAccount(\n            msg.sender,\n            uncompressedPubKey,\n            secret\n        );\n    }\n\n    /**\n     * @dev Updates account's secret and counter,\n     * then emits {AccountSecretUpdated} event.\n     * @param secret account's secret\n     */\n    function updateAccountSecret(\n        bytes32 secret\n    ) external {\n        _updateAccountSecret(msg.sender, secret);\n    }\n\n    /**\n     * @dev Funds a channel in one direction,\n     * then emits {ChannelFunded} event.\n     * @param account the address of the recipient\n     * @param counterparty the address of the counterparty\n     * @param amount amount to fund\n     */\n    function fundChannel(\n        address account,\n        address counterparty,\n        uint256 amount\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amount);\n\n        _fundChannel(\n            msg.sender,\n            account,\n            counterparty,\n            amount,\n            0\n        );\n    }\n\n    /**\n     * @dev Funds a channel, in both directions,\n     * then emits {ChannelFunded} event.\n     * @param accountA the address of accountA\n     * @param accountB the address of accountB\n     * @param amountA amount to fund accountA\n     * @param amountB amount to fund accountB\n     */\n    function fundChannelMulti(\n        address accountA,\n        address accountB,\n        uint256 amountA,\n        uint256 amountB\n    ) external {\n        token.safeTransferFrom(msg.sender, address(this), amountA.add(amountB));\n\n        _fundChannel(\n            msg.sender,\n            accountA,\n            accountB,\n            amountA,\n            amountB\n        );\n    }\n\n    /**\n     * @dev Opens a channel, then emits\n     * {ChannelOpened} event.\n     * @param counterparty the address of the counterparty\n     */\n    function openChannel(address counterparty) external {\n        _openChannel(msg.sender, counterparty);\n    }\n\n    /**\n     * @dev Fund channel and then open it, then emits\n     * {ChannelFunded} and {ChannelOpened} events.\n     * @param accountA the address of accountA\n     * @param accountB the address of accountB\n     * @param amountA amount to fund accountA\n     * @param amountB amount to fund accountB\n     */\n    function fundAndOpenChannel(\n        address accountA,\n        address accountB,\n        uint256 amountA,\n        uint256 amountB\n    ) external {\n        address opener = msg.sender;\n        require(\n            opener == accountA || opener == accountB,\n            \"opener must be accountA or accountB\"\n        );\n\n        token.safeTransferFrom(msg.sender, address(this), amountA.add(amountB));\n\n        address counterparty;\n        if (opener == accountA) {\n            counterparty = accountB;\n        } else {\n            counterparty = accountA;\n        }\n\n        _fundChannel(opener, accountA, accountB, amountA, amountB);\n        _openChannel(opener, counterparty);\n    }\n\n    function redeemTicket(\n        address counterparty,\n        bytes32 secretPreImage,\n        bytes32 proofOfRelaySecret,\n        uint256 amount,\n        bytes32 winProb,\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) external {\n        _redeemTicket(\n            msg.sender,\n            counterparty,\n            secretPreImage,\n            proofOfRelaySecret,\n            amount,\n            winProb,\n            r,\n            s,\n            v\n        );\n    }\n\n    /**\n     * @dev Initialize channel closure, updates channel's\n     * closure time, when the cool-off period is over,\n     * user may finalize closure, then emits\n     * {ChannelPendingToClose} event.\n     * @param counterparty the address of the counterparty\n     */\n    function initiateChannelClosure(\n        address counterparty\n    ) external {\n        _initiateChannelClosure(msg.sender, counterparty);\n    }\n\n    /**\n     * @dev Finalize channel closure, if cool-off period\n     * is over it will close the channel and transfer funds\n     * to the parties involved, then emits\n     * {ChannelClosed} event.\n     * @param counterparty the address of the counterparty\n     */\n    function finalizeChannelClosure(\n        address counterparty\n    ) external {\n        _finalizeChannelClosure(\n            msg.sender,\n            counterparty\n        );\n    }\n\n    // @TODO: check with team, is this function too complex?\n    // @TODO: should we support account init?\n    /**\n     * A hook triggered when HOPR tokens are send to this contract.\n     *\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        // solhint-disable-next-line no-unused-vars\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        // solhint-disable-next-line no-unused-vars\n        bytes calldata operatorData\n    ) external override {\n        require(msg.sender == address(token), \"caller must be HoprToken\");\n\n        if (\n            operator == address(this) || // must not be triggered by HoprChannels\n            from == address(0) // ignore 'mint'\n        ) {\n            return;\n        }\n\n        // must be one of our supported functions\n        require(\n            userData.length == FUND_CHANNEL_SIZE ||\n            userData.length == FUND_CHANNEL_MULTI_SIZE,\n            \"userData must match one of our supported functions\"\n        );\n\n        bool shouldOpen;\n        address accountA;\n        address accountB;\n        uint256 amountA;\n        uint256 amountB;\n\n        if (userData.length == FUND_CHANNEL_SIZE) {\n            (shouldOpen, accountA, accountB) = abi.decode(userData, (bool, address, address));\n            amountA = amount;\n        } else {\n            (shouldOpen, accountA, accountB, amountA, amountB) = abi.decode(userData, (bool, address, address, uint256, uint256));\n            require(amount == amountA.add(amountB), \"amount sent must be equal to amount specified\");\n        }\n\n        _fundChannel(from, accountA, accountB, amountA, amountB);\n\n        if (shouldOpen) {\n            require(from == accountA || from == accountB, \"funder must be either accountA or accountB\");\n            _openChannel(accountA, accountB);\n        }\n    }\n\n    // internal code\n\n    /**\n     * @dev Initializes an account,\n     * stores it's public key, secret and counter,\n     * then emits {AccountInitialized} and {AccountSecretUpdated} events.\n     * @param account the address of the account\n     * @param uncompressedPubKey the public key of the account\n     * @param secret account's secret\n     */\n    function _initializeAccount(\n        address account,\n        bytes memory uncompressedPubKey,\n        bytes32 secret\n    ) internal {\n        Account storage accountData = accounts[account];\n\n        require(account != address(0), \"account must not be empty\");\n        require(ECDSA.uncompressedPubKeyToAddress(uncompressedPubKey) == account, \"public key does not match account\");\n        require(accountData.counter == 0, \"account already initialized\");\n        require(secret != bytes32(0), \"secret must not be empty\");\n\n        accountData.secret = secret;\n        accountData.counter = 1;\n\n        emit AccountInitialized(account, uncompressedPubKey, secret);\n    }\n\n    /**\n     * @dev Updates account's secret and counter,\n     * then emits {AccountSecretUpdated} event.\n     * @param account the address of the account\n     * @param secret account's secret\n     */\n    function _updateAccountSecret(\n        address account,\n        bytes32 secret\n    ) internal {\n        require(secret != bytes32(0), \"secret must not be empty\");\n\n        Account storage accountData = accounts[account];\n        // @TODO: do we need this?\n        require(secret != accountData.secret, \"secret must not be the same as before\");\n\n        accountData.secret = secret;\n        accountData.counter += 1;\n\n        emit AccountSecretUpdated(account, secret, accountData.counter);\n    }\n\n    /**\n     * @dev Funds a channel, then emits\n     * {ChannelFunded} event.\n     * @param funder the address of the funder\n     * @param accountA the address of accountA\n     * @param accountB the address of accountB\n     * @param amountA amount to fund accountA\n     * @param amountB amount to fund accountB\n     */\n    function _fundChannel(\n        address funder,\n        address accountA,\n        address accountB,\n        uint256 amountA,\n        uint256 amountB\n    ) internal {\n        require(funder != address(0), \"funder must not be empty\");\n        require(accountA != accountB, \"accountA and accountB must not be the same\");\n        require(accountA != address(0), \"accountA must not be empty\");\n        require(accountB != address(0), \"accountB must not be empty\");\n        require(amountA > 0 || amountB > 0, \"amountA or amountB must be greater than 0\");\n\n        (,,, Channel storage channel) = _getChannel(accountA, accountB);\n\n        channel.deposit = channel.deposit.add(amountA).add(amountB);\n        if (_isPartyA(accountA, accountB)) {\n            channel.partyABalance = channel.partyABalance.add(amountA);\n        }\n\n        emit ChannelFunded(\n            accountA,\n            accountB,\n            funder,\n            channel.deposit,\n            channel.partyABalance\n        );\n    }\n\n    /**\n     * @dev Opens a channel, then emits\n     * {ChannelOpened} event.\n     * @param opener the address of the opener\n     * @param counterparty the address of the counterparty\n     */\n    function _openChannel(\n        address opener,\n        address counterparty\n    ) internal {\n        require(opener != counterparty, \"opener and counterparty must not be the same\");\n        require(opener != address(0), \"opener must not be empty\");\n        require(counterparty != address(0), \"counterparty must not be empty\");\n\n        (,,, Channel storage channel) = _getChannel(opener, counterparty);\n        require(channel.deposit > 0, \"channel must be funded\");\n\n        ChannelStatus channelStatus = _getChannelStatus(channel.status);\n        require(channelStatus == ChannelStatus.CLOSED, \"channel must be closed in order to open\");\n\n        channel.status = channel.status.add(1);\n\n        emit ChannelOpened(opener, counterparty);\n    }\n\n    /**\n     * @dev Initialize channel closure, updates channel's\n     * closure time, when the cool-off period is over,\n     * user may finalize closure, then emits\n     * {ChannelPendingToClose} event.\n     * @param initiator the address of the initiator\n     * @param counterparty the address of the counterparty\n     */\n    function _initiateChannelClosure(\n        address initiator,\n        address counterparty\n    ) internal {\n        require(initiator != counterparty, \"initiator and counterparty must not be the same\");\n        require(initiator != address(0), \"initiator must not be empty\");\n        require(counterparty != address(0), \"counterparty must not be empty\");\n\n        (,,, Channel storage channel) = _getChannel(initiator, counterparty);\n        ChannelStatus channelStatus = _getChannelStatus(channel.status);\n        require(\n            channelStatus == ChannelStatus.OPEN,\n            \"channel must be open\"\n        );\n\n        // @TODO: check with team, do we need SafeMath check here?\n        channel.closureTime = _currentBlockTimestamp() + secsClosure;\n        channel.status = channel.status.add(1);\n\n        bool isPartyA = _isPartyA(initiator, counterparty);\n        if (isPartyA) {\n            channel.closureByPartyA = true;\n        }\n\n        emit ChannelPendingToClose(initiator, counterparty, channel.closureTime);\n    }\n\n    /**\n     * @dev Finalize channel closure, if cool-off period\n     * is over it will close the channel and transfer funds\n     * to the parties involved, then emits\n     * {ChannelClosed} event.\n     * @param initiator the address of the initiator\n     * @param counterparty the address of the counterparty\n     */\n    function _finalizeChannelClosure(\n        address initiator,\n        address counterparty\n    ) internal {\n        require(address(token) != address(0), \"token must not be empty\");\n        require(initiator != counterparty, \"initiator and counterparty must not be the same\");\n        require(initiator != address(0), \"initiator must not be empty\");\n        require(counterparty != address(0), \"counterparty must not be empty\");\n\n        (address partyA, address partyB,, Channel storage channel) = _getChannel(initiator, counterparty);\n        ChannelStatus channelStatus = _getChannelStatus(channel.status);\n        require(\n            channelStatus == ChannelStatus.PENDING_TO_CLOSE,\n            \"channel must be pending to close\"\n        );\n\n        if (\n            channel.closureByPartyA && (initiator == partyA) ||\n            !channel.closureByPartyA && (initiator == partyB)\n        ) {\n            require(channel.closureTime < _currentBlockTimestamp(), \"closureTime must be before now\");\n        }\n\n        uint256 partyAAmount = channel.partyABalance;\n        uint256 partyBAmount = channel.deposit.sub(channel.partyABalance);\n\n        // settle balances\n        if (partyAAmount > 0) {\n            token.transfer(partyA, partyAAmount);\n        }\n        if (partyBAmount > 0) {\n            token.transfer(partyB, partyBAmount);\n        }\n\n        // The state counter indicates the recycling generation and ensures that both parties are using the correct generation.\n        // Increase state counter so that we can re-use the same channel after it has been closed.\n        channel.status = channel.status.add(8);\n        delete channel.deposit; // channel.deposit = 0\n        delete channel.partyABalance; // channel.partyABalance = 0\n        delete channel.closureTime; // channel.closureTime = 0\n        delete channel.closureByPartyA; // channel.closureByPartyA = false\n\n        emit ChannelClosed(initiator, counterparty, partyAAmount, partyBAmount);\n    }\n\n    /**\n     * @param accountA the address of accountA\n     * @param accountB the address of accountB\n     * @return a tuple of partyA, partyB, channelId, channel\n     */\n    function _getChannel(address accountA, address accountB)\n        internal\n        view\n        returns (\n            address,\n            address,\n            bytes32,\n            Channel storage\n        )\n    {\n        (address partyA, address partyB) = _getParties(accountA, accountB);\n        bytes32 channelId = _getChannelId(partyA, partyB);\n        Channel storage channel = channels[channelId];\n\n        return (partyA, partyB, channelId, channel);\n    }\n\n    /**\n     * @param partyA the address of partyA\n     * @param partyB the address of partyB\n     * @return the channel id by hashing partyA and partyB\n     */\n    function _getChannelId(address partyA, address partyB) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(partyA, partyB));\n    }\n\n    /**\n     * @param status channel's status\n     * @return the channel's status in 'ChannelStatus'\n     */\n    function _getChannelStatus(uint24 status) internal pure returns (ChannelStatus) {\n        return ChannelStatus(status.mod(10));\n    }\n\n    /**\n     * @param status channel's status\n     * @return the channel's iteration\n     */\n    function _getChannelIteration(uint24 status) internal pure returns (uint256) {\n        return status.div(10).add(1);\n    }\n\n    /**\n     * @param accountA the address of accountA\n     * @param accountB the address of accountB\n     * @return true if accountA is partyA\n     */\n    function _isPartyA(address accountA, address accountB) internal pure returns (bool) {\n        return uint160(accountA) < uint160(accountB);\n    }\n\n    /**\n     * @param accountA the address of accountA\n     * @param accountB the address of accountB\n     * @return a tuple representing partyA and partyB\n     */\n    function _getParties(address accountA, address accountB) internal pure returns (address, address) {\n        if (_isPartyA(accountA, accountB)) {\n            return (accountA, accountB);\n        } else {\n            return (accountB, accountA);\n        }\n    }\n\n    /**\n     * @return the current timestamp\n     */\n    function _currentBlockTimestamp() internal view returns (uint32) {\n        // solhint-disable-next-line\n        return uint32(block.timestamp % 2 ** 32);\n    }\n\n    /**\n     * @dev Redeem a ticket\n     * @param redeemer the redeemer address\n     * @param counterparty the counterparty address\n     * @param secretPreImage the secretPreImage that results to the redeemers account secret\n     * @param proofOfRelaySecret the proof of relay secret\n     * @param winProb the winning probability of the ticket\n     * @param amount the amount in the ticket\n     * @param r part of the signature\n     * @param s part of the signature\n     * @param v part of the signature\n     */\n    function _redeemTicket(\n        address redeemer,\n        address counterparty,\n        bytes32 secretPreImage,\n        bytes32 proofOfRelaySecret,\n        uint256 amount,\n        bytes32 winProb,\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal {\n        require(redeemer != address(0), \"redeemer must not be empty\");\n        require(counterparty != address(0), \"counterparty must not be empty\");\n        require(secretPreImage != bytes32(0), \"secretPreImage must not be empty\");\n        require(proofOfRelaySecret != bytes32(0), \"proofOfRelaySecret must not be empty\");\n        require(amount != uint256(0), \"amount must not be empty\");\n        // require(winProb != bytes32(0), \"winProb must not be empty\");\n        require(r != bytes32(0), \"r must not be empty\");\n        require(s != bytes32(0), \"s must not be empty\");\n        require(v != uint8(0), \"v must not be empty\");\n\n        Account storage account = accounts[redeemer];\n        require(\n            account.secret == keccak256(abi.encodePacked(secretPreImage)),\n            // @TODO: add salt\n            // accounts[msg.sender].hashedSecret == bytes27(keccak256(abi.encodePacked(\"HOPRnet\", msg.sender, bytes27(preImage)))),\n            \"secretPreImage must be the hash of redeemer's secret\"\n        );\n\n        (,,, Channel storage channel) = _getChannel(\n            redeemer,\n            counterparty\n        );\n        require(\n            _getChannelStatus(channel.status) != ChannelStatus.CLOSED,\n            \"channel must be open or pending to close\"\n        );\n\n        bytes32 ticketHash = _getTicketHash(\n            _getEncodedTicket(\n                redeemer,\n                account.counter,\n                proofOfRelaySecret,\n                _getChannelIteration(channel.status),\n                amount,\n                winProb\n            )\n        );\n        require(!tickets[ticketHash], \"ticket must not be used twice\");\n        require(ECDSA.recover(ticketHash, r, s, v) == counterparty, \"signer must match the counterparty\");\n        require(\n            uint256(_getTicketLuck(\n                ticketHash,\n                secretPreImage,\n                proofOfRelaySecret,\n                winProb\n            )) <= uint256(winProb),\n            \"ticket must be a win\"\n        );\n\n        account.secret = secretPreImage;\n        tickets[ticketHash] = true;\n\n        if (_isPartyA(redeemer, counterparty)) {\n            channel.partyABalance = channel.partyABalance.add(amount);\n        } else {\n            channel.partyABalance = channel.partyABalance.sub(amount);\n        }\n\n        emit TicketRedeemed(redeemer, counterparty, amount);\n    }\n\n    /**\n     * @dev Encode ticket data\n     * @return bytes\n     */\n    function _getEncodedTicket(\n        address recipient,\n        uint256 recipientCounter,\n        bytes32 proofOfRelaySecret,\n        uint256 channelIteration,\n        uint256 amount,\n        bytes32 winProb\n    ) internal pure returns (bytes memory) {\n        bytes32 challenge = keccak256(abi.encodePacked(proofOfRelaySecret));\n\n        return abi.encodePacked(\n            recipient,\n            challenge,\n            recipientCounter,\n            amount,\n            winProb,\n            channelIteration\n        );\n    }\n\n    /**\n     * @dev Prefix the ticket message and return\n     * the actual hash that was used to sign\n     * the ticket with.\n     * @return prefixed ticket hash\n     */\n    function _getTicketHash(\n        bytes memory packedTicket\n    ) internal pure returns (bytes32) {\n        return ECDSA.toEthSignedMessageHash(\n            \"187\",\n            packedTicket\n        );\n    }\n\n    /**\n     * @dev Get the ticket's \"luck\" by\n     * hashing provided values.\n     * @return luck\n     */\n    function _getTicketLuck(\n        bytes32 ticketHash,\n        bytes32 secretPreImage,\n        bytes32 proofOfRelaySecret,\n        bytes32 winProb\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(ticketHash, secretPreImage, proofOfRelaySecret, winProb));\n    }\n}"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/introspection/IERC1820Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the global ERC1820 Registry, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n * implementers for interfaces in this registry, as well as query support.\n *\n * Implementers may be shared by multiple accounts, and can also implement more\n * than a single interface for each account. Contracts can implement interfaces\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\n * contract.\n *\n * {IERC165} interfaces can also be queried via the registry.\n *\n * For an in-depth explanation and source code analysis, see the EIP text.\n */\ninterface IERC1820Registry {\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     */\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     *  @param account Address of the contract for which to update the cache.\n     *  @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\n     *  If the result is not cached a direct lookup on the contract address is performed.\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     *  {updateERC165Cache} with the contract address.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n}\n"
    },
    "@openzeppelin/contracts/introspection/ERC1820Implementer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC1820Implementer.sol\";\n\n/**\n * @dev Implementation of the {IERC1820Implementer} interface.\n *\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\n * declare their willingness to be implementers.\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\n * registration to be complete.\n */\ncontract ERC1820Implementer is IERC1820Implementer {\n    bytes32 constant private _ERC1820_ACCEPT_MAGIC = keccak256(abi.encodePacked(\"ERC1820_ACCEPT_MAGIC\"));\n\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\n\n    /**\n     * See {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) public view override returns (bytes32) {\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\n    }\n\n    /**\n     * @dev Declares the contract as willing to be an implementer of\n     * `interfaceHash` for `account`.\n     *\n     * See {IERC1820Registry-setInterfaceImplementer} and\n     * {IERC1820Registry-interfaceHash}.\n     */\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\n        _supportedInterfaces[interfaceHash][account] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/utils/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.7.5;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n */\nlibrary ECDSA {\n    uint256 constant CURVE_ORDER = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141;\n    uint256 constant HALF_CURVE_ORDER = (CURVE_ORDER - 1) / 2;\n\n    /**\n     * @dev Computes the Ethereum address from an uncomporessed public key.\n     */\n    function uncompressedPubKeyToAddress(bytes memory uncompressedPubKey) internal pure returns (address) {\n        require(uncompressedPubKey.length == 64, \"uncompressed public key length is invalid\");\n        return address(bytes20(bytes32(keccak256(abi.encodePacked(uncompressedPubKey)) << 96)));\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > HALF_CURVE_ORDER) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n\n        if (v != 27 && v != 28) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum and HOPRnet Signed Message.\n     * Replicates the behavior of the https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n     * JSON-RPC method but also includes \"HOPRnet\" in the message.\n     */\n    function toEthSignedMessageHash(string memory length, bytes memory message) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", length, \"HOPRnet\", message));\n    }\n}\n"
    },
    "contracts/utils/SafeUint24.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.7.5;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * This is a modified version of OZ's SafeMath but aimed for uint24.\n */\nlibrary SafeUint24 {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint24 a, uint24 b) internal pure returns (uint24) {\n        uint24 c = a + b;\n        require(c >= a, \"SafeUint24: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint24 a, uint24 b) internal pure returns (uint24) {\n        require(b > 0, \"SafeUint24: division by zero\");\n        uint24 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint24 a, uint24 b) internal pure returns (uint24) {\n        require(b != 0, \"SafeUint24: modulo by zero\");\n        return a % b;\n    }\n}"
    },
    "@openzeppelin/contracts/introspection/IERC1820Implementer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface for an ERC1820 implementer, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\n * Used by contracts that will be registered as implementers in the\n * {IERC1820Registry}.\n */\ninterface IERC1820Implementer {\n    /**\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\n     * implements `interfaceHash` for `account`.\n     *\n     * See {IERC1820Registry-setInterfaceImplementer}.\n     */\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/mocks/TicketsMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.7.5;\n\nimport \"../HoprChannels.sol\";\n\ncontract TicketsMock is HoprChannels {\n    constructor(address _token, uint32 _secsClosure)\n    HoprChannels(_token, _secsClosure) {}\n\n    function initializeAccountInternal(\n        address sender,\n        bytes calldata uncompressedPubKey,\n        bytes32 secret\n    ) external {\n        _initializeAccount(\n            sender,\n            uncompressedPubKey,\n            secret\n        );\n    }\n\n    function updateAccountSecretInternal(\n        address sender,\n        bytes32 secret\n    ) external {\n        _updateAccountSecret(sender, secret);\n    }\n\n    function fundChannelInternal(\n        address funder,\n        address accountA,\n        address accountB,\n        uint256 amountA,\n        uint256 amountB\n    ) external {\n        _fundChannel(funder, accountA, accountB, amountA, amountB);\n    }\n\n    function openChannelInternal(\n        address opener,\n        address counterparty\n    ) external {\n        _openChannel(opener, counterparty);\n    }\n\n    function initiateChannelClosureInternal(\n        address initiator,\n        address counterparty\n    ) external {\n        _initiateChannelClosure(initiator, counterparty);\n    }\n\n    function finalizeChannelClosureInternal(\n        address initiator,\n        address counterparty\n    ) external {\n        _finalizeChannelClosure(initiator, counterparty);\n    }\n\n    function redeemTicketInternal(\n        address recipient,\n        address counterparty,\n        bytes32 secretPreImage,\n        bytes32 proofOfRelaySecret,\n        uint256 amount,\n        bytes32 winProb,\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) external {\n        _redeemTicket(recipient, counterparty, secretPreImage, proofOfRelaySecret, amount, winProb, r, s, v);\n    }\n\n    function getEncodedTicketInternal(\n        address recipient,\n        uint256 recipientCounter,\n        bytes32 proofOfRelaySecret,\n        uint256 channelIteration,\n        uint256 amount,\n        bytes32 winProb\n    ) external pure returns (bytes memory) {\n        return _getEncodedTicket(recipient, recipientCounter, proofOfRelaySecret, channelIteration, amount, winProb);\n    }\n\n    function getTicketHashInternal(\n        bytes calldata packedTicket\n    ) external pure returns (bytes32) {\n        return _getTicketHash(packedTicket);\n    }\n\n    function getTicketLuckInternal(\n        bytes32 ticketHash,\n        bytes32 secretPreImage,\n        bytes32 proofOfRelaySecret,\n        bytes32 winProb\n    ) external pure returns (bytes32) {\n        return _getTicketLuck(ticketHash, secretPreImage, proofOfRelaySecret, winProb);\n    }\n}"
    },
    "contracts/mocks/ChannelsMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.7.5;\n\nimport \"../HoprChannels.sol\";\n\ncontract ChannelsMock is HoprChannels {\n    constructor(address _token, uint32 _secsClosure)\n    HoprChannels(_token, _secsClosure) {}\n\n    function fundChannelInternal(\n        address funder,\n        address accountA,\n        address accountB,\n        uint256 amountA,\n        uint256 amountB\n    ) external {\n        _fundChannel(funder, accountA, accountB, amountA, amountB);\n    }\n\n    function openChannelInternal(\n        address opener,\n        address counterparty\n    ) external {\n        _openChannel(opener, counterparty);\n    }\n\n    function initiateChannelClosureInternal(\n        address initiator,\n        address counterparty\n    ) external {\n        _initiateChannelClosure(initiator, counterparty);\n    }\n\n    function finalizeChannelClosureInternal(\n        address initiator,\n        address counterparty\n    ) external {\n        _finalizeChannelClosure(initiator, counterparty);\n    }\n\n    function getChannelInternal(\n        address accountA,\n        address accountB\n    ) external view returns (\n        address,\n        address,\n        bytes32\n    ) {\n        (address partyA, address partyB, bytes32 channelId,) = _getChannel(accountA, accountB);\n\n        return (partyA, partyB, channelId);\n    }\n\n    function getChannelIdInternal(\n        address partyA,\n        address partyB\n    ) external pure returns (bytes32) {\n        return _getChannelId(partyA, partyB);\n    }\n\n    function getChannelStatusInternal(\n        uint24 status\n    ) external pure returns (ChannelStatus) {\n        return _getChannelStatus(status);\n    }\n\n    function getChannelIterationInternal(\n        uint24 status\n    ) external pure returns (uint256) {\n        return _getChannelIteration(status);\n    }\n\n    function isPartyAInternal(\n        address accountA,\n        address accountB\n    ) external pure returns (bool) {\n        return _isPartyA(accountA, accountB);\n    }\n\n    function getPartiesInternal(\n        address accountA,\n        address accountB\n    ) external pure returns (address, address) {\n        return _getParties(accountA, accountB);\n    }\n}\n"
    },
    "contracts/mocks/AccountsMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.7.5;\n\nimport \"../HoprChannels.sol\";\n\ncontract AccountsMock is HoprChannels {\n    constructor(address _token, uint32 _secsClosure)\n    HoprChannels(_token, _secsClosure) {}\n\n    function initializeAccountInternal(\n        address sender,\n        bytes calldata uncompressedPubKey,\n        bytes32 secret\n    ) external {\n        _initializeAccount(\n            sender,\n            uncompressedPubKey,\n            secret\n        );\n    }\n\n    function updateAccountSecretInternal(\n        address sender,\n        bytes32 secret\n    ) external {\n        _updateAccountSecret(sender, secret);\n    }\n}\n"
    },
    "contracts/mocks/ECDSAMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.7.5;\n\nimport \"../utils/ECDSA.sol\";\n\ncontract ECDSAMock {\n    function uncompressedPubKeyToAddress(\n        bytes calldata uncompressedPubKey\n    ) external pure returns (address) {\n        return ECDSA.uncompressedPubKeyToAddress(uncompressedPubKey);\n    }\n\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) external pure returns (address) {\n        return ECDSA.recover(hash, r, s, v);\n    }\n\n    function toEthSignedMessageHash(\n        string calldata length,\n        bytes calldata message\n    ) external pure returns (bytes32) {\n        return ECDSA.toEthSignedMessageHash(length, message);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
