{
  "address": "0xe71535c8110342d39D5f6Cdf31837C9AdD0975Ef",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract HoprToken",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_startTime",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_maxMintAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "scheduleName",
          "type": "string"
        }
      ],
      "name": "AllocationAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "scheduleName",
          "type": "string"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128[]",
          "name": "durations",
          "type": "uint128[]"
        },
        {
          "indexed": false,
          "internalType": "uint128[]",
          "name": "percents",
          "type": "uint128[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "ScheduleAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint128[]",
          "name": "amounts",
          "type": "uint128[]"
        },
        {
          "internalType": "string",
          "name": "scheduleName",
          "type": "string"
        }
      ],
      "name": "addAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128[]",
          "name": "durations",
          "type": "uint128[]"
        },
        {
          "internalType": "uint128[]",
          "name": "percents",
          "type": "uint128[]"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "addSchedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "allocations",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "claimed",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "lastClaim",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "revoked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "scheduleName",
          "type": "string"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "scheduleName",
          "type": "string"
        }
      ],
      "name": "claimFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "scheduleName",
          "type": "string"
        }
      ],
      "name": "getClaimable",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "getSchedule",
      "outputs": [
        {
          "internalType": "uint128[]",
          "name": "",
          "type": "uint128[]"
        },
        {
          "internalType": "uint128[]",
          "name": "",
          "type": "uint128[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "scheduleName",
          "type": "string"
        }
      ],
      "name": "revokeAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract HoprToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMinted",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalToBeMinted",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_startTime",
          "type": "uint128"
        }
      ],
      "name": "updateStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x174ad1d708962b63139b7473d461394bdcd0f9c010f7ed6d0e7bab95a5ba7d74",
  "receipt": {
    "to": null,
    "from": "0x4fF4e61052a4DFb1bE72866aB711AE08DD861976",
    "contractAddress": "0xe71535c8110342d39D5f6Cdf31837C9AdD0975Ef",
    "transactionIndex": 81,
    "gasUsed": "1983241",
    "logsBloom": "0x
    "blockHash": "0xe43e0bd5b449b947e2bcc54d19a33467f0979d3a92de4f3e0887b89d4a28dae3",
    "transactionHash": "0x174ad1d708962b63139b7473d461394bdcd0f9c010f7ed6d0e7bab95a5ba7d74",
    "logs": [
      {
        "transactionIndex": 81,
        "blockNumber": 7999141,
        "transactionHash": "0x174ad1d708962b63139b7473d461394bdcd0f9c010f7ed6d0e7bab95a5ba7d74",
        "address": "0xe71535c8110342d39D5f6Cdf31837C9AdD0975Ef",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ff4e61052a4dfb1be72866ab711ae08dd861976"
        ],
        "data": "0x",
        "logIndex": 162,
        "blockHash": "0xe43e0bd5b449b947e2bcc54d19a33467f0979d3a92de4f3e0887b89d4a28dae3"
      }
    ],
    "blockNumber": 7999141,
    "cumulativeGasUsed": "16225010",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa3C8f4044b30Fb3071F5b3b02913DE524F1041dc",
    86400000,
    "100000000000000000000000000"
  ],
  "numDeployments": 2,
  "solcInputHash": "a32ef8acd5777f9c1e9dc43dfb9de112",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract HoprToken\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_startTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxMintAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"scheduleName\",\"type\":\"string\"}],\"name\":\"AllocationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"scheduleName\",\"type\":\"string\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"durations\",\"type\":\"uint128[]\"},{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"percents\",\"type\":\"uint128[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"ScheduleAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"amounts\",\"type\":\"uint128[]\"},{\"internalType\":\"string\",\"name\":\"scheduleName\",\"type\":\"string\"}],\"name\":\"addAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128[]\",\"name\":\"durations\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"percents\",\"type\":\"uint128[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"allocations\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimed\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastClaim\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"scheduleName\",\"type\":\"string\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"scheduleName\",\"type\":\"string\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"scheduleName\",\"type\":\"string\"}],\"name\":\"getClaimable\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getSchedule\",\"outputs\":[{\"internalType\":\"uint128[]\",\"name\":\"\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"\",\"type\":\"uint128[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"scheduleName\",\"type\":\"string\"}],\"name\":\"revokeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract HoprToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalToBeMinted\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_startTime\",\"type\":\"uint128\"}],\"name\":\"updateStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addAllocations(address[],uint128[],string)\":{\"details\":\"Adds allocations, all allocations will use the schedule specified, schedule must be created before and account must not have an allocation in the specific schedule.\",\"params\":{\"accounts\":\"accounts to create allocations for\",\"amounts\":\"total amount to be allocated\",\"scheduleName\":\"the schedule name\"}},\"addSchedule(uint128[],uint128[],string)\":{\"details\":\"Adds a schedule, the schedule must not already exist. Owner is expected to insert values in ascending order, each element in arrays {durations} and {percents} is meant to be related.\",\"params\":{\"durations\":\"the durations for each schedule period in seconds (6 months, 1 year)\",\"percents\":\"the percent of how much can be allocated during that period, instead of using 100 we scale the value up to {MULTIPLIER} so we can have more accurate \\\"percentages\\\".\"}},\"claim(string)\":{\"details\":\"Claim tokens by specified a schedule.\",\"params\":{\"scheduleName\":\"the schedule name\"}},\"claimFor(address,string)\":{\"details\":\"Claim tokens for a specific account by specified a schedule.\",\"params\":{\"account\":\"the account to claim for\",\"scheduleName\":\"the schedule name\"}},\"constructor\":{\"params\":{\"_startTime\":\"the timestamp to start counting\",\"_token\":\"the token which we will mint\"}},\"getClaimable(address,string)\":{\"params\":{\"account\":\"the account to get claimable for\",\"scheduleName\":\"the schedule name\"},\"returns\":{\"_0\":\"claimable amount\"}},\"getSchedule(string)\":{\"params\":{\"name\":\"the schedule name\"},\"returns\":{\"_0\":\"the schedule\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAccount(address,string)\":{\"details\":\"Revokes the ability for an account to claim on the specified schedule.\",\"params\":{\"account\":\"the account to crevoke\",\"scheduleName\":\"the schedule name\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateStartTime(uint128)\":{\"details\":\"Allows the owner to update the start time, in case there are unforeseen issues in the long schedule.\",\"params\":{\"_startTime\":\"the new timestamp to start counting\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/HoprDistributor.sol\":\"HoprDistributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-v3-0-1/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\",\"keccak256\":\"0x9486045e189facd2e868ece35249872598ef03f1087fb6fa4d1161842daa2287\"},\"@openzeppelin/contracts-v3-0-1/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\"},\"@openzeppelin/contracts-v3-0-1/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\"},\"@openzeppelin/contracts-v3-0-1/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0x02e3523816b92b805f99dcecf8cbada55c34ca9983a79e2a114a232f466f2f3d\"},\"@openzeppelin/contracts-v3-0-1/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"},\"@openzeppelin/contracts-v3-0-1/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\"},\"@openzeppelin/contracts-v3-0-1/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0xe81b5fca616ec6f57bb9d1ab0750202b9e514760462274ac04495e8c249697ab\"},\"@openzeppelin/contracts-v3-0-1/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1e884229423b544c0b07106f59311ea7291ca25a863e9d8f8dd9debe17669cfe\"},\"@openzeppelin/contracts-v3-0-1/token/ERC777/IERC777Sender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\\n *\\n * {IERC777} Token holders can be notified of operations performed on their\\n * tokens by having a contract implement this interface (contract holders can be\\n *  their own implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Sender {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\\n     * is conveyed by `to` being the zero address or not.\\n     *\\n     * This call occurs _before_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa57f370b3c3b4fd255472e1a784cbbd2740ece955c8019e494aba60ae83115cf\"},\"@openzeppelin/contracts-v3-0-1/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\"},\"@openzeppelin/contracts-v3-0-1/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"@openzeppelin/contracts-v3-0-1/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\"},\"contracts/ERC777/ERC777Snapshot.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-v3-0-1/math/SafeMath.sol\\\";\\nimport \\\"../openzeppelin-contracts/ERC777.sol\\\";\\n\\n/**\\n * @dev This contract extends an ERC777 token with a snapshot mechanism. When a snapshot is created, the balances and\\n * total supply at the time are recorded for later access.\\n *\\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\\n * In naive implementations it's possible to perform a \\\"double spend\\\" attack by reusing the same balance from different\\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\\n * used to create an efficient ERC20 forking mechanism.\\n *\\n * Snapshots are created by the internal {updateValueAtNow} function.\\n * To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with a block number.\\n * To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with a block number\\n * and the account address.\\n */\\nabstract contract ERC777Snapshot is ERC777 {\\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\\n    // https://github.com/Giveth/minime/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\\n\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev `Snapshot` is the structure that attaches a block number to a\\n     * given value, the block number attached is the one that last changed the\\n     * value\\n     */\\n    struct Snapshot {\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `accountSnapshots` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping (address => Snapshot[]) public accountSnapshots;\\n\\n    // Tracks the history of the `totalSupply` of the token\\n    Snapshot[] public totalSupplySnapshots;\\n\\n    /**\\n     * @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n     * @param _owner The address from which the balance will be retrieved\\n     * @param _blockNumber The block number when the balance is queried\\n     * @return The balance at `_blockNumber`\\n     */\\n    function balanceOfAt(address _owner, uint128 _blockNumber) external view returns (uint256) {\\n        return _valueAt(accountSnapshots[_owner], _blockNumber);\\n    }\\n\\n    /**\\n     * @notice Total amount of tokens at a specific `_blockNumber`.\\n     * @param _blockNumber The block number when the totalSupply is queried\\n     * @return The total amount of tokens at `_blockNumber`\\n     */\\n    function totalSupplyAt(uint128 _blockNumber) external view returns(uint256) {\\n        return _valueAt(totalSupplySnapshots, _blockNumber);\\n    }\\n\\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\\n    function _beforeTokenTransfer(address operator, address from, address to, uint256 amount) internal virtual override {\\n        if (from == address(0)) {\\n            // mint\\n            updateValueAtNow(accountSnapshots[to], balanceOf(to).add(amount));\\n            updateValueAtNow(totalSupplySnapshots, totalSupply().add(amount));\\n        } else if (to == address(0)) {\\n            // burn\\n            updateValueAtNow(accountSnapshots[from], balanceOf(from).sub(amount));\\n            updateValueAtNow(totalSupplySnapshots, totalSupply().sub(amount));\\n        } else if (from != to) {\\n            // transfer\\n            updateValueAtNow(accountSnapshots[from], balanceOf(from).sub(amount));\\n            updateValueAtNow(accountSnapshots[to], balanceOf(to).add(amount));\\n        }\\n    }\\n\\n    /**\\n     * @dev `_valueAt` retrieves the number of tokens at a given block number\\n     * @param snapshots The history of values being queried\\n     * @param _block The block number to retrieve the value at\\n     * @return The number of tokens being queried\\n     */\\n    function _valueAt(\\n        Snapshot[] storage snapshots,\\n        uint128 _block\\n    ) view internal returns (uint256) {\\n        uint256 lenSnapshots = snapshots.length;\\n        if (lenSnapshots == 0) return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= snapshots[lenSnapshots - 1].fromBlock) {\\n            return snapshots[lenSnapshots - 1].value;\\n        }\\n        if (_block < snapshots[0].fromBlock) {\\n            return 0;\\n        }\\n\\n        // Binary search of the value in the array\\n        uint256 min = 0;\\n        uint256 max = lenSnapshots - 1;\\n        while (max > min) {\\n            uint256 mid = (max + min + 1) / 2;\\n\\n            uint256 midSnapshotFrom = snapshots[mid].fromBlock;\\n            if (midSnapshotFrom == _block) {\\n                return snapshots[mid].value;\\n            } else if (midSnapshotFrom < _block) {\\n                min = mid;\\n            } else {\\n                max = mid - 1;\\n            }\\n        }\\n\\n        return snapshots[min].value;\\n    }\\n\\n    /**\\n     * @dev `updateValueAtNow` used to update the `balances` map and the\\n     *  `totalSupplySnapshots`\\n     * @param snapshots The history of data being updated\\n     * @param _value The new number of tokens\\n     */\\n    function updateValueAtNow(Snapshot[] storage snapshots, uint256 _value) internal {\\n        require(_value <= uint128(-1), \\\"casting overflow\\\");\\n        uint256 lenSnapshots = snapshots.length;\\n\\n        if (\\n            (lenSnapshots == 0) ||\\n            (snapshots[lenSnapshots - 1].fromBlock < block.number)\\n        ) {\\n            snapshots.push(\\n                Snapshot(\\n                    uint128(block.number),\\n                    uint128(_value)\\n                )\\n            );\\n        } else {\\n            snapshots[lenSnapshots - 1].value = uint128(_value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd42dd0b8496dcb00af9d4644ba52305c39a22ded30ffeef5765a994ddd35b2b\"},\"contracts/HoprDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-v3-0-1/access/Ownable.sol\\\";\\nimport \\\"./HoprToken.sol\\\";\\n\\ncontract HoprDistributor is Ownable {\\n    // A {Schedule} that defined when and how much will be claimed\\n    // from an {Allocation}.\\n    // The primary reason we decided to use uint128 is because the allocation\\n    // may be used potentially thousands of times, this helps us reduce\\n    // casting thus lower gas costs.\\n    struct Schedule {\\n        uint128[] durations;\\n        uint128[] percents;\\n    }\\n\\n    // An {Allocation} represents how much a account can claim, claimed,\\n    // and when last claim occured.\\n    // The primary reason we decided to use uint128 is so we can reduce\\n    // our gas costs, since this struct will be stored potentially\\n    // thousands of times.\\n    struct Allocation {\\n        uint128 amount;\\n        uint128 claimed;\\n        uint128 lastClaim;\\n        bool revoked; // account can no longer claim\\n    }\\n\\n    // helps us create more accurate calculations\\n    uint128 public constant MULTIPLIER = 10 ** 6;\\n\\n    // total amount minted\\n    uint128 public totalMinted = 0;\\n    // how many tokens will be minted (the sum of all allocations)\\n    uint128 public totalToBeMinted = 0;\\n\\n    // time where the contract will consider as starting time\\n    uint128 public startTime;\\n    // token which will be used\\n    HoprToken public token;\\n    // maximum tokens allowed to be minted\\n    uint128 public maxMintAmount;\\n\\n    // schedule name -> Schedule\\n    mapping(string => Schedule) internal schedules;\\n\\n    // account -> schedule name -> Allocation\\n    // allows for an account to have more than one type of Schedule\\n    mapping(address => mapping(string => Allocation)) public allocations;\\n\\n    event ScheduleAdded(uint128[] durations, uint128[] percents, string name);\\n    event AllocationAdded(address indexed account, uint128 amount, string scheduleName);\\n    event Claimed(address indexed account, uint128 amount, string scheduleName);\\n\\n    /**\\n     * @param _startTime the timestamp to start counting\\n     * @param _token the token which we will mint\\n     */\\n    constructor(HoprToken _token, uint128 _startTime, uint128 _maxMintAmount) public {\\n        startTime = _startTime;\\n        token = _token;\\n        maxMintAmount = _maxMintAmount;\\n    }\\n\\n    /**\\n     * @param name the schedule name\\n     * @return the schedule\\n     */\\n    function getSchedule(string calldata name) external view returns (uint128[] memory, uint128[] memory) {\\n        return (\\n            schedules[name].durations,\\n            schedules[name].percents\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows the owner to update the start time,\\n     * in case there are unforeseen issues in the long schedule.\\n     * @param _startTime the new timestamp to start counting\\n     */\\n    function updateStartTime(uint128 _startTime) external onlyOwner {\\n        require(startTime > _currentBlockTimestamp(), \\\"Previous start time must not be reached\\\");\\n        startTime = _startTime;\\n    }\\n\\n    /**\\n     * @dev Revokes the ability for an account to claim on the\\n     * specified schedule.\\n     * @param account the account to crevoke\\n     * @param scheduleName the schedule name\\n     */\\n    function revokeAccount(\\n        address account,\\n        string calldata scheduleName\\n    ) external onlyOwner {\\n        Allocation storage allocation = allocations[account][scheduleName];\\n        require(allocation.amount != 0, \\\"Allocation must exist\\\");\\n        require(!allocation.revoked, \\\"Allocation must not be already revoked\\\");\\n\\n        allocation.revoked = true;\\n        totalToBeMinted = _subUint128(totalToBeMinted, _subUint128(allocation.amount, allocation.claimed));\\n    }\\n\\n    /**\\n     * @dev Adds a schedule, the schedule must not already exist.\\n     * Owner is expected to insert values in ascending order,\\n     * each element in arrays {durations} and {percents} is meant to be\\n     * related.\\n     * @param durations the durations for each schedule period in seconds (6 months, 1 year)\\n     * @param percents the percent of how much can be allocated during that period,\\n     * instead of using 100 we scale the value up to {MULTIPLIER} so we can have more accurate\\n     * \\\"percentages\\\".\\n     */\\n    function addSchedule(\\n        uint128[] calldata durations,\\n        uint128[] calldata percents,\\n        string calldata name\\n    ) external onlyOwner {\\n        require(schedules[name].durations.length == 0, \\\"Schedule must not exist\\\");\\n        require(durations.length == percents.length, \\\"Durations and percents must have equal length\\\");\\n\\n        uint128 lastDuration = 0;\\n        uint128 totalPercent = 0;\\n\\n        for (uint256 i = 0; i < durations.length; i++) {\\n            require(lastDuration < durations[i], \\\"Durations must be added in ascending order\\\");\\n            lastDuration = durations[i];\\n\\n            require(percents[i] <= MULTIPLIER, \\\"Percent provided must be smaller or equal to MULTIPLIER\\\");\\n            totalPercent = _addUint128(totalPercent, percents[i]);\\n        }\\n\\n        require(totalPercent == MULTIPLIER, \\\"Percents must sum to MULTIPLIER amount\\\");\\n\\n        schedules[name] = Schedule(durations, percents);\\n\\n        emit ScheduleAdded(durations, percents, name);\\n    }\\n\\n    /**\\n     * @dev Adds allocations, all allocations will use the schedule specified,\\n     * schedule must be created before and account must not have an allocation\\n     * in the specific schedule.\\n     * @param accounts accounts to create allocations for\\n     * @param amounts total amount to be allocated\\n     * @param scheduleName the schedule name\\n     */\\n    function addAllocations(\\n        address[] calldata accounts,\\n        uint128[] calldata amounts,\\n        string calldata scheduleName\\n    ) external onlyOwner {\\n        require(schedules[scheduleName].durations.length != 0, \\\"Schedule must exist\\\");\\n        require(accounts.length == amounts.length, \\\"Accounts and amounts must have equal length\\\");\\n\\n        // gas optimization\\n        uint128 _totalToBeMinted = totalToBeMinted;\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            require(allocations[accounts[i]][scheduleName].amount == 0, \\\"Allocation must not exist\\\");\\n            allocations[accounts[i]][scheduleName].amount = amounts[i];\\n            _totalToBeMinted = _addUint128(_totalToBeMinted, amounts[i]);\\n            assert(_totalToBeMinted <= maxMintAmount);\\n\\n            emit AllocationAdded(accounts[i], amounts[i], scheduleName);\\n        }\\n\\n        totalToBeMinted = _totalToBeMinted;\\n    }\\n\\n    /**\\n     * @dev Claim tokens by specified a schedule.\\n     * @param scheduleName the schedule name\\n     */\\n    function claim(string calldata scheduleName) external {\\n        return _claim(msg.sender, scheduleName);\\n    }\\n\\n    /**\\n     * @dev Claim tokens for a specific account by specified a schedule.\\n     * @param account the account to claim for\\n     * @param scheduleName the schedule name\\n     */\\n    function claimFor(address account, string calldata scheduleName) external {\\n        return _claim(account, scheduleName);\\n    }\\n\\n    /**\\n     * @param account the account to get claimable for\\n     * @param scheduleName the schedule name\\n     * @return claimable amount\\n     */\\n    function getClaimable(address account, string calldata scheduleName) external view returns (uint128) {\\n        return _getClaimable(schedules[scheduleName], allocations[account][scheduleName]);\\n    }\\n\\n    /**\\n     * @dev Claim claimable tokens, this will mint tokens.\\n     * @param account the account to claim for\\n     * @param scheduleName the schedule name\\n     */\\n    function _claim(address account, string memory scheduleName) internal {\\n        Allocation storage allocation = allocations[account][scheduleName];\\n        require(allocation.amount > 0, \\\"There is nothing to claim\\\");\\n        require(!allocation.revoked, \\\"Account is revoked\\\");\\n\\n        Schedule storage schedule = schedules[scheduleName];\\n\\n        uint128 claimable = _getClaimable(schedule, allocation);\\n        // Trying to claim more than allocated\\n        assert(claimable <= allocation.amount);\\n\\n        uint128 newClaimed = _addUint128(allocation.claimed, claimable);\\n        // Trying to claim more than allocated\\n        assert(newClaimed <= allocation.amount);\\n\\n        uint128 newTotalMinted = _addUint128(totalMinted, claimable);\\n        // Total amount minted should be less or equal than specified\\n        // we only check this when a user claims, not when allocations\\n        // are added\\n        assert(newTotalMinted <= maxMintAmount);\\n\\n        totalMinted = newTotalMinted;\\n        allocation.claimed = newClaimed;\\n        allocation.lastClaim = _currentBlockTimestamp();\\n\\n        // mint tokens\\n        token.mint(account, claimable, \\\"\\\", \\\"\\\");\\n\\n        emit Claimed(account, claimable, scheduleName);\\n    }\\n\\n    /**\\n     * @dev Calculates claimable tokens.\\n     * This function expects that the owner has added the schedule\\n     * periods in ascending order.\\n     */\\n    function _getClaimable(\\n        Schedule storage schedule,\\n        Allocation storage allocation\\n    ) internal view returns (uint128) {\\n        // first unlock hasn't passed yet\\n        if (_addUint128(startTime, schedule.durations[0]) > _currentBlockTimestamp()) {\\n            return 0;\\n        }\\n\\n        // last unlock has passed\\n        if (_addUint128(startTime, schedule.durations[schedule.durations.length - 1]) < _currentBlockTimestamp()) {\\n            // make sure to exclude already claimed amount\\n            return _subUint128(allocation.amount, allocation.claimed);\\n        }\\n\\n        uint128 claimable = 0;\\n\\n        for (uint256 i = 0; i < schedule.durations.length; i++) {\\n            uint128 scheduleDeadline = _addUint128(startTime, schedule.durations[i]);\\n\\n            // schedule deadline not passed, exiting\\n            if (scheduleDeadline > _currentBlockTimestamp()) break;\\n            // already claimed during this period, skipping\\n            if (allocation.lastClaim >= scheduleDeadline) continue;\\n\\n            claimable = _addUint128(claimable, _divUint128(_mulUint128(allocation.amount, schedule.percents[i]), MULTIPLIER));\\n        }\\n\\n        return claimable;\\n    }\\n\\n    function _currentBlockTimestamp() internal view returns (uint128) {\\n        // solhint-disable-next-line\\n        return uint128(block.timestamp);\\n    }\\n\\n    // SafeMath variations\\n    function _addUint128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        uint128 c = a + b;\\n        require(c >= a, \\\"uint128 addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function _subUint128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        require(b <= a, \\\"uint128 subtraction overflow\\\");\\n        uint128 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function _mulUint128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint128 c = a * b;\\n        require(c / a == b, \\\"uint128 multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function _divUint128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        require(b > 0, \\\"uint128 division by zero\\\");\\n        uint128 c = a / b;\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x1cee3d948ff2c1ad28992457485e218adff8121438993e77f29df53955319906\"},\"contracts/HoprToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-v3-0-1/access/AccessControl.sol\\\";\\nimport \\\"./openzeppelin-contracts/ERC777.sol\\\";\\nimport \\\"./ERC777/ERC777Snapshot.sol\\\";\\n\\ncontract HoprToken is AccessControl, ERC777Snapshot {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    constructor() ERC777(\\\"HOPR Token\\\", \\\"mHOPR\\\", new address[](0)) public {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `operator`, `data` and `operatorData`.\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     * - `account` must have minter role\\n     */\\n    function mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) public {\\n        require(hasRole(MINTER_ROLE, msg.sender), \\\"caller does not have minter role\\\");\\n        _mint(account, amount, userData, operatorData);\\n    }\\n}\\n\",\"keccak256\":\"0x5801f73b48556301600dc28a57087b6e4290de432efbbf613fb03c9991276594\"},\"contracts/openzeppelin-contracts/ERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-v3-0-1/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-v3-0-1/token/ERC777/IERC777.sol\\\";\\nimport \\\"@openzeppelin/contracts-v3-0-1/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts-v3-0-1/token/ERC777/IERC777Sender.sol\\\";\\nimport \\\"@openzeppelin/contracts-v3-0-1/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-v3-0-1/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-v3-0-1/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-v3-0-1/introspection/IERC1820Registry.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC777} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * Support for ERC20 is included in this contract, as specified by the EIP: both\\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\\n * movements.\\n *\\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\\n * are no special restrictions in the amount of tokens that created, moved, or\\n * destroyed. This makes integration with ERC20 applications seamless.\\n */\\ncontract ERC777 is Context, IERC777, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    // We inline the result of the following hashes because Solidity doesn't resolve them at compile time.\\n    // See https://github.com/ethereum/solidity/issues/4024.\\n\\n    // keccak256(\\\"ERC777TokensSender\\\")\\n    bytes32 constant private _TOKENS_SENDER_INTERFACE_HASH =\\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\\n\\n    // keccak256(\\\"ERC777TokensRecipient\\\")\\n    bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH =\\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\\n\\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\\n    address[] private _defaultOperatorsArray;\\n\\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\\n    mapping(address => bool) private _defaultOperators;\\n\\n    // For each account, a mapping of its operators and revoked default operators.\\n    mapping(address => mapping(address => bool)) private _operators;\\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\\n\\n    // ERC20-allowances\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    /**\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory defaultOperators_\\n    )\\n        public\\n    {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        _defaultOperatorsArray = defaultOperators_;\\n        for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\\n            _defaultOperators[_defaultOperatorsArray[i]] = true;\\n        }\\n\\n        // register interfaces\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777Token\\\"), address(this));\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC20Token\\\"), address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC777-name}.\\n     */\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-symbol}.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-decimals}.\\n     *\\n     * Always returns 18, as per the\\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\\n     */\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-granularity}.\\n     *\\n     * This implementation always returns `1`.\\n     */\\n    function granularity() public view override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-totalSupply}.\\n     */\\n    function totalSupply() public view override(IERC20, IERC777) returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\\n     */\\n    function balanceOf(address tokenHolder) public view override(IERC20, IERC777) returns (uint256) {\\n        return _balances[tokenHolder];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-send}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function send(address recipient, uint256 amount, bytes memory data) public virtual override  {\\n        _send(_msgSender(), recipient, amount, data, \\\"\\\", true);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\\n     * interface if it is a contract.\\n     *\\n     * Also emits a {Sent} event.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n\\n        address from = _msgSender();\\n\\n        _callTokensToSend(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _callTokensReceived(from, from, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-burn}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function burn(uint256 amount, bytes memory data) public virtual override  {\\n        _burn(_msgSender(), amount, data, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC777-isOperatorFor}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) public view override returns (bool) {\\n        return operator == tokenHolder ||\\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\\n            _operators[tokenHolder][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-authorizeOperator}.\\n     */\\n    function authorizeOperator(address operator) public virtual override  {\\n        require(_msgSender() != operator, \\\"ERC777: authorizing self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            delete _revokedDefaultOperators[_msgSender()][operator];\\n        } else {\\n            _operators[_msgSender()][operator] = true;\\n        }\\n\\n        emit AuthorizedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-revokeOperator}.\\n     */\\n    function revokeOperator(address operator) public virtual override  {\\n        require(operator != _msgSender(), \\\"ERC777: revoking self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            _revokedDefaultOperators[_msgSender()][operator] = true;\\n        } else {\\n            delete _operators[_msgSender()][operator];\\n        }\\n\\n        emit RevokedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-defaultOperators}.\\n     */\\n    function defaultOperators() public view override returns (address[] memory) {\\n        return _defaultOperatorsArray;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorSend}.\\n     *\\n     * Emits {Sent} and {IERC20-Transfer} events.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(isOperatorFor(_msgSender(), sender), \\\"ERC777: caller is not an operator for holder\\\");\\n        _send(sender, recipient, amount, data, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorBurn}.\\n     *\\n     * Emits {Burned} and {IERC20-Transfer} events.\\n     */\\n    function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public virtual override {\\n        require(isOperatorFor(_msgSender(), account), \\\"ERC777: caller is not an operator for holder\\\");\\n        _burn(account, amount, data, operatorData);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators may\\n     * not have allowance, and accounts with allowance may not be operators\\n     * themselves.\\n     */\\n    function allowance(address holder, address spender) public view override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\\n        address holder = _msgSender();\\n        _approve(holder, spender, value);\\n        return true;\\n    }\\n\\n   /**\\n    * @dev See {IERC20-transferFrom}.\\n    *\\n    * Note that operator and allowance concepts are orthogonal: operators cannot\\n    * call `transferFrom` (unless they have allowance), and accounts with\\n    * allowance cannot call `operatorSend` (unless they are operators).\\n    *\\n    * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\\n    */\\n    function transferFrom(address holder, address recipient, uint256 amount) public virtual override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n        require(holder != address(0), \\\"ERC777: transfer from the zero address\\\");\\n\\n        address spender = _msgSender();\\n\\n        _callTokensToSend(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n        _approve(holder, spender, _allowances[holder][spender].sub(amount, \\\"ERC777: transfer amount exceeds allowance\\\"));\\n\\n        _callTokensReceived(spender, holder, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        internal\\n        virtual\\n    {\\n        require(account != address(0), \\\"ERC777: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, amount);\\n\\n        // Update state variables\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n\\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\\n\\n        emit Minted(operator, account, amount, userData, operatorData);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Send tokens\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _send(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        internal\\n        virtual\\n    {\\n        require(from != address(0), \\\"ERC777: send from the zero address\\\");\\n        require(to != address(0), \\\"ERC777: send to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\\n\\n        _move(operator, from, to, amount, userData, operatorData);\\n\\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\\n    }\\n\\n    /**\\n     * @dev Burn tokens\\n     * @param from address token holder address\\n     * @param amount uint256 amount of tokens to burn\\n     * @param data bytes extra information provided by the token holder\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _burn(\\n        address from,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    )\\n        internal\\n        virtual\\n    {\\n        require(from != address(0), \\\"ERC777: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\\n\\n        _beforeTokenTransfer(operator, from, address(0), amount);\\n\\n        // Update state variables\\n        _balances[from] = _balances[from].sub(amount, \\\"ERC777: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n\\n        emit Burned(operator, from, amount, data, operatorData);\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    function _move(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        private\\n    {\\n        _beforeTokenTransfer(operator, from, to, amount);\\n\\n        _balances[from] = _balances[from].sub(amount, \\\"ERC777: transfer amount exceeds balance\\\");\\n        _balances[to] = _balances[to].add(amount);\\n\\n        emit Sent(operator, from, to, amount, userData, operatorData);\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function _approve(address holder, address spender, uint256 value) internal {\\n        require(holder != address(0), \\\"ERC777: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC777: approve to the zero address\\\");\\n\\n        _allowances[holder][spender] = value;\\n        emit Approval(holder, spender, value);\\n    }\\n\\n    /**\\n     * @dev Call from.tokensToSend() if the interface is registered\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _callTokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        private\\n    {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\\n        }\\n    }\\n\\n    /**\\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\\n     * tokensReceived() was not registered for the recipient\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _callTokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        private\\n    {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\\n        } else if (requireReceptionAck) {\\n            require(!to.isContract(), \\\"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes\\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address operator, address from, address to, uint256 amount) internal virtual { }\\n}\",\"keccak256\":\"0x09d33b461df6ea274e1dd1888c580a762b72cfd2923cb79a92ef1de84417259a\"}},\"version\":1}",
  "bytecode": "0x6080604052600060015534801561001557600080fd5b506040516122313803806122318339818101604052606081101561003857600080fd5b5080516020820151604090920151909190600061005c6001600160e01b036100f716565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600280546001600160801b03199081166001600160801b0394851617909155600380546001600160a01b0319166001600160a01b0395909516949094179093556004805490931691161790556100fb565b3390565b6121278061010a6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063e574297011610071578063e5742970146105ad578063e82330b2146106bb578063f2fde38b14610739578063f3fe12c91461075f578063fc0c546a146107cd57610116565b80638da5cb5b14610472578063a2309ff814610496578063b733f67d1461049e578063c31cd7d7146104c457610116565b80632c902c7c116100e95780632c902c7c1461025f57806370a42898146102dd578063715018a61461035b57806372840f0e1461036357806378e979251461046a57610116565b80630373a3641461011b578063059f8b161461013f57806322bccfd714610147578063239c70ae14610257575b600080fd5b6101236107d5565b604080516001600160801b039092168252519081900360200190f35b6101236107eb565b6102556004803603606081101561015d57600080fd5b810190602081018135600160201b81111561017757600080fd5b82018360208201111561018957600080fd5b803590602001918460208302840111600160201b831117156101aa57600080fd5b919390929091602081019035600160201b8111156101c757600080fd5b8201836020820111156101d957600080fd5b803590602001918460208302840111600160201b831117156101fa57600080fd5b919390929091602081019035600160201b81111561021757600080fd5b82018360208201111561022957600080fd5b803590602001918460018302840111600160201b8311171561024a57600080fd5b5090925090506107f2565b005b610123610baf565b6102556004803603604081101561027557600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561029f57600080fd5b8201836020820111156102b157600080fd5b803590602001918460018302840111600160201b831117156102d257600080fd5b509092509050610bbe565b610123600480360360408110156102f357600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561031d57600080fd5b82018360208201111561032f57600080fd5b803590602001918460018302840111600160201b8311171561035057600080fd5b509092509050610d6c565b610255610def565b6103d16004803603602081101561037957600080fd5b810190602081018135600160201b81111561039357600080fd5b8201836020820111156103a557600080fd5b803590602001918460018302840111600160201b831117156103c657600080fd5b509092509050610e9b565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156104155781810151838201526020016103fd565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561045457818101518382015260200161043c565b5050505090500194505050505060405180910390f35b610123610ff9565b61047a611008565b604080516001600160a01b039092168252519081900360200190f35b610123611018565b610255600480360360208110156104b457600080fd5b50356001600160801b0316611027565b610578600480360360408110156104da57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561050457600080fd5b82018360208201111561051657600080fd5b803590602001918460018302840111600160201b8311171561053757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506110ff945050505050565b604080516001600160801b03958616815293851660208501529190931682820152911515606082015290519081900360800190f35b610255600480360360608110156105c357600080fd5b810190602081018135600160201b8111156105dd57600080fd5b8201836020820111156105ef57600080fd5b803590602001918460208302840111600160201b8311171561061057600080fd5b919390929091602081019035600160201b81111561062d57600080fd5b82018360208201111561063f57600080fd5b803590602001918460208302840111600160201b8311171561066057600080fd5b919390929091602081019035600160201b81111561067d57600080fd5b82018360208201111561068f57600080fd5b803590602001918460018302840111600160201b831117156106b057600080fd5b509092509050611154565b610255600480360360408110156106d157600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156106fb57600080fd5b82018360208201111561070d57600080fd5b803590602001918460018302840111600160201b8311171561072e57600080fd5b509092509050611573565b6102556004803603602081101561074f57600080fd5b50356001600160a01b03166115b8565b6102556004803603602081101561077557600080fd5b810190602081018135600160201b81111561078f57600080fd5b8201836020820111156107a157600080fd5b803590602001918460018302840111600160201b831117156107c257600080fd5b5090925090506116ba565b61047a6116fe565b600154600160801b90046001600160801b031681565b620f424081565b6107fa61170d565b6001600160a01b031661080b611008565b6001600160a01b031614610854576040805162461bcd60e51b815260206004820181905260248201526000805160206120ac833981519152604482015290519081900360640190fd5b60058282604051808383808284379190910194855250506040519283900360200190922054151591506108c69050576040805162461bcd60e51b815260206004820152601360248201527214d8da19591d5b19481b5d5cdd08195e1a5cdd606a1b604482015290519081900360640190fd5b8483146109045760405162461bcd60e51b815260040180806020018281038252602b815260200180612023602b913960400191505060405180910390fd5b600154600160801b90046001600160801b031660005b86811015610b89576006600089898481811061093257fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002084846040518083838082843791909101948552505060405192839003602001909220546001600160801b03161591506109e49050576040805162461bcd60e51b815260206004820152601960248201527f416c6c6f636174696f6e206d757374206e6f7420657869737400000000000000604482015290519081900360640190fd5b8585828181106109f057fe5b905060200201356001600160801b0316600660008a8a85818110610a1057fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000208585604051808383808284379190910194855250506040519283900360200190922080546001600160801b03949094166001600160801b03199094169390931790925550610aab905082878784818110610a9657fe5b905060200201356001600160801b0316611711565b6004549092506001600160801b039081169083161115610ac757fe5b878782818110610ad357fe5b905060200201356001600160a01b03166001600160a01b03167f499c64a5e7cdaa8e72ac9f0f4b080fce7a37c5ef24b2a9f67c7c6a728f5aec09878784818110610b1957fe5b905060200201356001600160801b0316868660405180846001600160801b03166001600160801b03168152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a260010161091a565b50600180546001600160801b03928316600160801b029216919091179055505050505050565b6004546001600160801b031681565b610bc661170d565b6001600160a01b0316610bd7611008565b6001600160a01b031614610c20576040805162461bcd60e51b815260206004820181905260248201526000805160206120ac833981519152604482015290519081900360640190fd5b6001600160a01b038316600090815260066020526040808220905184908490808383808284379190910194855250506040519283900360200190922080549093506001600160801b031615159150610cb99050576040805162461bcd60e51b8152602060048201526015602482015274105b1b1bd8d85d1a5bdb881b5d5cdd08195e1a5cdd605a1b604482015290519081900360640190fd5b6001810154600160801b900460ff1615610d045760405162461bcd60e51b81526004018080602001828103825260268152602001806120cc6026913960400191505060405180910390fd5b6001818101805460ff60801b1916600160801b90811790915590548254610d49926001600160801b0392819004831692610d449280821692900416611780565b611780565b600180546001600160801b03928316600160801b02921691909117905550505050565b6000610de760058484604051808383808284378083019250505092505050908152602001604051809103902060066000876001600160a01b03166001600160a01b03168152602001908152602001600020858560405180838380828437808301925050509250505090815260200160405180910390206117ef565b949350505050565b610df761170d565b6001600160a01b0316610e08611008565b6001600160a01b031614610e51576040805162461bcd60e51b815260206004820181905260248201526000805160206120ac833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60608060058484604051808383808284379190910194855250506040519283900360200183209260059250879150869080838380828437919091019485525050604080519384900360209081018520865480830287018301909352828652600101949350859250830182828015610f6357602002820191906000526020600020906000905b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f01049283019260010382029150808411610f205790505b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610fe757602002820191906000526020600020906000905b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f01049283019260010382029150808411610fa45790505b50505050509050915091509250929050565b6002546001600160801b031681565b6000546001600160a01b03165b90565b6001546001600160801b031681565b61102f61170d565b6001600160a01b0316611040611008565b6001600160a01b031614611089576040805162461bcd60e51b815260206004820181905260248201526000805160206120ac833981519152604482015290519081900360640190fd5b6110916119b6565b6002546001600160801b039182169116116110dd5760405162461bcd60e51b815260040180806020018281038252602781526020018061204e6027913960400191505060405180910390fd5b600280546001600160801b0319166001600160801b0392909216919091179055565b60066020908152600092835260409092208151808301840180519281529084019290930191909120915280546001909101546001600160801b0380831692600160801b90819004821692918216910460ff1684565b61115c61170d565b6001600160a01b031661116d611008565b6001600160a01b0316146111b6576040805162461bcd60e51b815260206004820181905260248201526000805160206120ac833981519152604482015290519081900360640190fd5b600582826040518083838082843791909101948552505060405192839003602001909220541591506112319050576040805162461bcd60e51b815260206004820152601760248201527f5363686564756c65206d757374206e6f74206578697374000000000000000000604482015290519081900360640190fd5b84831461126f5760405162461bcd60e51b815260040180806020018281038252602d815260200180611fd0602d913960400191505060405180910390fd5b600080805b8781101561138e5788888281811061128857fe5b905060200201356001600160801b03166001600160801b0316836001600160801b0316106112e75760405162461bcd60e51b815260040180806020018281038252602a815260200180611f80602a913960400191505060405180910390fd5b8888828181106112f357fe5b905060200201356001600160801b03169250620f42406001600160801b031687878381811061131e57fe5b905060200201356001600160801b03166001600160801b031611156113745760405162461bcd60e51b81526004018080602001828103825260378152602001806120756037913960400191505060405180910390fd5b61138482888884818110610a9657fe5b9150600101611274565b506001600160801b038116620f4240146113d95760405162461bcd60e51b8152600401808060200182810382526026815260200180611ffd6026913960400191505060405180910390fd5b604051806040016040528089898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050509082525060408051602089810282810182019093528982529283019290918a918a918291850190849080828437600092019190915250505091525060405160059086908690808383808284379190910194855250506040516020938190038401902084518051919461148d94508593500190611ea3565b5060208281015180516114a69260018501920190611ea3565b509050507f14a9427471da7dbb7ecca56162a326853031d8fab46a74ab7b1b797591d9e4688888888888886040518080602001806020018060200184810384528a8a82818152602001925060200280828437600083820152601f01601f19169091018581038452888152602090810191508990890280828437600083820152601f01601f191690910185810383528681526020019050868680828437600083820152604051601f909101601f19169092018290039b50909950505050505050505050a15050505050505050565b6115b38383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119ba92505050565b505050565b6115c061170d565b6001600160a01b03166115d1611008565b6001600160a01b03161461161a576040805162461bcd60e51b815260206004820181905260248201526000805160206120ac833981519152604482015290519081900360640190fd5b6001600160a01b03811661165f5760405162461bcd60e51b8152600401808060200182810382526026815260200180611faa6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6116fa3383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119ba92505050565b5050565b6003546001600160a01b031681565b3390565b60008282016001600160801b038085169082161015611777576040805162461bcd60e51b815260206004820152601960248201527f75696e74313238206164646974696f6e206f766572666c6f7700000000000000604482015290519081900360640190fd5b90505b92915050565b6000826001600160801b0316826001600160801b031611156117e9576040805162461bcd60e51b815260206004820152601c60248201527f75696e74313238207375627472616374696f6e206f766572666c6f7700000000604482015290519081900360640190fd5b50900390565b60006117f96119b6565b60025484546001600160801b0392831692611849921690869060009061181b57fe5b90600052602060002090600291828204019190066010029054906101000a90046001600160801b0316611711565b6001600160801b031611156118605750600061177a565b6118686119b6565b60025484546001600160801b039283169261188f9216908690600019810190811061181b57fe5b6001600160801b031610156118c45781546118bd906001600160801b0380821691600160801b900416611780565b905061177a565b6000805b84548110156119ae5760025485546000916118f5916001600160801b039091169088908590811061181b57fe5b90506118ff6119b6565b6001600160801b0316816001600160801b0316111561191e57506119ae565b60018501546001600160801b0380831691161061193b57506119a6565b84546001870180546119a292869261199d92611994926001600160801b031691908890811061196657fe5b90600052602060002090600291828204019190066010029054906101000a90046001600160801b0316611d8e565b620f4240611e1e565b611711565b9250505b6001016118c8565b509392505050565b4290565b6001600160a01b0382166000908152600660209081526040808320905184519192859282918401908083835b60208310611a055780518252601f1990920191602091820191016119e6565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922080549093506001600160801b031615159150611a959050576040805162461bcd60e51b815260206004820152601960248201527f5468657265206973206e6f7468696e6720746f20636c61696d00000000000000604482015290519081900360640190fd5b6001810154600160801b900460ff1615611aeb576040805162461bcd60e51b81526020600482015260126024820152711058d8dbdd5b9d081a5cc81c995d9bdad95960721b604482015290519081900360640190fd5b60006005836040518082805190602001908083835b60208310611b1f5780518252601f199092019160209182019101611b00565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220925060009150611b5c905082846117ef565b83549091506001600160801b039081169082161115611b7757fe5b8254600090611b9690600160801b90046001600160801b031683611711565b84549091506001600160801b039081169082161115611bb157fe5b600154600090611bca906001600160801b031684611711565b6004549091506001600160801b039081169082161115611be657fe5b600180546001600160801b038084166001600160801b0319909216919091179091558554838216600160801b029116178555611c206119b6565b6001860180546001600160801b0319166001600160801b0392831617905560035460408051630dcdc7dd60e41b81526001600160a01b038b8116600483015293871660248201526080604482015260006084820181905260c0606483015260c482018190529151939092169263dcdc7dd09261010480820193929182900301818387803b158015611cb057600080fd5b505af1158015611cc4573d6000803e3d6000fd5b50505050866001600160a01b03167fd6d52022b5ae5ce877753d56a79a1299605b05220771f26b0817599cabd2b6b4848860405180836001600160801b03166001600160801b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611d4a578181015183820152602001611d32565b50505050905090810190601f168015611d775780820380516001836020036101000a031916815260200191505b50935050505060405180910390a250505050505050565b60006001600160801b038316611da65750600061177a565b8282026001600160801b038084169080861690831681611dc257fe5b046001600160801b031614611777576040805162461bcd60e51b815260206004820152601f60248201527f75696e74313238206d756c7469706c69636174696f6e206f766572666c6f7700604482015290519081900360640190fd5b600080826001600160801b031611611e7d576040805162461bcd60e51b815260206004820152601860248201527f75696e74313238206469766973696f6e206279207a65726f0000000000000000604482015290519081900360640190fd5b6000826001600160801b0316846001600160801b031681611e9a57fe5b04949350505050565b82805482825590600052602060002090600101600290048101928215611f4b5791602002820160005b83821115611f1657835183826101000a8154816001600160801b0302191690836001600160801b031602179055509260200192601001602081600f01049283019260010302611ecc565b8015611f495782816101000a8154906001600160801b030219169055601001602081600f01049283019260010302611f16565b505b50611f57929150611f5b565b5090565b61101591905b80821115611f575780546001600160801b0319168155600101611f6156fe4475726174696f6e73206d75737420626520616464656420696e20617363656e64696e67206f726465724f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734475726174696f6e7320616e642070657263656e7473206d757374206861766520657175616c206c656e67746850657263656e7473206d7573742073756d20746f204d554c5449504c49455220616d6f756e744163636f756e747320616e6420616d6f756e7473206d757374206861766520657175616c206c656e67746850726576696f75732073746172742074696d65206d757374206e6f74206265207265616368656450657263656e742070726f7669646564206d75737420626520736d616c6c6572206f7220657175616c20746f204d554c5449504c4945524f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572416c6c6f636174696f6e206d757374206e6f7420626520616c7265616479207265766f6b6564a26469706673582212204591a6c9c13635876d4f96c61a8424aeb0577a6dc85a732080a84a4dfeb6ca7564736f6c63430006060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063e574297011610071578063e5742970146105ad578063e82330b2146106bb578063f2fde38b14610739578063f3fe12c91461075f578063fc0c546a146107cd57610116565b80638da5cb5b14610472578063a2309ff814610496578063b733f67d1461049e578063c31cd7d7146104c457610116565b80632c902c7c116100e95780632c902c7c1461025f57806370a42898146102dd578063715018a61461035b57806372840f0e1461036357806378e979251461046a57610116565b80630373a3641461011b578063059f8b161461013f57806322bccfd714610147578063239c70ae14610257575b600080fd5b6101236107d5565b604080516001600160801b039092168252519081900360200190f35b6101236107eb565b6102556004803603606081101561015d57600080fd5b810190602081018135600160201b81111561017757600080fd5b82018360208201111561018957600080fd5b803590602001918460208302840111600160201b831117156101aa57600080fd5b919390929091602081019035600160201b8111156101c757600080fd5b8201836020820111156101d957600080fd5b803590602001918460208302840111600160201b831117156101fa57600080fd5b919390929091602081019035600160201b81111561021757600080fd5b82018360208201111561022957600080fd5b803590602001918460018302840111600160201b8311171561024a57600080fd5b5090925090506107f2565b005b610123610baf565b6102556004803603604081101561027557600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561029f57600080fd5b8201836020820111156102b157600080fd5b803590602001918460018302840111600160201b831117156102d257600080fd5b509092509050610bbe565b610123600480360360408110156102f357600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561031d57600080fd5b82018360208201111561032f57600080fd5b803590602001918460018302840111600160201b8311171561035057600080fd5b509092509050610d6c565b610255610def565b6103d16004803603602081101561037957600080fd5b810190602081018135600160201b81111561039357600080fd5b8201836020820111156103a557600080fd5b803590602001918460018302840111600160201b831117156103c657600080fd5b509092509050610e9b565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156104155781810151838201526020016103fd565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561045457818101518382015260200161043c565b5050505090500194505050505060405180910390f35b610123610ff9565b61047a611008565b604080516001600160a01b039092168252519081900360200190f35b610123611018565b610255600480360360208110156104b457600080fd5b50356001600160801b0316611027565b610578600480360360408110156104da57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561050457600080fd5b82018360208201111561051657600080fd5b803590602001918460018302840111600160201b8311171561053757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506110ff945050505050565b604080516001600160801b03958616815293851660208501529190931682820152911515606082015290519081900360800190f35b610255600480360360608110156105c357600080fd5b810190602081018135600160201b8111156105dd57600080fd5b8201836020820111156105ef57600080fd5b803590602001918460208302840111600160201b8311171561061057600080fd5b919390929091602081019035600160201b81111561062d57600080fd5b82018360208201111561063f57600080fd5b803590602001918460208302840111600160201b8311171561066057600080fd5b919390929091602081019035600160201b81111561067d57600080fd5b82018360208201111561068f57600080fd5b803590602001918460018302840111600160201b831117156106b057600080fd5b509092509050611154565b610255600480360360408110156106d157600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156106fb57600080fd5b82018360208201111561070d57600080fd5b803590602001918460018302840111600160201b8311171561072e57600080fd5b509092509050611573565b6102556004803603602081101561074f57600080fd5b50356001600160a01b03166115b8565b6102556004803603602081101561077557600080fd5b810190602081018135600160201b81111561078f57600080fd5b8201836020820111156107a157600080fd5b803590602001918460018302840111600160201b831117156107c257600080fd5b5090925090506116ba565b61047a6116fe565b600154600160801b90046001600160801b031681565b620f424081565b6107fa61170d565b6001600160a01b031661080b611008565b6001600160a01b031614610854576040805162461bcd60e51b815260206004820181905260248201526000805160206120ac833981519152604482015290519081900360640190fd5b60058282604051808383808284379190910194855250506040519283900360200190922054151591506108c69050576040805162461bcd60e51b815260206004820152601360248201527214d8da19591d5b19481b5d5cdd08195e1a5cdd606a1b604482015290519081900360640190fd5b8483146109045760405162461bcd60e51b815260040180806020018281038252602b815260200180612023602b913960400191505060405180910390fd5b600154600160801b90046001600160801b031660005b86811015610b89576006600089898481811061093257fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002084846040518083838082843791909101948552505060405192839003602001909220546001600160801b03161591506109e49050576040805162461bcd60e51b815260206004820152601960248201527f416c6c6f636174696f6e206d757374206e6f7420657869737400000000000000604482015290519081900360640190fd5b8585828181106109f057fe5b905060200201356001600160801b0316600660008a8a85818110610a1057fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b031681526020019081526020016000208585604051808383808284379190910194855250506040519283900360200190922080546001600160801b03949094166001600160801b03199094169390931790925550610aab905082878784818110610a9657fe5b905060200201356001600160801b0316611711565b6004549092506001600160801b039081169083161115610ac757fe5b878782818110610ad357fe5b905060200201356001600160a01b03166001600160a01b03167f499c64a5e7cdaa8e72ac9f0f4b080fce7a37c5ef24b2a9f67c7c6a728f5aec09878784818110610b1957fe5b905060200201356001600160801b0316868660405180846001600160801b03166001600160801b03168152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a260010161091a565b50600180546001600160801b03928316600160801b029216919091179055505050505050565b6004546001600160801b031681565b610bc661170d565b6001600160a01b0316610bd7611008565b6001600160a01b031614610c20576040805162461bcd60e51b815260206004820181905260248201526000805160206120ac833981519152604482015290519081900360640190fd5b6001600160a01b038316600090815260066020526040808220905184908490808383808284379190910194855250506040519283900360200190922080549093506001600160801b031615159150610cb99050576040805162461bcd60e51b8152602060048201526015602482015274105b1b1bd8d85d1a5bdb881b5d5cdd08195e1a5cdd605a1b604482015290519081900360640190fd5b6001810154600160801b900460ff1615610d045760405162461bcd60e51b81526004018080602001828103825260268152602001806120cc6026913960400191505060405180910390fd5b6001818101805460ff60801b1916600160801b90811790915590548254610d49926001600160801b0392819004831692610d449280821692900416611780565b611780565b600180546001600160801b03928316600160801b02921691909117905550505050565b6000610de760058484604051808383808284378083019250505092505050908152602001604051809103902060066000876001600160a01b03166001600160a01b03168152602001908152602001600020858560405180838380828437808301925050509250505090815260200160405180910390206117ef565b949350505050565b610df761170d565b6001600160a01b0316610e08611008565b6001600160a01b031614610e51576040805162461bcd60e51b815260206004820181905260248201526000805160206120ac833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60608060058484604051808383808284379190910194855250506040519283900360200183209260059250879150869080838380828437919091019485525050604080519384900360209081018520865480830287018301909352828652600101949350859250830182828015610f6357602002820191906000526020600020906000905b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f01049283019260010382029150808411610f205790505b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610fe757602002820191906000526020600020906000905b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f01049283019260010382029150808411610fa45790505b50505050509050915091509250929050565b6002546001600160801b031681565b6000546001600160a01b03165b90565b6001546001600160801b031681565b61102f61170d565b6001600160a01b0316611040611008565b6001600160a01b031614611089576040805162461bcd60e51b815260206004820181905260248201526000805160206120ac833981519152604482015290519081900360640190fd5b6110916119b6565b6002546001600160801b039182169116116110dd5760405162461bcd60e51b815260040180806020018281038252602781526020018061204e6027913960400191505060405180910390fd5b600280546001600160801b0319166001600160801b0392909216919091179055565b60066020908152600092835260409092208151808301840180519281529084019290930191909120915280546001909101546001600160801b0380831692600160801b90819004821692918216910460ff1684565b61115c61170d565b6001600160a01b031661116d611008565b6001600160a01b0316146111b6576040805162461bcd60e51b815260206004820181905260248201526000805160206120ac833981519152604482015290519081900360640190fd5b600582826040518083838082843791909101948552505060405192839003602001909220541591506112319050576040805162461bcd60e51b815260206004820152601760248201527f5363686564756c65206d757374206e6f74206578697374000000000000000000604482015290519081900360640190fd5b84831461126f5760405162461bcd60e51b815260040180806020018281038252602d815260200180611fd0602d913960400191505060405180910390fd5b600080805b8781101561138e5788888281811061128857fe5b905060200201356001600160801b03166001600160801b0316836001600160801b0316106112e75760405162461bcd60e51b815260040180806020018281038252602a815260200180611f80602a913960400191505060405180910390fd5b8888828181106112f357fe5b905060200201356001600160801b03169250620f42406001600160801b031687878381811061131e57fe5b905060200201356001600160801b03166001600160801b031611156113745760405162461bcd60e51b81526004018080602001828103825260378152602001806120756037913960400191505060405180910390fd5b61138482888884818110610a9657fe5b9150600101611274565b506001600160801b038116620f4240146113d95760405162461bcd60e51b8152600401808060200182810382526026815260200180611ffd6026913960400191505060405180910390fd5b604051806040016040528089898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050509082525060408051602089810282810182019093528982529283019290918a918a918291850190849080828437600092019190915250505091525060405160059086908690808383808284379190910194855250506040516020938190038401902084518051919461148d94508593500190611ea3565b5060208281015180516114a69260018501920190611ea3565b509050507f14a9427471da7dbb7ecca56162a326853031d8fab46a74ab7b1b797591d9e4688888888888886040518080602001806020018060200184810384528a8a82818152602001925060200280828437600083820152601f01601f19169091018581038452888152602090810191508990890280828437600083820152601f01601f191690910185810383528681526020019050868680828437600083820152604051601f909101601f19169092018290039b50909950505050505050505050a15050505050505050565b6115b38383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119ba92505050565b505050565b6115c061170d565b6001600160a01b03166115d1611008565b6001600160a01b03161461161a576040805162461bcd60e51b815260206004820181905260248201526000805160206120ac833981519152604482015290519081900360640190fd5b6001600160a01b03811661165f5760405162461bcd60e51b8152600401808060200182810382526026815260200180611faa6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6116fa3383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119ba92505050565b5050565b6003546001600160a01b031681565b3390565b60008282016001600160801b038085169082161015611777576040805162461bcd60e51b815260206004820152601960248201527f75696e74313238206164646974696f6e206f766572666c6f7700000000000000604482015290519081900360640190fd5b90505b92915050565b6000826001600160801b0316826001600160801b031611156117e9576040805162461bcd60e51b815260206004820152601c60248201527f75696e74313238207375627472616374696f6e206f766572666c6f7700000000604482015290519081900360640190fd5b50900390565b60006117f96119b6565b60025484546001600160801b0392831692611849921690869060009061181b57fe5b90600052602060002090600291828204019190066010029054906101000a90046001600160801b0316611711565b6001600160801b031611156118605750600061177a565b6118686119b6565b60025484546001600160801b039283169261188f9216908690600019810190811061181b57fe5b6001600160801b031610156118c45781546118bd906001600160801b0380821691600160801b900416611780565b905061177a565b6000805b84548110156119ae5760025485546000916118f5916001600160801b039091169088908590811061181b57fe5b90506118ff6119b6565b6001600160801b0316816001600160801b0316111561191e57506119ae565b60018501546001600160801b0380831691161061193b57506119a6565b84546001870180546119a292869261199d92611994926001600160801b031691908890811061196657fe5b90600052602060002090600291828204019190066010029054906101000a90046001600160801b0316611d8e565b620f4240611e1e565b611711565b9250505b6001016118c8565b509392505050565b4290565b6001600160a01b0382166000908152600660209081526040808320905184519192859282918401908083835b60208310611a055780518252601f1990920191602091820191016119e6565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922080549093506001600160801b031615159150611a959050576040805162461bcd60e51b815260206004820152601960248201527f5468657265206973206e6f7468696e6720746f20636c61696d00000000000000604482015290519081900360640190fd5b6001810154600160801b900460ff1615611aeb576040805162461bcd60e51b81526020600482015260126024820152711058d8dbdd5b9d081a5cc81c995d9bdad95960721b604482015290519081900360640190fd5b60006005836040518082805190602001908083835b60208310611b1f5780518252601f199092019160209182019101611b00565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220925060009150611b5c905082846117ef565b83549091506001600160801b039081169082161115611b7757fe5b8254600090611b9690600160801b90046001600160801b031683611711565b84549091506001600160801b039081169082161115611bb157fe5b600154600090611bca906001600160801b031684611711565b6004549091506001600160801b039081169082161115611be657fe5b600180546001600160801b038084166001600160801b0319909216919091179091558554838216600160801b029116178555611c206119b6565b6001860180546001600160801b0319166001600160801b0392831617905560035460408051630dcdc7dd60e41b81526001600160a01b038b8116600483015293871660248201526080604482015260006084820181905260c0606483015260c482018190529151939092169263dcdc7dd09261010480820193929182900301818387803b158015611cb057600080fd5b505af1158015611cc4573d6000803e3d6000fd5b50505050866001600160a01b03167fd6d52022b5ae5ce877753d56a79a1299605b05220771f26b0817599cabd2b6b4848860405180836001600160801b03166001600160801b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611d4a578181015183820152602001611d32565b50505050905090810190601f168015611d775780820380516001836020036101000a031916815260200191505b50935050505060405180910390a250505050505050565b60006001600160801b038316611da65750600061177a565b8282026001600160801b038084169080861690831681611dc257fe5b046001600160801b031614611777576040805162461bcd60e51b815260206004820152601f60248201527f75696e74313238206d756c7469706c69636174696f6e206f766572666c6f7700604482015290519081900360640190fd5b600080826001600160801b031611611e7d576040805162461bcd60e51b815260206004820152601860248201527f75696e74313238206469766973696f6e206279207a65726f0000000000000000604482015290519081900360640190fd5b6000826001600160801b0316846001600160801b031681611e9a57fe5b04949350505050565b82805482825590600052602060002090600101600290048101928215611f4b5791602002820160005b83821115611f1657835183826101000a8154816001600160801b0302191690836001600160801b031602179055509260200192601001602081600f01049283019260010302611ecc565b8015611f495782816101000a8154906001600160801b030219169055601001602081600f01049283019260010302611f16565b505b50611f57929150611f5b565b5090565b61101591905b80821115611f575780546001600160801b0319168155600101611f6156fe4475726174696f6e73206d75737420626520616464656420696e20617363656e64696e67206f726465724f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734475726174696f6e7320616e642070657263656e7473206d757374206861766520657175616c206c656e67746850657263656e7473206d7573742073756d20746f204d554c5449504c49455220616d6f756e744163636f756e747320616e6420616d6f756e7473206d757374206861766520657175616c206c656e67746850726576696f75732073746172742074696d65206d757374206e6f74206265207265616368656450657263656e742070726f7669646564206d75737420626520736d616c6c6572206f7220657175616c20746f204d554c5449504c4945524f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572416c6c6f636174696f6e206d757374206e6f7420626520616c7265616479207265766f6b6564a26469706673582212204591a6c9c13635876d4f96c61a8424aeb0577a6dc85a732080a84a4dfeb6ca7564736f6c63430006060033",
  "devdoc": {
    "methods": {
      "addAllocations(address[],uint128[],string)": {
        "details": "Adds allocations, all allocations will use the schedule specified, schedule must be created before and account must not have an allocation in the specific schedule.",
        "params": {
          "accounts": "accounts to create allocations for",
          "amounts": "total amount to be allocated",
          "scheduleName": "the schedule name"
        }
      },
      "addSchedule(uint128[],uint128[],string)": {
        "details": "Adds a schedule, the schedule must not already exist. Owner is expected to insert values in ascending order, each element in arrays {durations} and {percents} is meant to be related.",
        "params": {
          "durations": "the durations for each schedule period in seconds (6 months, 1 year)",
          "percents": "the percent of how much can be allocated during that period, instead of using 100 we scale the value up to {MULTIPLIER} so we can have more accurate \"percentages\"."
        }
      },
      "claim(string)": {
        "details": "Claim tokens by specified a schedule.",
        "params": {
          "scheduleName": "the schedule name"
        }
      },
      "claimFor(address,string)": {
        "details": "Claim tokens for a specific account by specified a schedule.",
        "params": {
          "account": "the account to claim for",
          "scheduleName": "the schedule name"
        }
      },
      "constructor": {
        "params": {
          "_startTime": "the timestamp to start counting",
          "_token": "the token which we will mint"
        }
      },
      "getClaimable(address,string)": {
        "params": {
          "account": "the account to get claimable for",
          "scheduleName": "the schedule name"
        },
        "returns": {
          "_0": "claimable amount"
        }
      },
      "getSchedule(string)": {
        "params": {
          "name": "the schedule name"
        },
        "returns": {
          "_0": "the schedule"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAccount(address,string)": {
        "details": "Revokes the ability for an account to claim on the specified schedule.",
        "params": {
          "account": "the account to crevoke",
          "scheduleName": "the schedule name"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateStartTime(uint128)": {
        "details": "Allows the owner to update the start time, in case there are unforeseen issues in the long schedule.",
        "params": {
          "_startTime": "the new timestamp to start counting"
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 293,
        "contract": "contracts/HoprDistributor.sol:HoprDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2629,
        "contract": "contracts/HoprDistributor.sol:HoprDistributor",
        "label": "totalMinted",
        "offset": 0,
        "slot": "1",
        "type": "t_uint128"
      },
      {
        "astId": 2632,
        "contract": "contracts/HoprDistributor.sol:HoprDistributor",
        "label": "totalToBeMinted",
        "offset": 16,
        "slot": "1",
        "type": "t_uint128"
      },
      {
        "astId": 2634,
        "contract": "contracts/HoprDistributor.sol:HoprDistributor",
        "label": "startTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint128"
      },
      {
        "astId": 2636,
        "contract": "contracts/HoprDistributor.sol:HoprDistributor",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(HoprToken)3465"
      },
      {
        "astId": 2638,
        "contract": "contracts/HoprDistributor.sol:HoprDistributor",
        "label": "maxMintAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint128"
      },
      {
        "astId": 2642,
        "contract": "contracts/HoprDistributor.sol:HoprDistributor",
        "label": "schedules",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Schedule)2612_storage)"
      },
      {
        "astId": 2648,
        "contract": "contracts/HoprDistributor.sol:HoprDistributor",
        "label": "allocations",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(Allocation)2621_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint128)dyn_storage": {
        "base": "t_uint128",
        "encoding": "dynamic_array",
        "label": "uint128[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(HoprToken)3465": {
        "encoding": "inplace",
        "label": "contract HoprToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(Allocation)2621_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => struct HoprDistributor.Allocation))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_struct(Allocation)2621_storage)"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Allocation)2621_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct HoprDistributor.Allocation)",
        "numberOfBytes": "32",
        "value": "t_struct(Allocation)2621_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Schedule)2612_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct HoprDistributor.Schedule)",
        "numberOfBytes": "32",
        "value": "t_struct(Schedule)2612_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Allocation)2621_storage": {
        "encoding": "inplace",
        "label": "struct HoprDistributor.Allocation",
        "members": [
          {
            "astId": 2614,
            "contract": "contracts/HoprDistributor.sol:HoprDistributor",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2616,
            "contract": "contracts/HoprDistributor.sol:HoprDistributor",
            "label": "claimed",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2618,
            "contract": "contracts/HoprDistributor.sol:HoprDistributor",
            "label": "lastClaim",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 2620,
            "contract": "contracts/HoprDistributor.sol:HoprDistributor",
            "label": "revoked",
            "offset": 16,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Schedule)2612_storage": {
        "encoding": "inplace",
        "label": "struct HoprDistributor.Schedule",
        "members": [
          {
            "astId": 2608,
            "contract": "contracts/HoprDistributor.sol:HoprDistributor",
            "label": "durations",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint128)dyn_storage"
          },
          {
            "astId": 2611,
            "contract": "contracts/HoprDistributor.sol:HoprDistributor",
            "label": "percents",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint128)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      }
    }
  }
}