pub use hopr_dummy_proxy_for_network_registry::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod hopr_dummy_proxy_for_network_registry {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"AccountDeregistered\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"AccountRegistered\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"AllowAllAccountsEligible\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"MAX_REGISTRATION_PER_ACCOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"canOperateFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"eligiblity\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isAllAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxAllowedRegistrations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"ownerAddAccount\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"ownerBatchAddAccounts\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"ownerBatchRemoveAccounts\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"ownerRemoveAccount\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_updatedAllow\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateAllowAll\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static HOPRDUMMYPROXYFORNETWORKREGISTRY_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(|| {
        ::ethers::core::utils::__serde_json::from_str(__ABI)
            .expect("ABI is always valid")
    });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        97,
        7,
        196,
        56,
        3,
        128,
        97,
        7,
        196,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        97,
        0,
        47,
        145,
        97,
        0,
        213,
        86,
        91,
        97,
        0,
        56,
        51,
        97,
        0,
        133,
        86,
        91,
        97,
        0,
        65,
        129,
        97,
        0,
        133,
        86,
        91,
        96,
        2,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        85,
        96,
        64,
        81,
        96,
        0,
        129,
        82,
        127,
        175,
        171,
        35,
        164,
        188,
        140,
        73,
        37,
        11,
        163,
        126,
        235,
        6,
        37,
        176,
        169,
        178,
        113,
        245,
        93,
        21,
        1,
        131,
        141,
        36,
        245,
        69,
        8,
        195,
        177,
        115,
        66,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        97,
        1,
        5,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        132,
        85,
        96,
        64,
        81,
        145,
        144,
        146,
        22,
        146,
        131,
        145,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        145,
        144,
        163,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        0,
        231,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        0,
        254,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        97,
        6,
        176,
        128,
        97,
        1,
        20,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        180,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        167,
        27,
        27,
        116,
        17,
        97,
        0,
        113,
        87,
        128,
        99,
        167,
        27,
        27,
        116,
        20,
        97,
        1,
        47,
        87,
        128,
        99,
        179,
        84,
        78,
        130,
        20,
        97,
        1,
        66,
        87,
        128,
        99,
        216,
        90,
        208,
        68,
        20,
        97,
        1,
        99,
        87,
        128,
        99,
        242,
        253,
        227,
        139,
        20,
        97,
        1,
        137,
        87,
        128,
        99,
        244,
        108,
        132,
        184,
        20,
        97,
        1,
        156,
        87,
        128,
        99,
        246,
        127,
        94,
        111,
        20,
        97,
        1,
        165,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        8,
        159,
        250,
        71,
        20,
        97,
        0,
        185,
        87,
        128,
        99,
        64,
        81,
        242,
        87,
        20,
        97,
        0,
        206,
        87,
        128,
        99,
        72,
        99,
        84,
        226,
        20,
        97,
        0,
        225,
        87,
        128,
        99,
        92,
        84,
        113,
        231,
        20,
        97,
        0,
        244,
        87,
        128,
        99,
        113,
        80,
        24,
        166,
        20,
        97,
        1,
        7,
        87,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        1,
        15,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        204,
        97,
        0,
        199,
        54,
        96,
        4,
        97,
        5,
        58,
        86,
        91,
        97,
        1,
        178,
        86,
        91,
        0,
        91,
        97,
        0,
        204,
        97,
        0,
        220,
        54,
        96,
        4,
        97,
        5,
        122,
        86,
        91,
        97,
        2,
        18,
        86,
        91,
        97,
        0,
        204,
        97,
        0,
        239,
        54,
        96,
        4,
        97,
        5,
        149,
        86,
        91,
        97,
        2,
        35,
        86,
        91,
        97,
        0,
        204,
        97,
        1,
        2,
        54,
        96,
        4,
        97,
        5,
        149,
        86,
        91,
        97,
        2,
        124,
        86,
        91,
        97,
        0,
        204,
        97,
        2,
        208,
        86,
        91,
        96,
        0,
        84,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        204,
        97,
        1,
        61,
        54,
        96,
        4,
        97,
        5,
        122,
        86,
        91,
        97,
        2,
        228,
        86,
        91,
        97,
        1,
        85,
        97,
        1,
        80,
        54,
        96,
        4,
        97,
        5,
        122,
        86,
        91,
        97,
        2,
        245,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        38,
        86,
        91,
        97,
        1,
        121,
        97,
        1,
        113,
        54,
        96,
        4,
        97,
        6,
        10,
        86,
        91,
        96,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        38,
        86,
        91,
        97,
        0,
        204,
        97,
        1,
        151,
        54,
        96,
        4,
        97,
        5,
        122,
        86,
        91,
        97,
        3,
        60,
        86,
        91,
        97,
        1,
        85,
        96,
        0,
        25,
        129,
        86,
        91,
        96,
        2,
        84,
        97,
        1,
        121,
        144,
        96,
        255,
        22,
        129,
        86,
        91,
        97,
        1,
        186,
        97,
        3,
        183,
        86,
        91,
        96,
        2,
        84,
        96,
        255,
        22,
        21,
        21,
        129,
        21,
        21,
        20,
        97,
        2,
        15,
        87,
        96,
        2,
        128,
        84,
        96,
        255,
        25,
        22,
        130,
        21,
        21,
        144,
        129,
        23,
        144,
        145,
        85,
        96,
        64,
        81,
        144,
        129,
        82,
        127,
        175,
        171,
        35,
        164,
        188,
        140,
        73,
        37,
        11,
        163,
        126,
        235,
        6,
        37,
        176,
        169,
        178,
        113,
        245,
        93,
        21,
        1,
        131,
        141,
        36,
        245,
        69,
        8,
        195,
        177,
        115,
        66,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        91,
        80,
        86,
        91,
        97,
        2,
        26,
        97,
        3,
        183,
        86,
        91,
        97,
        2,
        15,
        129,
        97,
        4,
        17,
        86,
        91,
        97,
        2,
        43,
        97,
        3,
        183,
        86,
        91,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        2,
        119,
        87,
        97,
        2,
        101,
        131,
        131,
        131,
        129,
        129,
        16,
        97,
        2,
        75,
        87,
        97,
        2,
        75,
        97,
        6,
        61,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        96,
        32,
        129,
        1,
        144,
        97,
        2,
        96,
        145,
        144,
        97,
        5,
        122,
        86,
        91,
        97,
        4,
        123,
        86,
        91,
        128,
        97,
        2,
        111,
        129,
        97,
        6,
        83,
        86,
        91,
        145,
        80,
        80,
        97,
        2,
        46,
        86,
        91,
        80,
        80,
        80,
        86,
        91,
        97,
        2,
        132,
        97,
        3,
        183,
        86,
        91,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        2,
        119,
        87,
        97,
        2,
        190,
        131,
        131,
        131,
        129,
        129,
        16,
        97,
        2,
        164,
        87,
        97,
        2,
        164,
        97,
        6,
        61,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        96,
        32,
        129,
        1,
        144,
        97,
        2,
        185,
        145,
        144,
        97,
        5,
        122,
        86,
        91,
        97,
        4,
        17,
        86,
        91,
        128,
        97,
        2,
        200,
        129,
        97,
        6,
        83,
        86,
        91,
        145,
        80,
        80,
        97,
        2,
        135,
        86,
        91,
        97,
        2,
        216,
        97,
        3,
        183,
        86,
        91,
        97,
        2,
        226,
        96,
        0,
        97,
        4,
        234,
        86,
        91,
        86,
        91,
        97,
        2,
        236,
        97,
        3,
        183,
        86,
        91,
        97,
        2,
        15,
        129,
        97,
        4,
        123,
        86,
        91,
        96,
        2,
        84,
        96,
        0,
        144,
        96,
        255,
        22,
        128,
        97,
        3,
        33,
        87,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        91,
        21,
        97,
        3,
        47,
        87,
        80,
        96,
        0,
        25,
        145,
        144,
        80,
        86,
        91,
        80,
        96,
        0,
        145,
        144,
        80,
        86,
        91,
        145,
        144,
        80,
        86,
        91,
        97,
        3,
        68,
        97,
        3,
        183,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        97,
        3,
        174,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        38,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        110,
        101,
        119,
        32,
        111,
        119,
        110,
        101,
        114,
        32,
        105,
        115,
        32,
        116,
        104,
        101,
        32,
        122,
        101,
        114,
        111,
        32,
        97,
        96,
        68,
        130,
        1,
        82,
        101,
        100,
        100,
        114,
        101,
        115,
        115,
        96,
        208,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        2,
        15,
        129,
        97,
        4,
        234,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        2,
        226,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        111,
        119,
        110,
        101,
        114,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        165,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        21,
        97,
        2,
        15,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        129,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        128,
        130,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        85,
        81,
        127,
        14,
        99,
        214,
        41,
        175,
        227,
        75,
        60,
        165,
        16,
        124,
        16,
        249,
        10,
        191,
        245,
        9,
        27,
        49,
        85,
        27,
        55,
        23,
        88,
        189,
        80,
        175,
        118,
        131,
        77,
        192,
        116,
        145,
        144,
        162,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        97,
        2,
        15,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        129,
        129,
        82,
        96,
        1,
        96,
        32,
        129,
        144,
        82,
        96,
        64,
        128,
        131,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        146,
        23,
        144,
        145,
        85,
        81,
        127,
        205,
        130,
        45,
        201,
        104,
        142,
        32,
        172,
        234,
        104,
        114,
        74,
        47,
        188,
        254,
        79,
        62,
        82,
        109,
        32,
        236,
        170,
        55,
        177,
        143,
        227,
        4,
        122,
        179,
        119,
        214,
        165,
        145,
        144,
        162,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        132,
        85,
        96,
        64,
        81,
        145,
        144,
        146,
        22,
        146,
        131,
        145,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        145,
        144,
        163,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        76,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        128,
        21,
        21,
        129,
        20,
        97,
        5,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        3,
        55,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        140,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        5,
        92,
        130,
        97,
        5,
        99,
        86,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        5,
        168,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        5,
        192,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        133,
        1,
        145,
        80,
        133,
        96,
        31,
        131,
        1,
        18,
        97,
        5,
        212,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        5,
        227,
        87,
        96,
        0,
        128,
        253,
        91,
        134,
        96,
        32,
        130,
        96,
        5,
        27,
        133,
        1,
        1,
        17,
        21,
        97,
        5,
        248,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        146,
        144,
        146,
        1,
        150,
        145,
        149,
        80,
        144,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        6,
        29,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        6,
        38,
        131,
        97,
        5,
        99,
        86,
        91,
        145,
        80,
        97,
        6,
        52,
        96,
        32,
        132,
        1,
        97,
        5,
        99,
        86,
        91,
        144,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        6,
        115,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        161,
        97,
        233,
        196,
        102,
        234,
        76,
        169,
        154,
        48,
        5,
        50,
        59,
        171,
        8,
        147,
        122,
        70,
        111,
        70,
        31,
        186,
        247,
        176,
        106,
        30,
        8,
        238,
        212,
        142,
        81,
        188,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static HOPRDUMMYPROXYFORNETWORKREGISTRY_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        180,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        167,
        27,
        27,
        116,
        17,
        97,
        0,
        113,
        87,
        128,
        99,
        167,
        27,
        27,
        116,
        20,
        97,
        1,
        47,
        87,
        128,
        99,
        179,
        84,
        78,
        130,
        20,
        97,
        1,
        66,
        87,
        128,
        99,
        216,
        90,
        208,
        68,
        20,
        97,
        1,
        99,
        87,
        128,
        99,
        242,
        253,
        227,
        139,
        20,
        97,
        1,
        137,
        87,
        128,
        99,
        244,
        108,
        132,
        184,
        20,
        97,
        1,
        156,
        87,
        128,
        99,
        246,
        127,
        94,
        111,
        20,
        97,
        1,
        165,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        8,
        159,
        250,
        71,
        20,
        97,
        0,
        185,
        87,
        128,
        99,
        64,
        81,
        242,
        87,
        20,
        97,
        0,
        206,
        87,
        128,
        99,
        72,
        99,
        84,
        226,
        20,
        97,
        0,
        225,
        87,
        128,
        99,
        92,
        84,
        113,
        231,
        20,
        97,
        0,
        244,
        87,
        128,
        99,
        113,
        80,
        24,
        166,
        20,
        97,
        1,
        7,
        87,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        1,
        15,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        204,
        97,
        0,
        199,
        54,
        96,
        4,
        97,
        5,
        58,
        86,
        91,
        97,
        1,
        178,
        86,
        91,
        0,
        91,
        97,
        0,
        204,
        97,
        0,
        220,
        54,
        96,
        4,
        97,
        5,
        122,
        86,
        91,
        97,
        2,
        18,
        86,
        91,
        97,
        0,
        204,
        97,
        0,
        239,
        54,
        96,
        4,
        97,
        5,
        149,
        86,
        91,
        97,
        2,
        35,
        86,
        91,
        97,
        0,
        204,
        97,
        1,
        2,
        54,
        96,
        4,
        97,
        5,
        149,
        86,
        91,
        97,
        2,
        124,
        86,
        91,
        97,
        0,
        204,
        97,
        2,
        208,
        86,
        91,
        96,
        0,
        84,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        204,
        97,
        1,
        61,
        54,
        96,
        4,
        97,
        5,
        122,
        86,
        91,
        97,
        2,
        228,
        86,
        91,
        97,
        1,
        85,
        97,
        1,
        80,
        54,
        96,
        4,
        97,
        5,
        122,
        86,
        91,
        97,
        2,
        245,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        38,
        86,
        91,
        97,
        1,
        121,
        97,
        1,
        113,
        54,
        96,
        4,
        97,
        6,
        10,
        86,
        91,
        96,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        38,
        86,
        91,
        97,
        0,
        204,
        97,
        1,
        151,
        54,
        96,
        4,
        97,
        5,
        122,
        86,
        91,
        97,
        3,
        60,
        86,
        91,
        97,
        1,
        85,
        96,
        0,
        25,
        129,
        86,
        91,
        96,
        2,
        84,
        97,
        1,
        121,
        144,
        96,
        255,
        22,
        129,
        86,
        91,
        97,
        1,
        186,
        97,
        3,
        183,
        86,
        91,
        96,
        2,
        84,
        96,
        255,
        22,
        21,
        21,
        129,
        21,
        21,
        20,
        97,
        2,
        15,
        87,
        96,
        2,
        128,
        84,
        96,
        255,
        25,
        22,
        130,
        21,
        21,
        144,
        129,
        23,
        144,
        145,
        85,
        96,
        64,
        81,
        144,
        129,
        82,
        127,
        175,
        171,
        35,
        164,
        188,
        140,
        73,
        37,
        11,
        163,
        126,
        235,
        6,
        37,
        176,
        169,
        178,
        113,
        245,
        93,
        21,
        1,
        131,
        141,
        36,
        245,
        69,
        8,
        195,
        177,
        115,
        66,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        91,
        80,
        86,
        91,
        97,
        2,
        26,
        97,
        3,
        183,
        86,
        91,
        97,
        2,
        15,
        129,
        97,
        4,
        17,
        86,
        91,
        97,
        2,
        43,
        97,
        3,
        183,
        86,
        91,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        2,
        119,
        87,
        97,
        2,
        101,
        131,
        131,
        131,
        129,
        129,
        16,
        97,
        2,
        75,
        87,
        97,
        2,
        75,
        97,
        6,
        61,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        96,
        32,
        129,
        1,
        144,
        97,
        2,
        96,
        145,
        144,
        97,
        5,
        122,
        86,
        91,
        97,
        4,
        123,
        86,
        91,
        128,
        97,
        2,
        111,
        129,
        97,
        6,
        83,
        86,
        91,
        145,
        80,
        80,
        97,
        2,
        46,
        86,
        91,
        80,
        80,
        80,
        86,
        91,
        97,
        2,
        132,
        97,
        3,
        183,
        86,
        91,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        2,
        119,
        87,
        97,
        2,
        190,
        131,
        131,
        131,
        129,
        129,
        16,
        97,
        2,
        164,
        87,
        97,
        2,
        164,
        97,
        6,
        61,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        96,
        32,
        129,
        1,
        144,
        97,
        2,
        185,
        145,
        144,
        97,
        5,
        122,
        86,
        91,
        97,
        4,
        17,
        86,
        91,
        128,
        97,
        2,
        200,
        129,
        97,
        6,
        83,
        86,
        91,
        145,
        80,
        80,
        97,
        2,
        135,
        86,
        91,
        97,
        2,
        216,
        97,
        3,
        183,
        86,
        91,
        97,
        2,
        226,
        96,
        0,
        97,
        4,
        234,
        86,
        91,
        86,
        91,
        97,
        2,
        236,
        97,
        3,
        183,
        86,
        91,
        97,
        2,
        15,
        129,
        97,
        4,
        123,
        86,
        91,
        96,
        2,
        84,
        96,
        0,
        144,
        96,
        255,
        22,
        128,
        97,
        3,
        33,
        87,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        91,
        21,
        97,
        3,
        47,
        87,
        80,
        96,
        0,
        25,
        145,
        144,
        80,
        86,
        91,
        80,
        96,
        0,
        145,
        144,
        80,
        86,
        91,
        145,
        144,
        80,
        86,
        91,
        97,
        3,
        68,
        97,
        3,
        183,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        97,
        3,
        174,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        38,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        110,
        101,
        119,
        32,
        111,
        119,
        110,
        101,
        114,
        32,
        105,
        115,
        32,
        116,
        104,
        101,
        32,
        122,
        101,
        114,
        111,
        32,
        97,
        96,
        68,
        130,
        1,
        82,
        101,
        100,
        100,
        114,
        101,
        115,
        115,
        96,
        208,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        2,
        15,
        129,
        97,
        4,
        234,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        2,
        226,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        111,
        119,
        110,
        101,
        114,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        165,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        21,
        97,
        2,
        15,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        129,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        128,
        130,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        85,
        81,
        127,
        14,
        99,
        214,
        41,
        175,
        227,
        75,
        60,
        165,
        16,
        124,
        16,
        249,
        10,
        191,
        245,
        9,
        27,
        49,
        85,
        27,
        55,
        23,
        88,
        189,
        80,
        175,
        118,
        131,
        77,
        192,
        116,
        145,
        144,
        162,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        255,
        22,
        97,
        2,
        15,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        129,
        129,
        82,
        96,
        1,
        96,
        32,
        129,
        144,
        82,
        96,
        64,
        128,
        131,
        32,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        146,
        23,
        144,
        145,
        85,
        81,
        127,
        205,
        130,
        45,
        201,
        104,
        142,
        32,
        172,
        234,
        104,
        114,
        74,
        47,
        188,
        254,
        79,
        62,
        82,
        109,
        32,
        236,
        170,
        55,
        177,
        143,
        227,
        4,
        122,
        179,
        119,
        214,
        165,
        145,
        144,
        162,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        132,
        85,
        96,
        64,
        81,
        145,
        144,
        146,
        22,
        146,
        131,
        145,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        145,
        144,
        163,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        76,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        128,
        21,
        21,
        129,
        20,
        97,
        5,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        3,
        55,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        140,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        5,
        92,
        130,
        97,
        5,
        99,
        86,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        5,
        168,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        5,
        192,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        133,
        1,
        145,
        80,
        133,
        96,
        31,
        131,
        1,
        18,
        97,
        5,
        212,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        5,
        227,
        87,
        96,
        0,
        128,
        253,
        91,
        134,
        96,
        32,
        130,
        96,
        5,
        27,
        133,
        1,
        1,
        17,
        21,
        97,
        5,
        248,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        146,
        144,
        146,
        1,
        150,
        145,
        149,
        80,
        144,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        6,
        29,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        6,
        38,
        131,
        97,
        5,
        99,
        86,
        91,
        145,
        80,
        97,
        6,
        52,
        96,
        32,
        132,
        1,
        97,
        5,
        99,
        86,
        91,
        144,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        6,
        115,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        161,
        97,
        233,
        196,
        102,
        234,
        76,
        169,
        154,
        48,
        5,
        50,
        59,
        171,
        8,
        147,
        122,
        70,
        111,
        70,
        31,
        186,
        247,
        176,
        106,
        30,
        8,
        238,
        212,
        142,
        81,
        188,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static HOPRDUMMYPROXYFORNETWORKREGISTRY_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct HoprDummyProxyForNetworkRegistry<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for HoprDummyProxyForNetworkRegistry<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for HoprDummyProxyForNetworkRegistry<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for HoprDummyProxyForNetworkRegistry<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for HoprDummyProxyForNetworkRegistry<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(HoprDummyProxyForNetworkRegistry))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> HoprDummyProxyForNetworkRegistry<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    HOPRDUMMYPROXYFORNETWORKREGISTRY_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                HOPRDUMMYPROXYFORNETWORKREGISTRY_ABI.clone(),
                HOPRDUMMYPROXYFORNETWORKREGISTRY_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `MAX_REGISTRATION_PER_ACCOUNT` (0xf46c84b8) function
        pub fn max_registration_per_account(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([244, 108, 132, 184], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `canOperateFor` (0xd85ad044) function
        pub fn can_operate_for(
            &self,
            p0: ::ethers::core::types::Address,
            p1: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([216, 90, 208, 68], (p0, p1))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isAllAllowed` (0xf67f5e6f) function
        pub fn is_all_allowed(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([246, 127, 94, 111], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `maxAllowedRegistrations` (0xb3544e82) function
        pub fn max_allowed_registrations(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([179, 84, 78, 130], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `owner` (0x8da5cb5b) function
        pub fn owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `ownerAddAccount` (0xa71b1b74) function
        pub fn owner_add_account(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([167, 27, 27, 116], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `ownerBatchAddAccounts` (0x486354e2) function
        pub fn owner_batch_add_accounts(
            &self,
            accounts: ::std::vec::Vec<::ethers::core::types::Address>,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([72, 99, 84, 226], accounts)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `ownerBatchRemoveAccounts` (0x5c5471e7) function
        pub fn owner_batch_remove_accounts(
            &self,
            accounts: ::std::vec::Vec<::ethers::core::types::Address>,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([92, 84, 113, 231], accounts)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `ownerRemoveAccount` (0x4051f257) function
        pub fn owner_remove_account(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([64, 81, 242, 87], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `renounceOwnership` (0x715018a6) function
        pub fn renounce_ownership(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `transferOwnership` (0xf2fde38b) function
        pub fn transfer_ownership(
            &self,
            new_owner: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `updateAllowAll` (0x089ffa47) function
        pub fn update_allow_all(
            &self,
            updated_allow: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([8, 159, 250, 71], updated_allow)
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `AccountDeregistered` event
        pub fn account_deregistered_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            AccountDeregisteredFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `AccountRegistered` event
        pub fn account_registered_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            AccountRegisteredFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `AllowAllAccountsEligible` event
        pub fn allow_all_accounts_eligible_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            AllowAllAccountsEligibleFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `OwnershipTransferred` event
        pub fn ownership_transferred_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            OwnershipTransferredFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            HoprDummyProxyForNetworkRegistryEvents,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for HoprDummyProxyForNetworkRegistry<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "AccountDeregistered", abi = "AccountDeregistered(address)")]
    pub struct AccountDeregisteredFilter {
        #[ethevent(indexed)]
        pub account: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "AccountRegistered", abi = "AccountRegistered(address)")]
    pub struct AccountRegisteredFilter {
        #[ethevent(indexed)]
        pub account: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "AllowAllAccountsEligible",
        abi = "AllowAllAccountsEligible(bool)"
    )]
    pub struct AllowAllAccountsEligibleFilter {
        pub is_allowed: bool,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub previous_owner: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ::ethers::core::types::Address,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum HoprDummyProxyForNetworkRegistryEvents {
        AccountDeregisteredFilter(AccountDeregisteredFilter),
        AccountRegisteredFilter(AccountRegisteredFilter),
        AllowAllAccountsEligibleFilter(AllowAllAccountsEligibleFilter),
        OwnershipTransferredFilter(OwnershipTransferredFilter),
    }
    impl ::ethers::contract::EthLogDecode for HoprDummyProxyForNetworkRegistryEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = AccountDeregisteredFilter::decode_log(log) {
                return Ok(
                    HoprDummyProxyForNetworkRegistryEvents::AccountDeregisteredFilter(
                        decoded,
                    ),
                );
            }
            if let Ok(decoded) = AccountRegisteredFilter::decode_log(log) {
                return Ok(
                    HoprDummyProxyForNetworkRegistryEvents::AccountRegisteredFilter(
                        decoded,
                    ),
                );
            }
            if let Ok(decoded) = AllowAllAccountsEligibleFilter::decode_log(log) {
                return Ok(
                    HoprDummyProxyForNetworkRegistryEvents::AllowAllAccountsEligibleFilter(
                        decoded,
                    ),
                );
            }
            if let Ok(decoded) = OwnershipTransferredFilter::decode_log(log) {
                return Ok(
                    HoprDummyProxyForNetworkRegistryEvents::OwnershipTransferredFilter(
                        decoded,
                    ),
                );
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for HoprDummyProxyForNetworkRegistryEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::AccountDeregisteredFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::AccountRegisteredFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::AllowAllAccountsEligibleFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::OwnershipTransferredFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<AccountDeregisteredFilter>
    for HoprDummyProxyForNetworkRegistryEvents {
        fn from(value: AccountDeregisteredFilter) -> Self {
            Self::AccountDeregisteredFilter(value)
        }
    }
    impl ::core::convert::From<AccountRegisteredFilter>
    for HoprDummyProxyForNetworkRegistryEvents {
        fn from(value: AccountRegisteredFilter) -> Self {
            Self::AccountRegisteredFilter(value)
        }
    }
    impl ::core::convert::From<AllowAllAccountsEligibleFilter>
    for HoprDummyProxyForNetworkRegistryEvents {
        fn from(value: AllowAllAccountsEligibleFilter) -> Self {
            Self::AllowAllAccountsEligibleFilter(value)
        }
    }
    impl ::core::convert::From<OwnershipTransferredFilter>
    for HoprDummyProxyForNetworkRegistryEvents {
        fn from(value: OwnershipTransferredFilter) -> Self {
            Self::OwnershipTransferredFilter(value)
        }
    }
    ///Container type for all input parameters for the `MAX_REGISTRATION_PER_ACCOUNT` function with signature `MAX_REGISTRATION_PER_ACCOUNT()` and selector `0xf46c84b8`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "MAX_REGISTRATION_PER_ACCOUNT",
        abi = "MAX_REGISTRATION_PER_ACCOUNT()"
    )]
    pub struct MaxRegistrationPerAccountCall;
    ///Container type for all input parameters for the `canOperateFor` function with signature `canOperateFor(address,address)` and selector `0xd85ad044`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "canOperateFor", abi = "canOperateFor(address,address)")]
    pub struct CanOperateForCall(
        pub ::ethers::core::types::Address,
        pub ::ethers::core::types::Address,
    );
    ///Container type for all input parameters for the `isAllAllowed` function with signature `isAllAllowed()` and selector `0xf67f5e6f`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "isAllAllowed", abi = "isAllAllowed()")]
    pub struct IsAllAllowedCall;
    ///Container type for all input parameters for the `maxAllowedRegistrations` function with signature `maxAllowedRegistrations(address)` and selector `0xb3544e82`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "maxAllowedRegistrations",
        abi = "maxAllowedRegistrations(address)"
    )]
    pub struct MaxAllowedRegistrationsCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    ///Container type for all input parameters for the `ownerAddAccount` function with signature `ownerAddAccount(address)` and selector `0xa71b1b74`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "ownerAddAccount", abi = "ownerAddAccount(address)")]
    pub struct OwnerAddAccountCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `ownerBatchAddAccounts` function with signature `ownerBatchAddAccounts(address[])` and selector `0x486354e2`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "ownerBatchAddAccounts", abi = "ownerBatchAddAccounts(address[])")]
    pub struct OwnerBatchAddAccountsCall {
        pub accounts: ::std::vec::Vec<::ethers::core::types::Address>,
    }
    ///Container type for all input parameters for the `ownerBatchRemoveAccounts` function with signature `ownerBatchRemoveAccounts(address[])` and selector `0x5c5471e7`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "ownerBatchRemoveAccounts",
        abi = "ownerBatchRemoveAccounts(address[])"
    )]
    pub struct OwnerBatchRemoveAccountsCall {
        pub accounts: ::std::vec::Vec<::ethers::core::types::Address>,
    }
    ///Container type for all input parameters for the `ownerRemoveAccount` function with signature `ownerRemoveAccount(address)` and selector `0x4051f257`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "ownerRemoveAccount", abi = "ownerRemoveAccount(address)")]
    pub struct OwnerRemoveAccountCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `renounceOwnership` function with signature `renounceOwnership()` and selector `0x715018a6`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    ///Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address)` and selector `0xf2fde38b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `updateAllowAll` function with signature `updateAllowAll(bool)` and selector `0x089ffa47`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "updateAllowAll", abi = "updateAllowAll(bool)")]
    pub struct UpdateAllowAllCall {
        pub updated_allow: bool,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum HoprDummyProxyForNetworkRegistryCalls {
        MaxRegistrationPerAccount(MaxRegistrationPerAccountCall),
        CanOperateFor(CanOperateForCall),
        IsAllAllowed(IsAllAllowedCall),
        MaxAllowedRegistrations(MaxAllowedRegistrationsCall),
        Owner(OwnerCall),
        OwnerAddAccount(OwnerAddAccountCall),
        OwnerBatchAddAccounts(OwnerBatchAddAccountsCall),
        OwnerBatchRemoveAccounts(OwnerBatchRemoveAccountsCall),
        OwnerRemoveAccount(OwnerRemoveAccountCall),
        RenounceOwnership(RenounceOwnershipCall),
        TransferOwnership(TransferOwnershipCall),
        UpdateAllowAll(UpdateAllowAllCall),
    }
    impl ::ethers::core::abi::AbiDecode for HoprDummyProxyForNetworkRegistryCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <MaxRegistrationPerAccountCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::MaxRegistrationPerAccount(decoded));
            }
            if let Ok(decoded)
                = <CanOperateForCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::CanOperateFor(decoded));
            }
            if let Ok(decoded)
                = <IsAllAllowedCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::IsAllAllowed(decoded));
            }
            if let Ok(decoded)
                = <MaxAllowedRegistrationsCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::MaxAllowedRegistrations(decoded));
            }
            if let Ok(decoded)
                = <OwnerCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Owner(decoded));
            }
            if let Ok(decoded)
                = <OwnerAddAccountCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::OwnerAddAccount(decoded));
            }
            if let Ok(decoded)
                = <OwnerBatchAddAccountsCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::OwnerBatchAddAccounts(decoded));
            }
            if let Ok(decoded)
                = <OwnerBatchRemoveAccountsCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::OwnerBatchRemoveAccounts(decoded));
            }
            if let Ok(decoded)
                = <OwnerRemoveAccountCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::OwnerRemoveAccount(decoded));
            }
            if let Ok(decoded)
                = <RenounceOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RenounceOwnership(decoded));
            }
            if let Ok(decoded)
                = <TransferOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::TransferOwnership(decoded));
            }
            if let Ok(decoded)
                = <UpdateAllowAllCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::UpdateAllowAll(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for HoprDummyProxyForNetworkRegistryCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::MaxRegistrationPerAccount(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::CanOperateFor(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::IsAllAllowed(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::MaxAllowedRegistrations(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Owner(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::OwnerAddAccount(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::OwnerBatchAddAccounts(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::OwnerBatchRemoveAccounts(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::OwnerRemoveAccount(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RenounceOwnership(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::TransferOwnership(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::UpdateAllowAll(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for HoprDummyProxyForNetworkRegistryCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::MaxRegistrationPerAccount(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::CanOperateFor(element) => ::core::fmt::Display::fmt(element, f),
                Self::IsAllAllowed(element) => ::core::fmt::Display::fmt(element, f),
                Self::MaxAllowedRegistrations(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Owner(element) => ::core::fmt::Display::fmt(element, f),
                Self::OwnerAddAccount(element) => ::core::fmt::Display::fmt(element, f),
                Self::OwnerBatchAddAccounts(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::OwnerBatchRemoveAccounts(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::OwnerRemoveAccount(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RenounceOwnership(element) => ::core::fmt::Display::fmt(element, f),
                Self::TransferOwnership(element) => ::core::fmt::Display::fmt(element, f),
                Self::UpdateAllowAll(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<MaxRegistrationPerAccountCall>
    for HoprDummyProxyForNetworkRegistryCalls {
        fn from(value: MaxRegistrationPerAccountCall) -> Self {
            Self::MaxRegistrationPerAccount(value)
        }
    }
    impl ::core::convert::From<CanOperateForCall>
    for HoprDummyProxyForNetworkRegistryCalls {
        fn from(value: CanOperateForCall) -> Self {
            Self::CanOperateFor(value)
        }
    }
    impl ::core::convert::From<IsAllAllowedCall>
    for HoprDummyProxyForNetworkRegistryCalls {
        fn from(value: IsAllAllowedCall) -> Self {
            Self::IsAllAllowed(value)
        }
    }
    impl ::core::convert::From<MaxAllowedRegistrationsCall>
    for HoprDummyProxyForNetworkRegistryCalls {
        fn from(value: MaxAllowedRegistrationsCall) -> Self {
            Self::MaxAllowedRegistrations(value)
        }
    }
    impl ::core::convert::From<OwnerCall> for HoprDummyProxyForNetworkRegistryCalls {
        fn from(value: OwnerCall) -> Self {
            Self::Owner(value)
        }
    }
    impl ::core::convert::From<OwnerAddAccountCall>
    for HoprDummyProxyForNetworkRegistryCalls {
        fn from(value: OwnerAddAccountCall) -> Self {
            Self::OwnerAddAccount(value)
        }
    }
    impl ::core::convert::From<OwnerBatchAddAccountsCall>
    for HoprDummyProxyForNetworkRegistryCalls {
        fn from(value: OwnerBatchAddAccountsCall) -> Self {
            Self::OwnerBatchAddAccounts(value)
        }
    }
    impl ::core::convert::From<OwnerBatchRemoveAccountsCall>
    for HoprDummyProxyForNetworkRegistryCalls {
        fn from(value: OwnerBatchRemoveAccountsCall) -> Self {
            Self::OwnerBatchRemoveAccounts(value)
        }
    }
    impl ::core::convert::From<OwnerRemoveAccountCall>
    for HoprDummyProxyForNetworkRegistryCalls {
        fn from(value: OwnerRemoveAccountCall) -> Self {
            Self::OwnerRemoveAccount(value)
        }
    }
    impl ::core::convert::From<RenounceOwnershipCall>
    for HoprDummyProxyForNetworkRegistryCalls {
        fn from(value: RenounceOwnershipCall) -> Self {
            Self::RenounceOwnership(value)
        }
    }
    impl ::core::convert::From<TransferOwnershipCall>
    for HoprDummyProxyForNetworkRegistryCalls {
        fn from(value: TransferOwnershipCall) -> Self {
            Self::TransferOwnership(value)
        }
    }
    impl ::core::convert::From<UpdateAllowAllCall>
    for HoprDummyProxyForNetworkRegistryCalls {
        fn from(value: UpdateAllowAllCall) -> Self {
            Self::UpdateAllowAll(value)
        }
    }
    ///Container type for all return fields from the `MAX_REGISTRATION_PER_ACCOUNT` function with signature `MAX_REGISTRATION_PER_ACCOUNT()` and selector `0xf46c84b8`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct MaxRegistrationPerAccountReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `canOperateFor` function with signature `canOperateFor(address,address)` and selector `0xd85ad044`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CanOperateForReturn {
        pub eligiblity: bool,
    }
    ///Container type for all return fields from the `isAllAllowed` function with signature `isAllAllowed()` and selector `0xf67f5e6f`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct IsAllAllowedReturn(pub bool);
    ///Container type for all return fields from the `maxAllowedRegistrations` function with signature `maxAllowedRegistrations(address)` and selector `0xb3544e82`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct MaxAllowedRegistrationsReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct OwnerReturn(pub ::ethers::core::types::Address);
}
