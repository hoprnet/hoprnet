pub use hopr_token::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod hopr_token {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    ///HoprToken was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs
    use std::sync::Arc;
    use ::ethers::core::{
        abi::{Abi, Token, Detokenize, InvalidOutputType, Tokenizable},
        types::*,
    };
    use ::ethers::contract::{
        Contract, builders::{ContractCall, Event},
        Lazy,
    };
    use ::ethers::providers::Middleware;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Approval\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"AuthorizedOperator\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Burned\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Minted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"RevokedOperator\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"RoleAdminChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"RoleGranted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"RoleRevoked\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Sent\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Transfer\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"accountSnapshots\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"fromBlock\",\"type\":\"uint128\",\"components\":[]},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"authorizeOperator\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint128\",\"name\":\"_blockNumber\",\"type\":\"uint128\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"burn\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"defaultOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"grantRole\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"operatorBurn\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"operatorSend\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceRole\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"revokeOperator\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"revokeRole\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"send\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_blockNumber\",\"type\":\"uint128\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupplySnapshots\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"fromBlock\",\"type\":\"uint128\",\"components\":[]},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]}]";
    /// The parsed JSON-ABI of the contract.
    pub static HOPRTOKEN_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("invalid abi"));
    /// Bytecode of the #name contract
    pub static HOPRTOKEN_BYTECODE: ::ethers::contract::Lazy<
        ::ethers::core::types::Bytes,
    > = ::ethers::contract::Lazy::new(|| {
        "0x60806040523480156200001157600080fd5b50604080518082018252600a8152692427a829102a37b5b2b760b11b602080830191825283518085018552600581526436a427a82960d91b81830152845160008152918201909452825192939290916200006f9160049190620003b9565b50815162000085906005906020850190620003b9565b5080516200009b90600690602084019062000448565b5060005b6006548110156200010f5760016007600060068481548110620000c657620000c6620004b7565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055806200010681620004cd565b9150506200009f565b506040516329965a1d60e01b815230600482018190527fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce217705460248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b1580156200018a57600080fd5b505af11580156200019f573d6000803e3d6000fd5b50506040516329965a1d60e01b815230600482018190527faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad2492506329965a1d9150606401600060405180830381600087803b1580156200021d57600080fd5b505af115801562000232573d6000803e3d6000fd5b505050505050506200024e6000801b336200025460201b60201c565b62000531565b62000260828262000264565b5050565b6200027b8282620002a760201b62000e4c1760201c565b6000828152600160209081526040909120620002a291839062000ed062000347821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000260576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003033390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200035e836001600160a01b03841662000367565b90505b92915050565b6000818152600183016020526040812054620003b05750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000361565b50600062000361565b828054620003c790620004f5565b90600052602060002090601f016020900481019282620003eb576000855562000436565b82601f106200040657805160ff191683800117855562000436565b8280016001018555821562000436579182015b828111156200043657825182559160200191906001019062000419565b5062000444929150620004a0565b5090565b82805482825590600052602060002090810192821562000436579160200282015b828111156200043657825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000469565b5b80821115620004445760008155600101620004a1565b634e487b7160e01b600052603260045260246000fd5b600060018201620004ee57634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806200050a57607f821691505b6020821081036200052b57634e487b7160e01b600052602260045260246000fd5b50919050565b61290a80620005416000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c8063947975d91161011a578063d5391393116100ad578063dd62ed3e1161007c578063dd62ed3e1461047a578063f772a092146104b3578063fad8b32a146104c6578063fc673c4f146104d9578063fe9d9303146104ec57600080fd5b8063d53913931461041a578063d547741f14610441578063d95b637114610454578063dcdc7dd01461046757600080fd5b8063a217fddf116100e9578063a217fddf146103d9578063a9059cbb146103e1578063b7d78b1a146103f4578063ca15c8731461040757600080fd5b8063947975d914610398578063959b8c3f146103ab57806395d89b41146103be5780639bd9bbc6146103c657600080fd5b80632f2ff15d1161019257806362ad1b831161016157806362ad1b831461031e57806370a08231146103315780639010d07c1461035a57806391d148541461038557600080fd5b80632f2ff15d146102e0578063313ce567146102f557806336568abe14610304578063556f0dc71461031757600080fd5b806318160ddd116101ce57806318160ddd1461026557806323b872dd14610277578063248a9ca31461028a5780632497aee6146102ad57600080fd5b806301ffc9a71461020057806306e485381461022857806306fdde031461023d578063095ea7b314610252575b600080fd5b61021361020e3660046120ce565b6104ff565b60405190151581526020015b60405180910390f35b61023061052a565b60405161021f91906120f8565b61024561058c565b60405161021f919061219d565b6102136102603660046121c8565b610615565b6003545b60405190815260200161021f565b6102136102853660046121f4565b61062d565b610269610298366004612235565b60009081526020819052604090206001015490565b6102c06102bb3660046121c8565b6107ad565b604080516001600160801b0393841681529290911660208301520161021f565b6102f36102ee36600461224e565b6107f0565b005b6040516012815260200161021f565b6102f361031236600461224e565b61081b565b6001610269565b6102f361032c366004612321565b610899565b61026961033f3660046123b4565b6001600160a01b031660009081526002602052604090205490565b61036d6103683660046123d1565b6108d5565b6040516001600160a01b03909116815260200161021f565b61021361039336600461224e565b6108f4565b6102696103a636600461240f565b61091d565b6102f36103b93660046123b4565b61092a565b610245610a47565b6102f36103d436600461242a565b610a56565b610269600081565b6102136103ef3660046121c8565b610a74565b6102c0610402366004612235565b610b27565b610269610415366004612235565b610b5c565b6102697f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102f361044f36600461224e565b610b73565b610213610462366004612483565b610b99565b6102f36104753660046124b1565b610c3a565b610269610488366004612483565b6001600160a01b039182166000908152600a6020908152604080832093909416825291909152205490565b6102696104c1366004612531565b610cc2565b6102f36104d43660046123b4565b610ce4565b6102f36104e73660046124b1565b610dff565b6102f36104fa366004612566565b610e31565b60006001600160e01b03198216635a05180f60e01b1480610524575061052482610ee5565b92915050565b6060600680548060200260200160405190810160405280929190818152602001828054801561058257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610564575b5050505050905090565b60606004805461059b906125ad565b80601f01602080910402602001604051908101604052809291908181526020018280546105c7906125ad565b80156105825780601f106105e957610100808354040283529160200191610582565b820191906000526020600020905b8154815290600101906020018083116105f757509395945050505050565b600033610623818585610f1a565b5060019392505050565b60006001600160a01b03831661065e5760405162461bcd60e51b8152600401610655906125e7565b60405180910390fd5b6001600160a01b0384166106c35760405162461bcd60e51b815260206004820152602660248201527f4552433737373a207472616e736665722066726f6d20746865207a65726f206160448201526564647265737360d01b6064820152608401610655565b60003390506106f4818686866040518060200160405280600081525060405180602001604052806000815250611041565b610720818686866040518060200160405280600081525060405180602001604052806000815250611169565b610774858261076f86604051806060016040528060298152602001612889602991396001600160a01b03808c166000908152600a60209081526040808320938b16835292905220549190611297565b610f1a565b6107a281868686604051806020016040528060008152506040518060200160405280600081525060006112c3565b506001949350505050565b600b60205281600052604060002081815481106107c957600080fd5b6000918252602090912001546001600160801b038082169350600160801b90910416905082565b60008281526020819052604090206001015461080c8133611488565b61081683836114ec565b505050565b6001600160a01b038116331461088b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610655565b610895828261150e565b5050565b6108a33386610b99565b6108bf5760405162461bcd60e51b81526004016106559061262b565b6108ce85858585856001611530565b5050505050565b60008281526001602052604081206108ed9083611613565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610524600c8361161f565b6001600160a01b038116330361098e5760405162461bcd60e51b8152602060048201526024808201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260448201526330ba37b960e11b6064820152608401610655565b6001600160a01b03811660009081526007602052604090205460ff16156109df573360009081526009602090815260408083206001600160a01b03851684529091529020805460ff19169055610a0e565b3360009081526008602090815260408083206001600160a01b03851684529091529020805460ff191660011790555b60405133906001600160a01b038316907ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f990600090a350565b60606005805461059b906125ad565b61081633848484604051806020016040528060008152506001611530565b60006001600160a01b038316610a9c5760405162461bcd60e51b8152600401610655906125e7565b6000339050610acd818286866040518060200160405280600081525060405180602001604052806000815250611041565b610af9818286866040518060200160405280600081525060405180602001604052806000815250611169565b61062381828686604051806020016040528060008152506040518060200160405280600081525060006112c3565b600c8181548110610b3757600080fd5b6000918252602090912001546001600160801b038082169250600160801b9091041682565b600081815260016020526040812061052490611802565b600082815260208190526040902060010154610b8f8133611488565b610816838361150e565b6000816001600160a01b0316836001600160a01b03161480610c0457506001600160a01b03831660009081526007602052604090205460ff168015610c0457506001600160a01b0380831660009081526009602090815260408083209387168352929052205460ff16155b806108ed5750506001600160a01b0390811660009081526008602090815260408083209490931682529290925290205460ff1690565b610c647f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6336108f4565b610cb05760405162461bcd60e51b815260206004820181905260248201527f63616c6c657220646f6573206e6f742068617665206d696e74657220726f6c656044820152606401610655565b610cbc8484848461180c565b50505050565b6001600160a01b0382166000908152600b602052604081206108ed908361161f565b336001600160a01b03821603610d465760405162461bcd60e51b815260206004820152602160248201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6044820152603960f91b6064820152608401610655565b6001600160a01b03811660009081526007602052604090205460ff1615610d9a573360009081526009602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610dc6565b3360009081526008602090815260408083206001600160a01b03851684529091529020805460ff191690555b60405133906001600160a01b038316907f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa190600090a350565b610e093385610b99565b610e255760405162461bcd60e51b81526004016106559061262b565b610cbc84848484611968565b61089533838360405180602001604052806000815250611968565b610e5682826108f4565b610895576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610e8c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006108ed836001600160a01b038416611adc565b60006001600160e01b03198216637965db0b60e01b148061052457506301ffc9a760e01b6001600160e01b0319831614610524565b6001600160a01b038316610f7e5760405162461bcd60e51b815260206004820152602560248201527f4552433737373a20617070726f76652066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610655565b6001600160a01b038216610fe05760405162461bcd60e51b815260206004820152602360248201527f4552433737373a20617070726f766520746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610655565b6001600160a01b038381166000818152600a602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe8956024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa1580156110c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e69190612677565b90506001600160a01b0381161561116057604051633ad5cbc160e11b81526001600160a01b038216906375ab97829061112d908a908a908a908a908a908a90600401612694565b600060405180830381600087803b15801561114757600080fd5b505af115801561115b573d6000803e3d6000fd5b505050505b50505050505050565b61117586868686611b2b565b6111b283604051806060016040528060278152602001612862602791396001600160a01b0388166000908152600260205260409020549190611297565b6001600160a01b0380871660009081526002602052604080822093909355908616815220546111e19084611c62565b6001600160a01b0380861660008181526002602052604090819020939093559151878216918916907f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc826146779879061123a908890889088906126ee565b60405180910390a4836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161128791815260200190565b60405180910390a3505050505050565b600081848411156112bb5760405162461bcd60e51b8152600401610655919061219d565b505050900390565b60405163555ddc6560e11b81526001600160a01b03861660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015611344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113689190612677565b90506001600160a01b038116156113e4576040516223de2960e01b81526001600160a01b038216906223de29906113ad908b908b908b908b908b908b90600401612694565b600060405180830381600087803b1580156113c757600080fd5b505af11580156113db573d6000803e3d6000fd5b5050505061147e565b811561147e576001600160a01b0386163b1561147e5760405162461bcd60e51b815260206004820152604d60248201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460448201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60648201526c1ad95b9cd49958da5c1a595b9d609a1b608482015260a401610655565b5050505050505050565b61149282826108f4565b610895576114aa816001600160a01b03166014611c6e565b6114b5836020611c6e565b6040516020016114c6929190612723565b60408051601f198184030181529082905262461bcd60e51b82526106559160040161219d565b6114f68282610e4c565b60008281526001602052604090206108169082610ed0565b6115188282611e0a565b60008281526001602052604090206108169082611e6f565b6001600160a01b0386166115915760405162461bcd60e51b815260206004820152602260248201527f4552433737373a2073656e642066726f6d20746865207a65726f206164647265604482015261737360f01b6064820152608401610655565b6001600160a01b0385166115e75760405162461bcd60e51b815260206004820181905260248201527f4552433737373a2073656e6420746f20746865207a65726f20616464726573736044820152606401610655565b336115f6818888888888611041565b611604818888888888611169565b611160818888888888886112c3565b60006108ed8383611e84565b8154600090808203611635576000915050610524565b836116416001836127ae565b81548110611651576116516127c5565b6000918252602090912001546001600160801b03908116908416106116b1578361167c6001836127ae565b8154811061168c5761168c6127c5565b600091825260209091200154600160801b90046001600160801b031691506105249050565b836000815481106116c4576116c46127c5565b6000918252602090912001546001600160801b0390811690841610156116ee576000915050610524565b6000806116fc6001846127ae565b90505b818111156117ca576000600261171584846127db565b6117209060016127db565b61172a91906127f3565b90506000878281548110611740576117406127c5565b6000918252602090912001546001600160801b0390811691508716810361179c57878281548110611773576117736127c5565b600091825260209091200154600160801b90046001600160801b03169550610524945050505050565b866001600160801b03168110156117b5578193506117c3565b6117c06001836127ae565b92505b50506116ff565b8582815481106117dc576117dc6127c5565b600091825260209091200154600160801b90046001600160801b03169695505050505050565b6000610524825490565b6001600160a01b0384166118625760405162461bcd60e51b815260206004820181905260248201527f4552433737373a206d696e7420746f20746865207a65726f20616464726573736044820152606401610655565b336118708160008787611b2b565b60035461187d9085611c62565b6003556001600160a01b0385166000908152600260205260409020546118a39085611c62565b6001600160a01b0386166000908152600260205260408120919091556118d09082908787878760016112c3565b846001600160a01b0316816001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d868686604051611917939291906126ee565b60405180910390a36040518481526001600160a01b038616906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050505050565b6001600160a01b0384166119c95760405162461bcd60e51b815260206004820152602260248201527f4552433737373a206275726e2066726f6d20746865207a65726f206164647265604482015261737360f01b6064820152608401610655565b336119d981866000878787611041565b6119e68186600087611b2b565b611a23846040518060600160405280602381526020016128b2602391396001600160a01b0388166000908152600260205260409020549190611297565b6001600160a01b038616600090815260026020526040902055600354611a499085611eae565b600381905550846001600160a01b0316816001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098868686604051611a96939291906126ee565b60405180910390a36040518481526000906001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611959565b6000818152600183016020526040812054611b2357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610524565b506000610524565b6001600160a01b038316611b8b576001600160a01b0382166000908152600b60209081526040808320600290925290912054611b749190611b6f9084905b90611c62565b611eba565b611b86600c611b6f83611b6960035490565b610cbc565b6001600160a01b038216611be1576001600160a01b0383166000908152600b60209081526040808320600290925290912054611bcf9190611b6f9084905b90611eae565b611b86600c611b6f83611bc960035490565b816001600160a01b0316836001600160a01b031614610cbc576001600160a01b0383166000908152600b60209081526040808320600290925290912054611c2e9190611b6f908490611bc9565b6001600160a01b0382166000908152600b60209081526040808320600290925290912054610cbc9190611b6f908490611b69565b60006108ed82846127db565b60606000611c7d836002612815565b611c889060026127db565b67ffffffffffffffff811115611ca057611ca061227e565b6040519080825280601f01601f191660200182016040528015611cca576020820181803683370190505b509050600360fc1b81600081518110611ce557611ce56127c5565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611d1457611d146127c5565b60200101906001600160f81b031916908160001a9053506000611d38846002612815565b611d439060016127db565b90505b6001811115611dbb576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d7757611d776127c5565b1a60f81b828281518110611d8d57611d8d6127c5565b60200101906001600160f81b031916908160001a90535060049490941c93611db481612834565b9050611d46565b5083156108ed5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610655565b611e1482826108f4565b15610895576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006108ed836001600160a01b038416611fdb565b6000826000018281548110611e9b57611e9b6127c5565b9060005260206000200154905092915050565b60006108ed82846127ae565b6001600160801b03811115611f045760405162461bcd60e51b815260206004820152601060248201526f63617374696e67206f766572666c6f7760801b6044820152606401610655565b8154801580611f4257504383611f1b6001846127ae565b81548110611f2b57611f2b6127c5565b6000918252602090912001546001600160801b0316105b15611f9357604080518082019091526001600160801b03438116825283811660208084019182528654600181018855600088815291909120935191518316600160801b029190921617910155505050565b8183611fa06001846127ae565b81548110611fb057611fb06127c5565b600091825260209091200180546001600160801b03928316600160801b029216919091179055505050565b600081815260018301602052604081205480156120c4576000611fff6001836127ae565b8554909150600090612013906001906127ae565b9050818114612078576000866000018281548110612033576120336127c5565b9060005260206000200154905080876000018481548110612056576120566127c5565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806120895761208961284b565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610524565b6000915050610524565b6000602082840312156120e057600080fd5b81356001600160e01b0319811681146108ed57600080fd5b6020808252825182820181905260009190848201906040850190845b818110156121395783516001600160a01b031683529284019291840191600101612114565b50909695505050505050565b60005b83811015612160578181015183820152602001612148565b83811115610cbc5750506000910152565b60008151808452612189816020860160208601612145565b601f01601f19169290920160200192915050565b6020815260006108ed6020830184612171565b6001600160a01b03811681146121c557600080fd5b50565b600080604083850312156121db57600080fd5b82356121e6816121b0565b946020939093013593505050565b60008060006060848603121561220957600080fd5b8335612214816121b0565b92506020840135612224816121b0565b929592945050506040919091013590565b60006020828403121561224757600080fd5b5035919050565b6000806040838503121561226157600080fd5b823591506020830135612273816121b0565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126122a557600080fd5b813567ffffffffffffffff808211156122c0576122c061227e565b604051601f8301601f19908116603f011681019082821181831017156122e8576122e861227e565b8160405283815286602085880101111561230157600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a0868803121561233957600080fd5b8535612344816121b0565b94506020860135612354816121b0565b935060408601359250606086013567ffffffffffffffff8082111561237857600080fd5b61238489838a01612294565b9350608088013591508082111561239a57600080fd5b506123a788828901612294565b9150509295509295909350565b6000602082840312156123c657600080fd5b81356108ed816121b0565b600080604083850312156123e457600080fd5b50508035926020909101359150565b80356001600160801b038116811461240a57600080fd5b919050565b60006020828403121561242157600080fd5b6108ed826123f3565b60008060006060848603121561243f57600080fd5b833561244a816121b0565b925060208401359150604084013567ffffffffffffffff81111561246d57600080fd5b61247986828701612294565b9150509250925092565b6000806040838503121561249657600080fd5b82356124a1816121b0565b91506020830135612273816121b0565b600080600080608085870312156124c757600080fd5b84356124d2816121b0565b935060208501359250604085013567ffffffffffffffff808211156124f657600080fd5b61250288838901612294565b9350606087013591508082111561251857600080fd5b5061252587828801612294565b91505092959194509250565b6000806040838503121561254457600080fd5b823561254f816121b0565b915061255d602084016123f3565b90509250929050565b6000806040838503121561257957600080fd5b82359150602083013567ffffffffffffffff81111561259757600080fd5b6125a385828601612294565b9150509250929050565b600181811c908216806125c157607f821691505b6020821081036125e157634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526024908201527f4552433737373a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252602c908201527f4552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f60408201526b39103337b9103437b63232b960a11b606082015260800190565b60006020828403121561268957600080fd5b81516108ed816121b0565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c0608082018190526000906126cf90830185612171565b82810360a08401526126e18185612171565b9998505050505050505050565b8381526060602082015260006127076060830185612171565b82810360408401526127198185612171565b9695505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161275b816017850160208801612145565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161278c816028840160208801612145565b01602801949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156127c0576127c0612798565b500390565b634e487b7160e01b600052603260045260246000fd5b600082198211156127ee576127ee612798565b500190565b60008261281057634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561282f5761282f612798565b500290565b60008161284357612843612798565b506000190190565b634e487b7160e01b600052603160045260246000fdfe4552433737373a207472616e7366657220616d6f756e7420657863656564732062616c616e63654552433737373a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654552433737373a206275726e20616d6f756e7420657863656564732062616c616e6365a26469706673582212201a1cf4119107bd544a40eed9d0a9e12acb5a928e3a8f67eceffb2313dea4574e64736f6c634300080d0033"
            .parse()
            .expect("invalid bytecode")
    });
    pub struct HoprToken<M>(::ethers::contract::Contract<M>);
    impl<M> Clone for HoprToken<M> {
        fn clone(&self) -> Self {
            HoprToken(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for HoprToken<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for HoprToken<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(HoprToken)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> HoprToken<M> {
        /// Creates a new contract instance with the specified `ethers`
        /// client at the given `Address`. The contract derefs to a `ethers::Contract`
        /// object
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    HOPRTOKEN_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// 1. If there are no constructor arguments, you should pass `()` as the argument.
        /// 1. The default poll duration is 7 seconds.
        /// 1. The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter,"../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                HOPRTOKEN_ABI.clone(),
                HOPRTOKEN_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `DEFAULT_ADMIN_ROLE` (0xa217fddf) function
        pub fn default_admin_role(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([162, 23, 253, 223], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `MINTER_ROLE` (0xd5391393) function
        pub fn minter_role(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([213, 57, 19, 147], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `accountSnapshots` (0x2497aee6) function
        pub fn account_snapshots(
            &self,
            p0: ::ethers::core::types::Address,
            p1: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, (u128, u128)> {
            self.0
                .method_hash([36, 151, 174, 230], (p0, p1))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `allowance` (0xdd62ed3e) function
        pub fn allowance(
            &self,
            holder: ::ethers::core::types::Address,
            spender: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([221, 98, 237, 62], (holder, spender))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `approve` (0x095ea7b3) function
        pub fn approve(
            &self,
            spender: ::ethers::core::types::Address,
            value: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([9, 94, 167, 179], (spender, value))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `authorizeOperator` (0x959b8c3f) function
        pub fn authorize_operator(
            &self,
            operator: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([149, 155, 140, 63], operator)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `balanceOf` (0x70a08231) function
        pub fn balance_of(
            &self,
            token_holder: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([112, 160, 130, 49], token_holder)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `balanceOfAt` (0xf772a092) function
        pub fn balance_of_at(
            &self,
            owner: ::ethers::core::types::Address,
            block_number: u128,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([247, 114, 160, 146], (owner, block_number))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `burn` (0xfe9d9303) function
        pub fn burn(
            &self,
            amount: ::ethers::core::types::U256,
            data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([254, 157, 147, 3], (amount, data))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `decimals` (0x313ce567) function
        pub fn decimals(&self) -> ::ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([49, 60, 229, 103], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `defaultOperators` (0x06e48538) function
        pub fn default_operators(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<::ethers::core::types::Address>,
        > {
            self.0
                .method_hash([6, 228, 133, 56], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getRoleAdmin` (0x248a9ca3) function
        pub fn get_role_admin(
            &self,
            role: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([36, 138, 156, 163], role)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getRoleMember` (0x9010d07c) function
        pub fn get_role_member(
            &self,
            role: [u8; 32],
            index: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([144, 16, 208, 124], (role, index))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getRoleMemberCount` (0xca15c873) function
        pub fn get_role_member_count(
            &self,
            role: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([202, 21, 200, 115], role)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `grantRole` (0x2f2ff15d) function
        pub fn grant_role(
            &self,
            role: [u8; 32],
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([47, 47, 241, 93], (role, account))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `granularity` (0x556f0dc7) function
        pub fn granularity(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([85, 111, 13, 199], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `hasRole` (0x91d14854) function
        pub fn has_role(
            &self,
            role: [u8; 32],
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([145, 209, 72, 84], (role, account))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isOperatorFor` (0xd95b6371) function
        pub fn is_operator_for(
            &self,
            operator: ::ethers::core::types::Address,
            token_holder: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([217, 91, 99, 113], (operator, token_holder))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `mint` (0xdcdc7dd0) function
        pub fn mint(
            &self,
            account: ::ethers::core::types::Address,
            amount: ::ethers::core::types::U256,
            user_data: ::ethers::core::types::Bytes,
            operator_data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [220, 220, 125, 208],
                    (account, amount, user_data, operator_data),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `name` (0x06fdde03) function
        pub fn name(&self) -> ::ethers::contract::builders::ContractCall<M, String> {
            self.0
                .method_hash([6, 253, 222, 3], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `operatorBurn` (0xfc673c4f) function
        pub fn operator_burn(
            &self,
            account: ::ethers::core::types::Address,
            amount: ::ethers::core::types::U256,
            data: ::ethers::core::types::Bytes,
            operator_data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([252, 103, 60, 79], (account, amount, data, operator_data))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `operatorSend` (0x62ad1b83) function
        pub fn operator_send(
            &self,
            sender: ::ethers::core::types::Address,
            recipient: ::ethers::core::types::Address,
            amount: ::ethers::core::types::U256,
            data: ::ethers::core::types::Bytes,
            operator_data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [98, 173, 27, 131],
                    (sender, recipient, amount, data, operator_data),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `renounceRole` (0x36568abe) function
        pub fn renounce_role(
            &self,
            role: [u8; 32],
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([54, 86, 138, 190], (role, account))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `revokeOperator` (0xfad8b32a) function
        pub fn revoke_operator(
            &self,
            operator: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([250, 216, 179, 42], operator)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `revokeRole` (0xd547741f) function
        pub fn revoke_role(
            &self,
            role: [u8; 32],
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([213, 71, 116, 31], (role, account))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `send` (0x9bd9bbc6) function
        pub fn send(
            &self,
            recipient: ::ethers::core::types::Address,
            amount: ::ethers::core::types::U256,
            data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([155, 217, 187, 198], (recipient, amount, data))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `supportsInterface` (0x01ffc9a7) function
        pub fn supports_interface(
            &self,
            interface_id: [u8; 4],
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([1, 255, 201, 167], interface_id)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `symbol` (0x95d89b41) function
        pub fn symbol(&self) -> ::ethers::contract::builders::ContractCall<M, String> {
            self.0
                .method_hash([149, 216, 155, 65], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `totalSupply` (0x18160ddd) function
        pub fn total_supply(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([24, 22, 13, 221], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `totalSupplyAt` (0x947975d9) function
        pub fn total_supply_at(
            &self,
            block_number: u128,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([148, 121, 117, 217], block_number)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `totalSupplySnapshots` (0xb7d78b1a) function
        pub fn total_supply_snapshots(
            &self,
            p0: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, (u128, u128)> {
            self.0
                .method_hash([183, 215, 139, 26], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `transfer` (0xa9059cbb) function
        pub fn transfer(
            &self,
            recipient: ::ethers::core::types::Address,
            amount: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([169, 5, 156, 187], (recipient, amount))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `transferFrom` (0x23b872dd) function
        pub fn transfer_from(
            &self,
            holder: ::ethers::core::types::Address,
            recipient: ::ethers::core::types::Address,
            amount: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([35, 184, 114, 221], (holder, recipient, amount))
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `Approval` event
        pub fn approval_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, ApprovalFilter> {
            self.0.event()
        }
        ///Gets the contract's `AuthorizedOperator` event
        pub fn authorized_operator_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, AuthorizedOperatorFilter> {
            self.0.event()
        }
        ///Gets the contract's `Burned` event
        pub fn burned_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, BurnedFilter> {
            self.0.event()
        }
        ///Gets the contract's `Minted` event
        pub fn minted_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, MintedFilter> {
            self.0.event()
        }
        ///Gets the contract's `RevokedOperator` event
        pub fn revoked_operator_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, RevokedOperatorFilter> {
            self.0.event()
        }
        ///Gets the contract's `RoleAdminChanged` event
        pub fn role_admin_changed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, RoleAdminChangedFilter> {
            self.0.event()
        }
        ///Gets the contract's `RoleGranted` event
        pub fn role_granted_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, RoleGrantedFilter> {
            self.0.event()
        }
        ///Gets the contract's `RoleRevoked` event
        pub fn role_revoked_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, RoleRevokedFilter> {
            self.0.event()
        }
        ///Gets the contract's `Sent` event
        pub fn sent_filter(&self) -> ::ethers::contract::builders::Event<M, SentFilter> {
            self.0.event()
        }
        ///Gets the contract's `Transfer` event
        pub fn transfer_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, TransferFilter> {
            self.0.event()
        }
        /// Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract
        pub fn events(&self) -> ::ethers::contract::builders::Event<M, HoprTokenEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for HoprToken<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "Approval", abi = "Approval(address,address,uint256)")]
    pub struct ApprovalFilter {
        #[ethevent(indexed)]
        pub owner: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub spender: ::ethers::core::types::Address,
        pub value: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "AuthorizedOperator", abi = "AuthorizedOperator(address,address)")]
    pub struct AuthorizedOperatorFilter {
        #[ethevent(indexed)]
        pub operator: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub token_holder: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "Burned", abi = "Burned(address,address,uint256,bytes,bytes)")]
    pub struct BurnedFilter {
        #[ethevent(indexed)]
        pub operator: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub from: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
        pub data: ::ethers::core::types::Bytes,
        pub operator_data: ::ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "Minted", abi = "Minted(address,address,uint256,bytes,bytes)")]
    pub struct MintedFilter {
        #[ethevent(indexed)]
        pub operator: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub to: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
        pub data: ::ethers::core::types::Bytes,
        pub operator_data: ::ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "RevokedOperator", abi = "RevokedOperator(address,address)")]
    pub struct RevokedOperatorFilter {
        #[ethevent(indexed)]
        pub operator: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub token_holder: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(
        name = "RoleAdminChanged",
        abi = "RoleAdminChanged(bytes32,bytes32,bytes32)"
    )]
    pub struct RoleAdminChangedFilter {
        #[ethevent(indexed)]
        pub role: [u8; 32],
        #[ethevent(indexed)]
        pub previous_admin_role: [u8; 32],
        #[ethevent(indexed)]
        pub new_admin_role: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "RoleGranted", abi = "RoleGranted(bytes32,address,address)")]
    pub struct RoleGrantedFilter {
        #[ethevent(indexed)]
        pub role: [u8; 32],
        #[ethevent(indexed)]
        pub account: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub sender: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "RoleRevoked", abi = "RoleRevoked(bytes32,address,address)")]
    pub struct RoleRevokedFilter {
        #[ethevent(indexed)]
        pub role: [u8; 32],
        #[ethevent(indexed)]
        pub account: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub sender: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "Sent", abi = "Sent(address,address,address,uint256,bytes,bytes)")]
    pub struct SentFilter {
        #[ethevent(indexed)]
        pub operator: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub from: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub to: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
        pub data: ::ethers::core::types::Bytes,
        pub operator_data: ::ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "Transfer", abi = "Transfer(address,address,uint256)")]
    pub struct TransferFilter {
        #[ethevent(indexed)]
        pub from: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub to: ::ethers::core::types::Address,
        pub value: ::ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum HoprTokenEvents {
        ApprovalFilter(ApprovalFilter),
        AuthorizedOperatorFilter(AuthorizedOperatorFilter),
        BurnedFilter(BurnedFilter),
        MintedFilter(MintedFilter),
        RevokedOperatorFilter(RevokedOperatorFilter),
        RoleAdminChangedFilter(RoleAdminChangedFilter),
        RoleGrantedFilter(RoleGrantedFilter),
        RoleRevokedFilter(RoleRevokedFilter),
        SentFilter(SentFilter),
        TransferFilter(TransferFilter),
    }
    impl ::ethers::contract::EthLogDecode for HoprTokenEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = ApprovalFilter::decode_log(log) {
                return Ok(HoprTokenEvents::ApprovalFilter(decoded));
            }
            if let Ok(decoded) = AuthorizedOperatorFilter::decode_log(log) {
                return Ok(HoprTokenEvents::AuthorizedOperatorFilter(decoded));
            }
            if let Ok(decoded) = BurnedFilter::decode_log(log) {
                return Ok(HoprTokenEvents::BurnedFilter(decoded));
            }
            if let Ok(decoded) = MintedFilter::decode_log(log) {
                return Ok(HoprTokenEvents::MintedFilter(decoded));
            }
            if let Ok(decoded) = RevokedOperatorFilter::decode_log(log) {
                return Ok(HoprTokenEvents::RevokedOperatorFilter(decoded));
            }
            if let Ok(decoded) = RoleAdminChangedFilter::decode_log(log) {
                return Ok(HoprTokenEvents::RoleAdminChangedFilter(decoded));
            }
            if let Ok(decoded) = RoleGrantedFilter::decode_log(log) {
                return Ok(HoprTokenEvents::RoleGrantedFilter(decoded));
            }
            if let Ok(decoded) = RoleRevokedFilter::decode_log(log) {
                return Ok(HoprTokenEvents::RoleRevokedFilter(decoded));
            }
            if let Ok(decoded) = SentFilter::decode_log(log) {
                return Ok(HoprTokenEvents::SentFilter(decoded));
            }
            if let Ok(decoded) = TransferFilter::decode_log(log) {
                return Ok(HoprTokenEvents::TransferFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for HoprTokenEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                HoprTokenEvents::ApprovalFilter(element) => element.fmt(f),
                HoprTokenEvents::AuthorizedOperatorFilter(element) => element.fmt(f),
                HoprTokenEvents::BurnedFilter(element) => element.fmt(f),
                HoprTokenEvents::MintedFilter(element) => element.fmt(f),
                HoprTokenEvents::RevokedOperatorFilter(element) => element.fmt(f),
                HoprTokenEvents::RoleAdminChangedFilter(element) => element.fmt(f),
                HoprTokenEvents::RoleGrantedFilter(element) => element.fmt(f),
                HoprTokenEvents::RoleRevokedFilter(element) => element.fmt(f),
                HoprTokenEvents::SentFilter(element) => element.fmt(f),
                HoprTokenEvents::TransferFilter(element) => element.fmt(f),
            }
        }
    }
    ///Container type for all input parameters for the `DEFAULT_ADMIN_ROLE` function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "DEFAULT_ADMIN_ROLE", abi = "DEFAULT_ADMIN_ROLE()")]
    pub struct DefaultAdminRoleCall;
    ///Container type for all input parameters for the `MINTER_ROLE` function with signature `MINTER_ROLE()` and selector `0xd5391393`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "MINTER_ROLE", abi = "MINTER_ROLE()")]
    pub struct MinterRoleCall;
    ///Container type for all input parameters for the `accountSnapshots` function with signature `accountSnapshots(address,uint256)` and selector `0x2497aee6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "accountSnapshots", abi = "accountSnapshots(address,uint256)")]
    pub struct AccountSnapshotsCall(
        pub ::ethers::core::types::Address,
        pub ::ethers::core::types::U256,
    );
    ///Container type for all input parameters for the `allowance` function with signature `allowance(address,address)` and selector `0xdd62ed3e`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "allowance", abi = "allowance(address,address)")]
    pub struct AllowanceCall {
        pub holder: ::ethers::core::types::Address,
        pub spender: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `approve` function with signature `approve(address,uint256)` and selector `0x095ea7b3`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "approve", abi = "approve(address,uint256)")]
    pub struct ApproveCall {
        pub spender: ::ethers::core::types::Address,
        pub value: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `authorizeOperator` function with signature `authorizeOperator(address)` and selector `0x959b8c3f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "authorizeOperator", abi = "authorizeOperator(address)")]
    pub struct AuthorizeOperatorCall {
        pub operator: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `balanceOf` function with signature `balanceOf(address)` and selector `0x70a08231`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "balanceOf", abi = "balanceOf(address)")]
    pub struct BalanceOfCall {
        pub token_holder: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `balanceOfAt` function with signature `balanceOfAt(address,uint128)` and selector `0xf772a092`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "balanceOfAt", abi = "balanceOfAt(address,uint128)")]
    pub struct BalanceOfAtCall {
        pub owner: ::ethers::core::types::Address,
        pub block_number: u128,
    }
    ///Container type for all input parameters for the `burn` function with signature `burn(uint256,bytes)` and selector `0xfe9d9303`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "burn", abi = "burn(uint256,bytes)")]
    pub struct BurnCall {
        pub amount: ::ethers::core::types::U256,
        pub data: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `decimals` function with signature `decimals()` and selector `0x313ce567`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "decimals", abi = "decimals()")]
    pub struct DecimalsCall;
    ///Container type for all input parameters for the `defaultOperators` function with signature `defaultOperators()` and selector `0x06e48538`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "defaultOperators", abi = "defaultOperators()")]
    pub struct DefaultOperatorsCall;
    ///Container type for all input parameters for the `getRoleAdmin` function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "getRoleAdmin", abi = "getRoleAdmin(bytes32)")]
    pub struct GetRoleAdminCall {
        pub role: [u8; 32],
    }
    ///Container type for all input parameters for the `getRoleMember` function with signature `getRoleMember(bytes32,uint256)` and selector `0x9010d07c`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "getRoleMember", abi = "getRoleMember(bytes32,uint256)")]
    pub struct GetRoleMemberCall {
        pub role: [u8; 32],
        pub index: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `getRoleMemberCount` function with signature `getRoleMemberCount(bytes32)` and selector `0xca15c873`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "getRoleMemberCount", abi = "getRoleMemberCount(bytes32)")]
    pub struct GetRoleMemberCountCall {
        pub role: [u8; 32],
    }
    ///Container type for all input parameters for the `grantRole` function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "grantRole", abi = "grantRole(bytes32,address)")]
    pub struct GrantRoleCall {
        pub role: [u8; 32],
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `granularity` function with signature `granularity()` and selector `0x556f0dc7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "granularity", abi = "granularity()")]
    pub struct GranularityCall;
    ///Container type for all input parameters for the `hasRole` function with signature `hasRole(bytes32,address)` and selector `0x91d14854`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "hasRole", abi = "hasRole(bytes32,address)")]
    pub struct HasRoleCall {
        pub role: [u8; 32],
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `isOperatorFor` function with signature `isOperatorFor(address,address)` and selector `0xd95b6371`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "isOperatorFor", abi = "isOperatorFor(address,address)")]
    pub struct IsOperatorForCall {
        pub operator: ::ethers::core::types::Address,
        pub token_holder: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `mint` function with signature `mint(address,uint256,bytes,bytes)` and selector `0xdcdc7dd0`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "mint", abi = "mint(address,uint256,bytes,bytes)")]
    pub struct MintCall {
        pub account: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
        pub user_data: ::ethers::core::types::Bytes,
        pub operator_data: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `name` function with signature `name()` and selector `0x06fdde03`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "name", abi = "name()")]
    pub struct NameCall;
    ///Container type for all input parameters for the `operatorBurn` function with signature `operatorBurn(address,uint256,bytes,bytes)` and selector `0xfc673c4f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "operatorBurn", abi = "operatorBurn(address,uint256,bytes,bytes)")]
    pub struct OperatorBurnCall {
        pub account: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
        pub data: ::ethers::core::types::Bytes,
        pub operator_data: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `operatorSend` function with signature `operatorSend(address,address,uint256,bytes,bytes)` and selector `0x62ad1b83`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "operatorSend",
        abi = "operatorSend(address,address,uint256,bytes,bytes)"
    )]
    pub struct OperatorSendCall {
        pub sender: ::ethers::core::types::Address,
        pub recipient: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
        pub data: ::ethers::core::types::Bytes,
        pub operator_data: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `renounceRole` function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "renounceRole", abi = "renounceRole(bytes32,address)")]
    pub struct RenounceRoleCall {
        pub role: [u8; 32],
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `revokeOperator` function with signature `revokeOperator(address)` and selector `0xfad8b32a`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "revokeOperator", abi = "revokeOperator(address)")]
    pub struct RevokeOperatorCall {
        pub operator: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `revokeRole` function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "revokeRole", abi = "revokeRole(bytes32,address)")]
    pub struct RevokeRoleCall {
        pub role: [u8; 32],
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `send` function with signature `send(address,uint256,bytes)` and selector `0x9bd9bbc6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "send", abi = "send(address,uint256,bytes)")]
    pub struct SendCall {
        pub recipient: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
        pub data: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `supportsInterface` function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "supportsInterface", abi = "supportsInterface(bytes4)")]
    pub struct SupportsInterfaceCall {
        pub interface_id: [u8; 4],
    }
    ///Container type for all input parameters for the `symbol` function with signature `symbol()` and selector `0x95d89b41`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "symbol", abi = "symbol()")]
    pub struct SymbolCall;
    ///Container type for all input parameters for the `totalSupply` function with signature `totalSupply()` and selector `0x18160ddd`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "totalSupply", abi = "totalSupply()")]
    pub struct TotalSupplyCall;
    ///Container type for all input parameters for the `totalSupplyAt` function with signature `totalSupplyAt(uint128)` and selector `0x947975d9`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "totalSupplyAt", abi = "totalSupplyAt(uint128)")]
    pub struct TotalSupplyAtCall {
        pub block_number: u128,
    }
    ///Container type for all input parameters for the `totalSupplySnapshots` function with signature `totalSupplySnapshots(uint256)` and selector `0xb7d78b1a`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "totalSupplySnapshots", abi = "totalSupplySnapshots(uint256)")]
    pub struct TotalSupplySnapshotsCall(pub ::ethers::core::types::U256);
    ///Container type for all input parameters for the `transfer` function with signature `transfer(address,uint256)` and selector `0xa9059cbb`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "transfer", abi = "transfer(address,uint256)")]
    pub struct TransferCall {
        pub recipient: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `transferFrom` function with signature `transferFrom(address,address,uint256)` and selector `0x23b872dd`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "transferFrom", abi = "transferFrom(address,address,uint256)")]
    pub struct TransferFromCall {
        pub holder: ::ethers::core::types::Address,
        pub recipient: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum HoprTokenCalls {
        DefaultAdminRole(DefaultAdminRoleCall),
        MinterRole(MinterRoleCall),
        AccountSnapshots(AccountSnapshotsCall),
        Allowance(AllowanceCall),
        Approve(ApproveCall),
        AuthorizeOperator(AuthorizeOperatorCall),
        BalanceOf(BalanceOfCall),
        BalanceOfAt(BalanceOfAtCall),
        Burn(BurnCall),
        Decimals(DecimalsCall),
        DefaultOperators(DefaultOperatorsCall),
        GetRoleAdmin(GetRoleAdminCall),
        GetRoleMember(GetRoleMemberCall),
        GetRoleMemberCount(GetRoleMemberCountCall),
        GrantRole(GrantRoleCall),
        Granularity(GranularityCall),
        HasRole(HasRoleCall),
        IsOperatorFor(IsOperatorForCall),
        Mint(MintCall),
        Name(NameCall),
        OperatorBurn(OperatorBurnCall),
        OperatorSend(OperatorSendCall),
        RenounceRole(RenounceRoleCall),
        RevokeOperator(RevokeOperatorCall),
        RevokeRole(RevokeRoleCall),
        Send(SendCall),
        SupportsInterface(SupportsInterfaceCall),
        Symbol(SymbolCall),
        TotalSupply(TotalSupplyCall),
        TotalSupplyAt(TotalSupplyAtCall),
        TotalSupplySnapshots(TotalSupplySnapshotsCall),
        Transfer(TransferCall),
        TransferFrom(TransferFromCall),
    }
    impl ::ethers::core::abi::AbiDecode for HoprTokenCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::AbiError> {
            if let Ok(decoded)
                = <DefaultAdminRoleCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::DefaultAdminRole(decoded));
            }
            if let Ok(decoded)
                = <MinterRoleCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::MinterRole(decoded));
            }
            if let Ok(decoded)
                = <AccountSnapshotsCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::AccountSnapshots(decoded));
            }
            if let Ok(decoded)
                = <AllowanceCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::Allowance(decoded));
            }
            if let Ok(decoded)
                = <ApproveCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::Approve(decoded));
            }
            if let Ok(decoded)
                = <AuthorizeOperatorCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::AuthorizeOperator(decoded));
            }
            if let Ok(decoded)
                = <BalanceOfCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::BalanceOf(decoded));
            }
            if let Ok(decoded)
                = <BalanceOfAtCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::BalanceOfAt(decoded));
            }
            if let Ok(decoded)
                = <BurnCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(HoprTokenCalls::Burn(decoded));
            }
            if let Ok(decoded)
                = <DecimalsCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::Decimals(decoded));
            }
            if let Ok(decoded)
                = <DefaultOperatorsCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::DefaultOperators(decoded));
            }
            if let Ok(decoded)
                = <GetRoleAdminCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::GetRoleAdmin(decoded));
            }
            if let Ok(decoded)
                = <GetRoleMemberCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::GetRoleMember(decoded));
            }
            if let Ok(decoded)
                = <GetRoleMemberCountCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::GetRoleMemberCount(decoded));
            }
            if let Ok(decoded)
                = <GrantRoleCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::GrantRole(decoded));
            }
            if let Ok(decoded)
                = <GranularityCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::Granularity(decoded));
            }
            if let Ok(decoded)
                = <HasRoleCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::HasRole(decoded));
            }
            if let Ok(decoded)
                = <IsOperatorForCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::IsOperatorFor(decoded));
            }
            if let Ok(decoded)
                = <MintCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(HoprTokenCalls::Mint(decoded));
            }
            if let Ok(decoded)
                = <NameCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(HoprTokenCalls::Name(decoded));
            }
            if let Ok(decoded)
                = <OperatorBurnCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::OperatorBurn(decoded));
            }
            if let Ok(decoded)
                = <OperatorSendCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::OperatorSend(decoded));
            }
            if let Ok(decoded)
                = <RenounceRoleCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::RenounceRole(decoded));
            }
            if let Ok(decoded)
                = <RevokeOperatorCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::RevokeOperator(decoded));
            }
            if let Ok(decoded)
                = <RevokeRoleCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::RevokeRole(decoded));
            }
            if let Ok(decoded)
                = <SendCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(HoprTokenCalls::Send(decoded));
            }
            if let Ok(decoded)
                = <SupportsInterfaceCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::SupportsInterface(decoded));
            }
            if let Ok(decoded)
                = <SymbolCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(HoprTokenCalls::Symbol(decoded));
            }
            if let Ok(decoded)
                = <TotalSupplyCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::TotalSupply(decoded));
            }
            if let Ok(decoded)
                = <TotalSupplyAtCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::TotalSupplyAt(decoded));
            }
            if let Ok(decoded)
                = <TotalSupplySnapshotsCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::TotalSupplySnapshots(decoded));
            }
            if let Ok(decoded)
                = <TransferCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::Transfer(decoded));
            }
            if let Ok(decoded)
                = <TransferFromCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprTokenCalls::TransferFrom(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for HoprTokenCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                HoprTokenCalls::DefaultAdminRole(element) => element.encode(),
                HoprTokenCalls::MinterRole(element) => element.encode(),
                HoprTokenCalls::AccountSnapshots(element) => element.encode(),
                HoprTokenCalls::Allowance(element) => element.encode(),
                HoprTokenCalls::Approve(element) => element.encode(),
                HoprTokenCalls::AuthorizeOperator(element) => element.encode(),
                HoprTokenCalls::BalanceOf(element) => element.encode(),
                HoprTokenCalls::BalanceOfAt(element) => element.encode(),
                HoprTokenCalls::Burn(element) => element.encode(),
                HoprTokenCalls::Decimals(element) => element.encode(),
                HoprTokenCalls::DefaultOperators(element) => element.encode(),
                HoprTokenCalls::GetRoleAdmin(element) => element.encode(),
                HoprTokenCalls::GetRoleMember(element) => element.encode(),
                HoprTokenCalls::GetRoleMemberCount(element) => element.encode(),
                HoprTokenCalls::GrantRole(element) => element.encode(),
                HoprTokenCalls::Granularity(element) => element.encode(),
                HoprTokenCalls::HasRole(element) => element.encode(),
                HoprTokenCalls::IsOperatorFor(element) => element.encode(),
                HoprTokenCalls::Mint(element) => element.encode(),
                HoprTokenCalls::Name(element) => element.encode(),
                HoprTokenCalls::OperatorBurn(element) => element.encode(),
                HoprTokenCalls::OperatorSend(element) => element.encode(),
                HoprTokenCalls::RenounceRole(element) => element.encode(),
                HoprTokenCalls::RevokeOperator(element) => element.encode(),
                HoprTokenCalls::RevokeRole(element) => element.encode(),
                HoprTokenCalls::Send(element) => element.encode(),
                HoprTokenCalls::SupportsInterface(element) => element.encode(),
                HoprTokenCalls::Symbol(element) => element.encode(),
                HoprTokenCalls::TotalSupply(element) => element.encode(),
                HoprTokenCalls::TotalSupplyAt(element) => element.encode(),
                HoprTokenCalls::TotalSupplySnapshots(element) => element.encode(),
                HoprTokenCalls::Transfer(element) => element.encode(),
                HoprTokenCalls::TransferFrom(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for HoprTokenCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                HoprTokenCalls::DefaultAdminRole(element) => element.fmt(f),
                HoprTokenCalls::MinterRole(element) => element.fmt(f),
                HoprTokenCalls::AccountSnapshots(element) => element.fmt(f),
                HoprTokenCalls::Allowance(element) => element.fmt(f),
                HoprTokenCalls::Approve(element) => element.fmt(f),
                HoprTokenCalls::AuthorizeOperator(element) => element.fmt(f),
                HoprTokenCalls::BalanceOf(element) => element.fmt(f),
                HoprTokenCalls::BalanceOfAt(element) => element.fmt(f),
                HoprTokenCalls::Burn(element) => element.fmt(f),
                HoprTokenCalls::Decimals(element) => element.fmt(f),
                HoprTokenCalls::DefaultOperators(element) => element.fmt(f),
                HoprTokenCalls::GetRoleAdmin(element) => element.fmt(f),
                HoprTokenCalls::GetRoleMember(element) => element.fmt(f),
                HoprTokenCalls::GetRoleMemberCount(element) => element.fmt(f),
                HoprTokenCalls::GrantRole(element) => element.fmt(f),
                HoprTokenCalls::Granularity(element) => element.fmt(f),
                HoprTokenCalls::HasRole(element) => element.fmt(f),
                HoprTokenCalls::IsOperatorFor(element) => element.fmt(f),
                HoprTokenCalls::Mint(element) => element.fmt(f),
                HoprTokenCalls::Name(element) => element.fmt(f),
                HoprTokenCalls::OperatorBurn(element) => element.fmt(f),
                HoprTokenCalls::OperatorSend(element) => element.fmt(f),
                HoprTokenCalls::RenounceRole(element) => element.fmt(f),
                HoprTokenCalls::RevokeOperator(element) => element.fmt(f),
                HoprTokenCalls::RevokeRole(element) => element.fmt(f),
                HoprTokenCalls::Send(element) => element.fmt(f),
                HoprTokenCalls::SupportsInterface(element) => element.fmt(f),
                HoprTokenCalls::Symbol(element) => element.fmt(f),
                HoprTokenCalls::TotalSupply(element) => element.fmt(f),
                HoprTokenCalls::TotalSupplyAt(element) => element.fmt(f),
                HoprTokenCalls::TotalSupplySnapshots(element) => element.fmt(f),
                HoprTokenCalls::Transfer(element) => element.fmt(f),
                HoprTokenCalls::TransferFrom(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<DefaultAdminRoleCall> for HoprTokenCalls {
        fn from(var: DefaultAdminRoleCall) -> Self {
            HoprTokenCalls::DefaultAdminRole(var)
        }
    }
    impl ::std::convert::From<MinterRoleCall> for HoprTokenCalls {
        fn from(var: MinterRoleCall) -> Self {
            HoprTokenCalls::MinterRole(var)
        }
    }
    impl ::std::convert::From<AccountSnapshotsCall> for HoprTokenCalls {
        fn from(var: AccountSnapshotsCall) -> Self {
            HoprTokenCalls::AccountSnapshots(var)
        }
    }
    impl ::std::convert::From<AllowanceCall> for HoprTokenCalls {
        fn from(var: AllowanceCall) -> Self {
            HoprTokenCalls::Allowance(var)
        }
    }
    impl ::std::convert::From<ApproveCall> for HoprTokenCalls {
        fn from(var: ApproveCall) -> Self {
            HoprTokenCalls::Approve(var)
        }
    }
    impl ::std::convert::From<AuthorizeOperatorCall> for HoprTokenCalls {
        fn from(var: AuthorizeOperatorCall) -> Self {
            HoprTokenCalls::AuthorizeOperator(var)
        }
    }
    impl ::std::convert::From<BalanceOfCall> for HoprTokenCalls {
        fn from(var: BalanceOfCall) -> Self {
            HoprTokenCalls::BalanceOf(var)
        }
    }
    impl ::std::convert::From<BalanceOfAtCall> for HoprTokenCalls {
        fn from(var: BalanceOfAtCall) -> Self {
            HoprTokenCalls::BalanceOfAt(var)
        }
    }
    impl ::std::convert::From<BurnCall> for HoprTokenCalls {
        fn from(var: BurnCall) -> Self {
            HoprTokenCalls::Burn(var)
        }
    }
    impl ::std::convert::From<DecimalsCall> for HoprTokenCalls {
        fn from(var: DecimalsCall) -> Self {
            HoprTokenCalls::Decimals(var)
        }
    }
    impl ::std::convert::From<DefaultOperatorsCall> for HoprTokenCalls {
        fn from(var: DefaultOperatorsCall) -> Self {
            HoprTokenCalls::DefaultOperators(var)
        }
    }
    impl ::std::convert::From<GetRoleAdminCall> for HoprTokenCalls {
        fn from(var: GetRoleAdminCall) -> Self {
            HoprTokenCalls::GetRoleAdmin(var)
        }
    }
    impl ::std::convert::From<GetRoleMemberCall> for HoprTokenCalls {
        fn from(var: GetRoleMemberCall) -> Self {
            HoprTokenCalls::GetRoleMember(var)
        }
    }
    impl ::std::convert::From<GetRoleMemberCountCall> for HoprTokenCalls {
        fn from(var: GetRoleMemberCountCall) -> Self {
            HoprTokenCalls::GetRoleMemberCount(var)
        }
    }
    impl ::std::convert::From<GrantRoleCall> for HoprTokenCalls {
        fn from(var: GrantRoleCall) -> Self {
            HoprTokenCalls::GrantRole(var)
        }
    }
    impl ::std::convert::From<GranularityCall> for HoprTokenCalls {
        fn from(var: GranularityCall) -> Self {
            HoprTokenCalls::Granularity(var)
        }
    }
    impl ::std::convert::From<HasRoleCall> for HoprTokenCalls {
        fn from(var: HasRoleCall) -> Self {
            HoprTokenCalls::HasRole(var)
        }
    }
    impl ::std::convert::From<IsOperatorForCall> for HoprTokenCalls {
        fn from(var: IsOperatorForCall) -> Self {
            HoprTokenCalls::IsOperatorFor(var)
        }
    }
    impl ::std::convert::From<MintCall> for HoprTokenCalls {
        fn from(var: MintCall) -> Self {
            HoprTokenCalls::Mint(var)
        }
    }
    impl ::std::convert::From<NameCall> for HoprTokenCalls {
        fn from(var: NameCall) -> Self {
            HoprTokenCalls::Name(var)
        }
    }
    impl ::std::convert::From<OperatorBurnCall> for HoprTokenCalls {
        fn from(var: OperatorBurnCall) -> Self {
            HoprTokenCalls::OperatorBurn(var)
        }
    }
    impl ::std::convert::From<OperatorSendCall> for HoprTokenCalls {
        fn from(var: OperatorSendCall) -> Self {
            HoprTokenCalls::OperatorSend(var)
        }
    }
    impl ::std::convert::From<RenounceRoleCall> for HoprTokenCalls {
        fn from(var: RenounceRoleCall) -> Self {
            HoprTokenCalls::RenounceRole(var)
        }
    }
    impl ::std::convert::From<RevokeOperatorCall> for HoprTokenCalls {
        fn from(var: RevokeOperatorCall) -> Self {
            HoprTokenCalls::RevokeOperator(var)
        }
    }
    impl ::std::convert::From<RevokeRoleCall> for HoprTokenCalls {
        fn from(var: RevokeRoleCall) -> Self {
            HoprTokenCalls::RevokeRole(var)
        }
    }
    impl ::std::convert::From<SendCall> for HoprTokenCalls {
        fn from(var: SendCall) -> Self {
            HoprTokenCalls::Send(var)
        }
    }
    impl ::std::convert::From<SupportsInterfaceCall> for HoprTokenCalls {
        fn from(var: SupportsInterfaceCall) -> Self {
            HoprTokenCalls::SupportsInterface(var)
        }
    }
    impl ::std::convert::From<SymbolCall> for HoprTokenCalls {
        fn from(var: SymbolCall) -> Self {
            HoprTokenCalls::Symbol(var)
        }
    }
    impl ::std::convert::From<TotalSupplyCall> for HoprTokenCalls {
        fn from(var: TotalSupplyCall) -> Self {
            HoprTokenCalls::TotalSupply(var)
        }
    }
    impl ::std::convert::From<TotalSupplyAtCall> for HoprTokenCalls {
        fn from(var: TotalSupplyAtCall) -> Self {
            HoprTokenCalls::TotalSupplyAt(var)
        }
    }
    impl ::std::convert::From<TotalSupplySnapshotsCall> for HoprTokenCalls {
        fn from(var: TotalSupplySnapshotsCall) -> Self {
            HoprTokenCalls::TotalSupplySnapshots(var)
        }
    }
    impl ::std::convert::From<TransferCall> for HoprTokenCalls {
        fn from(var: TransferCall) -> Self {
            HoprTokenCalls::Transfer(var)
        }
    }
    impl ::std::convert::From<TransferFromCall> for HoprTokenCalls {
        fn from(var: TransferFromCall) -> Self {
            HoprTokenCalls::TransferFrom(var)
        }
    }
    ///Container type for all return fields from the `DEFAULT_ADMIN_ROLE` function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct DefaultAdminRoleReturn(pub [u8; 32]);
    ///Container type for all return fields from the `MINTER_ROLE` function with signature `MINTER_ROLE()` and selector `0xd5391393`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct MinterRoleReturn(pub [u8; 32]);
    ///Container type for all return fields from the `accountSnapshots` function with signature `accountSnapshots(address,uint256)` and selector `0x2497aee6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct AccountSnapshotsReturn {
        pub from_block: u128,
        pub value: u128,
    }
    ///Container type for all return fields from the `allowance` function with signature `allowance(address,address)` and selector `0xdd62ed3e`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct AllowanceReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `approve` function with signature `approve(address,uint256)` and selector `0x095ea7b3`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct ApproveReturn(pub bool);
    ///Container type for all return fields from the `balanceOf` function with signature `balanceOf(address)` and selector `0x70a08231`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct BalanceOfReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `balanceOfAt` function with signature `balanceOfAt(address,uint128)` and selector `0xf772a092`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct BalanceOfAtReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `decimals` function with signature `decimals()` and selector `0x313ce567`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct DecimalsReturn(pub u8);
    ///Container type for all return fields from the `defaultOperators` function with signature `defaultOperators()` and selector `0x06e48538`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct DefaultOperatorsReturn(
        pub ::std::vec::Vec<::ethers::core::types::Address>,
    );
    ///Container type for all return fields from the `getRoleAdmin` function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct GetRoleAdminReturn(pub [u8; 32]);
    ///Container type for all return fields from the `getRoleMember` function with signature `getRoleMember(bytes32,uint256)` and selector `0x9010d07c`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct GetRoleMemberReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `getRoleMemberCount` function with signature `getRoleMemberCount(bytes32)` and selector `0xca15c873`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct GetRoleMemberCountReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `granularity` function with signature `granularity()` and selector `0x556f0dc7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct GranularityReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `hasRole` function with signature `hasRole(bytes32,address)` and selector `0x91d14854`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct HasRoleReturn(pub bool);
    ///Container type for all return fields from the `isOperatorFor` function with signature `isOperatorFor(address,address)` and selector `0xd95b6371`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct IsOperatorForReturn(pub bool);
    ///Container type for all return fields from the `name` function with signature `name()` and selector `0x06fdde03`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct NameReturn(pub String);
    ///Container type for all return fields from the `supportsInterface` function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct SupportsInterfaceReturn(pub bool);
    ///Container type for all return fields from the `symbol` function with signature `symbol()` and selector `0x95d89b41`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct SymbolReturn(pub String);
    ///Container type for all return fields from the `totalSupply` function with signature `totalSupply()` and selector `0x18160ddd`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct TotalSupplyReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `totalSupplyAt` function with signature `totalSupplyAt(uint128)` and selector `0x947975d9`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct TotalSupplyAtReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `totalSupplySnapshots` function with signature `totalSupplySnapshots(uint256)` and selector `0xb7d78b1a`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct TotalSupplySnapshotsReturn {
        pub from_block: u128,
        pub value: u128,
    }
    ///Container type for all return fields from the `transfer` function with signature `transfer(address,uint256)` and selector `0xa9059cbb`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct TransferReturn(pub bool);
    ///Container type for all return fields from the `transferFrom` function with signature `transferFrom(address,address,uint256)` and selector `0x23b872dd`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct TransferFromReturn(pub bool);
}
