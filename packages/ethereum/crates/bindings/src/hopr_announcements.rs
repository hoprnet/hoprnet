pub use hopr_announcements::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod hopr_announcements {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pubkey\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\",\"components\":[]}],\"type\":\"error\",\"name\":\"PublicKeyDoesNotMatchSender\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes4\",\"name\":\"ip4\",\"type\":\"bytes4\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes2\",\"name\":\"port\",\"type\":\"bytes2\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"AddressAnnouncement4\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes16\",\"name\":\"ip6\",\"type\":\"bytes16\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes2\",\"name\":\"port\",\"type\":\"bytes2\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"AddressAnnouncement6\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secp256k1_x\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"ed25519_sig_0\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"ed25519_sig_1\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"ed25519_pub_key\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"KeyBindingEven\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secp256k1_x\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"ed25519_sig_0\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"ed25519_sig_1\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"ed25519_pub_key\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"KeyBindingOdd\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"RevokeAnnouncement\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"ip\",\"type\":\"bytes4\",\"components\":[]},{\"internalType\":\"bytes2\",\"name\":\"port\",\"type\":\"bytes2\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"announce4\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"ip\",\"type\":\"bytes16\",\"components\":[]},{\"internalType\":\"bytes2\",\"name\":\"port\",\"type\":\"bytes2\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"announce6\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secp256k1_x\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"secp256k1_y\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"ed25519_sig_0\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"ed25519_sig_1\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"ed25519_pub_key\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bindKeys\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secp256k1_x\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"secp256k1_y\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"ed25519_sig_0\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"ed25519_sig_1\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"ed25519_pub_key\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes4\",\"name\":\"ip\",\"type\":\"bytes4\",\"components\":[]},{\"internalType\":\"bytes2\",\"name\":\"port\",\"type\":\"bytes2\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bindKeysAnnounce4\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secp256k1_x\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"secp256k1_y\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"ed25519_sig_0\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"ed25519_sig_1\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"ed25519_pub_key\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes16\",\"name\":\"ip\",\"type\":\"bytes16\",\"components\":[]},{\"internalType\":\"bytes2\",\"name\":\"port\",\"type\":\"bytes2\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bindKeysAnnounce6\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"revoke\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static HOPRANNOUNCEMENTS_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(|| {
        ::ethers::core::utils::__serde_json::from_str(__ABI)
            .expect("ABI is always valid")
    });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        9,
        213,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        125,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        72,
        23,
        219,
        157,
        17,
        97,
        0,
        91,
        87,
        128,
        99,
        72,
        23,
        219,
        157,
        20,
        97,
        0,
        189,
        87,
        128,
        99,
        151,
        193,
        213,
        62,
        20,
        97,
        0,
        208,
        87,
        128,
        99,
        172,
        150,
        80,
        216,
        20,
        97,
        0,
        227,
        87,
        128,
        99,
        182,
        84,
        159,
        117,
        20,
        97,
        1,
        12,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        35,
        242,
        189,
        114,
        20,
        97,
        0,
        130,
        87,
        128,
        99,
        37,
        35,
        212,
        156,
        20,
        97,
        0,
        151,
        87,
        128,
        99,
        68,
        247,
        0,
        42,
        20,
        97,
        0,
        170,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        149,
        97,
        0,
        144,
        54,
        96,
        4,
        97,
        6,
        19,
        86,
        91,
        97,
        1,
        20,
        86,
        91,
        0,
        91,
        97,
        0,
        149,
        97,
        0,
        165,
        54,
        96,
        4,
        97,
        6,
        94,
        86,
        91,
        97,
        1,
        35,
        86,
        91,
        97,
        0,
        149,
        97,
        0,
        184,
        54,
        96,
        4,
        97,
        6,
        193,
        86,
        91,
        97,
        1,
        69,
        86,
        91,
        97,
        0,
        149,
        97,
        0,
        203,
        54,
        96,
        4,
        97,
        6,
        252,
        86,
        91,
        97,
        1,
        90,
        86,
        91,
        97,
        0,
        149,
        97,
        0,
        222,
        54,
        96,
        4,
        97,
        7,
        24,
        86,
        91,
        97,
        1,
        101,
        86,
        91,
        97,
        0,
        246,
        97,
        0,
        241,
        54,
        96,
        4,
        97,
        7,
        95,
        86,
        91,
        97,
        1,
        126,
        86,
        91,
        96,
        64,
        81,
        97,
        1,
        3,
        145,
        144,
        97,
        8,
        36,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        149,
        97,
        2,
        115,
        86,
        91,
        97,
        1,
        31,
        130,
        130,
        51,
        97,
        2,
        126,
        86,
        91,
        80,
        80,
        86,
        91,
        97,
        1,
        49,
        135,
        135,
        135,
        135,
        135,
        51,
        97,
        2,
        227,
        86,
        91,
        97,
        1,
        60,
        130,
        130,
        51,
        97,
        3,
        253,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        1,
        83,
        133,
        133,
        133,
        133,
        133,
        51,
        97,
        2,
        227,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        1,
        31,
        130,
        130,
        51,
        97,
        3,
        253,
        86,
        91,
        97,
        1,
        115,
        135,
        135,
        135,
        135,
        135,
        51,
        97,
        2,
        227,
        86,
        91,
        97,
        1,
        60,
        130,
        130,
        51,
        97,
        2,
        126,
        86,
        91,
        96,
        96,
        129,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        1,
        153,
        87,
        97,
        1,
        153,
        97,
        8,
        134,
        86,
        91,
        96,
        64,
        81,
        144,
        128,
        130,
        82,
        128,
        96,
        32,
        2,
        96,
        32,
        1,
        130,
        1,
        96,
        64,
        82,
        128,
        21,
        97,
        1,
        204,
        87,
        129,
        96,
        32,
        1,
        91,
        96,
        96,
        129,
        82,
        96,
        32,
        1,
        144,
        96,
        1,
        144,
        3,
        144,
        129,
        97,
        1,
        183,
        87,
        144,
        80,
        91,
        80,
        144,
        80,
        96,
        0,
        91,
        130,
        129,
        16,
        21,
        97,
        2,
        108,
        87,
        97,
        2,
        60,
        48,
        133,
        133,
        132,
        129,
        129,
        16,
        97,
        1,
        240,
        87,
        97,
        1,
        240,
        97,
        8,
        156,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        129,
        1,
        144,
        97,
        2,
        2,
        145,
        144,
        97,
        8,
        178,
        86,
        91,
        128,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        147,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        131,
        131,
        128,
        130,
        132,
        55,
        96,
        0,
        146,
        1,
        145,
        144,
        145,
        82,
        80,
        97,
        4,
        89,
        146,
        80,
        80,
        80,
        86,
        91,
        130,
        130,
        129,
        81,
        129,
        16,
        97,
        2,
        78,
        87,
        97,
        2,
        78,
        97,
        8,
        156,
        86,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        129,
        144,
        82,
        80,
        128,
        128,
        97,
        2,
        100,
        144,
        97,
        9,
        0,
        86,
        91,
        145,
        80,
        80,
        97,
        1,
        210,
        86,
        91,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        97,
        2,
        124,
        51,
        97,
        4,
        133,
        86,
        91,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        25,
        133,
        22,
        96,
        32,
        130,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        240,
        27,
        3,
        25,
        132,
        22,
        145,
        129,
        1,
        145,
        144,
        145,
        82,
        127,
        241,
        79,
        210,
        56,
        68,
        141,
        141,
        44,
        55,
        81,
        194,
        151,
        82,
        105,
        8,
        188,
        1,
        173,
        152,
        78,
        153,
        213,
        129,
        132,
        143,
        24,
        116,
        151,
        66,
        134,
        118,
        51,
        144,
        96,
        96,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        32,
        128,
        130,
        1,
        137,
        144,
        82,
        129,
        131,
        1,
        136,
        144,
        82,
        130,
        81,
        128,
        131,
        3,
        132,
        1,
        129,
        82,
        96,
        96,
        144,
        146,
        1,
        144,
        146,
        82,
        128,
        81,
        145,
        1,
        32,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        129,
        22,
        144,
        130,
        22,
        20,
        97,
        3,
        77,
        87,
        96,
        64,
        81,
        99,
        38,
        72,
        171,
        45,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        4,
        130,
        1,
        82,
        51,
        96,
        36,
        130,
        1,
        82,
        96,
        68,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        3,
        88,
        96,
        2,
        135,
        97,
        9,
        39,
        86,
        91,
        96,
        1,
        3,
        97,
        3,
        172,
        87,
        96,
        64,
        128,
        81,
        136,
        129,
        82,
        96,
        32,
        129,
        1,
        135,
        144,
        82,
        144,
        129,
        1,
        133,
        144,
        82,
        96,
        96,
        129,
        1,
        132,
        144,
        82,
        127,
        94,
        101,
        140,
        236,
        190,
        145,
        190,
        217,
        21,
        143,
        231,
        97,
        69,
        45,
        248,
        9,
        244,
        122,
        150,
        116,
        26,
        174,
        191,
        72,
        242,
        62,
        64,
        216,
        32,
        128,
        197,
        140,
        144,
        96,
        128,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        97,
        1,
        60,
        86,
        91,
        96,
        64,
        128,
        81,
        136,
        129,
        82,
        96,
        32,
        129,
        1,
        135,
        144,
        82,
        144,
        129,
        1,
        133,
        144,
        82,
        96,
        96,
        129,
        1,
        132,
        144,
        82,
        127,
        88,
        132,
        115,
        237,
        184,
        223,
        3,
        248,
        244,
        202,
        6,
        160,
        67,
        223,
        114,
        186,
        199,
        91,
        67,
        149,
        161,
        54,
        146,
        8,
        215,
        35,
        88,
        106,
        30,
        59,
        28,
        207,
        144,
        96,
        128,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        133,
        22,
        96,
        32,
        130,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        240,
        27,
        3,
        25,
        132,
        22,
        145,
        129,
        1,
        145,
        144,
        145,
        82,
        127,
        246,
        200,
        78,
        4,
        22,
        96,
        159,
        255,
        112,
        113,
        74,
        12,
        179,
        34,
        161,
        210,
        51,
        41,
        90,
        248,
        85,
        73,
        227,
        152,
        118,
        1,
        252,
        236,
        59,
        153,
        242,
        168,
        144,
        96,
        96,
        1,
        97,
        2,
        214,
        86,
        91,
        96,
        96,
        97,
        4,
        126,
        131,
        131,
        96,
        64,
        81,
        128,
        96,
        96,
        1,
        96,
        64,
        82,
        128,
        96,
        39,
        129,
        82,
        96,
        32,
        1,
        97,
        9,
        121,
        96,
        39,
        145,
        57,
        97,
        4,
        187,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        51,
        129,
        82,
        127,
        164,
        222,
        48,
        165,
        40,
        190,
        202,
        223,
        130,
        100,
        157,
        19,
        149,
        192,
        227,
        13,
        209,
        138,
        227,
        91,
        90,
        150,
        206,
        113,
        233,
        41,
        91,
        177,
        75,
        201,
        243,
        188,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        86,
        91,
        96,
        96,
        96,
        0,
        128,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        96,
        64,
        81,
        97,
        4,
        216,
        145,
        144,
        97,
        9,
        73,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        90,
        244,
        145,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        5,
        19,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        5,
        24,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        97,
        5,
        41,
        134,
        131,
        131,
        135,
        97,
        5,
        51,
        86,
        91,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        96,
        131,
        21,
        97,
        5,
        162,
        87,
        130,
        81,
        96,
        0,
        3,
        97,
        5,
        155,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        59,
        97,
        5,
        155,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        29,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        99,
        97,
        108,
        108,
        32,
        116,
        111,
        32,
        110,
        111,
        110,
        45,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        68,
        86,
        91,
        80,
        129,
        97,
        5,
        172,
        86,
        91,
        97,
        5,
        172,
        131,
        131,
        97,
        5,
        180,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        129,
        81,
        21,
        97,
        5,
        196,
        87,
        129,
        81,
        128,
        131,
        96,
        32,
        1,
        253,
        91,
        128,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        3,
        68,
        145,
        144,
        97,
        9,
        101,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        25,
        129,
        22,
        129,
        20,
        97,
        5,
        246,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        240,
        27,
        3,
        25,
        129,
        22,
        129,
        20,
        97,
        5,
        246,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        6,
        38,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        6,
        47,
        131,
        97,
        5,
        222,
        86,
        91,
        145,
        80,
        97,
        6,
        61,
        96,
        32,
        132,
        1,
        97,
        5,
        251,
        86,
        91,
        144,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        129,
        22,
        129,
        20,
        97,
        5,
        246,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        224,
        136,
        138,
        3,
        18,
        21,
        97,
        6,
        121,
        87,
        96,
        0,
        128,
        253,
        91,
        135,
        53,
        150,
        80,
        96,
        32,
        136,
        1,
        53,
        149,
        80,
        96,
        64,
        136,
        1,
        53,
        148,
        80,
        96,
        96,
        136,
        1,
        53,
        147,
        80,
        96,
        128,
        136,
        1,
        53,
        146,
        80,
        97,
        6,
        165,
        96,
        160,
        137,
        1,
        97,
        6,
        70,
        86,
        91,
        145,
        80,
        97,
        6,
        179,
        96,
        192,
        137,
        1,
        97,
        5,
        251,
        86,
        91,
        144,
        80,
        146,
        149,
        152,
        145,
        148,
        151,
        80,
        146,
        149,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        160,
        134,
        136,
        3,
        18,
        21,
        97,
        6,
        217,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        80,
        131,
        53,
        149,
        96,
        32,
        133,
        1,
        53,
        149,
        80,
        96,
        64,
        133,
        1,
        53,
        148,
        96,
        96,
        129,
        1,
        53,
        148,
        80,
        96,
        128,
        1,
        53,
        146,
        80,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        7,
        15,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        6,
        47,
        131,
        97,
        6,
        70,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        224,
        136,
        138,
        3,
        18,
        21,
        97,
        7,
        51,
        87,
        96,
        0,
        128,
        253,
        91,
        135,
        53,
        150,
        80,
        96,
        32,
        136,
        1,
        53,
        149,
        80,
        96,
        64,
        136,
        1,
        53,
        148,
        80,
        96,
        96,
        136,
        1,
        53,
        147,
        80,
        96,
        128,
        136,
        1,
        53,
        146,
        80,
        97,
        6,
        165,
        96,
        160,
        137,
        1,
        97,
        5,
        222,
        86,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        7,
        114,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        7,
        138,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        133,
        1,
        145,
        80,
        133,
        96,
        31,
        131,
        1,
        18,
        97,
        7,
        158,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        7,
        173,
        87,
        96,
        0,
        128,
        253,
        91,
        134,
        96,
        32,
        130,
        96,
        5,
        27,
        133,
        1,
        1,
        17,
        21,
        97,
        7,
        194,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        146,
        144,
        146,
        1,
        150,
        145,
        149,
        80,
        144,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        7,
        239,
        87,
        129,
        129,
        1,
        81,
        131,
        130,
        1,
        82,
        96,
        32,
        1,
        97,
        7,
        215,
        86,
        91,
        80,
        80,
        96,
        0,
        145,
        1,
        82,
        86,
        91,
        96,
        0,
        129,
        81,
        128,
        132,
        82,
        97,
        8,
        16,
        129,
        96,
        32,
        134,
        1,
        96,
        32,
        134,
        1,
        97,
        7,
        212,
        86,
        91,
        96,
        31,
        1,
        96,
        31,
        25,
        22,
        146,
        144,
        146,
        1,
        96,
        32,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        1,
        129,
        132,
        82,
        128,
        133,
        81,
        128,
        131,
        82,
        96,
        64,
        134,
        1,
        145,
        80,
        96,
        64,
        129,
        96,
        5,
        27,
        135,
        1,
        1,
        146,
        80,
        131,
        135,
        1,
        96,
        0,
        91,
        130,
        129,
        16,
        21,
        97,
        8,
        121,
        87,
        96,
        63,
        25,
        136,
        134,
        3,
        1,
        132,
        82,
        97,
        8,
        103,
        133,
        131,
        81,
        97,
        7,
        248,
        86,
        91,
        148,
        80,
        146,
        133,
        1,
        146,
        144,
        133,
        1,
        144,
        96,
        1,
        1,
        97,
        8,
        75,
        86,
        91,
        80,
        146,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        128,
        131,
        53,
        96,
        30,
        25,
        132,
        54,
        3,
        1,
        129,
        18,
        97,
        8,
        201,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        1,
        128,
        53,
        145,
        80,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        21,
        97,
        8,
        228,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        1,
        145,
        80,
        54,
        129,
        144,
        3,
        130,
        19,
        21,
        97,
        8,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        9,
        32,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        91,
        96,
        0,
        130,
        97,
        9,
        68,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        18,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        6,
        144,
        86,
        91,
        96,
        0,
        130,
        81,
        97,
        9,
        91,
        129,
        132,
        96,
        32,
        135,
        1,
        97,
        7,
        212,
        86,
        91,
        145,
        144,
        145,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        97,
        4,
        126,
        96,
        32,
        131,
        1,
        132,
        97,
        7,
        248,
        86,
        254,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        108,
        111,
        119,
        45,
        108,
        101,
        118,
        101,
        108,
        32,
        100,
        101,
        108,
        101,
        103,
        97,
        116,
        101,
        32,
        99,
        97,
        108,
        108,
        32,
        102,
        97,
        105,
        108,
        101,
        100,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        67,
        231,
        66,
        121,
        187,
        201,
        5,
        101,
        59,
        188,
        201,
        233,
        182,
        16,
        0,
        154,
        232,
        106,
        205,
        247,
        94,
        100,
        252,
        234,
        18,
        150,
        204,
        6,
        126,
        172,
        149,
        126,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static HOPRANNOUNCEMENTS_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        125,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        72,
        23,
        219,
        157,
        17,
        97,
        0,
        91,
        87,
        128,
        99,
        72,
        23,
        219,
        157,
        20,
        97,
        0,
        189,
        87,
        128,
        99,
        151,
        193,
        213,
        62,
        20,
        97,
        0,
        208,
        87,
        128,
        99,
        172,
        150,
        80,
        216,
        20,
        97,
        0,
        227,
        87,
        128,
        99,
        182,
        84,
        159,
        117,
        20,
        97,
        1,
        12,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        35,
        242,
        189,
        114,
        20,
        97,
        0,
        130,
        87,
        128,
        99,
        37,
        35,
        212,
        156,
        20,
        97,
        0,
        151,
        87,
        128,
        99,
        68,
        247,
        0,
        42,
        20,
        97,
        0,
        170,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        149,
        97,
        0,
        144,
        54,
        96,
        4,
        97,
        6,
        19,
        86,
        91,
        97,
        1,
        20,
        86,
        91,
        0,
        91,
        97,
        0,
        149,
        97,
        0,
        165,
        54,
        96,
        4,
        97,
        6,
        94,
        86,
        91,
        97,
        1,
        35,
        86,
        91,
        97,
        0,
        149,
        97,
        0,
        184,
        54,
        96,
        4,
        97,
        6,
        193,
        86,
        91,
        97,
        1,
        69,
        86,
        91,
        97,
        0,
        149,
        97,
        0,
        203,
        54,
        96,
        4,
        97,
        6,
        252,
        86,
        91,
        97,
        1,
        90,
        86,
        91,
        97,
        0,
        149,
        97,
        0,
        222,
        54,
        96,
        4,
        97,
        7,
        24,
        86,
        91,
        97,
        1,
        101,
        86,
        91,
        97,
        0,
        246,
        97,
        0,
        241,
        54,
        96,
        4,
        97,
        7,
        95,
        86,
        91,
        97,
        1,
        126,
        86,
        91,
        96,
        64,
        81,
        97,
        1,
        3,
        145,
        144,
        97,
        8,
        36,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        149,
        97,
        2,
        115,
        86,
        91,
        97,
        1,
        31,
        130,
        130,
        51,
        97,
        2,
        126,
        86,
        91,
        80,
        80,
        86,
        91,
        97,
        1,
        49,
        135,
        135,
        135,
        135,
        135,
        51,
        97,
        2,
        227,
        86,
        91,
        97,
        1,
        60,
        130,
        130,
        51,
        97,
        3,
        253,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        1,
        83,
        133,
        133,
        133,
        133,
        133,
        51,
        97,
        2,
        227,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        1,
        31,
        130,
        130,
        51,
        97,
        3,
        253,
        86,
        91,
        97,
        1,
        115,
        135,
        135,
        135,
        135,
        135,
        51,
        97,
        2,
        227,
        86,
        91,
        97,
        1,
        60,
        130,
        130,
        51,
        97,
        2,
        126,
        86,
        91,
        96,
        96,
        129,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        1,
        153,
        87,
        97,
        1,
        153,
        97,
        8,
        134,
        86,
        91,
        96,
        64,
        81,
        144,
        128,
        130,
        82,
        128,
        96,
        32,
        2,
        96,
        32,
        1,
        130,
        1,
        96,
        64,
        82,
        128,
        21,
        97,
        1,
        204,
        87,
        129,
        96,
        32,
        1,
        91,
        96,
        96,
        129,
        82,
        96,
        32,
        1,
        144,
        96,
        1,
        144,
        3,
        144,
        129,
        97,
        1,
        183,
        87,
        144,
        80,
        91,
        80,
        144,
        80,
        96,
        0,
        91,
        130,
        129,
        16,
        21,
        97,
        2,
        108,
        87,
        97,
        2,
        60,
        48,
        133,
        133,
        132,
        129,
        129,
        16,
        97,
        1,
        240,
        87,
        97,
        1,
        240,
        97,
        8,
        156,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        129,
        1,
        144,
        97,
        2,
        2,
        145,
        144,
        97,
        8,
        178,
        86,
        91,
        128,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        147,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        131,
        131,
        128,
        130,
        132,
        55,
        96,
        0,
        146,
        1,
        145,
        144,
        145,
        82,
        80,
        97,
        4,
        89,
        146,
        80,
        80,
        80,
        86,
        91,
        130,
        130,
        129,
        81,
        129,
        16,
        97,
        2,
        78,
        87,
        97,
        2,
        78,
        97,
        8,
        156,
        86,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        129,
        144,
        82,
        80,
        128,
        128,
        97,
        2,
        100,
        144,
        97,
        9,
        0,
        86,
        91,
        145,
        80,
        80,
        97,
        1,
        210,
        86,
        91,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        97,
        2,
        124,
        51,
        97,
        4,
        133,
        86,
        91,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        25,
        133,
        22,
        96,
        32,
        130,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        240,
        27,
        3,
        25,
        132,
        22,
        145,
        129,
        1,
        145,
        144,
        145,
        82,
        127,
        241,
        79,
        210,
        56,
        68,
        141,
        141,
        44,
        55,
        81,
        194,
        151,
        82,
        105,
        8,
        188,
        1,
        173,
        152,
        78,
        153,
        213,
        129,
        132,
        143,
        24,
        116,
        151,
        66,
        134,
        118,
        51,
        144,
        96,
        96,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        32,
        128,
        130,
        1,
        137,
        144,
        82,
        129,
        131,
        1,
        136,
        144,
        82,
        130,
        81,
        128,
        131,
        3,
        132,
        1,
        129,
        82,
        96,
        96,
        144,
        146,
        1,
        144,
        146,
        82,
        128,
        81,
        145,
        1,
        32,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        129,
        22,
        144,
        130,
        22,
        20,
        97,
        3,
        77,
        87,
        96,
        64,
        81,
        99,
        38,
        72,
        171,
        45,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        4,
        130,
        1,
        82,
        51,
        96,
        36,
        130,
        1,
        82,
        96,
        68,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        3,
        88,
        96,
        2,
        135,
        97,
        9,
        39,
        86,
        91,
        96,
        1,
        3,
        97,
        3,
        172,
        87,
        96,
        64,
        128,
        81,
        136,
        129,
        82,
        96,
        32,
        129,
        1,
        135,
        144,
        82,
        144,
        129,
        1,
        133,
        144,
        82,
        96,
        96,
        129,
        1,
        132,
        144,
        82,
        127,
        94,
        101,
        140,
        236,
        190,
        145,
        190,
        217,
        21,
        143,
        231,
        97,
        69,
        45,
        248,
        9,
        244,
        122,
        150,
        116,
        26,
        174,
        191,
        72,
        242,
        62,
        64,
        216,
        32,
        128,
        197,
        140,
        144,
        96,
        128,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        97,
        1,
        60,
        86,
        91,
        96,
        64,
        128,
        81,
        136,
        129,
        82,
        96,
        32,
        129,
        1,
        135,
        144,
        82,
        144,
        129,
        1,
        133,
        144,
        82,
        96,
        96,
        129,
        1,
        132,
        144,
        82,
        127,
        88,
        132,
        115,
        237,
        184,
        223,
        3,
        248,
        244,
        202,
        6,
        160,
        67,
        223,
        114,
        186,
        199,
        91,
        67,
        149,
        161,
        54,
        146,
        8,
        215,
        35,
        88,
        106,
        30,
        59,
        28,
        207,
        144,
        96,
        128,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        133,
        22,
        96,
        32,
        130,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        240,
        27,
        3,
        25,
        132,
        22,
        145,
        129,
        1,
        145,
        144,
        145,
        82,
        127,
        246,
        200,
        78,
        4,
        22,
        96,
        159,
        255,
        112,
        113,
        74,
        12,
        179,
        34,
        161,
        210,
        51,
        41,
        90,
        248,
        85,
        73,
        227,
        152,
        118,
        1,
        252,
        236,
        59,
        153,
        242,
        168,
        144,
        96,
        96,
        1,
        97,
        2,
        214,
        86,
        91,
        96,
        96,
        97,
        4,
        126,
        131,
        131,
        96,
        64,
        81,
        128,
        96,
        96,
        1,
        96,
        64,
        82,
        128,
        96,
        39,
        129,
        82,
        96,
        32,
        1,
        97,
        9,
        121,
        96,
        39,
        145,
        57,
        97,
        4,
        187,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        51,
        129,
        82,
        127,
        164,
        222,
        48,
        165,
        40,
        190,
        202,
        223,
        130,
        100,
        157,
        19,
        149,
        192,
        227,
        13,
        209,
        138,
        227,
        91,
        90,
        150,
        206,
        113,
        233,
        41,
        91,
        177,
        75,
        201,
        243,
        188,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        86,
        91,
        96,
        96,
        96,
        0,
        128,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        96,
        64,
        81,
        97,
        4,
        216,
        145,
        144,
        97,
        9,
        73,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        90,
        244,
        145,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        5,
        19,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        5,
        24,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        97,
        5,
        41,
        134,
        131,
        131,
        135,
        97,
        5,
        51,
        86,
        91,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        96,
        131,
        21,
        97,
        5,
        162,
        87,
        130,
        81,
        96,
        0,
        3,
        97,
        5,
        155,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        59,
        97,
        5,
        155,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        29,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        99,
        97,
        108,
        108,
        32,
        116,
        111,
        32,
        110,
        111,
        110,
        45,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        68,
        86,
        91,
        80,
        129,
        97,
        5,
        172,
        86,
        91,
        97,
        5,
        172,
        131,
        131,
        97,
        5,
        180,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        129,
        81,
        21,
        97,
        5,
        196,
        87,
        129,
        81,
        128,
        131,
        96,
        32,
        1,
        253,
        91,
        128,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        3,
        68,
        145,
        144,
        97,
        9,
        101,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        128,
        27,
        3,
        25,
        129,
        22,
        129,
        20,
        97,
        5,
        246,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        240,
        27,
        3,
        25,
        129,
        22,
        129,
        20,
        97,
        5,
        246,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        6,
        38,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        6,
        47,
        131,
        97,
        5,
        222,
        86,
        91,
        145,
        80,
        97,
        6,
        61,
        96,
        32,
        132,
        1,
        97,
        5,
        251,
        86,
        91,
        144,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        128,
        53,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        129,
        22,
        129,
        20,
        97,
        5,
        246,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        224,
        136,
        138,
        3,
        18,
        21,
        97,
        6,
        121,
        87,
        96,
        0,
        128,
        253,
        91,
        135,
        53,
        150,
        80,
        96,
        32,
        136,
        1,
        53,
        149,
        80,
        96,
        64,
        136,
        1,
        53,
        148,
        80,
        96,
        96,
        136,
        1,
        53,
        147,
        80,
        96,
        128,
        136,
        1,
        53,
        146,
        80,
        97,
        6,
        165,
        96,
        160,
        137,
        1,
        97,
        6,
        70,
        86,
        91,
        145,
        80,
        97,
        6,
        179,
        96,
        192,
        137,
        1,
        97,
        5,
        251,
        86,
        91,
        144,
        80,
        146,
        149,
        152,
        145,
        148,
        151,
        80,
        146,
        149,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        160,
        134,
        136,
        3,
        18,
        21,
        97,
        6,
        217,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        80,
        131,
        53,
        149,
        96,
        32,
        133,
        1,
        53,
        149,
        80,
        96,
        64,
        133,
        1,
        53,
        148,
        96,
        96,
        129,
        1,
        53,
        148,
        80,
        96,
        128,
        1,
        53,
        146,
        80,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        7,
        15,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        6,
        47,
        131,
        97,
        6,
        70,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        224,
        136,
        138,
        3,
        18,
        21,
        97,
        7,
        51,
        87,
        96,
        0,
        128,
        253,
        91,
        135,
        53,
        150,
        80,
        96,
        32,
        136,
        1,
        53,
        149,
        80,
        96,
        64,
        136,
        1,
        53,
        148,
        80,
        96,
        96,
        136,
        1,
        53,
        147,
        80,
        96,
        128,
        136,
        1,
        53,
        146,
        80,
        97,
        6,
        165,
        96,
        160,
        137,
        1,
        97,
        5,
        222,
        86,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        7,
        114,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        7,
        138,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        133,
        1,
        145,
        80,
        133,
        96,
        31,
        131,
        1,
        18,
        97,
        7,
        158,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        7,
        173,
        87,
        96,
        0,
        128,
        253,
        91,
        134,
        96,
        32,
        130,
        96,
        5,
        27,
        133,
        1,
        1,
        17,
        21,
        97,
        7,
        194,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        146,
        144,
        146,
        1,
        150,
        145,
        149,
        80,
        144,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        7,
        239,
        87,
        129,
        129,
        1,
        81,
        131,
        130,
        1,
        82,
        96,
        32,
        1,
        97,
        7,
        215,
        86,
        91,
        80,
        80,
        96,
        0,
        145,
        1,
        82,
        86,
        91,
        96,
        0,
        129,
        81,
        128,
        132,
        82,
        97,
        8,
        16,
        129,
        96,
        32,
        134,
        1,
        96,
        32,
        134,
        1,
        97,
        7,
        212,
        86,
        91,
        96,
        31,
        1,
        96,
        31,
        25,
        22,
        146,
        144,
        146,
        1,
        96,
        32,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        1,
        129,
        132,
        82,
        128,
        133,
        81,
        128,
        131,
        82,
        96,
        64,
        134,
        1,
        145,
        80,
        96,
        64,
        129,
        96,
        5,
        27,
        135,
        1,
        1,
        146,
        80,
        131,
        135,
        1,
        96,
        0,
        91,
        130,
        129,
        16,
        21,
        97,
        8,
        121,
        87,
        96,
        63,
        25,
        136,
        134,
        3,
        1,
        132,
        82,
        97,
        8,
        103,
        133,
        131,
        81,
        97,
        7,
        248,
        86,
        91,
        148,
        80,
        146,
        133,
        1,
        146,
        144,
        133,
        1,
        144,
        96,
        1,
        1,
        97,
        8,
        75,
        86,
        91,
        80,
        146,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        128,
        131,
        53,
        96,
        30,
        25,
        132,
        54,
        3,
        1,
        129,
        18,
        97,
        8,
        201,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        1,
        128,
        53,
        145,
        80,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        21,
        97,
        8,
        228,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        1,
        145,
        80,
        54,
        129,
        144,
        3,
        130,
        19,
        21,
        97,
        8,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        9,
        32,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        91,
        96,
        0,
        130,
        97,
        9,
        68,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        18,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        6,
        144,
        86,
        91,
        96,
        0,
        130,
        81,
        97,
        9,
        91,
        129,
        132,
        96,
        32,
        135,
        1,
        97,
        7,
        212,
        86,
        91,
        145,
        144,
        145,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        97,
        4,
        126,
        96,
        32,
        131,
        1,
        132,
        97,
        7,
        248,
        86,
        254,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        108,
        111,
        119,
        45,
        108,
        101,
        118,
        101,
        108,
        32,
        100,
        101,
        108,
        101,
        103,
        97,
        116,
        101,
        32,
        99,
        97,
        108,
        108,
        32,
        102,
        97,
        105,
        108,
        101,
        100,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        67,
        231,
        66,
        121,
        187,
        201,
        5,
        101,
        59,
        188,
        201,
        233,
        182,
        16,
        0,
        154,
        232,
        106,
        205,
        247,
        94,
        100,
        252,
        234,
        18,
        150,
        204,
        6,
        126,
        172,
        149,
        126,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static HOPRANNOUNCEMENTS_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct HoprAnnouncements<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for HoprAnnouncements<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for HoprAnnouncements<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for HoprAnnouncements<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for HoprAnnouncements<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(HoprAnnouncements)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> HoprAnnouncements<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    HOPRANNOUNCEMENTS_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                HOPRANNOUNCEMENTS_ABI.clone(),
                HOPRANNOUNCEMENTS_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `announce4` (0x4817db9d) function
        pub fn announce_4(
            &self,
            ip: [u8; 4],
            port: [u8; 2],
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([72, 23, 219, 157], (ip, port))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `announce6` (0x23f2bd72) function
        pub fn announce_6(
            &self,
            ip: [u8; 16],
            port: [u8; 2],
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 242, 189, 114], (ip, port))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `bindKeys` (0x44f7002a) function
        pub fn bind_keys(
            &self,
            secp_25_6k_1_x: [u8; 32],
            secp_25_6k_1_y: [u8; 32],
            ed_25519_sig_0: [u8; 32],
            ed_25519_sig_1: [u8; 32],
            ed_25519_pub_key: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [68, 247, 0, 42],
                    (
                        secp_25_6k_1_x,
                        secp_25_6k_1_y,
                        ed_25519_sig_0,
                        ed_25519_sig_1,
                        ed_25519_pub_key,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `bindKeysAnnounce4` (0x2523d49c) function
        pub fn bind_keys_announce_4(
            &self,
            secp_25_6k_1_x: [u8; 32],
            secp_25_6k_1_y: [u8; 32],
            ed_25519_sig_0: [u8; 32],
            ed_25519_sig_1: [u8; 32],
            ed_25519_pub_key: [u8; 32],
            ip: [u8; 4],
            port: [u8; 2],
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [37, 35, 212, 156],
                    (
                        secp_25_6k_1_x,
                        secp_25_6k_1_y,
                        ed_25519_sig_0,
                        ed_25519_sig_1,
                        ed_25519_pub_key,
                        ip,
                        port,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `bindKeysAnnounce6` (0x97c1d53e) function
        pub fn bind_keys_announce_6(
            &self,
            secp_25_6k_1_x: [u8; 32],
            secp_25_6k_1_y: [u8; 32],
            ed_25519_sig_0: [u8; 32],
            ed_25519_sig_1: [u8; 32],
            ed_25519_pub_key: [u8; 32],
            ip: [u8; 16],
            port: [u8; 2],
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [151, 193, 213, 62],
                    (
                        secp_25_6k_1_x,
                        secp_25_6k_1_y,
                        ed_25519_sig_0,
                        ed_25519_sig_1,
                        ed_25519_pub_key,
                        ip,
                        port,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `multicall` (0xac9650d8) function
        pub fn multicall(
            &self,
            data: ::std::vec::Vec<::ethers::core::types::Bytes>,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<::ethers::core::types::Bytes>,
        > {
            self.0
                .method_hash([172, 150, 80, 216], data)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `revoke` (0xb6549f75) function
        pub fn revoke(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([182, 84, 159, 117], ())
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `AddressAnnouncement4` event
        pub fn address_announcement_4_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            AddressAnnouncement4Filter,
        > {
            self.0.event()
        }
        ///Gets the contract's `AddressAnnouncement6` event
        pub fn address_announcement_6_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            AddressAnnouncement6Filter,
        > {
            self.0.event()
        }
        ///Gets the contract's `KeyBindingEven` event
        pub fn key_binding_even_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            KeyBindingEvenFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `KeyBindingOdd` event
        pub fn key_binding_odd_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            KeyBindingOddFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `RevokeAnnouncement` event
        pub fn revoke_announcement_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            RevokeAnnouncementFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            HoprAnnouncementsEvents,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for HoprAnnouncements<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `PublicKeyDoesNotMatchSender` with signature `PublicKeyDoesNotMatchSender(address,address)` and selector `0x4c91565a`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "PublicKeyDoesNotMatchSender",
        abi = "PublicKeyDoesNotMatchSender(address,address)"
    )]
    pub struct PublicKeyDoesNotMatchSender {
        pub pubkey: ::ethers::core::types::Address,
        pub sender: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "AddressAnnouncement4",
        abi = "AddressAnnouncement4(address,bytes4,bytes2)"
    )]
    pub struct AddressAnnouncement4Filter {
        pub node: ::ethers::core::types::Address,
        pub ip_4: [u8; 4],
        pub port: [u8; 2],
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "AddressAnnouncement6",
        abi = "AddressAnnouncement6(address,bytes16,bytes2)"
    )]
    pub struct AddressAnnouncement6Filter {
        pub node: ::ethers::core::types::Address,
        pub ip_6: [u8; 16],
        pub port: [u8; 2],
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "KeyBindingEven",
        abi = "KeyBindingEven(bytes32,bytes32,bytes32,bytes32)"
    )]
    pub struct KeyBindingEvenFilter {
        pub secp_25_6k_1_x: [u8; 32],
        pub ed_25519_sig_0: [u8; 32],
        pub ed_25519_sig_1: [u8; 32],
        pub ed_25519_pub_key: [u8; 32],
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "KeyBindingOdd",
        abi = "KeyBindingOdd(bytes32,bytes32,bytes32,bytes32)"
    )]
    pub struct KeyBindingOddFilter {
        pub secp_25_6k_1_x: [u8; 32],
        pub ed_25519_sig_0: [u8; 32],
        pub ed_25519_sig_1: [u8; 32],
        pub ed_25519_pub_key: [u8; 32],
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "RevokeAnnouncement", abi = "RevokeAnnouncement(address)")]
    pub struct RevokeAnnouncementFilter {
        pub node: ::ethers::core::types::Address,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum HoprAnnouncementsEvents {
        AddressAnnouncement4Filter(AddressAnnouncement4Filter),
        AddressAnnouncement6Filter(AddressAnnouncement6Filter),
        KeyBindingEvenFilter(KeyBindingEvenFilter),
        KeyBindingOddFilter(KeyBindingOddFilter),
        RevokeAnnouncementFilter(RevokeAnnouncementFilter),
    }
    impl ::ethers::contract::EthLogDecode for HoprAnnouncementsEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = AddressAnnouncement4Filter::decode_log(log) {
                return Ok(HoprAnnouncementsEvents::AddressAnnouncement4Filter(decoded));
            }
            if let Ok(decoded) = AddressAnnouncement6Filter::decode_log(log) {
                return Ok(HoprAnnouncementsEvents::AddressAnnouncement6Filter(decoded));
            }
            if let Ok(decoded) = KeyBindingEvenFilter::decode_log(log) {
                return Ok(HoprAnnouncementsEvents::KeyBindingEvenFilter(decoded));
            }
            if let Ok(decoded) = KeyBindingOddFilter::decode_log(log) {
                return Ok(HoprAnnouncementsEvents::KeyBindingOddFilter(decoded));
            }
            if let Ok(decoded) = RevokeAnnouncementFilter::decode_log(log) {
                return Ok(HoprAnnouncementsEvents::RevokeAnnouncementFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for HoprAnnouncementsEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::AddressAnnouncement4Filter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::AddressAnnouncement6Filter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::KeyBindingEvenFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::KeyBindingOddFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RevokeAnnouncementFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<AddressAnnouncement4Filter> for HoprAnnouncementsEvents {
        fn from(value: AddressAnnouncement4Filter) -> Self {
            Self::AddressAnnouncement4Filter(value)
        }
    }
    impl ::core::convert::From<AddressAnnouncement6Filter> for HoprAnnouncementsEvents {
        fn from(value: AddressAnnouncement6Filter) -> Self {
            Self::AddressAnnouncement6Filter(value)
        }
    }
    impl ::core::convert::From<KeyBindingEvenFilter> for HoprAnnouncementsEvents {
        fn from(value: KeyBindingEvenFilter) -> Self {
            Self::KeyBindingEvenFilter(value)
        }
    }
    impl ::core::convert::From<KeyBindingOddFilter> for HoprAnnouncementsEvents {
        fn from(value: KeyBindingOddFilter) -> Self {
            Self::KeyBindingOddFilter(value)
        }
    }
    impl ::core::convert::From<RevokeAnnouncementFilter> for HoprAnnouncementsEvents {
        fn from(value: RevokeAnnouncementFilter) -> Self {
            Self::RevokeAnnouncementFilter(value)
        }
    }
    ///Container type for all input parameters for the `announce4` function with signature `announce4(bytes4,bytes2)` and selector `0x4817db9d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "announce4", abi = "announce4(bytes4,bytes2)")]
    pub struct Announce4Call {
        pub ip: [u8; 4],
        pub port: [u8; 2],
    }
    ///Container type for all input parameters for the `announce6` function with signature `announce6(bytes16,bytes2)` and selector `0x23f2bd72`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "announce6", abi = "announce6(bytes16,bytes2)")]
    pub struct Announce6Call {
        pub ip: [u8; 16],
        pub port: [u8; 2],
    }
    ///Container type for all input parameters for the `bindKeys` function with signature `bindKeys(bytes32,bytes32,bytes32,bytes32,bytes32)` and selector `0x44f7002a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "bindKeys",
        abi = "bindKeys(bytes32,bytes32,bytes32,bytes32,bytes32)"
    )]
    pub struct BindKeysCall {
        pub secp_25_6k_1_x: [u8; 32],
        pub secp_25_6k_1_y: [u8; 32],
        pub ed_25519_sig_0: [u8; 32],
        pub ed_25519_sig_1: [u8; 32],
        pub ed_25519_pub_key: [u8; 32],
    }
    ///Container type for all input parameters for the `bindKeysAnnounce4` function with signature `bindKeysAnnounce4(bytes32,bytes32,bytes32,bytes32,bytes32,bytes4,bytes2)` and selector `0x2523d49c`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "bindKeysAnnounce4",
        abi = "bindKeysAnnounce4(bytes32,bytes32,bytes32,bytes32,bytes32,bytes4,bytes2)"
    )]
    pub struct BindKeysAnnounce4Call {
        pub secp_25_6k_1_x: [u8; 32],
        pub secp_25_6k_1_y: [u8; 32],
        pub ed_25519_sig_0: [u8; 32],
        pub ed_25519_sig_1: [u8; 32],
        pub ed_25519_pub_key: [u8; 32],
        pub ip: [u8; 4],
        pub port: [u8; 2],
    }
    ///Container type for all input parameters for the `bindKeysAnnounce6` function with signature `bindKeysAnnounce6(bytes32,bytes32,bytes32,bytes32,bytes32,bytes16,bytes2)` and selector `0x97c1d53e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "bindKeysAnnounce6",
        abi = "bindKeysAnnounce6(bytes32,bytes32,bytes32,bytes32,bytes32,bytes16,bytes2)"
    )]
    pub struct BindKeysAnnounce6Call {
        pub secp_25_6k_1_x: [u8; 32],
        pub secp_25_6k_1_y: [u8; 32],
        pub ed_25519_sig_0: [u8; 32],
        pub ed_25519_sig_1: [u8; 32],
        pub ed_25519_pub_key: [u8; 32],
        pub ip: [u8; 16],
        pub port: [u8; 2],
    }
    ///Container type for all input parameters for the `multicall` function with signature `multicall(bytes[])` and selector `0xac9650d8`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "multicall", abi = "multicall(bytes[])")]
    pub struct MulticallCall {
        pub data: ::std::vec::Vec<::ethers::core::types::Bytes>,
    }
    ///Container type for all input parameters for the `revoke` function with signature `revoke()` and selector `0xb6549f75`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "revoke", abi = "revoke()")]
    pub struct RevokeCall;
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum HoprAnnouncementsCalls {
        Announce4(Announce4Call),
        Announce6(Announce6Call),
        BindKeys(BindKeysCall),
        BindKeysAnnounce4(BindKeysAnnounce4Call),
        BindKeysAnnounce6(BindKeysAnnounce6Call),
        Multicall(MulticallCall),
        Revoke(RevokeCall),
    }
    impl ::ethers::core::abi::AbiDecode for HoprAnnouncementsCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <Announce4Call as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Announce4(decoded));
            }
            if let Ok(decoded)
                = <Announce6Call as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Announce6(decoded));
            }
            if let Ok(decoded)
                = <BindKeysCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::BindKeys(decoded));
            }
            if let Ok(decoded)
                = <BindKeysAnnounce4Call as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::BindKeysAnnounce4(decoded));
            }
            if let Ok(decoded)
                = <BindKeysAnnounce6Call as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::BindKeysAnnounce6(decoded));
            }
            if let Ok(decoded)
                = <MulticallCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Multicall(decoded));
            }
            if let Ok(decoded)
                = <RevokeCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Revoke(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for HoprAnnouncementsCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Announce4(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Announce6(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::BindKeys(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::BindKeysAnnounce4(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::BindKeysAnnounce6(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Multicall(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Revoke(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for HoprAnnouncementsCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Announce4(element) => ::core::fmt::Display::fmt(element, f),
                Self::Announce6(element) => ::core::fmt::Display::fmt(element, f),
                Self::BindKeys(element) => ::core::fmt::Display::fmt(element, f),
                Self::BindKeysAnnounce4(element) => ::core::fmt::Display::fmt(element, f),
                Self::BindKeysAnnounce6(element) => ::core::fmt::Display::fmt(element, f),
                Self::Multicall(element) => ::core::fmt::Display::fmt(element, f),
                Self::Revoke(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<Announce4Call> for HoprAnnouncementsCalls {
        fn from(value: Announce4Call) -> Self {
            Self::Announce4(value)
        }
    }
    impl ::core::convert::From<Announce6Call> for HoprAnnouncementsCalls {
        fn from(value: Announce6Call) -> Self {
            Self::Announce6(value)
        }
    }
    impl ::core::convert::From<BindKeysCall> for HoprAnnouncementsCalls {
        fn from(value: BindKeysCall) -> Self {
            Self::BindKeys(value)
        }
    }
    impl ::core::convert::From<BindKeysAnnounce4Call> for HoprAnnouncementsCalls {
        fn from(value: BindKeysAnnounce4Call) -> Self {
            Self::BindKeysAnnounce4(value)
        }
    }
    impl ::core::convert::From<BindKeysAnnounce6Call> for HoprAnnouncementsCalls {
        fn from(value: BindKeysAnnounce6Call) -> Self {
            Self::BindKeysAnnounce6(value)
        }
    }
    impl ::core::convert::From<MulticallCall> for HoprAnnouncementsCalls {
        fn from(value: MulticallCall) -> Self {
            Self::Multicall(value)
        }
    }
    impl ::core::convert::From<RevokeCall> for HoprAnnouncementsCalls {
        fn from(value: RevokeCall) -> Self {
            Self::Revoke(value)
        }
    }
    ///Container type for all return fields from the `multicall` function with signature `multicall(bytes[])` and selector `0xac9650d8`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct MulticallReturn {
        pub results: ::std::vec::Vec<::ethers::core::types::Bytes>,
    }
}
