pub use hopr_stake_2::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod hopr_stake_2 {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "HoprStake2 was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    # [rustfmt :: skip] const __ABI : & str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_lockToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"Claimed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"boostTokenId\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"factorRegistered\",\"type\":\"bool\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"Redeemed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"Released\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"RewardFueled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"Staked\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"Sync\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"BASIC_FACTOR_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"BOOST_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"FACTOR_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"LOCK_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"NFT_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IHoprBoost\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"PROGRAM_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"PROGRAM_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualLockedTokenAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"lastSyncTimestamp\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"cumulatedRewards\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"availableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claimRewards\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCumulatedRewardsIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftType\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"string\",\"name\":\"nftRank\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"hodler\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isNftTypeAndRankRedeemed1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTypeIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"string\",\"name\":\"nftRank\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"hodler\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isNftTypeAndRankRedeemed2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTypeIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"boostNumerator\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"hodler\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isNftTypeAndRankRedeemed3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftType\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"boostNumerator\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"hodler\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isNftTypeAndRankRedeemed4\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"onTokenTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"reclaimErc20Tokens\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"reclaimErc721Tokens\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"redeemedFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"redeemedFactorIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"redeemedNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"redeemedNftIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"stakedHoprTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sync\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"tokensReceived\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unlock\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unlockFor\",\"outputs\":[]}]" ;
    #[doc = r" The parsed JSON-ABI of the contract."]
    pub static HOPRSTAKE2_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers::core::utils::__serde_json::from_str(__ABI).expect("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static HOPRSTAKE2_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x6080604052600280546001600160a01b031990811673d057604a14982fe8d88c5fc25aac3267ea142a081790915560038054821673d4fdec44db9d44b8f2b6d529620f9c0c7066a2c1179055600480549091167343d13d7b83607f14335cf2cb75e87da369d056c71790553480156200007757600080fd5b50604051620029a6380380620029a68339810160408190526200009a91620002dc565b620000a5336200019a565b600180554660648114620000f157600280546001600160a01b038086166001600160a01b0319928316179092556003805485841690831617905560048054928816929091169190911790555b620000fc84620001ea565b6040516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b1580156200017657600080fd5b505af11580156200018b573d6000803e3d6000fd5b50505050505050505062000339565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200024a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620002b15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000241565b620002bc816200019a565b50565b80516001600160a01b0381168114620002d757600080fd5b919050565b60008060008060808587031215620002f357600080fd5b620002fe85620002bf565b93506200030e60208601620002bf565b92506200031e60408601620002bf565b91506200032e60608601620002bf565b905092959194509250565b61265d80620003496000396000f3fe608060405234801561001057600080fd5b50600436106101fa5760003560e01c80638c24add41161011a578063cbffa3c7116100ad578063dde499791161007c578063dde49979146104a8578063ef0526a2146104bb578063ef5cfb8c146104cc578063f2fde38b146104df578063f978fff1146104f257600080fd5b8063cbffa3c714610457578063ce23177e14610462578063d0c02d6314610475578063d0da68011461049557600080fd5b8063a4c0ed36116100e9578063a4c0ed3614610416578063a584119414610429578063a69df4b51461043c578063a83d1ed61461044457600080fd5b80638c24add4146103bc5780638da5cb5b146103df57806396a9cd7d146103f057806399248ea71461040357600080fd5b80635bbb63a6116101925780636aa8d4cf116101615780636aa8d4cf1461036d57806370af093414610376578063715018a61461038957806381128c1d1461039157600080fd5b80635bbb63a6146102ee5780635e5c06e2146102f95780635ef73d581461034e5780636067bc151461035a57600080fd5b80631fda9a02116101ce5780631fda9a021461029e57806348c64e41146102c95780634ad84b34146102dc57806356891412146102e557600080fd5b806223de29146101ff5780630a1a257a14610214578063150b7a02146102525780631f014d831461027e575b600080fd5b61021261020d366004611fc1565b61051b565b005b61023f61022236600461206c565b600560209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b610265610260366004612096565b6106c8565b6040516001600160e01b03199091168152602001610249565b61023f61028c366004612105565b60086020526000908152604090205481565b6004546102b1906001600160a01b031681565b6040516001600160a01b039091168152602001610249565b6102126102d736600461206c565b610b3f565b61023f600b5481565b61023f600a5481565b61023f6361e5685081565b61032e610307366004612105565b60096020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610249565b61023f64e8d4a5100081565b610212610368366004612105565b610cbd565b61023f61169b81565b61023f610384366004612105565b610e70565b610212610e81565b61023f61039f36600461206c565b600760209081526000928352604080842090915290825290205481565b6103cf6103ca3660046121ed565b610eb7565b6040519015158152602001610249565b6000546001600160a01b03166102b1565b6103cf6103fe366004612244565b611029565b6003546102b1906001600160a01b031681565b6103cf610424366004612292565b611186565b610212610437366004612105565b6112f3565b6102126112ff565b6103cf6104523660046122fd565b611308565b61023f636267dec081565b6103cf610470366004612329565b61145b565b61023f610483366004612105565b60066020526000908152604090205481565b6002546102b1906001600160a01b031681565b6102126104b6366004612105565b611575565b61023f69d3c21bcecceda100000081565b6102126104da366004612105565b61157e565b6102126104ed366004612105565b611590565b61023f610500366004612105565b6001600160a01b031660009081526009602052604090205490565b6003546001600160a01b031633146105895760405162461bcd60e51b815260206004820152602660248201527f486f70725374616b653a2053656e646572206d757374206265207778484f5052604482015265103a37b5b2b760d11b60648201526084015b60405180910390fd5b6001600160a01b03861630146106075760405162461bcd60e51b815260206004820152603760248201527f486f70725374616b653a204d7573742062652073656e64696e6720746f6b656e60448201527f7320746f20486f70725374616b6520636f6e74726163740000000000000000006064820152608401610580565b6000546001600160a01b0388811691161461067c5760405162461bcd60e51b815260206004820152602f60248201527f486f70725374616b653a204f6e6c7920616363657074206f776e657220746f2060448201526e70726f76696465207265776172647360881b6064820152608401610580565b84600b600082825461068e919061239b565b909155505060405185907f2bf52bcae319602514e02ff69bbe4b89a19718b96e7867044128ec872419437c90600090a25050505050505050565b6004546000906001600160a01b0316336001600160a01b0316146107545760405162461bcd60e51b815260206004820152603f60248201527f486f70725374616b653a2043616e6e6f7420536166655472616e73666572467260448201527f6f6d20746f6b656e73206f74686572207468616e20486f7072426f6f73742e006064820152608401610580565b636267dec04211156107c05760405162461bcd60e51b815260206004820152602f60248201527f486f70725374616b653a2050726f6772616d20656e6465642c2063616e6e6f7460448201526e103932b232b2b6903137b7b9ba399760891b6064820152608401610580565b6107c985611628565b6001600160a01b038516600081815260056020908152604080832060068084528285208054865291845291842089905593835290528154600192919061081090849061239b565b90915550506004805460405163562317c560e01b81529182018690526000916001600160a01b039091169063562317c590602401602060405180830381865afa158015610861573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088591906123b3565b6004805460405163225b377d60e21b81529182018890529192506000916001600160a01b03169063896cddf4906024016040805180830381865afa1580156108d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f591906123cc565b506001600160a01b0388166000908152600860205260408120549192505b81811015610aa2576001600160a01b0389811660009081526007602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018290529093919091169063896cddf4906024016040805180830381865afa158015610983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a791906123cc565b506004805460405163562317c560e01b815291820185905291925087916001600160a01b03169063562317c590602401602060405180830381865afa1580156109f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1891906123b3565b03610a8d5784811015610a4c576001600160a01b038b16600090815260076020908152604080832086845290915290208a90555b604051858210908b906001600160a01b038e16907f066d96cb280fccf3a0a3a5686966a801b2690a32ec98fd2711a4e09f345d935d90600090a45050610aa2565b50508080610a9a906123f0565b915050610913565b818103610b29576001600160a01b038916600081815260076020908152604080832086845282528083208c905592825260089052908120805460019290610aea90849061239b565b909155505060405160019089906001600160a01b038c16907f066d96cb280fccf3a0a3a5686966a801b2690a32ec98fd2711a4e09f345d935d90600090a45b50630a85bd0160e11b9998505050505050505050565b6000546001600160a01b03163314610b695760405162461bcd60e51b815260040161058090612409565b600260015403610bbb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610580565b60026001556004546001600160a01b0390811690831603610c2c5760405162461bcd60e51b815260206004820152602560248201527f486f70725374616b653a2043616e6e6f7420636c61696d20486f7072426f6f736044820152641d0813919560da1b6064820152608401610580565b816001600160a01b03166323b872dd30610c4e6000546001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101849052606401600060405180830381600087803b158015610c9d57600080fd5b505af1158015610cb1573d6000803e3d6000fd5b50506001805550505050565b6000546001600160a01b03163314610ce75760405162461bcd60e51b815260040161058090612409565b600260015403610d395760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610580565b60026001819055546000906001600160a01b0390811690831603610dd757600a546002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc691906123b3565b610dd0919061243e565b9050610e42565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f91906123b3565b90505b610e68610e576000546001600160a01b031690565b6001600160a01b03841690836116b3565b505060018055565b6000610e7b8261170a565b92915050565b6000546001600160a01b03163314610eab5760405162461bcd60e51b815260040161058090612409565b610eb560006118f1565b565b6000805b6001600160a01b03831660009081526006602052604090205481101561101c576001600160a01b0383811660009081526005602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018290529093919091169063896cddf4906024016040805180830381865afa158015610f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6791906123cc565b50875160208901206004805460405163c588ff8b60e01b815291820186905292935090916001600160a01b03169063c588ff8b90602401600060405180830381865afa158015610fbb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fe39190810190612485565b80519060200120148015610ff657508086145b156110075760019350505050611022565b50508080611014906123f0565b915050610ebb565b50600090505b9392505050565b6000805b6001600160a01b03831660009081526006602052604090205481101561101c576001600160a01b0383811660009081526005602090815260408083208584529091528082205460048054925163c87b56dd60e01b81529081018290529093919091169063c87b56dd90602401600060405180830381865afa1580156110b6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110de9190810190612485565b6004805460405163562317c560e01b815291820185905291925088916001600160a01b03169063562317c590602401602060405180830381865afa15801561112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114e91906123b3565b14801561116057506111608187611941565b156111715760019350505050611022565b5050808061117e906123f0565b91505061102d565b6002546000906001600160a01b031633146111f85760405162461bcd60e51b815260206004820152602c60248201527f486f70725374616b653a204f6e6c7920616363657074204c4f434b5f544f4b4560448201526b4e20696e207374616b696e6760a01b6064820152608401610580565b636267dec04211156112645760405162461bcd60e51b815260206004820152602f60248201527f486f70725374616b653a2050726f6772616d20656e6465642c2063616e6e6f7460448201526e1039ba30b5b29030b73cb6b7b9329760891b6064820152608401610580565b61126d84611628565b6001600160a01b0384166000908152600960205260408120805485929061129590849061239b565b9250508190555082600a60008282546112ae919061239b565b909155505060405183906001600160a01b038616907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90600090a35060019392505050565b6112fc81611628565b50565b610eb5336119ea565b6000805b6001600160a01b03831660009081526006602052604090205481101561101c576001600160a01b0383811660009081526005602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018290529093919091169063896cddf4906024016040805180830381865afa158015611394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b891906123cc565b506004805460405163562317c560e01b815291820185905291925088916001600160a01b03169063562317c590602401602060405180830381865afa158015611405573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142991906123b3565b14801561143557508086145b156114465760019350505050611022565b50508080611453906123f0565b91505061130c565b60008084846040516020016114719291906124fc565b604051602081830303815290604052905060005b6001600160a01b038416600090815260066020526040902054811015611569576001600160a01b0384811660009081526005602090815260408083208584529091528082205460048054925163c87b56dd60e01b81529081018290529093919091169063c87b56dd90602401600060405180830381865afa15801561150e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115369190810190612485565b90506115428185611941565b15611554576001945050505050611022565b50508080611561906123f0565b915050611485565b50600095945050505050565b6112fc816119ea565b61158781611628565b6112fc81611bc8565b6000546001600160a01b031633146115ba5760405162461bcd60e51b815260040161058090612409565b6001600160a01b03811661161f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610580565b6112fc816118f1565b60006116338261170a565b6001600160a01b03831660009081526009602052604081206002018054929350839290919061166390849061239b565b90915550506001600160a01b03821660008181526009602052604080822042600190910155518392917f99869d968ca3581a661f31abb3a6aa70ccec5cdc49855eab174cf9e00a2462db91a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611705908490611d59565b505050565b6001600160a01b03811660009081526009602090815260408083208151608081018352815481526001820154938101939093526002810154918301919091526003015460608201526361e568504211158061176d5750636267dec0816020015110155b1561177b5750600092915050565b805160009061178d9061169b90612538565b905060005b6001600160a01b038516600090815260086020526040902054811015611885576001600160a01b0385811660009081526007602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018290529093919091169063896cddf4906024016040805180830381865afa15801561181a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183e91906123cc565b508551909150819061185a9069d3c21bcecceda1000000611e2b565b6118649190612538565b61186e908561239b565b93505050808061187d906123f0565b915050611792565b5064e8d4a510006118b5636267dec06118af6361e568508660200151611e4190919063ffffffff16565b90611e2b565b6118cb636267dec06118af426361e56850611e41565b6118d5919061243e565b6118df9083612538565b6118e99190612557565b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805182516000918491849190849061195a90839061243e565b905060008461196a60018461243e565b8151811061197a5761197a612579565b01602001516001600160f81b0319169050602f60f81b81146119a457600095505050505050610e7b565b60006119b184602061243e565b6119bc906008612538565b90506000806119ca8761258f565b979094016020015196821c9690911c959095149550505050505092915050565b636267dec04211611a595760405162461bcd60e51b815260206004820152603360248201527f486f70725374616b653a2050726f6772616d206973206f6e676f696e672c206360448201527230b73737ba103ab73637b1b59039ba30b5b29760691b6064820152608401610580565b6001600160a01b038116600090815260096020526040902054611a7b82611628565b6001600160a01b0382166000908152600960205260408120819055600a8054839290611aa890849061243e565b90915550611ab7905082611bc8565b600254611ace906001600160a01b031683836116b3565b60005b6001600160a01b038316600090815260066020526040902054811015611b8d57600480546001600160a01b038581166000818152600560209081526040808320888452909152908190205490516323b872dd60e01b815230958101959095526024850191909152604484015216906323b872dd90606401600060405180830381600087803b158015611b6257600080fd5b505af1158015611b76573d6000803e3d6000fd5b505050508080611b85906123f0565b915050611ad1565b5060405181906001600160a01b038416907fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e90600090a35050565b6001600160a01b038116600090815260096020908152604080832081516080810183528154815260018201549381019390935260028101549183018290526003015460608301819052919291611c1d9161243e565b905060008111611c6f5760405162461bcd60e51b815260206004820152601b60248201527f486f70725374616b653a204e6f7468696e6720746f20636c61696d00000000006044820152606401610580565b6001600160a01b03831660009081526009602052604090206002810154600390910155600b54811115611cf05760405162461bcd60e51b8152602060048201526024808201527f486f70725374616b653a20496e73756666696369656e7420726577617264207060448201526337b7b61760e11b6064820152608401610580565b80600b6000828254611d02919061243e565b9091555050600354611d1e906001600160a01b031684836116b3565b60405181906001600160a01b038516907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a90600090a3505050565b6000611dae826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e519092919063ffffffff16565b8051909150156117055780806020019051810190611dcc91906125b6565b6117055760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610580565b6000818310611e3a5781611022565b5090919050565b600081831015611e3a5781611022565b60606118e9848460008585843b611eaa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610580565b600080866001600160a01b03168587604051611ec691906125d8565b60006040518083038185875af1925050503d8060008114611f03576040519150601f19603f3d011682016040523d82523d6000602084013e611f08565b606091505b5091509150611f18828286611f23565b979650505050505050565b60608315611f32575081611022565b825115611f425782518084602001fd5b8160405162461bcd60e51b815260040161058091906125f4565b80356001600160a01b0381168114611f7357600080fd5b919050565b60008083601f840112611f8a57600080fd5b50813567ffffffffffffffff811115611fa257600080fd5b602083019150836020828501011115611fba57600080fd5b9250929050565b60008060008060008060008060c0898b031215611fdd57600080fd5b611fe689611f5c565b9750611ff460208a01611f5c565b965061200260408a01611f5c565b955060608901359450608089013567ffffffffffffffff8082111561202657600080fd5b6120328c838d01611f78565b909650945060a08b013591508082111561204b57600080fd5b506120588b828c01611f78565b999c989b5096995094979396929594505050565b6000806040838503121561207f57600080fd5b61208883611f5c565b946020939093013593505050565b6000806000806000608086880312156120ae57600080fd5b6120b786611f5c565b94506120c560208701611f5c565b935060408601359250606086013567ffffffffffffffff8111156120e857600080fd5b6120f488828901611f78565b969995985093965092949392505050565b60006020828403121561211757600080fd5b61102282611f5c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561215f5761215f612120565b604052919050565b600067ffffffffffffffff82111561218157612181612120565b50601f01601f191660200190565b60006121a261219d84612167565b612136565b90508281528383830111156121b657600080fd5b828260208301376000602084830101529392505050565b600082601f8301126121de57600080fd5b6110228383356020850161218f565b60008060006060848603121561220257600080fd5b833567ffffffffffffffff81111561221957600080fd5b612225868287016121cd565b9350506020840135915061223b60408501611f5c565b90509250925092565b60008060006060848603121561225957600080fd5b83359250602084013567ffffffffffffffff81111561227757600080fd5b612283868287016121cd565b92505061223b60408501611f5c565b6000806000606084860312156122a757600080fd5b6122b084611f5c565b925060208401359150604084013567ffffffffffffffff8111156122d357600080fd5b8401601f810186136122e457600080fd5b6122f38682356020840161218f565b9150509250925092565b60008060006060848603121561231257600080fd5b833592506020840135915061223b60408501611f5c565b60008060006060848603121561233e57600080fd5b833567ffffffffffffffff8082111561235657600080fd5b612362878388016121cd565b9450602086013591508082111561237857600080fd5b50612283868287016121cd565b634e487b7160e01b600052601160045260246000fd5b600082198211156123ae576123ae612385565b500190565b6000602082840312156123c557600080fd5b5051919050565b600080604083850312156123df57600080fd5b505080516020909101519092909150565b60006001820161240257612402612385565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008282101561245057612450612385565b500390565b60005b83811015612470578181015183820152602001612458565b8381111561247f576000848401525b50505050565b60006020828403121561249757600080fd5b815167ffffffffffffffff8111156124ae57600080fd5b8201601f810184136124bf57600080fd5b80516124cd61219d82612167565b8181528560208385010111156124e257600080fd5b6124f3826020830160208601612455565b95945050505050565b6000835161250e818460208801612455565b602f60f81b908301908152835161252c816001840160208801612455565b01600101949350505050565b600081600019048311821515161561255257612552612385565b500290565b60008261257457634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b805160208083015191908110156125b0576000198160200360031b1b821691505b50919050565b6000602082840312156125c857600080fd5b8151801515811461102257600080fd5b600082516125ea818460208701612455565b9190910192915050565b6020815260008251806020840152612613816040850160208701612455565b601f01601f1916919091016040019291505056fea2646970667358221220684713a2dcc515b7c9feb6b5440c23fda64022c3c681a5233acd94bb4bfac06964736f6c634300080d0033" . parse () . expect ("invalid bytecode")
        });
    pub struct HoprStake2<M>(ethers::contract::Contract<M>);
    impl<M> Clone for HoprStake2<M> {
        fn clone(&self) -> Self {
            HoprStake2(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for HoprStake2<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for HoprStake2<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(HoprStake2))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> HoprStake2<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), HOPRSTAKE2_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                HOPRSTAKE2_ABI.clone(),
                HOPRSTAKE2_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `BASIC_FACTOR_NUMERATOR` (0x6aa8d4cf) function"]
        pub fn basic_factor_numerator(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([106, 168, 212, 207], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `BOOST_CAP` (0xef0526a2) function"]
        pub fn boost_cap(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([239, 5, 38, 162], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `FACTOR_DENOMINATOR` (0x5ef73d58) function"]
        pub fn factor_denominator(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([94, 247, 61, 88], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `LOCK_TOKEN` (0xd0da6801) function"]
        pub fn lock_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([208, 218, 104, 1], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `NFT_CONTRACT` (0x1fda9a02) function"]
        pub fn nft_contract(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([31, 218, 154, 2], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `PROGRAM_END` (0xcbffa3c7) function"]
        pub fn program_end(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([203, 255, 163, 199], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `PROGRAM_START` (0x5bbb63a6) function"]
        pub fn program_start(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([91, 187, 99, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `REWARD_TOKEN` (0x99248ea7) function"]
        pub fn reward_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([153, 36, 142, 167], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `accounts` (0x5e5c06e2) function"]
        pub fn accounts(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([94, 92, 6, 226], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `availableReward` (0x4ad84b34) function"]
        pub fn available_reward(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([74, 216, 75, 52], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `claimRewards` (0xef5cfb8c) function"]
        pub fn claim_rewards(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([239, 92, 251, 140], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getCumulatedRewardsIncrement` (0x70af0934) function"]
        pub fn get_cumulated_rewards_increment(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([112, 175, 9, 52], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isNftTypeAndRankRedeemed1` (0xce23177e) function"]
        pub fn is_nft_type_and_rank_redeemed_1(
            &self,
            nft_type: String,
            nft_rank: String,
            hodler: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([206, 35, 23, 126], (nft_type, nft_rank, hodler))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isNftTypeAndRankRedeemed2` (0x96a9cd7d) function"]
        pub fn is_nft_type_and_rank_redeemed_2(
            &self,
            nft_type_index: ethers::core::types::U256,
            nft_rank: String,
            hodler: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([150, 169, 205, 125], (nft_type_index, nft_rank, hodler))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isNftTypeAndRankRedeemed3` (0xa83d1ed6) function"]
        pub fn is_nft_type_and_rank_redeemed_3(
            &self,
            nft_type_index: ethers::core::types::U256,
            boost_numerator: ethers::core::types::U256,
            hodler: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash(
                    [168, 61, 30, 214],
                    (nft_type_index, boost_numerator, hodler),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isNftTypeAndRankRedeemed4` (0x8c24add4) function"]
        pub fn is_nft_type_and_rank_redeemed_4(
            &self,
            nft_type: String,
            boost_numerator: ethers::core::types::U256,
            hodler: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([140, 36, 173, 212], (nft_type, boost_numerator, hodler))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `onERC721Received` (0x150b7a02) function"]
        pub fn on_erc721_received(
            &self,
            operator: ethers::core::types::Address,
            from: ethers::core::types::Address,
            token_id: ethers::core::types::U256,
            data: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, [u8; 4]> {
            self.0
                .method_hash([21, 11, 122, 2], (operator, from, token_id, data))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `onTokenTransfer` (0xa4c0ed36) function"]
        pub fn on_token_transfer(
            &self,
            from: ethers::core::types::Address,
            value: ethers::core::types::U256,
            data: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([164, 192, 237, 54], (from, value, data))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `owner` (0x8da5cb5b) function"]
        pub fn owner(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `reclaimErc20Tokens` (0x6067bc15) function"]
        pub fn reclaim_erc_20_tokens(
            &self,
            token_address: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([96, 103, 188, 21], token_address)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `reclaimErc721Tokens` (0x48c64e41) function"]
        pub fn reclaim_erc_721_tokens(
            &self,
            token_address: ethers::core::types::Address,
            token_id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([72, 198, 78, 65], (token_address, token_id))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `redeemedFactor` (0x81128c1d) function"]
        pub fn redeemed_factor(
            &self,
            p0: ethers::core::types::Address,
            p1: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([129, 18, 140, 29], (p0, p1))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `redeemedFactorIndex` (0x1f014d83) function"]
        pub fn redeemed_factor_index(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([31, 1, 77, 131], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `redeemedNft` (0x0a1a257a) function"]
        pub fn redeemed_nft(
            &self,
            p0: ethers::core::types::Address,
            p1: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([10, 26, 37, 122], (p0, p1))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `redeemedNftIndex` (0xd0c02d63) function"]
        pub fn redeemed_nft_index(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([208, 192, 45, 99], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `renounceOwnership` (0x715018a6) function"]
        pub fn renounce_ownership(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `stakedHoprTokens` (0xf978fff1) function"]
        pub fn staked_hopr_tokens(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([249, 120, 255, 241], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `sync` (0xa5841194) function"]
        pub fn sync(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([165, 132, 17, 148], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tokensReceived` (0x0023de29) function"]
        pub fn tokens_received(
            &self,
            operator: ethers::core::types::Address,
            from: ethers::core::types::Address,
            to: ethers::core::types::Address,
            amount: ethers::core::types::U256,
            user_data: ethers::core::types::Bytes,
            operator_data: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [0, 35, 222, 41],
                    (operator, from, to, amount, user_data, operator_data),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `totalLocked` (0x56891412) function"]
        pub fn total_locked(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([86, 137, 20, 18], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferOwnership` (0xf2fde38b) function"]
        pub fn transfer_ownership(
            &self,
            new_owner: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `unlock` (0xa69df4b5) function"]
        pub fn unlock(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([166, 157, 244, 181], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `unlockFor` (0xdde49979) function"]
        pub fn unlock_for(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([221, 228, 153, 121], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `Claimed` event"]
        pub fn claimed_filter(&self) -> ethers::contract::builders::Event<M, ClaimedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `OwnershipTransferred` event"]
        pub fn ownership_transferred_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, OwnershipTransferredFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Redeemed` event"]
        pub fn redeemed_filter(&self) -> ethers::contract::builders::Event<M, RedeemedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Released` event"]
        pub fn released_filter(&self) -> ethers::contract::builders::Event<M, ReleasedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `RewardFueled` event"]
        pub fn reward_fueled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, RewardFueledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Staked` event"]
        pub fn staked_filter(&self) -> ethers::contract::builders::Event<M, StakedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Sync` event"]
        pub fn sync_filter(&self) -> ethers::contract::builders::Event<M, SyncFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, HoprStake2Events> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for HoprStake2<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "Claimed", abi = "Claimed(address,uint256)")]
    pub struct ClaimedFilter {
        #[ethevent(indexed)]
        pub account: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub reward_amount: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub previous_owner: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "Redeemed", abi = "Redeemed(address,uint256,bool)")]
    pub struct RedeemedFilter {
        #[ethevent(indexed)]
        pub account: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub boost_token_id: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub factor_registered: bool,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "Released", abi = "Released(address,uint256)")]
    pub struct ReleasedFilter {
        #[ethevent(indexed)]
        pub account: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub actual_amount: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "RewardFueled", abi = "RewardFueled(uint256)")]
    pub struct RewardFueledFilter {
        #[ethevent(indexed)]
        pub amount: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "Staked", abi = "Staked(address,uint256)")]
    pub struct StakedFilter {
        #[ethevent(indexed)]
        pub account: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub actual_amount: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "Sync", abi = "Sync(address,uint256)")]
    pub struct SyncFilter {
        #[ethevent(indexed)]
        pub account: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub increment: ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum HoprStake2Events {
        ClaimedFilter(ClaimedFilter),
        OwnershipTransferredFilter(OwnershipTransferredFilter),
        RedeemedFilter(RedeemedFilter),
        ReleasedFilter(ReleasedFilter),
        RewardFueledFilter(RewardFueledFilter),
        StakedFilter(StakedFilter),
        SyncFilter(SyncFilter),
    }
    impl ethers::contract::EthLogDecode for HoprStake2Events {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = ClaimedFilter::decode_log(log) {
                return Ok(HoprStake2Events::ClaimedFilter(decoded));
            }
            if let Ok(decoded) = OwnershipTransferredFilter::decode_log(log) {
                return Ok(HoprStake2Events::OwnershipTransferredFilter(decoded));
            }
            if let Ok(decoded) = RedeemedFilter::decode_log(log) {
                return Ok(HoprStake2Events::RedeemedFilter(decoded));
            }
            if let Ok(decoded) = ReleasedFilter::decode_log(log) {
                return Ok(HoprStake2Events::ReleasedFilter(decoded));
            }
            if let Ok(decoded) = RewardFueledFilter::decode_log(log) {
                return Ok(HoprStake2Events::RewardFueledFilter(decoded));
            }
            if let Ok(decoded) = StakedFilter::decode_log(log) {
                return Ok(HoprStake2Events::StakedFilter(decoded));
            }
            if let Ok(decoded) = SyncFilter::decode_log(log) {
                return Ok(HoprStake2Events::SyncFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for HoprStake2Events {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                HoprStake2Events::ClaimedFilter(element) => element.fmt(f),
                HoprStake2Events::OwnershipTransferredFilter(element) => element.fmt(f),
                HoprStake2Events::RedeemedFilter(element) => element.fmt(f),
                HoprStake2Events::ReleasedFilter(element) => element.fmt(f),
                HoprStake2Events::RewardFueledFilter(element) => element.fmt(f),
                HoprStake2Events::StakedFilter(element) => element.fmt(f),
                HoprStake2Events::SyncFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `BASIC_FACTOR_NUMERATOR` function with signature `BASIC_FACTOR_NUMERATOR()` and selector `[106, 168, 212, 207]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "BASIC_FACTOR_NUMERATOR", abi = "BASIC_FACTOR_NUMERATOR()")]
    pub struct BasicFactorNumeratorCall;
    #[doc = "Container type for all input parameters for the `BOOST_CAP` function with signature `BOOST_CAP()` and selector `[239, 5, 38, 162]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "BOOST_CAP", abi = "BOOST_CAP()")]
    pub struct BoostCapCall;
    #[doc = "Container type for all input parameters for the `FACTOR_DENOMINATOR` function with signature `FACTOR_DENOMINATOR()` and selector `[94, 247, 61, 88]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "FACTOR_DENOMINATOR", abi = "FACTOR_DENOMINATOR()")]
    pub struct FactorDenominatorCall;
    #[doc = "Container type for all input parameters for the `LOCK_TOKEN` function with signature `LOCK_TOKEN()` and selector `[208, 218, 104, 1]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "LOCK_TOKEN", abi = "LOCK_TOKEN()")]
    pub struct LockTokenCall;
    #[doc = "Container type for all input parameters for the `NFT_CONTRACT` function with signature `NFT_CONTRACT()` and selector `[31, 218, 154, 2]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "NFT_CONTRACT", abi = "NFT_CONTRACT()")]
    pub struct NftContractCall;
    #[doc = "Container type for all input parameters for the `PROGRAM_END` function with signature `PROGRAM_END()` and selector `[203, 255, 163, 199]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "PROGRAM_END", abi = "PROGRAM_END()")]
    pub struct ProgramEndCall;
    #[doc = "Container type for all input parameters for the `PROGRAM_START` function with signature `PROGRAM_START()` and selector `[91, 187, 99, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "PROGRAM_START", abi = "PROGRAM_START()")]
    pub struct ProgramStartCall;
    #[doc = "Container type for all input parameters for the `REWARD_TOKEN` function with signature `REWARD_TOKEN()` and selector `[153, 36, 142, 167]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "REWARD_TOKEN", abi = "REWARD_TOKEN()")]
    pub struct RewardTokenCall;
    #[doc = "Container type for all input parameters for the `accounts` function with signature `accounts(address)` and selector `[94, 92, 6, 226]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "accounts", abi = "accounts(address)")]
    pub struct AccountsCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `availableReward` function with signature `availableReward()` and selector `[74, 216, 75, 52]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "availableReward", abi = "availableReward()")]
    pub struct AvailableRewardCall;
    #[doc = "Container type for all input parameters for the `claimRewards` function with signature `claimRewards(address)` and selector `[239, 92, 251, 140]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "claimRewards", abi = "claimRewards(address)")]
    pub struct ClaimRewardsCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `getCumulatedRewardsIncrement` function with signature `getCumulatedRewardsIncrement(address)` and selector `[112, 175, 9, 52]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "getCumulatedRewardsIncrement",
        abi = "getCumulatedRewardsIncrement(address)"
    )]
    pub struct GetCumulatedRewardsIncrementCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `isNftTypeAndRankRedeemed1` function with signature `isNftTypeAndRankRedeemed1(string,string,address)` and selector `[206, 35, 23, 126]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "isNftTypeAndRankRedeemed1",
        abi = "isNftTypeAndRankRedeemed1(string,string,address)"
    )]
    pub struct IsNftTypeAndRankRedeemed1Call {
        pub nft_type: String,
        pub nft_rank: String,
        pub hodler: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `isNftTypeAndRankRedeemed2` function with signature `isNftTypeAndRankRedeemed2(uint256,string,address)` and selector `[150, 169, 205, 125]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "isNftTypeAndRankRedeemed2",
        abi = "isNftTypeAndRankRedeemed2(uint256,string,address)"
    )]
    pub struct IsNftTypeAndRankRedeemed2Call {
        pub nft_type_index: ethers::core::types::U256,
        pub nft_rank: String,
        pub hodler: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `isNftTypeAndRankRedeemed3` function with signature `isNftTypeAndRankRedeemed3(uint256,uint256,address)` and selector `[168, 61, 30, 214]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "isNftTypeAndRankRedeemed3",
        abi = "isNftTypeAndRankRedeemed3(uint256,uint256,address)"
    )]
    pub struct IsNftTypeAndRankRedeemed3Call {
        pub nft_type_index: ethers::core::types::U256,
        pub boost_numerator: ethers::core::types::U256,
        pub hodler: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `isNftTypeAndRankRedeemed4` function with signature `isNftTypeAndRankRedeemed4(string,uint256,address)` and selector `[140, 36, 173, 212]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "isNftTypeAndRankRedeemed4",
        abi = "isNftTypeAndRankRedeemed4(string,uint256,address)"
    )]
    pub struct IsNftTypeAndRankRedeemed4Call {
        pub nft_type: String,
        pub boost_numerator: ethers::core::types::U256,
        pub hodler: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `onERC721Received` function with signature `onERC721Received(address,address,uint256,bytes)` and selector `[21, 11, 122, 2]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "onERC721Received",
        abi = "onERC721Received(address,address,uint256,bytes)"
    )]
    pub struct OnERC721ReceivedCall {
        pub operator: ethers::core::types::Address,
        pub from: ethers::core::types::Address,
        pub token_id: ethers::core::types::U256,
        pub data: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `onTokenTransfer` function with signature `onTokenTransfer(address,uint256,bytes)` and selector `[164, 192, 237, 54]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "onTokenTransfer",
        abi = "onTokenTransfer(address,uint256,bytes)"
    )]
    pub struct OnTokenTransferCall {
        pub from: ethers::core::types::Address,
        pub value: ethers::core::types::U256,
        pub data: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `owner` function with signature `owner()` and selector `[141, 165, 203, 91]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    #[doc = "Container type for all input parameters for the `reclaimErc20Tokens` function with signature `reclaimErc20Tokens(address)` and selector `[96, 103, 188, 21]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "reclaimErc20Tokens", abi = "reclaimErc20Tokens(address)")]
    pub struct ReclaimErc20TokensCall {
        pub token_address: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `reclaimErc721Tokens` function with signature `reclaimErc721Tokens(address,uint256)` and selector `[72, 198, 78, 65]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "reclaimErc721Tokens",
        abi = "reclaimErc721Tokens(address,uint256)"
    )]
    pub struct ReclaimErc721TokensCall {
        pub token_address: ethers::core::types::Address,
        pub token_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `redeemedFactor` function with signature `redeemedFactor(address,uint256)` and selector `[129, 18, 140, 29]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "redeemedFactor", abi = "redeemedFactor(address,uint256)")]
    pub struct RedeemedFactorCall(
        pub ethers::core::types::Address,
        pub ethers::core::types::U256,
    );
    #[doc = "Container type for all input parameters for the `redeemedFactorIndex` function with signature `redeemedFactorIndex(address)` and selector `[31, 1, 77, 131]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "redeemedFactorIndex", abi = "redeemedFactorIndex(address)")]
    pub struct RedeemedFactorIndexCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `redeemedNft` function with signature `redeemedNft(address,uint256)` and selector `[10, 26, 37, 122]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "redeemedNft", abi = "redeemedNft(address,uint256)")]
    pub struct RedeemedNftCall(
        pub ethers::core::types::Address,
        pub ethers::core::types::U256,
    );
    #[doc = "Container type for all input parameters for the `redeemedNftIndex` function with signature `redeemedNftIndex(address)` and selector `[208, 192, 45, 99]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "redeemedNftIndex", abi = "redeemedNftIndex(address)")]
    pub struct RedeemedNftIndexCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `renounceOwnership` function with signature `renounceOwnership()` and selector `[113, 80, 24, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    #[doc = "Container type for all input parameters for the `stakedHoprTokens` function with signature `stakedHoprTokens(address)` and selector `[249, 120, 255, 241]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "stakedHoprTokens", abi = "stakedHoprTokens(address)")]
    pub struct StakedHoprTokensCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `sync` function with signature `sync(address)` and selector `[165, 132, 17, 148]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "sync", abi = "sync(address)")]
    pub struct SyncCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `tokensReceived` function with signature `tokensReceived(address,address,address,uint256,bytes,bytes)` and selector `[0, 35, 222, 41]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "tokensReceived",
        abi = "tokensReceived(address,address,address,uint256,bytes,bytes)"
    )]
    pub struct TokensReceivedCall {
        pub operator: ethers::core::types::Address,
        pub from: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
        pub user_data: ethers::core::types::Bytes,
        pub operator_data: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `totalLocked` function with signature `totalLocked()` and selector `[86, 137, 20, 18]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "totalLocked", abi = "totalLocked()")]
    pub struct TotalLockedCall;
    #[doc = "Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address)` and selector `[242, 253, 227, 139]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `unlock` function with signature `unlock()` and selector `[166, 157, 244, 181]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "unlock", abi = "unlock()")]
    pub struct UnlockCall;
    #[doc = "Container type for all input parameters for the `unlockFor` function with signature `unlockFor(address)` and selector `[221, 228, 153, 121]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "unlockFor", abi = "unlockFor(address)")]
    pub struct UnlockForCall {
        pub account: ethers::core::types::Address,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum HoprStake2Calls {
        BasicFactorNumerator(BasicFactorNumeratorCall),
        BoostCap(BoostCapCall),
        FactorDenominator(FactorDenominatorCall),
        LockToken(LockTokenCall),
        NftContract(NftContractCall),
        ProgramEnd(ProgramEndCall),
        ProgramStart(ProgramStartCall),
        RewardToken(RewardTokenCall),
        Accounts(AccountsCall),
        AvailableReward(AvailableRewardCall),
        ClaimRewards(ClaimRewardsCall),
        GetCumulatedRewardsIncrement(GetCumulatedRewardsIncrementCall),
        IsNftTypeAndRankRedeemed1(IsNftTypeAndRankRedeemed1Call),
        IsNftTypeAndRankRedeemed2(IsNftTypeAndRankRedeemed2Call),
        IsNftTypeAndRankRedeemed3(IsNftTypeAndRankRedeemed3Call),
        IsNftTypeAndRankRedeemed4(IsNftTypeAndRankRedeemed4Call),
        OnERC721Received(OnERC721ReceivedCall),
        OnTokenTransfer(OnTokenTransferCall),
        Owner(OwnerCall),
        ReclaimErc20Tokens(ReclaimErc20TokensCall),
        ReclaimErc721Tokens(ReclaimErc721TokensCall),
        RedeemedFactor(RedeemedFactorCall),
        RedeemedFactorIndex(RedeemedFactorIndexCall),
        RedeemedNft(RedeemedNftCall),
        RedeemedNftIndex(RedeemedNftIndexCall),
        RenounceOwnership(RenounceOwnershipCall),
        StakedHoprTokens(StakedHoprTokensCall),
        Sync(SyncCall),
        TokensReceived(TokensReceivedCall),
        TotalLocked(TotalLockedCall),
        TransferOwnership(TransferOwnershipCall),
        Unlock(UnlockCall),
        UnlockFor(UnlockForCall),
    }
    impl ethers::core::abi::AbiDecode for HoprStake2Calls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <BasicFactorNumeratorCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::BasicFactorNumerator(decoded));
            }
            if let Ok(decoded) =
                <BoostCapCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::BoostCap(decoded));
            }
            if let Ok(decoded) =
                <FactorDenominatorCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::FactorDenominator(decoded));
            }
            if let Ok(decoded) =
                <LockTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::LockToken(decoded));
            }
            if let Ok(decoded) =
                <NftContractCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::NftContract(decoded));
            }
            if let Ok(decoded) =
                <ProgramEndCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::ProgramEnd(decoded));
            }
            if let Ok(decoded) =
                <ProgramStartCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::ProgramStart(decoded));
            }
            if let Ok(decoded) =
                <RewardTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::RewardToken(decoded));
            }
            if let Ok(decoded) =
                <AccountsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::Accounts(decoded));
            }
            if let Ok(decoded) =
                <AvailableRewardCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::AvailableReward(decoded));
            }
            if let Ok(decoded) =
                <ClaimRewardsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::ClaimRewards(decoded));
            }
            if let Ok(decoded) =
                <GetCumulatedRewardsIncrementCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(HoprStake2Calls::GetCumulatedRewardsIncrement(decoded));
            }
            if let Ok(decoded) =
                <IsNftTypeAndRankRedeemed1Call as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(HoprStake2Calls::IsNftTypeAndRankRedeemed1(decoded));
            }
            if let Ok(decoded) =
                <IsNftTypeAndRankRedeemed2Call as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(HoprStake2Calls::IsNftTypeAndRankRedeemed2(decoded));
            }
            if let Ok(decoded) =
                <IsNftTypeAndRankRedeemed3Call as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(HoprStake2Calls::IsNftTypeAndRankRedeemed3(decoded));
            }
            if let Ok(decoded) =
                <IsNftTypeAndRankRedeemed4Call as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(HoprStake2Calls::IsNftTypeAndRankRedeemed4(decoded));
            }
            if let Ok(decoded) =
                <OnERC721ReceivedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::OnERC721Received(decoded));
            }
            if let Ok(decoded) =
                <OnTokenTransferCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::OnTokenTransfer(decoded));
            }
            if let Ok(decoded) = <OwnerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::Owner(decoded));
            }
            if let Ok(decoded) =
                <ReclaimErc20TokensCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::ReclaimErc20Tokens(decoded));
            }
            if let Ok(decoded) =
                <ReclaimErc721TokensCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::ReclaimErc721Tokens(decoded));
            }
            if let Ok(decoded) =
                <RedeemedFactorCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::RedeemedFactor(decoded));
            }
            if let Ok(decoded) =
                <RedeemedFactorIndexCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::RedeemedFactorIndex(decoded));
            }
            if let Ok(decoded) =
                <RedeemedNftCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::RedeemedNft(decoded));
            }
            if let Ok(decoded) =
                <RedeemedNftIndexCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::RedeemedNftIndex(decoded));
            }
            if let Ok(decoded) =
                <RenounceOwnershipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::RenounceOwnership(decoded));
            }
            if let Ok(decoded) =
                <StakedHoprTokensCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::StakedHoprTokens(decoded));
            }
            if let Ok(decoded) = <SyncCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(HoprStake2Calls::Sync(decoded));
            }
            if let Ok(decoded) =
                <TokensReceivedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::TokensReceived(decoded));
            }
            if let Ok(decoded) =
                <TotalLockedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::TotalLocked(decoded));
            }
            if let Ok(decoded) =
                <TransferOwnershipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::TransferOwnership(decoded));
            }
            if let Ok(decoded) = <UnlockCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::Unlock(decoded));
            }
            if let Ok(decoded) =
                <UnlockForCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(HoprStake2Calls::UnlockFor(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for HoprStake2Calls {
        fn encode(self) -> Vec<u8> {
            match self {
                HoprStake2Calls::BasicFactorNumerator(element) => element.encode(),
                HoprStake2Calls::BoostCap(element) => element.encode(),
                HoprStake2Calls::FactorDenominator(element) => element.encode(),
                HoprStake2Calls::LockToken(element) => element.encode(),
                HoprStake2Calls::NftContract(element) => element.encode(),
                HoprStake2Calls::ProgramEnd(element) => element.encode(),
                HoprStake2Calls::ProgramStart(element) => element.encode(),
                HoprStake2Calls::RewardToken(element) => element.encode(),
                HoprStake2Calls::Accounts(element) => element.encode(),
                HoprStake2Calls::AvailableReward(element) => element.encode(),
                HoprStake2Calls::ClaimRewards(element) => element.encode(),
                HoprStake2Calls::GetCumulatedRewardsIncrement(element) => element.encode(),
                HoprStake2Calls::IsNftTypeAndRankRedeemed1(element) => element.encode(),
                HoprStake2Calls::IsNftTypeAndRankRedeemed2(element) => element.encode(),
                HoprStake2Calls::IsNftTypeAndRankRedeemed3(element) => element.encode(),
                HoprStake2Calls::IsNftTypeAndRankRedeemed4(element) => element.encode(),
                HoprStake2Calls::OnERC721Received(element) => element.encode(),
                HoprStake2Calls::OnTokenTransfer(element) => element.encode(),
                HoprStake2Calls::Owner(element) => element.encode(),
                HoprStake2Calls::ReclaimErc20Tokens(element) => element.encode(),
                HoprStake2Calls::ReclaimErc721Tokens(element) => element.encode(),
                HoprStake2Calls::RedeemedFactor(element) => element.encode(),
                HoprStake2Calls::RedeemedFactorIndex(element) => element.encode(),
                HoprStake2Calls::RedeemedNft(element) => element.encode(),
                HoprStake2Calls::RedeemedNftIndex(element) => element.encode(),
                HoprStake2Calls::RenounceOwnership(element) => element.encode(),
                HoprStake2Calls::StakedHoprTokens(element) => element.encode(),
                HoprStake2Calls::Sync(element) => element.encode(),
                HoprStake2Calls::TokensReceived(element) => element.encode(),
                HoprStake2Calls::TotalLocked(element) => element.encode(),
                HoprStake2Calls::TransferOwnership(element) => element.encode(),
                HoprStake2Calls::Unlock(element) => element.encode(),
                HoprStake2Calls::UnlockFor(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for HoprStake2Calls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                HoprStake2Calls::BasicFactorNumerator(element) => element.fmt(f),
                HoprStake2Calls::BoostCap(element) => element.fmt(f),
                HoprStake2Calls::FactorDenominator(element) => element.fmt(f),
                HoprStake2Calls::LockToken(element) => element.fmt(f),
                HoprStake2Calls::NftContract(element) => element.fmt(f),
                HoprStake2Calls::ProgramEnd(element) => element.fmt(f),
                HoprStake2Calls::ProgramStart(element) => element.fmt(f),
                HoprStake2Calls::RewardToken(element) => element.fmt(f),
                HoprStake2Calls::Accounts(element) => element.fmt(f),
                HoprStake2Calls::AvailableReward(element) => element.fmt(f),
                HoprStake2Calls::ClaimRewards(element) => element.fmt(f),
                HoprStake2Calls::GetCumulatedRewardsIncrement(element) => element.fmt(f),
                HoprStake2Calls::IsNftTypeAndRankRedeemed1(element) => element.fmt(f),
                HoprStake2Calls::IsNftTypeAndRankRedeemed2(element) => element.fmt(f),
                HoprStake2Calls::IsNftTypeAndRankRedeemed3(element) => element.fmt(f),
                HoprStake2Calls::IsNftTypeAndRankRedeemed4(element) => element.fmt(f),
                HoprStake2Calls::OnERC721Received(element) => element.fmt(f),
                HoprStake2Calls::OnTokenTransfer(element) => element.fmt(f),
                HoprStake2Calls::Owner(element) => element.fmt(f),
                HoprStake2Calls::ReclaimErc20Tokens(element) => element.fmt(f),
                HoprStake2Calls::ReclaimErc721Tokens(element) => element.fmt(f),
                HoprStake2Calls::RedeemedFactor(element) => element.fmt(f),
                HoprStake2Calls::RedeemedFactorIndex(element) => element.fmt(f),
                HoprStake2Calls::RedeemedNft(element) => element.fmt(f),
                HoprStake2Calls::RedeemedNftIndex(element) => element.fmt(f),
                HoprStake2Calls::RenounceOwnership(element) => element.fmt(f),
                HoprStake2Calls::StakedHoprTokens(element) => element.fmt(f),
                HoprStake2Calls::Sync(element) => element.fmt(f),
                HoprStake2Calls::TokensReceived(element) => element.fmt(f),
                HoprStake2Calls::TotalLocked(element) => element.fmt(f),
                HoprStake2Calls::TransferOwnership(element) => element.fmt(f),
                HoprStake2Calls::Unlock(element) => element.fmt(f),
                HoprStake2Calls::UnlockFor(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<BasicFactorNumeratorCall> for HoprStake2Calls {
        fn from(var: BasicFactorNumeratorCall) -> Self {
            HoprStake2Calls::BasicFactorNumerator(var)
        }
    }
    impl ::std::convert::From<BoostCapCall> for HoprStake2Calls {
        fn from(var: BoostCapCall) -> Self {
            HoprStake2Calls::BoostCap(var)
        }
    }
    impl ::std::convert::From<FactorDenominatorCall> for HoprStake2Calls {
        fn from(var: FactorDenominatorCall) -> Self {
            HoprStake2Calls::FactorDenominator(var)
        }
    }
    impl ::std::convert::From<LockTokenCall> for HoprStake2Calls {
        fn from(var: LockTokenCall) -> Self {
            HoprStake2Calls::LockToken(var)
        }
    }
    impl ::std::convert::From<NftContractCall> for HoprStake2Calls {
        fn from(var: NftContractCall) -> Self {
            HoprStake2Calls::NftContract(var)
        }
    }
    impl ::std::convert::From<ProgramEndCall> for HoprStake2Calls {
        fn from(var: ProgramEndCall) -> Self {
            HoprStake2Calls::ProgramEnd(var)
        }
    }
    impl ::std::convert::From<ProgramStartCall> for HoprStake2Calls {
        fn from(var: ProgramStartCall) -> Self {
            HoprStake2Calls::ProgramStart(var)
        }
    }
    impl ::std::convert::From<RewardTokenCall> for HoprStake2Calls {
        fn from(var: RewardTokenCall) -> Self {
            HoprStake2Calls::RewardToken(var)
        }
    }
    impl ::std::convert::From<AccountsCall> for HoprStake2Calls {
        fn from(var: AccountsCall) -> Self {
            HoprStake2Calls::Accounts(var)
        }
    }
    impl ::std::convert::From<AvailableRewardCall> for HoprStake2Calls {
        fn from(var: AvailableRewardCall) -> Self {
            HoprStake2Calls::AvailableReward(var)
        }
    }
    impl ::std::convert::From<ClaimRewardsCall> for HoprStake2Calls {
        fn from(var: ClaimRewardsCall) -> Self {
            HoprStake2Calls::ClaimRewards(var)
        }
    }
    impl ::std::convert::From<GetCumulatedRewardsIncrementCall> for HoprStake2Calls {
        fn from(var: GetCumulatedRewardsIncrementCall) -> Self {
            HoprStake2Calls::GetCumulatedRewardsIncrement(var)
        }
    }
    impl ::std::convert::From<IsNftTypeAndRankRedeemed1Call> for HoprStake2Calls {
        fn from(var: IsNftTypeAndRankRedeemed1Call) -> Self {
            HoprStake2Calls::IsNftTypeAndRankRedeemed1(var)
        }
    }
    impl ::std::convert::From<IsNftTypeAndRankRedeemed2Call> for HoprStake2Calls {
        fn from(var: IsNftTypeAndRankRedeemed2Call) -> Self {
            HoprStake2Calls::IsNftTypeAndRankRedeemed2(var)
        }
    }
    impl ::std::convert::From<IsNftTypeAndRankRedeemed3Call> for HoprStake2Calls {
        fn from(var: IsNftTypeAndRankRedeemed3Call) -> Self {
            HoprStake2Calls::IsNftTypeAndRankRedeemed3(var)
        }
    }
    impl ::std::convert::From<IsNftTypeAndRankRedeemed4Call> for HoprStake2Calls {
        fn from(var: IsNftTypeAndRankRedeemed4Call) -> Self {
            HoprStake2Calls::IsNftTypeAndRankRedeemed4(var)
        }
    }
    impl ::std::convert::From<OnERC721ReceivedCall> for HoprStake2Calls {
        fn from(var: OnERC721ReceivedCall) -> Self {
            HoprStake2Calls::OnERC721Received(var)
        }
    }
    impl ::std::convert::From<OnTokenTransferCall> for HoprStake2Calls {
        fn from(var: OnTokenTransferCall) -> Self {
            HoprStake2Calls::OnTokenTransfer(var)
        }
    }
    impl ::std::convert::From<OwnerCall> for HoprStake2Calls {
        fn from(var: OwnerCall) -> Self {
            HoprStake2Calls::Owner(var)
        }
    }
    impl ::std::convert::From<ReclaimErc20TokensCall> for HoprStake2Calls {
        fn from(var: ReclaimErc20TokensCall) -> Self {
            HoprStake2Calls::ReclaimErc20Tokens(var)
        }
    }
    impl ::std::convert::From<ReclaimErc721TokensCall> for HoprStake2Calls {
        fn from(var: ReclaimErc721TokensCall) -> Self {
            HoprStake2Calls::ReclaimErc721Tokens(var)
        }
    }
    impl ::std::convert::From<RedeemedFactorCall> for HoprStake2Calls {
        fn from(var: RedeemedFactorCall) -> Self {
            HoprStake2Calls::RedeemedFactor(var)
        }
    }
    impl ::std::convert::From<RedeemedFactorIndexCall> for HoprStake2Calls {
        fn from(var: RedeemedFactorIndexCall) -> Self {
            HoprStake2Calls::RedeemedFactorIndex(var)
        }
    }
    impl ::std::convert::From<RedeemedNftCall> for HoprStake2Calls {
        fn from(var: RedeemedNftCall) -> Self {
            HoprStake2Calls::RedeemedNft(var)
        }
    }
    impl ::std::convert::From<RedeemedNftIndexCall> for HoprStake2Calls {
        fn from(var: RedeemedNftIndexCall) -> Self {
            HoprStake2Calls::RedeemedNftIndex(var)
        }
    }
    impl ::std::convert::From<RenounceOwnershipCall> for HoprStake2Calls {
        fn from(var: RenounceOwnershipCall) -> Self {
            HoprStake2Calls::RenounceOwnership(var)
        }
    }
    impl ::std::convert::From<StakedHoprTokensCall> for HoprStake2Calls {
        fn from(var: StakedHoprTokensCall) -> Self {
            HoprStake2Calls::StakedHoprTokens(var)
        }
    }
    impl ::std::convert::From<SyncCall> for HoprStake2Calls {
        fn from(var: SyncCall) -> Self {
            HoprStake2Calls::Sync(var)
        }
    }
    impl ::std::convert::From<TokensReceivedCall> for HoprStake2Calls {
        fn from(var: TokensReceivedCall) -> Self {
            HoprStake2Calls::TokensReceived(var)
        }
    }
    impl ::std::convert::From<TotalLockedCall> for HoprStake2Calls {
        fn from(var: TotalLockedCall) -> Self {
            HoprStake2Calls::TotalLocked(var)
        }
    }
    impl ::std::convert::From<TransferOwnershipCall> for HoprStake2Calls {
        fn from(var: TransferOwnershipCall) -> Self {
            HoprStake2Calls::TransferOwnership(var)
        }
    }
    impl ::std::convert::From<UnlockCall> for HoprStake2Calls {
        fn from(var: UnlockCall) -> Self {
            HoprStake2Calls::Unlock(var)
        }
    }
    impl ::std::convert::From<UnlockForCall> for HoprStake2Calls {
        fn from(var: UnlockForCall) -> Self {
            HoprStake2Calls::UnlockFor(var)
        }
    }
    #[doc = "Container type for all return fields from the `BASIC_FACTOR_NUMERATOR` function with signature `BASIC_FACTOR_NUMERATOR()` and selector `[106, 168, 212, 207]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct BasicFactorNumeratorReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `BOOST_CAP` function with signature `BOOST_CAP()` and selector `[239, 5, 38, 162]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct BoostCapReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `FACTOR_DENOMINATOR` function with signature `FACTOR_DENOMINATOR()` and selector `[94, 247, 61, 88]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct FactorDenominatorReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `LOCK_TOKEN` function with signature `LOCK_TOKEN()` and selector `[208, 218, 104, 1]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct LockTokenReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `NFT_CONTRACT` function with signature `NFT_CONTRACT()` and selector `[31, 218, 154, 2]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct NftContractReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `PROGRAM_END` function with signature `PROGRAM_END()` and selector `[203, 255, 163, 199]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct ProgramEndReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `PROGRAM_START` function with signature `PROGRAM_START()` and selector `[91, 187, 99, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct ProgramStartReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `REWARD_TOKEN` function with signature `REWARD_TOKEN()` and selector `[153, 36, 142, 167]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct RewardTokenReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `accounts` function with signature `accounts(address)` and selector `[94, 92, 6, 226]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct AccountsReturn {
        pub actual_locked_token_amount: ethers::core::types::U256,
        pub last_sync_timestamp: ethers::core::types::U256,
        pub cumulated_rewards: ethers::core::types::U256,
        pub claimed_rewards: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `availableReward` function with signature `availableReward()` and selector `[74, 216, 75, 52]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct AvailableRewardReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `getCumulatedRewardsIncrement` function with signature `getCumulatedRewardsIncrement(address)` and selector `[112, 175, 9, 52]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct GetCumulatedRewardsIncrementReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `isNftTypeAndRankRedeemed1` function with signature `isNftTypeAndRankRedeemed1(string,string,address)` and selector `[206, 35, 23, 126]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct IsNftTypeAndRankRedeemed1Return(pub bool);
    #[doc = "Container type for all return fields from the `isNftTypeAndRankRedeemed2` function with signature `isNftTypeAndRankRedeemed2(uint256,string,address)` and selector `[150, 169, 205, 125]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct IsNftTypeAndRankRedeemed2Return(pub bool);
    #[doc = "Container type for all return fields from the `isNftTypeAndRankRedeemed3` function with signature `isNftTypeAndRankRedeemed3(uint256,uint256,address)` and selector `[168, 61, 30, 214]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct IsNftTypeAndRankRedeemed3Return(pub bool);
    #[doc = "Container type for all return fields from the `isNftTypeAndRankRedeemed4` function with signature `isNftTypeAndRankRedeemed4(string,uint256,address)` and selector `[140, 36, 173, 212]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct IsNftTypeAndRankRedeemed4Return(pub bool);
    #[doc = "Container type for all return fields from the `onERC721Received` function with signature `onERC721Received(address,address,uint256,bytes)` and selector `[21, 11, 122, 2]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct OnERC721ReceivedReturn(pub [u8; 4]);
    #[doc = "Container type for all return fields from the `onTokenTransfer` function with signature `onTokenTransfer(address,uint256,bytes)` and selector `[164, 192, 237, 54]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct OnTokenTransferReturn(pub bool);
    #[doc = "Container type for all return fields from the `owner` function with signature `owner()` and selector `[141, 165, 203, 91]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct OwnerReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `redeemedFactor` function with signature `redeemedFactor(address,uint256)` and selector `[129, 18, 140, 29]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct RedeemedFactorReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `redeemedFactorIndex` function with signature `redeemedFactorIndex(address)` and selector `[31, 1, 77, 131]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct RedeemedFactorIndexReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `redeemedNft` function with signature `redeemedNft(address,uint256)` and selector `[10, 26, 37, 122]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct RedeemedNftReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `redeemedNftIndex` function with signature `redeemedNftIndex(address)` and selector `[208, 192, 45, 99]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct RedeemedNftIndexReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `stakedHoprTokens` function with signature `stakedHoprTokens(address)` and selector `[249, 120, 255, 241]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct StakedHoprTokensReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `totalLocked` function with signature `totalLocked()` and selector `[86, 137, 20, 18]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct TotalLockedReturn(pub ethers::core::types::U256);
}
