pub use hopr_channels::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod hopr_channels {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    ///HoprChannels was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs
    use std::sync::Arc;
    use ::ethers::core::{
        abi::{Abi, Token, Detokenize, InvalidOutputType, Tokenizable},
        types::*,
    };
    use ::ethers::contract::{
        Contract, builders::{ContractCall, Event},
        Lazy,
    };
    use ::ethers::providers::Middleware;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"_secsClosure\",\"type\":\"uint32\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"multiaddr\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Announcement\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"newCommitment\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"ticketEpoch\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"channelBalance\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ChannelBumped\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint32\",\"name\":\"closureFinalizationTime\",\"type\":\"uint32\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"channelBalance\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ChannelClosureFinalized\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint32\",\"name\":\"closureInitiationTime\",\"type\":\"uint32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ChannelClosureInitiated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ChannelFunded\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"ChannelOpened\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"struct HoprChannels.Channel\",\"name\":\"newState\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"ticketEpoch\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"ticketIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"enum HoprChannels.ChannelStatus\",\"name\":\"status\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"channelEpoch\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"closureTime\",\"type\":\"uint32\",\"components\":[]}],\"indexed\":false}],\"type\":\"event\",\"name\":\"ChannelUpdated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"nextCommitment\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"ticketEpoch\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"ticketIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"proofOfRelaySecret\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"winProb\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TicketRedeemed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"FUND_CHANNEL_MULTI_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"TOKENS_RECIPIENT_INTERFACE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"multiaddr\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"announce\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"newCommitment\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bumpChannel\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceHash\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"canImplementInterfaceForAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"channels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"ticketEpoch\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"ticketIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"enum HoprChannels.ChannelStatus\",\"name\":\"status\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"channelEpoch\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint32\",\"name\":\"closureTime\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"finalizeChannelClosure\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account1\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"account2\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount2\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"fundChannelMulti\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initiateChannelClosure\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"publicKeys\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"nextCommitment\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"ticketEpoch\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"ticketIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"proofOfRelaySecret\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"winProb\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"redeemTicket\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"secsClosure\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"tokensReceived\",\"outputs\":[]}]";
    /// The parsed JSON-ABI of the contract.
    pub static HOPRCHANNELS_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("invalid abi"));
    /// Bytecode of the #name contract
    pub static HOPRCHANNELS_BYTECODE: ::ethers::contract::Lazy<
        ::ethers::core::types::Bytes,
    > = ::ethers::contract::Lazy::new(|| {
        "0x600061010081905261012081905261014081905261016052608060e081905261018060405280523480156200003357600080fd5b5060405162002b5638038062002b56833981016040819052620000569162000163565b6001600160a01b038216620000b15760405162461bcd60e51b815260206004820152601760248201527f746f6b656e206d757374206e6f7420626520656d707479000000000000000000604482015260640160405180910390fd5b6001600160a01b03821660a05263ffffffff811660c0526040516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b1580156200014257600080fd5b505af115801562000157573d6000803e3d6000fd5b505050505050620001b5565b600080604083850312156200017757600080fd5b82516001600160a01b03811681146200018f57600080fd5b602084015190925063ffffffff81168114620001aa57600080fd5b809150509250929050565b60805160a05160c0516129476200020f60003960008181610173015261128d0152600081816102dd01528181610322015281816106f001528181610e1b0152610f2801526000818161011301526103fd01526129476000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c80634341abdd11610097578063ac9650d811610066578063ac9650d814610292578063b4037e80146102b2578063b7bbca8a146102c5578063fc0c546a146102d857600080fd5b80634341abdd146101d057806372581cc0146101e35780637a7ebd7b1461020a578063a3d6f9a91461027257600080fd5b8063249cb3fa116100d3578063249cb3fa1461015b578063275621d11461016e57806328f7fd78146101aa5780632bcead2f146101bd57600080fd5b806223de29146100f9578063048a097d1461010e578063075e389f14610148575b600080fd5b61010c610107366004611f8b565b610317565b005b6101357f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61010c61015636600461203c565b6104de565b610135610169366004612059565b61076e565b6101957f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161013f565b61010c6101b8366004612089565b6107c8565b61010c6101cb36600461210b565b6108b4565b61010c6101de366004612209565b610ea1565b6101357fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b81565b61025f61021836600461224f565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006909501549395949293919260ff9091169163ffffffff1687565b60405161013f97969594939291906122a0565b61028561028036600461203c565b610fd1565b60405161013f9190612338565b6102a56102a036600461234b565b61106b565b60405161013f91906123c0565b61010c6102c036600461203c565b611160565b61010c6102d3366004612422565b61135d565b6102ff7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161013f565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103945760405162461bcd60e51b815260206004820152601860248201527f63616c6c6572206d75737420626520486f7072546f6b656e000000000000000060448201526064015b60405180910390fd5b6001600160a01b03861630146103fb5760405162461bcd60e51b815260206004820152602660248201527f6d7573742062652073656e64696e6720746f6b656e7320746f20486f70724368604482015265616e6e656c7360d01b606482015260840161038b565b7f000000000000000000000000000000000000000000000000000000000000000083036104d457600080808061043387890189612209565b929650909450925090506104478183612464565b89146104ab5760405162461bcd60e51b815260206004820152602d60248201527f616d6f756e742073656e74206d75737420626520657175616c20746f20616d6f60448201526c1d5b9d081cdc1958da599a5959609a1b606482015260840161038b565b81156104bd576104bd8b85858561150f565b80156104cf576104cf8b84868461150f565b505050505b5050505050505050565b33816001600160a01b03811682036105085760405162461bcd60e51b815260040161038b90612477565b6001600160a01b03821661052e5760405162461bcd60e51b815260040161038b906124c2565b6001600160a01b0381166105545760405162461bcd60e51b815260040161038b906124f9565b6000610560338561188d565b915060039050600482015460ff16600381111561057f5761057f612268565b146105cc5760405162461bcd60e51b815260206004820181905260248201527f6368616e6e656c206d7573742062652070656e64696e6720746f20636c6f7365604482015260640161038b565b600681015463ffffffff4281169116106106285760405162461bcd60e51b815260206004820152601e60248201527f636c6f7375726554696d65206d757374206265206265666f7265206e6f770000604482015260640161038b565b805460068201546040805163ffffffff9092168252602082018390526001600160a01b0387169133917fe685c05e0c2d3e8915b3dc7cd37e2aac94887e856025d6295360af16183c9f9c910160405180910390a36000825560068201805463ffffffff1916905560048201805460ff191690556040516001600160a01b0386169033906000805160206128f2833981519152906106c6908690612530565b60405180910390a380156107675760405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610741573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610765919061258c565b505b5050505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff1661079d5760006107bf565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b90505b92915050565b60405133906107da90869086906125ae565b6040519081900390206001600160a01b03161461084c5760405162461bcd60e51b815260206004820152602a60248201527f7075626c69634b65792773206164647265737320646f6573206e6f74206d617460448201526963682073656e6465727360b01b606482015260840161038b565b336000908152600160205260409020610866848683612643565b50336001600160a01b03167f5df480f8854903a456738589684a9c046d81dbba3e9cb83d5f6f1bbf3f1cba32858585856040516108a6949392919061272c565b60405180910390a250505050565b87336001600160a01b0382168190036108df5760405162461bcd60e51b815260040161038b90612477565b6001600160a01b0382166109055760405162461bcd60e51b815260040161038b906124c2565b6001600160a01b03811661092b5760405162461bcd60e51b815260040161038b906124f9565b886109785760405162461bcd60e51b815260206004820181905260248201527f6e657874436f6d6d69746d656e74206d757374206e6f7420626520656d707479604482015260640161038b565b846109c55760405162461bcd60e51b815260206004820152601860248201527f616d6f756e74206d757374206e6f7420626520656d7074790000000000000000604482015260640161038b565b60006109d18b3361188d565b915060029050600482015460ff1660038111156109f0576109f0612268565b1480610a1457506003600482015460ff166003811115610a1257610a12612268565b145b610a7a5760405162461bcd60e51b815260206004820152603160248201527f7370656e64696e67206368616e6e656c206d757374206265206f70656e206f726044820152702070656e64696e6720746f20636c6f736560781b606482015260840161038b565b60408051602081018c90520160405160208183030381529060405280519060200120816001015414610b015760405162461bcd60e51b815260206004820152602a60248201527f636f6d6d69746d656e74206d7573742062652068617368206f66206e6578742060448201526918dbdb5b5a5d1b595b9d60b21b606482015260840161038b565b88816002015414610b545760405162461bcd60e51b815260206004820152601760248201527f7469636b65742065706f6368206d757374206d61746368000000000000000000604482015260640161038b565b87816003015410610ba75760405162461bcd60e51b815260206004820152601c60248201527f726564656d7074696f6e73206d75737420626520696e206f7264657200000000604482015260640161038b565b6000610c14610bc33384600201548b86600501548c8f8d6118fd565b8051602091820120604080517f19457468657265756d205369676e6564204d6573736167653a0a33320000000081850152603c8082019390935281518082039093018352605c019052805191012090565b90508b6001600160a01b0316610c2a8287611976565b6001600160a01b031614610c8b5760405162461bcd60e51b815260206004820152602260248201527f7369676e6572206d757374206d617463682074686520636f756e746572706172604482015261747960f01b606482015260840161038b565b85610c97828d8b61199a565b1115610cdc5760405162461bcd60e51b81526020600482015260146024820152733a34b1b5b2ba1036bab9ba1031329030903bb4b760611b604482015260640161038b565b60038201899055600182018b90558154610cf790889061275e565b82556000610d05338e61188d565b915050336001600160a01b03168d6001600160a01b03166000805160206128f283398151915285604051610d399190612530565b60405180910390a3336001600160a01b03168d6001600160a01b03167f862117d954cb13fb5dbae8b4bdb5dc0d551725fc3af4c0e34350c194ba3588218e8e8e8e8e8e8e604051610d909796959493929190612771565b60405180910390a36002600482015460ff166003811115610db357610db3612268565b03610dff578054610dc5908990612464565b81556040516001600160a01b038e169033906000805160206128f283398151915290610df2908590612530565b60405180910390a3610e92565b60405163a9059cbb60e01b8152336004820152602481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610e6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e90919061258c565b505b50505050505050505050505050565b6000610ead8284612464565b11610efa5760405162461bcd60e51b815260206004820152601d60248201527f616d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161038b565b8115610f0c57610f0c3385858561150f565b8015610f1e57610f1e3384868461150f565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd3330610f598587612464565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610fad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610767919061258c565b60016020526000908152604090208054610fea906125be565b80601f0160208091040260200160405190810160405280929190818152602001828054611016906125be565b80156110635780601f1061103857610100808354040283529160200191611063565b820191906000526020600020905b81548152906001019060200180831161104657829003601f168201915b505050505081565b60608167ffffffffffffffff811115611086576110866120f5565b6040519080825280602002602001820160405280156110b957816020015b60608152602001906001900390816110a45790505b50905060005b8281101561115957611129308585848181106110dd576110dd6127b5565b90506020028101906110ef91906127cb565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506119d392505050565b82828151811061113b5761113b6127b5565b6020026020010181905250808061115190612812565b9150506110bf565b5092915050565b33816001600160a01b038116820361118a5760405162461bcd60e51b815260040161038b90612477565b6001600160a01b0382166111b05760405162461bcd60e51b815260040161038b906124c2565b6001600160a01b0381166111d65760405162461bcd60e51b815260040161038b906124f9565b60006111e2338561188d565b915060029050600482015460ff16600381111561120157611201612268565b148061122557506001600482015460ff16600381111561122357611223612268565b145b6112885760405162461bcd60e51b815260206004820152602e60248201527f6368616e6e656c206d757374206265206f70656e206f722077616974696e672060448201526d199bdc8818dbdb5b5a5d1b595b9d60921b606482015260840161038b565b6112b27f00000000000000000000000000000000000000000000000000000000000000004261282b565b60068201805463ffffffff9290921663ffffffff1990921691909117905560048101805460ff191660031790556040516001600160a01b0385169033906000805160206128f28339815191529061130a908590612530565b60405180910390a36001600160a01b038416337f33fa346a7a012d012279164042f6783bf49d701f28b0d8cd0103ef57f9919f0f4260405163ffffffff909116815260200160405180910390a350505050565b81336001600160a01b0382168190036113885760405162461bcd60e51b815260040161038b90612477565b6001600160a01b0382166113ae5760405162461bcd60e51b815260040161038b906124c2565b6001600160a01b0381166113d45760405162461bcd60e51b815260040161038b906124f9565b60006113e0853361188d565b91508490506114315760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f742073657420656d70747920636f6d6d69746d656e740000000000604482015260640161038b565b6001808201859055600282015461144791612464565b60028201556001600482015460ff16600381111561146757611467612268565b0361147c5760048101805460ff191660021790555b336001600160a01b0316856001600160a01b03166000805160206128f2833981519152836040516114ad9190612530565b60405180910390a36002810154815460408051878152602081019390935282015233906001600160a01b038716907f3ed4218941b780517f978f5c9b88cd51f7010c9468cf3ea55422098c81755a7e9060600160405180910390a35050505050565b8282806001600160a01b0316826001600160a01b0316036115425760405162461bcd60e51b815260040161038b90612477565b6001600160a01b0382166115685760405162461bcd60e51b815260040161038b906124c2565b6001600160a01b03811661158e5760405162461bcd60e51b815260040161038b906124f9565b600083116115de5760405162461bcd60e51b815260206004820152601d60248201527f616d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161038b565b6001600160a01b03851660009081526001602052604090208054611601906125be565b90506000036116525760405162461bcd60e51b815260206004820152601860248201527f736f7572636520686173206e6f7420616e6e6f756e6365640000000000000000604482015260640161038b565b6001600160a01b03841660009081526001602052604090208054611675906125be565b90506000036116c65760405162461bcd60e51b815260206004820152601d60248201527f64657374696e6174696f6e20686173206e6f7420616e6e6f756e636564000000604482015260640161038b565b60006116d2868661188d565b915060039050600482015460ff1660038111156116f1576116f1612268565b0361173e5760405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f742066756e64206120636c6f73696e67206368616e6e656c000000604482015260640161038b565b6000600482015460ff16600381111561175957611759612268565b036117e857600581015461176e906001612464565b600582015560006002820181905560038201556001810154156117d85760048101805460ff191660021790556040516001600160a01b0380871691908816907fdd90f938230335e59dc925c57ecb0e27a28c2d87356e31f00cd5554abd6c1b2d90600090a36117e8565b60048101805460ff191660011790555b80546117f5908590612464565b81556040516001600160a01b0380871691908816906000805160206128f283398151915290611825908590612530565b60405180910390a3846001600160a01b0316866001600160a01b0316886001600160a01b03167f4b4ab74078c30b1983f2e92a76c9d915b471f0689ecbfea501b3bf3299f6c0108760405161187c91815260200190565b60405180910390a450505050505050565b60008060006118e185856040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905092915050565b60008181526002602052604090209093509150505b9250929050565b6060600061190a876119f8565b6040516bffffffffffffffffffffffff1960608c811b8216602084015283901b166034820152604881018a9052606881018790526088810185905260a8810186905260c8810188905290915060e801604051602081830303815290604052915050979650505050505050565b60008060006119858585611ae7565b9150915061199281611b52565b509392505050565b604080516020808201869052818301859052606080830185905283518084039091018152608090920190925280519101205b9392505050565b60606107bf83836040518060600160405280602781526020016128cb60279139611d0b565b600070014551231950b75fc4402da1732fc9bebe1982611a2a5760405162461bcd60e51b815260040161038b90612848565b808310611a495760405162461bcd60e51b815260040161038b90612848565b7f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798601b600060018183858780611a8157611a81612898565b878b096040805160008152602081018083529590955260ff909316928401929092526060830152608082015260a0016020604051602081039080840390855afa158015611ad2573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b6000808251604103611b1d5760208301516040840151606085015160001a611b1187828585611ddf565b945094505050506118f6565b8251604003611b465760208301516040840151611b3b868383611ecc565b9350935050506118f6565b506000905060026118f6565b6000816004811115611b6657611b66612268565b03611b6e5750565b6001816004811115611b8257611b82612268565b03611bcf5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161038b565b6002816004811115611be357611be3612268565b03611c305760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161038b565b6003816004811115611c4457611c44612268565b03611c9c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161038b565b6004816004811115611cb057611cb0612268565b03611d085760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161038b565b50565b6060833b611d6a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161038b565b600080856001600160a01b031685604051611d8591906128ae565b600060405180830381855af49150503d8060008114611dc0576040519150601f19603f3d011682016040523d82523d6000602084013e611dc5565b606091505b5091509150611dd5828286611efb565b9695505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611e165750600090506003611ec3565b8460ff16601b14158015611e2e57508460ff16601c14155b15611e3f5750600090506004611ec3565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611e93573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611ebc57600060019250925050611ec3565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b01611eed87828885611ddf565b935093505050935093915050565b60608315611f0a5750816119cc565b825115611f1a5782518084602001fd5b8160405162461bcd60e51b815260040161038b9190612338565b6001600160a01b0381168114611d0857600080fd5b60008083601f840112611f5b57600080fd5b50813567ffffffffffffffff811115611f7357600080fd5b6020830191508360208285010111156118f657600080fd5b60008060008060008060008060c0898b031215611fa757600080fd5b8835611fb281611f34565b97506020890135611fc281611f34565b96506040890135611fd281611f34565b955060608901359450608089013567ffffffffffffffff80821115611ff657600080fd5b6120028c838d01611f49565b909650945060a08b013591508082111561201b57600080fd5b506120288b828c01611f49565b999c989b5096995094979396929594505050565b60006020828403121561204e57600080fd5b81356119cc81611f34565b6000806040838503121561206c57600080fd5b82359150602083013561207e81611f34565b809150509250929050565b6000806000806040858703121561209f57600080fd5b843567ffffffffffffffff808211156120b757600080fd5b6120c388838901611f49565b909650945060208701359150808211156120dc57600080fd5b506120e987828801611f49565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b600080600080600080600080610100898b03121561212857600080fd5b883561213381611f34565b97506020890135965060408901359550606089013594506080890135935060a0890135925060c0890135915060e089013567ffffffffffffffff8082111561217a57600080fd5b818b0191508b601f83011261218e57600080fd5b8135818111156121a0576121a06120f5565b604051601f8201601f19908116603f011681019083821181831017156121c8576121c86120f5565b816040528281528e60208487010111156121e157600080fd5b8260208601602083013760006020848301015280955050505050509295985092959890939650565b6000806000806080858703121561221f57600080fd5b843561222a81611f34565b9350602085013561223a81611f34565b93969395505050506040820135916060013590565b60006020828403121561226157600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6004811061229c57634e487b7160e01b600052602160045260246000fd5b9052565b600060e0820190508882528760208301528660408301528560608301526122ca608083018661227e565b8360a083015263ffffffff831660c083015298975050505050505050565b60005b838110156123035781810151838201526020016122eb565b50506000910152565b600081518084526123248160208601602086016122e8565b601f01601f19169290920160200192915050565b6020815260006107bf602083018461230c565b6000806020838503121561235e57600080fd5b823567ffffffffffffffff8082111561237657600080fd5b818501915085601f83011261238a57600080fd5b81358181111561239957600080fd5b8660208260051b85010111156123ae57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561241557603f1988860301845261240385835161230c565b945092850192908501906001016123e7565b5092979650505050505050565b6000806040838503121561243557600080fd5b823561244081611f34565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156107c2576107c261244e565b6020808252602b908201527f736f7572636520616e642064657374696e6174696f6e206d757374206e6f742060408201526a6265207468652073616d6560a81b606082015260800190565b60208082526018908201527f736f75726365206d757374206e6f7420626520656d7074790000000000000000604082015260600190565b6020808252601d908201527f64657374696e6174696f6e206d757374206e6f7420626520656d707479000000604082015260600190565b81548152600182015460208201526002820154604082015260038201546060820152600482015460e082019060ff1661256c608084018261227e565b50600583015460a083015260069092015463ffffffff1660c09091015290565b60006020828403121561259e57600080fd5b815180151581146119cc57600080fd5b8183823760009101908152919050565b600181811c908216806125d257607f821691505b6020821081036125f257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561263e57600081815260208120601f850160051c8101602086101561261f5750805b601f850160051c820191505b818110156107655782815560010161262b565b505050565b67ffffffffffffffff83111561265b5761265b6120f5565b61266f8361266983546125be565b836125f8565b6000601f8411600181146126a3576000851561268b5750838201355b600019600387901b1c1916600186901b178355610767565b600083815260209020601f19861690835b828110156126d457868501358255602094850194600190920191016126b4565b50868210156126f15760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000612740604083018688612703565b8281036020840152612753818587612703565b979650505050505050565b818103818111156107c2576107c261244e565b8781528660208201528560408201528460608201528360808201528260a082015260e060c082015260006127a860e083018461230c565b9998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126127e257600080fd5b83018035915067ffffffffffffffff8211156127fd57600080fd5b6020019150368190038213156118f657600080fd5b6000600182016128245761282461244e565b5060010190565b63ffffffff8181168382160190808211156111595761115961244e565b60208082526030908201527f496e76616c696420726573706f6e73652e2056616c7565206d7573742062652060408201526f1dda5d1a1a5b881d1a1948199a595b1960821b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082516128c08184602087016122e8565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a564bc94452694932bff57ef0cc1e5c10e8a698bf56fb7623572236cb4a77b18a26469706673582212204713db198db75570ee7c853429a4135cf8655aeed0071e022c6fa8da59a393be64736f6c63430008110033"
            .parse()
            .expect("invalid bytecode")
    });
    pub struct HoprChannels<M>(::ethers::contract::Contract<M>);
    impl<M> Clone for HoprChannels<M> {
        fn clone(&self) -> Self {
            HoprChannels(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for HoprChannels<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for HoprChannels<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(HoprChannels)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> HoprChannels<M> {
        /// Creates a new contract instance with the specified `ethers`
        /// client at the given `Address`. The contract derefs to a `ethers::Contract`
        /// object
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    HOPRCHANNELS_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// 1. If there are no constructor arguments, you should pass `()` as the argument.
        /// 1. The default poll duration is 7 seconds.
        /// 1. The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter,"../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                HOPRCHANNELS_ABI.clone(),
                HOPRCHANNELS_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `FUND_CHANNEL_MULTI_SIZE` (0x048a097d) function
        pub fn fund_channel_multi_size(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([4, 138, 9, 125], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `TOKENS_RECIPIENT_INTERFACE_HASH` (0x72581cc0) function
        pub fn tokens_recipient_interface_hash(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([114, 88, 28, 192], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `announce` (0x28f7fd78) function
        pub fn announce(
            &self,
            public_key: ::ethers::core::types::Bytes,
            multiaddr: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([40, 247, 253, 120], (public_key, multiaddr))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `bumpChannel` (0xb7bbca8a) function
        pub fn bump_channel(
            &self,
            source: ::ethers::core::types::Address,
            new_commitment: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([183, 187, 202, 138], (source, new_commitment))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `canImplementInterfaceForAddress` (0x249cb3fa) function
        pub fn can_implement_interface_for_address(
            &self,
            interface_hash: [u8; 32],
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([36, 156, 179, 250], (interface_hash, account))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `channels` (0x7a7ebd7b) function
        pub fn channels(
            &self,
            p0: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            (
                ::ethers::core::types::U256,
                [u8; 32],
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
                u8,
                ::ethers::core::types::U256,
                u32,
            ),
        > {
            self.0
                .method_hash([122, 126, 189, 123], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `finalizeChannelClosure` (0x075e389f) function
        pub fn finalize_channel_closure(
            &self,
            destination: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([7, 94, 56, 159], destination)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `fundChannelMulti` (0x4341abdd) function
        pub fn fund_channel_multi(
            &self,
            account_1: ::ethers::core::types::Address,
            account_2: ::ethers::core::types::Address,
            amount_1: ::ethers::core::types::U256,
            amount_2: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [67, 65, 171, 221],
                    (account_1, account_2, amount_1, amount_2),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `initiateChannelClosure` (0xb4037e80) function
        pub fn initiate_channel_closure(
            &self,
            destination: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([180, 3, 126, 128], destination)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `multicall` (0xac9650d8) function
        pub fn multicall(
            &self,
            data: ::std::vec::Vec<::ethers::core::types::Bytes>,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<::ethers::core::types::Bytes>,
        > {
            self.0
                .method_hash([172, 150, 80, 216], data)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `publicKeys` (0xa3d6f9a9) function
        pub fn public_keys(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Bytes,
        > {
            self.0
                .method_hash([163, 214, 249, 169], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `redeemTicket` (0x2bcead2f) function
        pub fn redeem_ticket(
            &self,
            source: ::ethers::core::types::Address,
            next_commitment: [u8; 32],
            ticket_epoch: ::ethers::core::types::U256,
            ticket_index: ::ethers::core::types::U256,
            proof_of_relay_secret: [u8; 32],
            amount: ::ethers::core::types::U256,
            win_prob: ::ethers::core::types::U256,
            signature: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [43, 206, 173, 47],
                    (
                        source,
                        next_commitment,
                        ticket_epoch,
                        ticket_index,
                        proof_of_relay_secret,
                        amount,
                        win_prob,
                        signature,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `secsClosure` (0x275621d1) function
        pub fn secs_closure(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, u32> {
            self.0
                .method_hash([39, 86, 33, 209], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `token` (0xfc0c546a) function
        pub fn token(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([252, 12, 84, 106], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `tokensReceived` (0x0023de29) function
        pub fn tokens_received(
            &self,
            operator: ::ethers::core::types::Address,
            from: ::ethers::core::types::Address,
            to: ::ethers::core::types::Address,
            amount: ::ethers::core::types::U256,
            user_data: ::ethers::core::types::Bytes,
            operator_data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [0, 35, 222, 41],
                    (operator, from, to, amount, user_data, operator_data),
                )
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `Announcement` event
        pub fn announcement_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, AnnouncementFilter> {
            self.0.event()
        }
        ///Gets the contract's `ChannelBumped` event
        pub fn channel_bumped_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, ChannelBumpedFilter> {
            self.0.event()
        }
        ///Gets the contract's `ChannelClosureFinalized` event
        pub fn channel_closure_finalized_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, ChannelClosureFinalizedFilter> {
            self.0.event()
        }
        ///Gets the contract's `ChannelClosureInitiated` event
        pub fn channel_closure_initiated_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, ChannelClosureInitiatedFilter> {
            self.0.event()
        }
        ///Gets the contract's `ChannelFunded` event
        pub fn channel_funded_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, ChannelFundedFilter> {
            self.0.event()
        }
        ///Gets the contract's `ChannelOpened` event
        pub fn channel_opened_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, ChannelOpenedFilter> {
            self.0.event()
        }
        ///Gets the contract's `ChannelUpdated` event
        pub fn channel_updated_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, ChannelUpdatedFilter> {
            self.0.event()
        }
        ///Gets the contract's `TicketRedeemed` event
        pub fn ticket_redeemed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, TicketRedeemedFilter> {
            self.0.event()
        }
        /// Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<M, HoprChannelsEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for HoprChannels<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "Announcement", abi = "Announcement(address,bytes,bytes)")]
    pub struct AnnouncementFilter {
        #[ethevent(indexed)]
        pub account: ::ethers::core::types::Address,
        pub public_key: ::ethers::core::types::Bytes,
        pub multiaddr: ::ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(
        name = "ChannelBumped",
        abi = "ChannelBumped(address,address,bytes32,uint256,uint256)"
    )]
    pub struct ChannelBumpedFilter {
        #[ethevent(indexed)]
        pub source: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub destination: ::ethers::core::types::Address,
        pub new_commitment: [u8; 32],
        pub ticket_epoch: ::ethers::core::types::U256,
        pub channel_balance: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(
        name = "ChannelClosureFinalized",
        abi = "ChannelClosureFinalized(address,address,uint32,uint256)"
    )]
    pub struct ChannelClosureFinalizedFilter {
        #[ethevent(indexed)]
        pub source: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub destination: ::ethers::core::types::Address,
        pub closure_finalization_time: u32,
        pub channel_balance: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(
        name = "ChannelClosureInitiated",
        abi = "ChannelClosureInitiated(address,address,uint32)"
    )]
    pub struct ChannelClosureInitiatedFilter {
        #[ethevent(indexed)]
        pub source: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub destination: ::ethers::core::types::Address,
        pub closure_initiation_time: u32,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(
        name = "ChannelFunded",
        abi = "ChannelFunded(address,address,address,uint256)"
    )]
    pub struct ChannelFundedFilter {
        #[ethevent(indexed)]
        pub funder: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub source: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub destination: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "ChannelOpened", abi = "ChannelOpened(address,address)")]
    pub struct ChannelOpenedFilter {
        #[ethevent(indexed)]
        pub source: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub destination: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(
        name = "ChannelUpdated",
        abi = "ChannelUpdated(address,address,(uint256,bytes32,uint256,uint256,uint8,uint256,uint32))"
    )]
    pub struct ChannelUpdatedFilter {
        #[ethevent(indexed)]
        pub source: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub destination: ::ethers::core::types::Address,
        pub new_state: Channel,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(
        name = "TicketRedeemed",
        abi = "TicketRedeemed(address,address,bytes32,uint256,uint256,bytes32,uint256,uint256,bytes)"
    )]
    pub struct TicketRedeemedFilter {
        #[ethevent(indexed)]
        pub source: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub destination: ::ethers::core::types::Address,
        pub next_commitment: [u8; 32],
        pub ticket_epoch: ::ethers::core::types::U256,
        pub ticket_index: ::ethers::core::types::U256,
        pub proof_of_relay_secret: [u8; 32],
        pub amount: ::ethers::core::types::U256,
        pub win_prob: ::ethers::core::types::U256,
        pub signature: ::ethers::core::types::Bytes,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum HoprChannelsEvents {
        AnnouncementFilter(AnnouncementFilter),
        ChannelBumpedFilter(ChannelBumpedFilter),
        ChannelClosureFinalizedFilter(ChannelClosureFinalizedFilter),
        ChannelClosureInitiatedFilter(ChannelClosureInitiatedFilter),
        ChannelFundedFilter(ChannelFundedFilter),
        ChannelOpenedFilter(ChannelOpenedFilter),
        ChannelUpdatedFilter(ChannelUpdatedFilter),
        TicketRedeemedFilter(TicketRedeemedFilter),
    }
    impl ::ethers::contract::EthLogDecode for HoprChannelsEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = AnnouncementFilter::decode_log(log) {
                return Ok(HoprChannelsEvents::AnnouncementFilter(decoded));
            }
            if let Ok(decoded) = ChannelBumpedFilter::decode_log(log) {
                return Ok(HoprChannelsEvents::ChannelBumpedFilter(decoded));
            }
            if let Ok(decoded) = ChannelClosureFinalizedFilter::decode_log(log) {
                return Ok(HoprChannelsEvents::ChannelClosureFinalizedFilter(decoded));
            }
            if let Ok(decoded) = ChannelClosureInitiatedFilter::decode_log(log) {
                return Ok(HoprChannelsEvents::ChannelClosureInitiatedFilter(decoded));
            }
            if let Ok(decoded) = ChannelFundedFilter::decode_log(log) {
                return Ok(HoprChannelsEvents::ChannelFundedFilter(decoded));
            }
            if let Ok(decoded) = ChannelOpenedFilter::decode_log(log) {
                return Ok(HoprChannelsEvents::ChannelOpenedFilter(decoded));
            }
            if let Ok(decoded) = ChannelUpdatedFilter::decode_log(log) {
                return Ok(HoprChannelsEvents::ChannelUpdatedFilter(decoded));
            }
            if let Ok(decoded) = TicketRedeemedFilter::decode_log(log) {
                return Ok(HoprChannelsEvents::TicketRedeemedFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for HoprChannelsEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                HoprChannelsEvents::AnnouncementFilter(element) => element.fmt(f),
                HoprChannelsEvents::ChannelBumpedFilter(element) => element.fmt(f),
                HoprChannelsEvents::ChannelClosureFinalizedFilter(element) => {
                    element.fmt(f)
                }
                HoprChannelsEvents::ChannelClosureInitiatedFilter(element) => {
                    element.fmt(f)
                }
                HoprChannelsEvents::ChannelFundedFilter(element) => element.fmt(f),
                HoprChannelsEvents::ChannelOpenedFilter(element) => element.fmt(f),
                HoprChannelsEvents::ChannelUpdatedFilter(element) => element.fmt(f),
                HoprChannelsEvents::TicketRedeemedFilter(element) => element.fmt(f),
            }
        }
    }
    ///Container type for all input parameters for the `FUND_CHANNEL_MULTI_SIZE` function with signature `FUND_CHANNEL_MULTI_SIZE()` and selector `0x048a097d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "FUND_CHANNEL_MULTI_SIZE", abi = "FUND_CHANNEL_MULTI_SIZE()")]
    pub struct FundChannelMultiSizeCall;
    ///Container type for all input parameters for the `TOKENS_RECIPIENT_INTERFACE_HASH` function with signature `TOKENS_RECIPIENT_INTERFACE_HASH()` and selector `0x72581cc0`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "TOKENS_RECIPIENT_INTERFACE_HASH",
        abi = "TOKENS_RECIPIENT_INTERFACE_HASH()"
    )]
    pub struct TokensRecipientInterfaceHashCall;
    ///Container type for all input parameters for the `announce` function with signature `announce(bytes,bytes)` and selector `0x28f7fd78`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "announce", abi = "announce(bytes,bytes)")]
    pub struct AnnounceCall {
        pub public_key: ::ethers::core::types::Bytes,
        pub multiaddr: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `bumpChannel` function with signature `bumpChannel(address,bytes32)` and selector `0xb7bbca8a`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "bumpChannel", abi = "bumpChannel(address,bytes32)")]
    pub struct BumpChannelCall {
        pub source: ::ethers::core::types::Address,
        pub new_commitment: [u8; 32],
    }
    ///Container type for all input parameters for the `canImplementInterfaceForAddress` function with signature `canImplementInterfaceForAddress(bytes32,address)` and selector `0x249cb3fa`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "canImplementInterfaceForAddress",
        abi = "canImplementInterfaceForAddress(bytes32,address)"
    )]
    pub struct CanImplementInterfaceForAddressCall {
        pub interface_hash: [u8; 32],
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `channels` function with signature `channels(bytes32)` and selector `0x7a7ebd7b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "channels", abi = "channels(bytes32)")]
    pub struct ChannelsCall(pub [u8; 32]);
    ///Container type for all input parameters for the `finalizeChannelClosure` function with signature `finalizeChannelClosure(address)` and selector `0x075e389f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "finalizeChannelClosure", abi = "finalizeChannelClosure(address)")]
    pub struct FinalizeChannelClosureCall {
        pub destination: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `fundChannelMulti` function with signature `fundChannelMulti(address,address,uint256,uint256)` and selector `0x4341abdd`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "fundChannelMulti",
        abi = "fundChannelMulti(address,address,uint256,uint256)"
    )]
    pub struct FundChannelMultiCall {
        pub account_1: ::ethers::core::types::Address,
        pub account_2: ::ethers::core::types::Address,
        pub amount_1: ::ethers::core::types::U256,
        pub amount_2: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `initiateChannelClosure` function with signature `initiateChannelClosure(address)` and selector `0xb4037e80`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "initiateChannelClosure", abi = "initiateChannelClosure(address)")]
    pub struct InitiateChannelClosureCall {
        pub destination: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `multicall` function with signature `multicall(bytes[])` and selector `0xac9650d8`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "multicall", abi = "multicall(bytes[])")]
    pub struct MulticallCall {
        pub data: ::std::vec::Vec<::ethers::core::types::Bytes>,
    }
    ///Container type for all input parameters for the `publicKeys` function with signature `publicKeys(address)` and selector `0xa3d6f9a9`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "publicKeys", abi = "publicKeys(address)")]
    pub struct PublicKeysCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `redeemTicket` function with signature `redeemTicket(address,bytes32,uint256,uint256,bytes32,uint256,uint256,bytes)` and selector `0x2bcead2f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "redeemTicket",
        abi = "redeemTicket(address,bytes32,uint256,uint256,bytes32,uint256,uint256,bytes)"
    )]
    pub struct RedeemTicketCall {
        pub source: ::ethers::core::types::Address,
        pub next_commitment: [u8; 32],
        pub ticket_epoch: ::ethers::core::types::U256,
        pub ticket_index: ::ethers::core::types::U256,
        pub proof_of_relay_secret: [u8; 32],
        pub amount: ::ethers::core::types::U256,
        pub win_prob: ::ethers::core::types::U256,
        pub signature: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `secsClosure` function with signature `secsClosure()` and selector `0x275621d1`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "secsClosure", abi = "secsClosure()")]
    pub struct SecsClosureCall;
    ///Container type for all input parameters for the `token` function with signature `token()` and selector `0xfc0c546a`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "token", abi = "token()")]
    pub struct TokenCall;
    ///Container type for all input parameters for the `tokensReceived` function with signature `tokensReceived(address,address,address,uint256,bytes,bytes)` and selector `0x0023de29`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "tokensReceived",
        abi = "tokensReceived(address,address,address,uint256,bytes,bytes)"
    )]
    pub struct TokensReceivedCall {
        pub operator: ::ethers::core::types::Address,
        pub from: ::ethers::core::types::Address,
        pub to: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
        pub user_data: ::ethers::core::types::Bytes,
        pub operator_data: ::ethers::core::types::Bytes,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum HoprChannelsCalls {
        FundChannelMultiSize(FundChannelMultiSizeCall),
        TokensRecipientInterfaceHash(TokensRecipientInterfaceHashCall),
        Announce(AnnounceCall),
        BumpChannel(BumpChannelCall),
        CanImplementInterfaceForAddress(CanImplementInterfaceForAddressCall),
        Channels(ChannelsCall),
        FinalizeChannelClosure(FinalizeChannelClosureCall),
        FundChannelMulti(FundChannelMultiCall),
        InitiateChannelClosure(InitiateChannelClosureCall),
        Multicall(MulticallCall),
        PublicKeys(PublicKeysCall),
        RedeemTicket(RedeemTicketCall),
        SecsClosure(SecsClosureCall),
        Token(TokenCall),
        TokensReceived(TokensReceivedCall),
    }
    impl ::ethers::core::abi::AbiDecode for HoprChannelsCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::AbiError> {
            if let Ok(decoded)
                = <FundChannelMultiSizeCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprChannelsCalls::FundChannelMultiSize(decoded));
            }
            if let Ok(decoded)
                = <TokensRecipientInterfaceHashCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprChannelsCalls::TokensRecipientInterfaceHash(decoded));
            }
            if let Ok(decoded)
                = <AnnounceCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprChannelsCalls::Announce(decoded));
            }
            if let Ok(decoded)
                = <BumpChannelCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprChannelsCalls::BumpChannel(decoded));
            }
            if let Ok(decoded)
                = <CanImplementInterfaceForAddressCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprChannelsCalls::CanImplementInterfaceForAddress(decoded));
            }
            if let Ok(decoded)
                = <ChannelsCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprChannelsCalls::Channels(decoded));
            }
            if let Ok(decoded)
                = <FinalizeChannelClosureCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprChannelsCalls::FinalizeChannelClosure(decoded));
            }
            if let Ok(decoded)
                = <FundChannelMultiCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprChannelsCalls::FundChannelMulti(decoded));
            }
            if let Ok(decoded)
                = <InitiateChannelClosureCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprChannelsCalls::InitiateChannelClosure(decoded));
            }
            if let Ok(decoded)
                = <MulticallCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprChannelsCalls::Multicall(decoded));
            }
            if let Ok(decoded)
                = <PublicKeysCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprChannelsCalls::PublicKeys(decoded));
            }
            if let Ok(decoded)
                = <RedeemTicketCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprChannelsCalls::RedeemTicket(decoded));
            }
            if let Ok(decoded)
                = <SecsClosureCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprChannelsCalls::SecsClosure(decoded));
            }
            if let Ok(decoded)
                = <TokenCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(HoprChannelsCalls::Token(decoded));
            }
            if let Ok(decoded)
                = <TokensReceivedCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprChannelsCalls::TokensReceived(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for HoprChannelsCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                HoprChannelsCalls::FundChannelMultiSize(element) => element.encode(),
                HoprChannelsCalls::TokensRecipientInterfaceHash(element) => {
                    element.encode()
                }
                HoprChannelsCalls::Announce(element) => element.encode(),
                HoprChannelsCalls::BumpChannel(element) => element.encode(),
                HoprChannelsCalls::CanImplementInterfaceForAddress(element) => {
                    element.encode()
                }
                HoprChannelsCalls::Channels(element) => element.encode(),
                HoprChannelsCalls::FinalizeChannelClosure(element) => element.encode(),
                HoprChannelsCalls::FundChannelMulti(element) => element.encode(),
                HoprChannelsCalls::InitiateChannelClosure(element) => element.encode(),
                HoprChannelsCalls::Multicall(element) => element.encode(),
                HoprChannelsCalls::PublicKeys(element) => element.encode(),
                HoprChannelsCalls::RedeemTicket(element) => element.encode(),
                HoprChannelsCalls::SecsClosure(element) => element.encode(),
                HoprChannelsCalls::Token(element) => element.encode(),
                HoprChannelsCalls::TokensReceived(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for HoprChannelsCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                HoprChannelsCalls::FundChannelMultiSize(element) => element.fmt(f),
                HoprChannelsCalls::TokensRecipientInterfaceHash(element) => {
                    element.fmt(f)
                }
                HoprChannelsCalls::Announce(element) => element.fmt(f),
                HoprChannelsCalls::BumpChannel(element) => element.fmt(f),
                HoprChannelsCalls::CanImplementInterfaceForAddress(element) => {
                    element.fmt(f)
                }
                HoprChannelsCalls::Channels(element) => element.fmt(f),
                HoprChannelsCalls::FinalizeChannelClosure(element) => element.fmt(f),
                HoprChannelsCalls::FundChannelMulti(element) => element.fmt(f),
                HoprChannelsCalls::InitiateChannelClosure(element) => element.fmt(f),
                HoprChannelsCalls::Multicall(element) => element.fmt(f),
                HoprChannelsCalls::PublicKeys(element) => element.fmt(f),
                HoprChannelsCalls::RedeemTicket(element) => element.fmt(f),
                HoprChannelsCalls::SecsClosure(element) => element.fmt(f),
                HoprChannelsCalls::Token(element) => element.fmt(f),
                HoprChannelsCalls::TokensReceived(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<FundChannelMultiSizeCall> for HoprChannelsCalls {
        fn from(var: FundChannelMultiSizeCall) -> Self {
            HoprChannelsCalls::FundChannelMultiSize(var)
        }
    }
    impl ::std::convert::From<TokensRecipientInterfaceHashCall> for HoprChannelsCalls {
        fn from(var: TokensRecipientInterfaceHashCall) -> Self {
            HoprChannelsCalls::TokensRecipientInterfaceHash(var)
        }
    }
    impl ::std::convert::From<AnnounceCall> for HoprChannelsCalls {
        fn from(var: AnnounceCall) -> Self {
            HoprChannelsCalls::Announce(var)
        }
    }
    impl ::std::convert::From<BumpChannelCall> for HoprChannelsCalls {
        fn from(var: BumpChannelCall) -> Self {
            HoprChannelsCalls::BumpChannel(var)
        }
    }
    impl ::std::convert::From<CanImplementInterfaceForAddressCall>
    for HoprChannelsCalls {
        fn from(var: CanImplementInterfaceForAddressCall) -> Self {
            HoprChannelsCalls::CanImplementInterfaceForAddress(var)
        }
    }
    impl ::std::convert::From<ChannelsCall> for HoprChannelsCalls {
        fn from(var: ChannelsCall) -> Self {
            HoprChannelsCalls::Channels(var)
        }
    }
    impl ::std::convert::From<FinalizeChannelClosureCall> for HoprChannelsCalls {
        fn from(var: FinalizeChannelClosureCall) -> Self {
            HoprChannelsCalls::FinalizeChannelClosure(var)
        }
    }
    impl ::std::convert::From<FundChannelMultiCall> for HoprChannelsCalls {
        fn from(var: FundChannelMultiCall) -> Self {
            HoprChannelsCalls::FundChannelMulti(var)
        }
    }
    impl ::std::convert::From<InitiateChannelClosureCall> for HoprChannelsCalls {
        fn from(var: InitiateChannelClosureCall) -> Self {
            HoprChannelsCalls::InitiateChannelClosure(var)
        }
    }
    impl ::std::convert::From<MulticallCall> for HoprChannelsCalls {
        fn from(var: MulticallCall) -> Self {
            HoprChannelsCalls::Multicall(var)
        }
    }
    impl ::std::convert::From<PublicKeysCall> for HoprChannelsCalls {
        fn from(var: PublicKeysCall) -> Self {
            HoprChannelsCalls::PublicKeys(var)
        }
    }
    impl ::std::convert::From<RedeemTicketCall> for HoprChannelsCalls {
        fn from(var: RedeemTicketCall) -> Self {
            HoprChannelsCalls::RedeemTicket(var)
        }
    }
    impl ::std::convert::From<SecsClosureCall> for HoprChannelsCalls {
        fn from(var: SecsClosureCall) -> Self {
            HoprChannelsCalls::SecsClosure(var)
        }
    }
    impl ::std::convert::From<TokenCall> for HoprChannelsCalls {
        fn from(var: TokenCall) -> Self {
            HoprChannelsCalls::Token(var)
        }
    }
    impl ::std::convert::From<TokensReceivedCall> for HoprChannelsCalls {
        fn from(var: TokensReceivedCall) -> Self {
            HoprChannelsCalls::TokensReceived(var)
        }
    }
    ///Container type for all return fields from the `FUND_CHANNEL_MULTI_SIZE` function with signature `FUND_CHANNEL_MULTI_SIZE()` and selector `0x048a097d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct FundChannelMultiSizeReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `TOKENS_RECIPIENT_INTERFACE_HASH` function with signature `TOKENS_RECIPIENT_INTERFACE_HASH()` and selector `0x72581cc0`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct TokensRecipientInterfaceHashReturn(pub [u8; 32]);
    ///Container type for all return fields from the `canImplementInterfaceForAddress` function with signature `canImplementInterfaceForAddress(bytes32,address)` and selector `0x249cb3fa`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct CanImplementInterfaceForAddressReturn(pub [u8; 32]);
    ///Container type for all return fields from the `channels` function with signature `channels(bytes32)` and selector `0x7a7ebd7b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct ChannelsReturn {
        pub balance: ::ethers::core::types::U256,
        pub commitment: [u8; 32],
        pub ticket_epoch: ::ethers::core::types::U256,
        pub ticket_index: ::ethers::core::types::U256,
        pub status: u8,
        pub channel_epoch: ::ethers::core::types::U256,
        pub closure_time: u32,
    }
    ///Container type for all return fields from the `multicall` function with signature `multicall(bytes[])` and selector `0xac9650d8`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct MulticallReturn {
        pub results: ::std::vec::Vec<::ethers::core::types::Bytes>,
    }
    ///Container type for all return fields from the `publicKeys` function with signature `publicKeys(address)` and selector `0xa3d6f9a9`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct PublicKeysReturn(pub ::ethers::core::types::Bytes);
    ///Container type for all return fields from the `secsClosure` function with signature `secsClosure()` and selector `0x275621d1`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct SecsClosureReturn(pub u32);
    ///Container type for all return fields from the `token` function with signature `token()` and selector `0xfc0c546a`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct TokenReturn(pub ::ethers::core::types::Address);
    ///`Channel(uint256,bytes32,uint256,uint256,uint8,uint256,uint32)`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    pub struct Channel {
        pub balance: ::ethers::core::types::U256,
        pub commitment: [u8; 32],
        pub ticket_epoch: ::ethers::core::types::U256,
        pub ticket_index: ::ethers::core::types::U256,
        pub status: u8,
        pub channel_epoch: ::ethers::core::types::U256,
        pub closure_time: u32,
    }
}
