pub use hopr_stake_season_3::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod hopr_stake_season_3 {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    ///HoprStakeSeason3 was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs
    use std::sync::Arc;
    use ::ethers::core::{
        abi::{Abi, Token, Detokenize, InvalidOutputType, Tokenizable},
        types::*,
    };
    use ::ethers::contract::{
        Contract, builders::{ContractCall, Event},
        Lazy,
    };
    use ::ethers::providers::Middleware;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_lockToken\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"Claimed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"NftAllowed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"NftBlocked\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"boostTokenId\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"factorRegistered\",\"type\":\"bool\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"Redeemed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"Released\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"RewardFueled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"Staked\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"Sync\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"BASIC_FACTOR_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"BOOST_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"FACTOR_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"LOCK_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"NFT_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IHoprBoost\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"PROGRAM_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"PROGRAM_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualLockedTokenAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"lastSyncTimestamp\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"cumulatedRewards\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"availableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claimRewards\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getCumulatedRewardsIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isBlockedNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftType\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"string\",\"name\":\"nftRank\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"hodler\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isNftTypeAndRankRedeemed1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTypeIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"string\",\"name\":\"nftRank\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"hodler\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isNftTypeAndRankRedeemed2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTypeIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"boostNumerator\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"hodler\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isNftTypeAndRankRedeemed3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftType\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"boostNumerator\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"hodler\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isNftTypeAndRankRedeemed4\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"onTokenTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeIndex\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"ownerBlockNftType\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeIndex\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"ownerUnblockNftType\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"reclaimErc20Tokens\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"reclaimErc721Tokens\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"redeemedFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"redeemedFactorIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"redeemedNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"redeemedNftIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"stakedHoprTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sync\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"tokensReceived\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unlock\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unlockFor\",\"outputs\":[]}]";
    /// The parsed JSON-ABI of the contract.
    pub static HOPRSTAKESEASON3_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(|| {
        ::ethers::core::utils::__serde_json::from_str(__ABI).expect("invalid abi")
    });
    /// Bytecode of the #name contract
    pub static HOPRSTAKESEASON3_BYTECODE: ::ethers::contract::Lazy<
        ::ethers::core::types::Bytes,
    > = ::ethers::contract::Lazy::new(|| {
        "0x6080604052600280546001600160a01b031990811673d057604a14982fe8d88c5fc25aac3267ea142a081790915560038054821673d4fdec44db9d44b8f2b6d529620f9c0c7066a2c1179055600480549091167343d13d7b83607f14335cf2cb75e87da369d056c71790553480156200007757600080fd5b5060405162002cb538038062002cb58339810160408190526200009a916200032b565b620000a533620001a6565b600180554660648114620000f157600280546001600160a01b038086166001600160a01b0319928316179092556003805485841690831617905560048054928816929091169190911790555b620000fd6002620001f6565b620001088462000239565b6040516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b1580156200018257600080fd5b505af115801562000197573d6000803e3d6000fd5b50505050505050505062000388565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815260096020526040808220805460ff191660011790555182917f620d09c7c7f3c5c41d8b5ea7f274622ddd6ac6b801f035fc741205d113199c0c91a250565b6000546001600160a01b03163314620002995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620003005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000290565b6200030b81620001a6565b50565b80516001600160a01b03811681146200032657600080fd5b919050565b600080600080608085870312156200034257600080fd5b6200034d856200030e565b93506200035d602086016200030e565b92506200036d604086016200030e565b91506200037d606086016200030e565b905092959194509250565b61291d80620003986000396000f3fe608060405234801561001057600080fd5b506004361061021b5760003560e01c806381128c1d11610125578063cbffa3c7116100ad578063dde499791161007c578063dde4997914610512578063ef0526a214610525578063ef5cfb8c14610536578063f2fde38b14610549578063f978fff11461055c57600080fd5b8063cbffa3c7146104c1578063ce23177e146104cc578063d0c02d63146104df578063d0da6801146104ff57600080fd5b806399248ea7116100f457806399248ea71461046d578063a4c0ed3614610480578063a584119414610493578063a69df4b5146104a6578063a83d1ed6146104ae57600080fd5b806381128c1d1461040b5780638c24add4146104365780638da5cb5b1461044957806396a9cd7d1461045a57600080fd5b806356891412116101a85780635ef73d58116101775780635ef73d58146103c85780636067bc15146103d45780636aa8d4cf146103e757806370af0934146103f0578063715018a61461040357600080fd5b8063568914121461034c5780635bbb63a6146103555780635e4c0e15146103605780635e5c06e21461037357600080fd5b80631fda9a02116101ef5780631fda9a02146102bf57806321cf85ba146102ea57806342c93361146102fd57806348c64e41146103305780634ad84b341461034357600080fd5b806223de29146102205780630a1a257a14610235578063150b7a02146102735780631f014d831461029f575b600080fd5b61023361022e366004612285565b610585565b005b610260610243366004612330565b600560209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61028661028136600461235a565b610732565b6040516001600160e01b0319909116815260200161026a565b6102606102ad3660046123c9565b60086020526000908152604090205481565b6004546102d2906001600160a01b031681565b6040516001600160a01b03909116815260200161026a565b6102336102f83660046123e4565b610c96565b61032061030b3660046123e4565b60096020526000908152604090205460ff1681565b604051901515815260200161026a565b61023361033e366004612330565b610d69565b610260600c5481565b610260600b5481565b610260636267dec081565b61023361036e3660046123e4565b610ee7565b6103a86103813660046123c9565b600a6020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161026a565b61026064e8d4a5100081565b6102336103e23660046123c9565b610f8b565b610260610c6381565b6102606103fe3660046123c9565b61113e565b61023361114f565b610260610419366004612330565b600760209081526000928352604080842090915290825290205481565b6103206104443660046124ca565b611185565b6000546001600160a01b03166102d2565b610320610468366004612521565b6112f7565b6003546102d2906001600160a01b031681565b61032061048e36600461256f565b611454565b6102336104a13660046123c9565b6115c1565b6102336115ca565b6103206104bc3660046125da565b6115d3565b6102606362dfd74081565b6103206104da366004612606565b611726565b6102606104ed3660046123c9565b60066020526000908152604090205481565b6002546102d2906001600160a01b031681565b6102336105203660046123c9565b611840565b610260691fc3842bd1f071c0000081565b6102336105443660046123c9565b611849565b6102336105573660046123c9565b61185b565b61026061056a3660046123c9565b6001600160a01b03166000908152600a602052604090205490565b6003546001600160a01b031633146105f35760405162461bcd60e51b815260206004820152602660248201527f486f70725374616b653a2053656e646572206d757374206265207778484f5052604482015265103a37b5b2b760d11b60648201526084015b60405180910390fd5b6001600160a01b03861630146106715760405162461bcd60e51b815260206004820152603760248201527f486f70725374616b653a204d7573742062652073656e64696e6720746f6b656e60448201527f7320746f20486f70725374616b6520636f6e747261637400000000000000000060648201526084016105ea565b6000546001600160a01b038881169116146106e65760405162461bcd60e51b815260206004820152602f60248201527f486f70725374616b653a204f6e6c7920616363657074206f776e657220746f2060448201526e70726f76696465207265776172647360881b60648201526084016105ea565b84600c60008282546106f89190612678565b909155505060405185907f2bf52bcae319602514e02ff69bbe4b89a19718b96e7867044128ec872419437c90600090a25050505050505050565b6004546000906001600160a01b0316336001600160a01b0316146107be5760405162461bcd60e51b815260206004820152603f60248201527f486f70725374616b653a2043616e6e6f7420536166655472616e73666572467260448201527f6f6d20746f6b656e73206f74686572207468616e20486f7072426f6f73742e0060648201526084016105ea565b6362dfd74042111561082a5760405162461bcd60e51b815260206004820152602f60248201527f486f70725374616b653a2050726f6772616d20656e6465642c2063616e6e6f7460448201526e103932b232b2b6903137b7b9ba399760891b60648201526084016105ea565b610833856118f3565b6001600160a01b038516600081815260056020908152604080832060068084528285208054865291845291842089905593835290528154600192919061087a908490612678565b90915550506004805460405163562317c560e01b81529182018690526000916001600160a01b039091169063562317c590602401602060405180830381865afa1580156108cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ef919061268b565b6004805460405163225b377d60e21b81529182018890529192506000916001600160a01b03169063896cddf4906024016040805180830381865afa15801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f91906126a4565b5060008381526009602052604090205490915060ff16156109dc5760405162461bcd60e51b815260206004820152603160248201527f486f70725374616b653a2043616e206f6e6c792072656465656d204e4654732060448201527037b31030b63637bbb2b2103a3cb832b99760791b60648201526084016105ea565b6001600160a01b038716600090815260086020526040812054905b81811015610bf9576001600160a01b0389811660009081526007602090815260408083208584529091528082205460048054925163562317c560e01b81529081018290529093919091169063562317c590602401602060405180830381865afa158015610a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8c919061268b565b6004805460405163225b377d60e21b81529182018590529192506000916001600160a01b03169063896cddf4906024016040805180830381865afa158015610ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afc91906126a4565b506004805460405163562317c560e01b815291820186905291925088916001600160a01b03169063562317c590602401602060405180830381865afa158015610b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6d919061268b565b03610be35785811015610ba1576001600160a01b038c16600090815260076020908152604080832087845290915290208b90555b604051868210908c906001600160a01b038f16907f066d96cb280fccf3a0a3a5686966a801b2690a32ec98fd2711a4e09f345d935d90600090a4505050610bf9565b5050508080610bf1906126c8565b9150506109f7565b818103610c80576001600160a01b038916600081815260076020908152604080832086845282528083208c905592825260089052908120805460019290610c41908490612678565b909155505060405160019089906001600160a01b038c16907f066d96cb280fccf3a0a3a5686966a801b2690a32ec98fd2711a4e09f345d935d90600090a45b50630a85bd0160e11b9998505050505050505050565b6000546001600160a01b03163314610cc05760405162461bcd60e51b81526004016105ea906126e1565b60008181526009602052604090205460ff16610d295760405162461bcd60e51b815260206004820152602260248201527f486f70725374616b653a204e46542074797065206973206e6f7420626c6f636b604482015261195960f21b60648201526084016105ea565b600081815260096020526040808220805460ff191690555182917ff78f7266ab985ddb2782b52fc236b9d2f22ff251a37a336a296ed4b188f7a92691a250565b6000546001600160a01b03163314610d935760405162461bcd60e51b81526004016105ea906126e1565b600260015403610de55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105ea565b60026001556004546001600160a01b0390811690831603610e565760405162461bcd60e51b815260206004820152602560248201527f486f70725374616b653a2043616e6e6f7420636c61696d20486f7072426f6f736044820152641d0813919560da1b60648201526084016105ea565b816001600160a01b03166323b872dd30610e786000546001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101849052606401600060405180830381600087803b158015610ec757600080fd5b505af1158015610edb573d6000803e3d6000fd5b50506001805550505050565b6000546001600160a01b03163314610f115760405162461bcd60e51b81526004016105ea906126e1565b60008181526009602052604090205460ff1615610f7f5760405162461bcd60e51b815260206004820152602660248201527f486f70725374616b653a204e4654207479706520697320616c726561647920626044820152651b1bd8dad95960d21b60648201526084016105ea565b610f888161197e565b50565b6000546001600160a01b03163314610fb55760405162461bcd60e51b81526004016105ea906126e1565b6002600154036110075760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105ea565b60026001819055546000906001600160a01b03908116908316036110a557600b546002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611070573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611094919061268b565b61109e9190612716565b9050611110565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156110e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110d919061268b565b90505b6111366111256000546001600160a01b031690565b6001600160a01b03841690836119c1565b505060018055565b600061114982611a18565b92915050565b6000546001600160a01b031633146111795760405162461bcd60e51b81526004016105ea906126e1565b6111836000611bff565b565b6000805b6001600160a01b0383166000908152600660205260409020548110156112ea576001600160a01b0383811660009081526005602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018290529093919091169063896cddf4906024016040805180830381865afa158015611211573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123591906126a4565b50875160208901206004805460405163c588ff8b60e01b815291820186905292935090916001600160a01b03169063c588ff8b90602401600060405180830381865afa158015611289573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112b1919081019061274d565b805190602001201480156112c457508086145b156112d557600193505050506112f0565b505080806112e2906126c8565b915050611189565b50600090505b9392505050565b6000805b6001600160a01b0383166000908152600660205260409020548110156112ea576001600160a01b0383811660009081526005602090815260408083208584529091528082205460048054925163c87b56dd60e01b81529081018290529093919091169063c87b56dd90602401600060405180830381865afa158015611384573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113ac919081019061274d565b6004805460405163562317c560e01b815291820185905291925088916001600160a01b03169063562317c590602401602060405180830381865afa1580156113f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141c919061268b565b14801561142e575061142e8187611c4f565b1561143f57600193505050506112f0565b5050808061144c906126c8565b9150506112fb565b6002546000906001600160a01b031633146114c65760405162461bcd60e51b815260206004820152602c60248201527f486f70725374616b653a204f6e6c7920616363657074204c4f434b5f544f4b4560448201526b4e20696e207374616b696e6760a01b60648201526084016105ea565b6362dfd7404211156115325760405162461bcd60e51b815260206004820152602f60248201527f486f70725374616b653a2050726f6772616d20656e6465642c2063616e6e6f7460448201526e1039ba30b5b29030b73cb6b7b9329760891b60648201526084016105ea565b61153b846118f3565b6001600160a01b0384166000908152600a602052604081208054859290611563908490612678565b9250508190555082600b600082825461157c9190612678565b909155505060405183906001600160a01b038616907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90600090a35060019392505050565b610f88816118f3565b61118333611cf8565b6000805b6001600160a01b0383166000908152600660205260409020548110156112ea576001600160a01b0383811660009081526005602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018290529093919091169063896cddf4906024016040805180830381865afa15801561165f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168391906126a4565b506004805460405163562317c560e01b815291820185905291925088916001600160a01b03169063562317c590602401602060405180830381865afa1580156116d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f4919061268b565b14801561170057508086145b1561171157600193505050506112f0565b5050808061171e906126c8565b9150506115d7565b600080848460405160200161173c9291906127c4565b604051602081830303815290604052905060005b6001600160a01b038416600090815260066020526040902054811015611834576001600160a01b0384811660009081526005602090815260408083208584529091528082205460048054925163c87b56dd60e01b81529081018290529093919091169063c87b56dd90602401600060405180830381865afa1580156117d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611801919081019061274d565b905061180d8185611c4f565b1561181f5760019450505050506112f0565b5050808061182c906126c8565b915050611750565b50600095945050505050565b610f8881611cf8565b611852816118f3565b610f8881611ed6565b6000546001600160a01b031633146118855760405162461bcd60e51b81526004016105ea906126e1565b6001600160a01b0381166118ea5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ea565b610f8881611bff565b60006118fe82611a18565b6001600160a01b0383166000908152600a602052604081206002018054929350839290919061192e908490612678565b90915550506001600160a01b0382166000818152600a602052604080822042600190910155518392917f99869d968ca3581a661f31abb3a6aa70ccec5cdc49855eab174cf9e00a2462db91a35050565b600081815260096020526040808220805460ff191660011790555182917f620d09c7c7f3c5c41d8b5ea7f274622ddd6ac6b801f035fc741205d113199c0c91a250565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611a1390849061201d565b505050565b6001600160a01b0381166000908152600a60209081526040808320815160808101835281548152600182015493810193909352600281015491830191909152600301546060820152636267dec042111580611a7b57506362dfd740816020015110155b15611a895750600092915050565b8051600090611a9b90610c6390612800565b905060005b6001600160a01b038516600090815260086020526040902054811015611b93576001600160a01b0385811660009081526007602090815260408083208584529091528082205460048054925163225b377d60e21b81529081018290529093919091169063896cddf4906024016040805180830381865afa158015611b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4c91906126a4565b5085519091508190611b6890691fc3842bd1f071c000006120ef565b611b729190612800565b611b7c9085612678565b935050508080611b8b906126c8565b915050611aa0565b5064e8d4a51000611bc36362dfd740611bbd636267dec0866020015161210590919063ffffffff16565b906120ef565b611bd96362dfd740611bbd42636267dec0612105565b611be39190612716565b611bed9083612800565b611bf79190612817565b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051825160009184918491908490611c68908390612716565b9050600084611c78600184612716565b81518110611c8857611c88612839565b01602001516001600160f81b0319169050602f60f81b8114611cb257600095505050505050611149565b6000611cbf846020612716565b611cca906008612800565b9050600080611cd88761284f565b979094016020015196821c9690911c959095149550505050505092915050565b6362dfd7404211611d675760405162461bcd60e51b815260206004820152603360248201527f486f70725374616b653a2050726f6772616d206973206f6e676f696e672c206360448201527230b73737ba103ab73637b1b59039ba30b5b29760691b60648201526084016105ea565b6001600160a01b0381166000908152600a6020526040902054611d89826118f3565b6001600160a01b0382166000908152600a60205260408120819055600b8054839290611db6908490612716565b90915550611dc5905082611ed6565b600254611ddc906001600160a01b031683836119c1565b60005b6001600160a01b038316600090815260066020526040902054811015611e9b57600480546001600160a01b038581166000818152600560209081526040808320888452909152908190205490516323b872dd60e01b815230958101959095526024850191909152604484015216906323b872dd90606401600060405180830381600087803b158015611e7057600080fd5b505af1158015611e84573d6000803e3d6000fd5b505050508080611e93906126c8565b915050611ddf565b5060405181906001600160a01b038416907fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e90600090a35050565b6001600160a01b0381166000908152600a6020908152604080832081516080810183528154815260018201549381019390935260028101549183018290526003015460608301819052919291611f2b91612716565b90508015611a13576001600160a01b0383166000908152600a602052604090206002810154600390910155600c54811115611fb45760405162461bcd60e51b8152602060048201526024808201527f486f70725374616b653a20496e73756666696369656e7420726577617264207060448201526337b7b61760e11b60648201526084016105ea565b80600c6000828254611fc69190612716565b9091555050600354611fe2906001600160a01b031684836119c1565b60405181906001600160a01b038516907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a90600090a3505050565b6000612072826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121159092919063ffffffff16565b805190915015611a1357808060200190518101906120909190612876565b611a135760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105ea565b60008183106120fe57816112f0565b5090919050565b6000818310156120fe57816112f0565b6060611bf7848460008585843b61216e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105ea565b600080866001600160a01b0316858760405161218a9190612898565b60006040518083038185875af1925050503d80600081146121c7576040519150601f19603f3d011682016040523d82523d6000602084013e6121cc565b606091505b50915091506121dc8282866121e7565b979650505050505050565b606083156121f65750816112f0565b8251156122065782518084602001fd5b8160405162461bcd60e51b81526004016105ea91906128b4565b80356001600160a01b038116811461223757600080fd5b919050565b60008083601f84011261224e57600080fd5b50813567ffffffffffffffff81111561226657600080fd5b60208301915083602082850101111561227e57600080fd5b9250929050565b60008060008060008060008060c0898b0312156122a157600080fd5b6122aa89612220565b97506122b860208a01612220565b96506122c660408a01612220565b955060608901359450608089013567ffffffffffffffff808211156122ea57600080fd5b6122f68c838d0161223c565b909650945060a08b013591508082111561230f57600080fd5b5061231c8b828c0161223c565b999c989b5096995094979396929594505050565b6000806040838503121561234357600080fd5b61234c83612220565b946020939093013593505050565b60008060008060006080868803121561237257600080fd5b61237b86612220565b945061238960208701612220565b935060408601359250606086013567ffffffffffffffff8111156123ac57600080fd5b6123b88882890161223c565b969995985093965092949392505050565b6000602082840312156123db57600080fd5b6112f082612220565b6000602082840312156123f657600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561243c5761243c6123fd565b604052919050565b600067ffffffffffffffff82111561245e5761245e6123fd565b50601f01601f191660200190565b600061247f61247a84612444565b612413565b905082815283838301111561249357600080fd5b828260208301376000602084830101529392505050565b600082601f8301126124bb57600080fd5b6112f08383356020850161246c565b6000806000606084860312156124df57600080fd5b833567ffffffffffffffff8111156124f657600080fd5b612502868287016124aa565b9350506020840135915061251860408501612220565b90509250925092565b60008060006060848603121561253657600080fd5b83359250602084013567ffffffffffffffff81111561255457600080fd5b612560868287016124aa565b92505061251860408501612220565b60008060006060848603121561258457600080fd5b61258d84612220565b925060208401359150604084013567ffffffffffffffff8111156125b057600080fd5b8401601f810186136125c157600080fd5b6125d08682356020840161246c565b9150509250925092565b6000806000606084860312156125ef57600080fd5b833592506020840135915061251860408501612220565b60008060006060848603121561261b57600080fd5b833567ffffffffffffffff8082111561263357600080fd5b61263f878388016124aa565b9450602086013591508082111561265557600080fd5b50612560868287016124aa565b634e487b7160e01b600052601160045260246000fd5b8082018082111561114957611149612662565b60006020828403121561269d57600080fd5b5051919050565b600080604083850312156126b757600080fd5b505080516020909101519092909150565b6000600182016126da576126da612662565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8181038181111561114957611149612662565b60005b8381101561274457818101518382015260200161272c565b50506000910152565b60006020828403121561275f57600080fd5b815167ffffffffffffffff81111561277657600080fd5b8201601f8101841361278757600080fd5b805161279561247a82612444565b8181528560208385010111156127aa57600080fd5b6127bb826020830160208601612729565b95945050505050565b600083516127d6818460208801612729565b602f60f81b90830190815283516127f4816001840160208801612729565b01600101949350505050565b808202811582820484141761114957611149612662565b60008261283457634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b80516020808301519190811015612870576000198160200360031b1b821691505b50919050565b60006020828403121561288857600080fd5b815180151581146112f057600080fd5b600082516128aa818460208701612729565b9190910192915050565b60208152600082518060208401526128d3816040850160208701612729565b601f01601f1916919091016040019291505056fea26469706673582212209fd8d7c52249b0866e4a61bb0e4005fa728e04adf2074cc3a9e467d05374686064736f6c63430008110033"
            .parse()
            .expect("invalid bytecode")
    });
    pub struct HoprStakeSeason3<M>(::ethers::contract::Contract<M>);
    impl<M> Clone for HoprStakeSeason3<M> {
        fn clone(&self) -> Self {
            HoprStakeSeason3(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for HoprStakeSeason3<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for HoprStakeSeason3<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(HoprStakeSeason3)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> HoprStakeSeason3<M> {
        /// Creates a new contract instance with the specified `ethers`
        /// client at the given `Address`. The contract derefs to a `ethers::Contract`
        /// object
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    HOPRSTAKESEASON3_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// 1. If there are no constructor arguments, you should pass `()` as the argument.
        /// 1. The default poll duration is 7 seconds.
        /// 1. The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter,"../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                HOPRSTAKESEASON3_ABI.clone(),
                HOPRSTAKESEASON3_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `BASIC_FACTOR_NUMERATOR` (0x6aa8d4cf) function
        pub fn basic_factor_numerator(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([106, 168, 212, 207], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `BOOST_CAP` (0xef0526a2) function
        pub fn boost_cap(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([239, 5, 38, 162], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `FACTOR_DENOMINATOR` (0x5ef73d58) function
        pub fn factor_denominator(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([94, 247, 61, 88], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `LOCK_TOKEN` (0xd0da6801) function
        pub fn lock_token(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([208, 218, 104, 1], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `NFT_CONTRACT` (0x1fda9a02) function
        pub fn nft_contract(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([31, 218, 154, 2], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `PROGRAM_END` (0xcbffa3c7) function
        pub fn program_end(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([203, 255, 163, 199], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `PROGRAM_START` (0x5bbb63a6) function
        pub fn program_start(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([91, 187, 99, 166], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `REWARD_TOKEN` (0x99248ea7) function
        pub fn reward_token(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([153, 36, 142, 167], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `accounts` (0x5e5c06e2) function
        pub fn accounts(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            (
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([94, 92, 6, 226], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `availableReward` (0x4ad84b34) function
        pub fn available_reward(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([74, 216, 75, 52], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `claimRewards` (0xef5cfb8c) function
        pub fn claim_rewards(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([239, 92, 251, 140], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getCumulatedRewardsIncrement` (0x70af0934) function
        pub fn get_cumulated_rewards_increment(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([112, 175, 9, 52], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isBlockedNft` (0x42c93361) function
        pub fn is_blocked_nft(
            &self,
            p0: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([66, 201, 51, 97], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isNftTypeAndRankRedeemed1` (0xce23177e) function
        pub fn is_nft_type_and_rank_redeemed_1(
            &self,
            nft_type: String,
            nft_rank: String,
            hodler: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([206, 35, 23, 126], (nft_type, nft_rank, hodler))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isNftTypeAndRankRedeemed2` (0x96a9cd7d) function
        pub fn is_nft_type_and_rank_redeemed_2(
            &self,
            nft_type_index: ::ethers::core::types::U256,
            nft_rank: String,
            hodler: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([150, 169, 205, 125], (nft_type_index, nft_rank, hodler))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isNftTypeAndRankRedeemed3` (0xa83d1ed6) function
        pub fn is_nft_type_and_rank_redeemed_3(
            &self,
            nft_type_index: ::ethers::core::types::U256,
            boost_numerator: ::ethers::core::types::U256,
            hodler: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash(
                    [168, 61, 30, 214],
                    (nft_type_index, boost_numerator, hodler),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isNftTypeAndRankRedeemed4` (0x8c24add4) function
        pub fn is_nft_type_and_rank_redeemed_4(
            &self,
            nft_type: String,
            boost_numerator: ::ethers::core::types::U256,
            hodler: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([140, 36, 173, 212], (nft_type, boost_numerator, hodler))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `onERC721Received` (0x150b7a02) function
        pub fn on_erc721_received(
            &self,
            operator: ::ethers::core::types::Address,
            from: ::ethers::core::types::Address,
            token_id: ::ethers::core::types::U256,
            data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 4]> {
            self.0
                .method_hash([21, 11, 122, 2], (operator, from, token_id, data))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `onTokenTransfer` (0xa4c0ed36) function
        pub fn on_token_transfer(
            &self,
            from: ::ethers::core::types::Address,
            value: ::ethers::core::types::U256,
            data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([164, 192, 237, 54], (from, value, data))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `owner` (0x8da5cb5b) function
        pub fn owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `ownerBlockNftType` (0x5e4c0e15) function
        pub fn owner_block_nft_type(
            &self,
            type_index: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([94, 76, 14, 21], type_index)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `ownerUnblockNftType` (0x21cf85ba) function
        pub fn owner_unblock_nft_type(
            &self,
            type_index: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([33, 207, 133, 186], type_index)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `reclaimErc20Tokens` (0x6067bc15) function
        pub fn reclaim_erc_20_tokens(
            &self,
            token_address: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([96, 103, 188, 21], token_address)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `reclaimErc721Tokens` (0x48c64e41) function
        pub fn reclaim_erc_721_tokens(
            &self,
            token_address: ::ethers::core::types::Address,
            token_id: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([72, 198, 78, 65], (token_address, token_id))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `redeemedFactor` (0x81128c1d) function
        pub fn redeemed_factor(
            &self,
            p0: ::ethers::core::types::Address,
            p1: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([129, 18, 140, 29], (p0, p1))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `redeemedFactorIndex` (0x1f014d83) function
        pub fn redeemed_factor_index(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([31, 1, 77, 131], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `redeemedNft` (0x0a1a257a) function
        pub fn redeemed_nft(
            &self,
            p0: ::ethers::core::types::Address,
            p1: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([10, 26, 37, 122], (p0, p1))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `redeemedNftIndex` (0xd0c02d63) function
        pub fn redeemed_nft_index(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([208, 192, 45, 99], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `renounceOwnership` (0x715018a6) function
        pub fn renounce_ownership(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `stakedHoprTokens` (0xf978fff1) function
        pub fn staked_hopr_tokens(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([249, 120, 255, 241], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `sync` (0xa5841194) function
        pub fn sync(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([165, 132, 17, 148], account)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `tokensReceived` (0x0023de29) function
        pub fn tokens_received(
            &self,
            operator: ::ethers::core::types::Address,
            from: ::ethers::core::types::Address,
            to: ::ethers::core::types::Address,
            amount: ::ethers::core::types::U256,
            user_data: ::ethers::core::types::Bytes,
            operator_data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [0, 35, 222, 41],
                    (operator, from, to, amount, user_data, operator_data),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `totalLocked` (0x56891412) function
        pub fn total_locked(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([86, 137, 20, 18], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `transferOwnership` (0xf2fde38b) function
        pub fn transfer_ownership(
            &self,
            new_owner: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `unlock` (0xa69df4b5) function
        pub fn unlock(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([166, 157, 244, 181], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `unlockFor` (0xdde49979) function
        pub fn unlock_for(
            &self,
            account: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([221, 228, 153, 121], account)
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `Claimed` event
        pub fn claimed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, ClaimedFilter> {
            self.0.event()
        }
        ///Gets the contract's `NftAllowed` event
        pub fn nft_allowed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, NftAllowedFilter> {
            self.0.event()
        }
        ///Gets the contract's `NftBlocked` event
        pub fn nft_blocked_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, NftBlockedFilter> {
            self.0.event()
        }
        ///Gets the contract's `OwnershipTransferred` event
        pub fn ownership_transferred_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, OwnershipTransferredFilter> {
            self.0.event()
        }
        ///Gets the contract's `Redeemed` event
        pub fn redeemed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, RedeemedFilter> {
            self.0.event()
        }
        ///Gets the contract's `Released` event
        pub fn released_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, ReleasedFilter> {
            self.0.event()
        }
        ///Gets the contract's `RewardFueled` event
        pub fn reward_fueled_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, RewardFueledFilter> {
            self.0.event()
        }
        ///Gets the contract's `Staked` event
        pub fn staked_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, StakedFilter> {
            self.0.event()
        }
        ///Gets the contract's `Sync` event
        pub fn sync_filter(&self) -> ::ethers::contract::builders::Event<M, SyncFilter> {
            self.0.event()
        }
        /// Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<M, HoprStakeSeason3Events> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for HoprStakeSeason3<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "Claimed", abi = "Claimed(address,uint256)")]
    pub struct ClaimedFilter {
        #[ethevent(indexed)]
        pub account: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub reward_amount: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "NftAllowed", abi = "NftAllowed(uint256)")]
    pub struct NftAllowedFilter {
        #[ethevent(indexed)]
        pub type_index: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "NftBlocked", abi = "NftBlocked(uint256)")]
    pub struct NftBlockedFilter {
        #[ethevent(indexed)]
        pub type_index: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub previous_owner: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "Redeemed", abi = "Redeemed(address,uint256,bool)")]
    pub struct RedeemedFilter {
        #[ethevent(indexed)]
        pub account: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub boost_token_id: ::ethers::core::types::U256,
        #[ethevent(indexed)]
        pub factor_registered: bool,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "Released", abi = "Released(address,uint256)")]
    pub struct ReleasedFilter {
        #[ethevent(indexed)]
        pub account: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub actual_amount: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "RewardFueled", abi = "RewardFueled(uint256)")]
    pub struct RewardFueledFilter {
        #[ethevent(indexed)]
        pub amount: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "Staked", abi = "Staked(address,uint256)")]
    pub struct StakedFilter {
        #[ethevent(indexed)]
        pub account: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub actual_amount: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "Sync", abi = "Sync(address,uint256)")]
    pub struct SyncFilter {
        #[ethevent(indexed)]
        pub account: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub increment: ::ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum HoprStakeSeason3Events {
        ClaimedFilter(ClaimedFilter),
        NftAllowedFilter(NftAllowedFilter),
        NftBlockedFilter(NftBlockedFilter),
        OwnershipTransferredFilter(OwnershipTransferredFilter),
        RedeemedFilter(RedeemedFilter),
        ReleasedFilter(ReleasedFilter),
        RewardFueledFilter(RewardFueledFilter),
        StakedFilter(StakedFilter),
        SyncFilter(SyncFilter),
    }
    impl ::ethers::contract::EthLogDecode for HoprStakeSeason3Events {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = ClaimedFilter::decode_log(log) {
                return Ok(HoprStakeSeason3Events::ClaimedFilter(decoded));
            }
            if let Ok(decoded) = NftAllowedFilter::decode_log(log) {
                return Ok(HoprStakeSeason3Events::NftAllowedFilter(decoded));
            }
            if let Ok(decoded) = NftBlockedFilter::decode_log(log) {
                return Ok(HoprStakeSeason3Events::NftBlockedFilter(decoded));
            }
            if let Ok(decoded) = OwnershipTransferredFilter::decode_log(log) {
                return Ok(HoprStakeSeason3Events::OwnershipTransferredFilter(decoded));
            }
            if let Ok(decoded) = RedeemedFilter::decode_log(log) {
                return Ok(HoprStakeSeason3Events::RedeemedFilter(decoded));
            }
            if let Ok(decoded) = ReleasedFilter::decode_log(log) {
                return Ok(HoprStakeSeason3Events::ReleasedFilter(decoded));
            }
            if let Ok(decoded) = RewardFueledFilter::decode_log(log) {
                return Ok(HoprStakeSeason3Events::RewardFueledFilter(decoded));
            }
            if let Ok(decoded) = StakedFilter::decode_log(log) {
                return Ok(HoprStakeSeason3Events::StakedFilter(decoded));
            }
            if let Ok(decoded) = SyncFilter::decode_log(log) {
                return Ok(HoprStakeSeason3Events::SyncFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for HoprStakeSeason3Events {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                HoprStakeSeason3Events::ClaimedFilter(element) => element.fmt(f),
                HoprStakeSeason3Events::NftAllowedFilter(element) => element.fmt(f),
                HoprStakeSeason3Events::NftBlockedFilter(element) => element.fmt(f),
                HoprStakeSeason3Events::OwnershipTransferredFilter(element) => {
                    element.fmt(f)
                }
                HoprStakeSeason3Events::RedeemedFilter(element) => element.fmt(f),
                HoprStakeSeason3Events::ReleasedFilter(element) => element.fmt(f),
                HoprStakeSeason3Events::RewardFueledFilter(element) => element.fmt(f),
                HoprStakeSeason3Events::StakedFilter(element) => element.fmt(f),
                HoprStakeSeason3Events::SyncFilter(element) => element.fmt(f),
            }
        }
    }
    ///Container type for all input parameters for the `BASIC_FACTOR_NUMERATOR` function with signature `BASIC_FACTOR_NUMERATOR()` and selector `0x6aa8d4cf`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "BASIC_FACTOR_NUMERATOR", abi = "BASIC_FACTOR_NUMERATOR()")]
    pub struct BasicFactorNumeratorCall;
    ///Container type for all input parameters for the `BOOST_CAP` function with signature `BOOST_CAP()` and selector `0xef0526a2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "BOOST_CAP", abi = "BOOST_CAP()")]
    pub struct BoostCapCall;
    ///Container type for all input parameters for the `FACTOR_DENOMINATOR` function with signature `FACTOR_DENOMINATOR()` and selector `0x5ef73d58`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "FACTOR_DENOMINATOR", abi = "FACTOR_DENOMINATOR()")]
    pub struct FactorDenominatorCall;
    ///Container type for all input parameters for the `LOCK_TOKEN` function with signature `LOCK_TOKEN()` and selector `0xd0da6801`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "LOCK_TOKEN", abi = "LOCK_TOKEN()")]
    pub struct LockTokenCall;
    ///Container type for all input parameters for the `NFT_CONTRACT` function with signature `NFT_CONTRACT()` and selector `0x1fda9a02`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "NFT_CONTRACT", abi = "NFT_CONTRACT()")]
    pub struct NftContractCall;
    ///Container type for all input parameters for the `PROGRAM_END` function with signature `PROGRAM_END()` and selector `0xcbffa3c7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "PROGRAM_END", abi = "PROGRAM_END()")]
    pub struct ProgramEndCall;
    ///Container type for all input parameters for the `PROGRAM_START` function with signature `PROGRAM_START()` and selector `0x5bbb63a6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "PROGRAM_START", abi = "PROGRAM_START()")]
    pub struct ProgramStartCall;
    ///Container type for all input parameters for the `REWARD_TOKEN` function with signature `REWARD_TOKEN()` and selector `0x99248ea7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "REWARD_TOKEN", abi = "REWARD_TOKEN()")]
    pub struct RewardTokenCall;
    ///Container type for all input parameters for the `accounts` function with signature `accounts(address)` and selector `0x5e5c06e2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "accounts", abi = "accounts(address)")]
    pub struct AccountsCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `availableReward` function with signature `availableReward()` and selector `0x4ad84b34`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "availableReward", abi = "availableReward()")]
    pub struct AvailableRewardCall;
    ///Container type for all input parameters for the `claimRewards` function with signature `claimRewards(address)` and selector `0xef5cfb8c`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "claimRewards", abi = "claimRewards(address)")]
    pub struct ClaimRewardsCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `getCumulatedRewardsIncrement` function with signature `getCumulatedRewardsIncrement(address)` and selector `0x70af0934`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "getCumulatedRewardsIncrement",
        abi = "getCumulatedRewardsIncrement(address)"
    )]
    pub struct GetCumulatedRewardsIncrementCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `isBlockedNft` function with signature `isBlockedNft(uint256)` and selector `0x42c93361`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "isBlockedNft", abi = "isBlockedNft(uint256)")]
    pub struct IsBlockedNftCall(pub ::ethers::core::types::U256);
    ///Container type for all input parameters for the `isNftTypeAndRankRedeemed1` function with signature `isNftTypeAndRankRedeemed1(string,string,address)` and selector `0xce23177e`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "isNftTypeAndRankRedeemed1",
        abi = "isNftTypeAndRankRedeemed1(string,string,address)"
    )]
    pub struct IsNftTypeAndRankRedeemed1Call {
        pub nft_type: String,
        pub nft_rank: String,
        pub hodler: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `isNftTypeAndRankRedeemed2` function with signature `isNftTypeAndRankRedeemed2(uint256,string,address)` and selector `0x96a9cd7d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "isNftTypeAndRankRedeemed2",
        abi = "isNftTypeAndRankRedeemed2(uint256,string,address)"
    )]
    pub struct IsNftTypeAndRankRedeemed2Call {
        pub nft_type_index: ::ethers::core::types::U256,
        pub nft_rank: String,
        pub hodler: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `isNftTypeAndRankRedeemed3` function with signature `isNftTypeAndRankRedeemed3(uint256,uint256,address)` and selector `0xa83d1ed6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "isNftTypeAndRankRedeemed3",
        abi = "isNftTypeAndRankRedeemed3(uint256,uint256,address)"
    )]
    pub struct IsNftTypeAndRankRedeemed3Call {
        pub nft_type_index: ::ethers::core::types::U256,
        pub boost_numerator: ::ethers::core::types::U256,
        pub hodler: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `isNftTypeAndRankRedeemed4` function with signature `isNftTypeAndRankRedeemed4(string,uint256,address)` and selector `0x8c24add4`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "isNftTypeAndRankRedeemed4",
        abi = "isNftTypeAndRankRedeemed4(string,uint256,address)"
    )]
    pub struct IsNftTypeAndRankRedeemed4Call {
        pub nft_type: String,
        pub boost_numerator: ::ethers::core::types::U256,
        pub hodler: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `onERC721Received` function with signature `onERC721Received(address,address,uint256,bytes)` and selector `0x150b7a02`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "onERC721Received",
        abi = "onERC721Received(address,address,uint256,bytes)"
    )]
    pub struct OnERC721ReceivedCall {
        pub operator: ::ethers::core::types::Address,
        pub from: ::ethers::core::types::Address,
        pub token_id: ::ethers::core::types::U256,
        pub data: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `onTokenTransfer` function with signature `onTokenTransfer(address,uint256,bytes)` and selector `0xa4c0ed36`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "onTokenTransfer", abi = "onTokenTransfer(address,uint256,bytes)")]
    pub struct OnTokenTransferCall {
        pub from: ::ethers::core::types::Address,
        pub value: ::ethers::core::types::U256,
        pub data: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    ///Container type for all input parameters for the `ownerBlockNftType` function with signature `ownerBlockNftType(uint256)` and selector `0x5e4c0e15`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "ownerBlockNftType", abi = "ownerBlockNftType(uint256)")]
    pub struct OwnerBlockNftTypeCall {
        pub type_index: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `ownerUnblockNftType` function with signature `ownerUnblockNftType(uint256)` and selector `0x21cf85ba`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "ownerUnblockNftType", abi = "ownerUnblockNftType(uint256)")]
    pub struct OwnerUnblockNftTypeCall {
        pub type_index: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `reclaimErc20Tokens` function with signature `reclaimErc20Tokens(address)` and selector `0x6067bc15`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "reclaimErc20Tokens", abi = "reclaimErc20Tokens(address)")]
    pub struct ReclaimErc20TokensCall {
        pub token_address: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `reclaimErc721Tokens` function with signature `reclaimErc721Tokens(address,uint256)` and selector `0x48c64e41`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "reclaimErc721Tokens",
        abi = "reclaimErc721Tokens(address,uint256)"
    )]
    pub struct ReclaimErc721TokensCall {
        pub token_address: ::ethers::core::types::Address,
        pub token_id: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `redeemedFactor` function with signature `redeemedFactor(address,uint256)` and selector `0x81128c1d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "redeemedFactor", abi = "redeemedFactor(address,uint256)")]
    pub struct RedeemedFactorCall(
        pub ::ethers::core::types::Address,
        pub ::ethers::core::types::U256,
    );
    ///Container type for all input parameters for the `redeemedFactorIndex` function with signature `redeemedFactorIndex(address)` and selector `0x1f014d83`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "redeemedFactorIndex", abi = "redeemedFactorIndex(address)")]
    pub struct RedeemedFactorIndexCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `redeemedNft` function with signature `redeemedNft(address,uint256)` and selector `0x0a1a257a`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "redeemedNft", abi = "redeemedNft(address,uint256)")]
    pub struct RedeemedNftCall(
        pub ::ethers::core::types::Address,
        pub ::ethers::core::types::U256,
    );
    ///Container type for all input parameters for the `redeemedNftIndex` function with signature `redeemedNftIndex(address)` and selector `0xd0c02d63`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "redeemedNftIndex", abi = "redeemedNftIndex(address)")]
    pub struct RedeemedNftIndexCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `renounceOwnership` function with signature `renounceOwnership()` and selector `0x715018a6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    ///Container type for all input parameters for the `stakedHoprTokens` function with signature `stakedHoprTokens(address)` and selector `0xf978fff1`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "stakedHoprTokens", abi = "stakedHoprTokens(address)")]
    pub struct StakedHoprTokensCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `sync` function with signature `sync(address)` and selector `0xa5841194`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "sync", abi = "sync(address)")]
    pub struct SyncCall {
        pub account: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `tokensReceived` function with signature `tokensReceived(address,address,address,uint256,bytes,bytes)` and selector `0x0023de29`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "tokensReceived",
        abi = "tokensReceived(address,address,address,uint256,bytes,bytes)"
    )]
    pub struct TokensReceivedCall {
        pub operator: ::ethers::core::types::Address,
        pub from: ::ethers::core::types::Address,
        pub to: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
        pub user_data: ::ethers::core::types::Bytes,
        pub operator_data: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `totalLocked` function with signature `totalLocked()` and selector `0x56891412`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "totalLocked", abi = "totalLocked()")]
    pub struct TotalLockedCall;
    ///Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address)` and selector `0xf2fde38b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `unlock` function with signature `unlock()` and selector `0xa69df4b5`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "unlock", abi = "unlock()")]
    pub struct UnlockCall;
    ///Container type for all input parameters for the `unlockFor` function with signature `unlockFor(address)` and selector `0xdde49979`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "unlockFor", abi = "unlockFor(address)")]
    pub struct UnlockForCall {
        pub account: ::ethers::core::types::Address,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum HoprStakeSeason3Calls {
        BasicFactorNumerator(BasicFactorNumeratorCall),
        BoostCap(BoostCapCall),
        FactorDenominator(FactorDenominatorCall),
        LockToken(LockTokenCall),
        NftContract(NftContractCall),
        ProgramEnd(ProgramEndCall),
        ProgramStart(ProgramStartCall),
        RewardToken(RewardTokenCall),
        Accounts(AccountsCall),
        AvailableReward(AvailableRewardCall),
        ClaimRewards(ClaimRewardsCall),
        GetCumulatedRewardsIncrement(GetCumulatedRewardsIncrementCall),
        IsBlockedNft(IsBlockedNftCall),
        IsNftTypeAndRankRedeemed1(IsNftTypeAndRankRedeemed1Call),
        IsNftTypeAndRankRedeemed2(IsNftTypeAndRankRedeemed2Call),
        IsNftTypeAndRankRedeemed3(IsNftTypeAndRankRedeemed3Call),
        IsNftTypeAndRankRedeemed4(IsNftTypeAndRankRedeemed4Call),
        OnERC721Received(OnERC721ReceivedCall),
        OnTokenTransfer(OnTokenTransferCall),
        Owner(OwnerCall),
        OwnerBlockNftType(OwnerBlockNftTypeCall),
        OwnerUnblockNftType(OwnerUnblockNftTypeCall),
        ReclaimErc20Tokens(ReclaimErc20TokensCall),
        ReclaimErc721Tokens(ReclaimErc721TokensCall),
        RedeemedFactor(RedeemedFactorCall),
        RedeemedFactorIndex(RedeemedFactorIndexCall),
        RedeemedNft(RedeemedNftCall),
        RedeemedNftIndex(RedeemedNftIndexCall),
        RenounceOwnership(RenounceOwnershipCall),
        StakedHoprTokens(StakedHoprTokensCall),
        Sync(SyncCall),
        TokensReceived(TokensReceivedCall),
        TotalLocked(TotalLockedCall),
        TransferOwnership(TransferOwnershipCall),
        Unlock(UnlockCall),
        UnlockFor(UnlockForCall),
    }
    impl ::ethers::core::abi::AbiDecode for HoprStakeSeason3Calls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::AbiError> {
            if let Ok(decoded)
                = <BasicFactorNumeratorCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::BasicFactorNumerator(decoded));
            }
            if let Ok(decoded)
                = <BoostCapCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::BoostCap(decoded));
            }
            if let Ok(decoded)
                = <FactorDenominatorCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::FactorDenominator(decoded));
            }
            if let Ok(decoded)
                = <LockTokenCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::LockToken(decoded));
            }
            if let Ok(decoded)
                = <NftContractCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::NftContract(decoded));
            }
            if let Ok(decoded)
                = <ProgramEndCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::ProgramEnd(decoded));
            }
            if let Ok(decoded)
                = <ProgramStartCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::ProgramStart(decoded));
            }
            if let Ok(decoded)
                = <RewardTokenCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::RewardToken(decoded));
            }
            if let Ok(decoded)
                = <AccountsCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::Accounts(decoded));
            }
            if let Ok(decoded)
                = <AvailableRewardCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::AvailableReward(decoded));
            }
            if let Ok(decoded)
                = <ClaimRewardsCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::ClaimRewards(decoded));
            }
            if let Ok(decoded)
                = <GetCumulatedRewardsIncrementCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::GetCumulatedRewardsIncrement(decoded));
            }
            if let Ok(decoded)
                = <IsBlockedNftCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::IsBlockedNft(decoded));
            }
            if let Ok(decoded)
                = <IsNftTypeAndRankRedeemed1Call as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::IsNftTypeAndRankRedeemed1(decoded));
            }
            if let Ok(decoded)
                = <IsNftTypeAndRankRedeemed2Call as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::IsNftTypeAndRankRedeemed2(decoded));
            }
            if let Ok(decoded)
                = <IsNftTypeAndRankRedeemed3Call as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::IsNftTypeAndRankRedeemed3(decoded));
            }
            if let Ok(decoded)
                = <IsNftTypeAndRankRedeemed4Call as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::IsNftTypeAndRankRedeemed4(decoded));
            }
            if let Ok(decoded)
                = <OnERC721ReceivedCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::OnERC721Received(decoded));
            }
            if let Ok(decoded)
                = <OnTokenTransferCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::OnTokenTransfer(decoded));
            }
            if let Ok(decoded)
                = <OwnerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(HoprStakeSeason3Calls::Owner(decoded));
            }
            if let Ok(decoded)
                = <OwnerBlockNftTypeCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::OwnerBlockNftType(decoded));
            }
            if let Ok(decoded)
                = <OwnerUnblockNftTypeCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::OwnerUnblockNftType(decoded));
            }
            if let Ok(decoded)
                = <ReclaimErc20TokensCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::ReclaimErc20Tokens(decoded));
            }
            if let Ok(decoded)
                = <ReclaimErc721TokensCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::ReclaimErc721Tokens(decoded));
            }
            if let Ok(decoded)
                = <RedeemedFactorCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::RedeemedFactor(decoded));
            }
            if let Ok(decoded)
                = <RedeemedFactorIndexCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::RedeemedFactorIndex(decoded));
            }
            if let Ok(decoded)
                = <RedeemedNftCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::RedeemedNft(decoded));
            }
            if let Ok(decoded)
                = <RedeemedNftIndexCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::RedeemedNftIndex(decoded));
            }
            if let Ok(decoded)
                = <RenounceOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::RenounceOwnership(decoded));
            }
            if let Ok(decoded)
                = <StakedHoprTokensCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::StakedHoprTokens(decoded));
            }
            if let Ok(decoded)
                = <SyncCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(HoprStakeSeason3Calls::Sync(decoded));
            }
            if let Ok(decoded)
                = <TokensReceivedCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::TokensReceived(decoded));
            }
            if let Ok(decoded)
                = <TotalLockedCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::TotalLocked(decoded));
            }
            if let Ok(decoded)
                = <TransferOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::TransferOwnership(decoded));
            }
            if let Ok(decoded)
                = <UnlockCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(HoprStakeSeason3Calls::Unlock(decoded));
            }
            if let Ok(decoded)
                = <UnlockForCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(HoprStakeSeason3Calls::UnlockFor(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for HoprStakeSeason3Calls {
        fn encode(self) -> Vec<u8> {
            match self {
                HoprStakeSeason3Calls::BasicFactorNumerator(element) => element.encode(),
                HoprStakeSeason3Calls::BoostCap(element) => element.encode(),
                HoprStakeSeason3Calls::FactorDenominator(element) => element.encode(),
                HoprStakeSeason3Calls::LockToken(element) => element.encode(),
                HoprStakeSeason3Calls::NftContract(element) => element.encode(),
                HoprStakeSeason3Calls::ProgramEnd(element) => element.encode(),
                HoprStakeSeason3Calls::ProgramStart(element) => element.encode(),
                HoprStakeSeason3Calls::RewardToken(element) => element.encode(),
                HoprStakeSeason3Calls::Accounts(element) => element.encode(),
                HoprStakeSeason3Calls::AvailableReward(element) => element.encode(),
                HoprStakeSeason3Calls::ClaimRewards(element) => element.encode(),
                HoprStakeSeason3Calls::GetCumulatedRewardsIncrement(element) => {
                    element.encode()
                }
                HoprStakeSeason3Calls::IsBlockedNft(element) => element.encode(),
                HoprStakeSeason3Calls::IsNftTypeAndRankRedeemed1(element) => {
                    element.encode()
                }
                HoprStakeSeason3Calls::IsNftTypeAndRankRedeemed2(element) => {
                    element.encode()
                }
                HoprStakeSeason3Calls::IsNftTypeAndRankRedeemed3(element) => {
                    element.encode()
                }
                HoprStakeSeason3Calls::IsNftTypeAndRankRedeemed4(element) => {
                    element.encode()
                }
                HoprStakeSeason3Calls::OnERC721Received(element) => element.encode(),
                HoprStakeSeason3Calls::OnTokenTransfer(element) => element.encode(),
                HoprStakeSeason3Calls::Owner(element) => element.encode(),
                HoprStakeSeason3Calls::OwnerBlockNftType(element) => element.encode(),
                HoprStakeSeason3Calls::OwnerUnblockNftType(element) => element.encode(),
                HoprStakeSeason3Calls::ReclaimErc20Tokens(element) => element.encode(),
                HoprStakeSeason3Calls::ReclaimErc721Tokens(element) => element.encode(),
                HoprStakeSeason3Calls::RedeemedFactor(element) => element.encode(),
                HoprStakeSeason3Calls::RedeemedFactorIndex(element) => element.encode(),
                HoprStakeSeason3Calls::RedeemedNft(element) => element.encode(),
                HoprStakeSeason3Calls::RedeemedNftIndex(element) => element.encode(),
                HoprStakeSeason3Calls::RenounceOwnership(element) => element.encode(),
                HoprStakeSeason3Calls::StakedHoprTokens(element) => element.encode(),
                HoprStakeSeason3Calls::Sync(element) => element.encode(),
                HoprStakeSeason3Calls::TokensReceived(element) => element.encode(),
                HoprStakeSeason3Calls::TotalLocked(element) => element.encode(),
                HoprStakeSeason3Calls::TransferOwnership(element) => element.encode(),
                HoprStakeSeason3Calls::Unlock(element) => element.encode(),
                HoprStakeSeason3Calls::UnlockFor(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for HoprStakeSeason3Calls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                HoprStakeSeason3Calls::BasicFactorNumerator(element) => element.fmt(f),
                HoprStakeSeason3Calls::BoostCap(element) => element.fmt(f),
                HoprStakeSeason3Calls::FactorDenominator(element) => element.fmt(f),
                HoprStakeSeason3Calls::LockToken(element) => element.fmt(f),
                HoprStakeSeason3Calls::NftContract(element) => element.fmt(f),
                HoprStakeSeason3Calls::ProgramEnd(element) => element.fmt(f),
                HoprStakeSeason3Calls::ProgramStart(element) => element.fmt(f),
                HoprStakeSeason3Calls::RewardToken(element) => element.fmt(f),
                HoprStakeSeason3Calls::Accounts(element) => element.fmt(f),
                HoprStakeSeason3Calls::AvailableReward(element) => element.fmt(f),
                HoprStakeSeason3Calls::ClaimRewards(element) => element.fmt(f),
                HoprStakeSeason3Calls::GetCumulatedRewardsIncrement(element) => {
                    element.fmt(f)
                }
                HoprStakeSeason3Calls::IsBlockedNft(element) => element.fmt(f),
                HoprStakeSeason3Calls::IsNftTypeAndRankRedeemed1(element) => {
                    element.fmt(f)
                }
                HoprStakeSeason3Calls::IsNftTypeAndRankRedeemed2(element) => {
                    element.fmt(f)
                }
                HoprStakeSeason3Calls::IsNftTypeAndRankRedeemed3(element) => {
                    element.fmt(f)
                }
                HoprStakeSeason3Calls::IsNftTypeAndRankRedeemed4(element) => {
                    element.fmt(f)
                }
                HoprStakeSeason3Calls::OnERC721Received(element) => element.fmt(f),
                HoprStakeSeason3Calls::OnTokenTransfer(element) => element.fmt(f),
                HoprStakeSeason3Calls::Owner(element) => element.fmt(f),
                HoprStakeSeason3Calls::OwnerBlockNftType(element) => element.fmt(f),
                HoprStakeSeason3Calls::OwnerUnblockNftType(element) => element.fmt(f),
                HoprStakeSeason3Calls::ReclaimErc20Tokens(element) => element.fmt(f),
                HoprStakeSeason3Calls::ReclaimErc721Tokens(element) => element.fmt(f),
                HoprStakeSeason3Calls::RedeemedFactor(element) => element.fmt(f),
                HoprStakeSeason3Calls::RedeemedFactorIndex(element) => element.fmt(f),
                HoprStakeSeason3Calls::RedeemedNft(element) => element.fmt(f),
                HoprStakeSeason3Calls::RedeemedNftIndex(element) => element.fmt(f),
                HoprStakeSeason3Calls::RenounceOwnership(element) => element.fmt(f),
                HoprStakeSeason3Calls::StakedHoprTokens(element) => element.fmt(f),
                HoprStakeSeason3Calls::Sync(element) => element.fmt(f),
                HoprStakeSeason3Calls::TokensReceived(element) => element.fmt(f),
                HoprStakeSeason3Calls::TotalLocked(element) => element.fmt(f),
                HoprStakeSeason3Calls::TransferOwnership(element) => element.fmt(f),
                HoprStakeSeason3Calls::Unlock(element) => element.fmt(f),
                HoprStakeSeason3Calls::UnlockFor(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<BasicFactorNumeratorCall> for HoprStakeSeason3Calls {
        fn from(var: BasicFactorNumeratorCall) -> Self {
            HoprStakeSeason3Calls::BasicFactorNumerator(var)
        }
    }
    impl ::std::convert::From<BoostCapCall> for HoprStakeSeason3Calls {
        fn from(var: BoostCapCall) -> Self {
            HoprStakeSeason3Calls::BoostCap(var)
        }
    }
    impl ::std::convert::From<FactorDenominatorCall> for HoprStakeSeason3Calls {
        fn from(var: FactorDenominatorCall) -> Self {
            HoprStakeSeason3Calls::FactorDenominator(var)
        }
    }
    impl ::std::convert::From<LockTokenCall> for HoprStakeSeason3Calls {
        fn from(var: LockTokenCall) -> Self {
            HoprStakeSeason3Calls::LockToken(var)
        }
    }
    impl ::std::convert::From<NftContractCall> for HoprStakeSeason3Calls {
        fn from(var: NftContractCall) -> Self {
            HoprStakeSeason3Calls::NftContract(var)
        }
    }
    impl ::std::convert::From<ProgramEndCall> for HoprStakeSeason3Calls {
        fn from(var: ProgramEndCall) -> Self {
            HoprStakeSeason3Calls::ProgramEnd(var)
        }
    }
    impl ::std::convert::From<ProgramStartCall> for HoprStakeSeason3Calls {
        fn from(var: ProgramStartCall) -> Self {
            HoprStakeSeason3Calls::ProgramStart(var)
        }
    }
    impl ::std::convert::From<RewardTokenCall> for HoprStakeSeason3Calls {
        fn from(var: RewardTokenCall) -> Self {
            HoprStakeSeason3Calls::RewardToken(var)
        }
    }
    impl ::std::convert::From<AccountsCall> for HoprStakeSeason3Calls {
        fn from(var: AccountsCall) -> Self {
            HoprStakeSeason3Calls::Accounts(var)
        }
    }
    impl ::std::convert::From<AvailableRewardCall> for HoprStakeSeason3Calls {
        fn from(var: AvailableRewardCall) -> Self {
            HoprStakeSeason3Calls::AvailableReward(var)
        }
    }
    impl ::std::convert::From<ClaimRewardsCall> for HoprStakeSeason3Calls {
        fn from(var: ClaimRewardsCall) -> Self {
            HoprStakeSeason3Calls::ClaimRewards(var)
        }
    }
    impl ::std::convert::From<GetCumulatedRewardsIncrementCall>
    for HoprStakeSeason3Calls {
        fn from(var: GetCumulatedRewardsIncrementCall) -> Self {
            HoprStakeSeason3Calls::GetCumulatedRewardsIncrement(var)
        }
    }
    impl ::std::convert::From<IsBlockedNftCall> for HoprStakeSeason3Calls {
        fn from(var: IsBlockedNftCall) -> Self {
            HoprStakeSeason3Calls::IsBlockedNft(var)
        }
    }
    impl ::std::convert::From<IsNftTypeAndRankRedeemed1Call> for HoprStakeSeason3Calls {
        fn from(var: IsNftTypeAndRankRedeemed1Call) -> Self {
            HoprStakeSeason3Calls::IsNftTypeAndRankRedeemed1(var)
        }
    }
    impl ::std::convert::From<IsNftTypeAndRankRedeemed2Call> for HoprStakeSeason3Calls {
        fn from(var: IsNftTypeAndRankRedeemed2Call) -> Self {
            HoprStakeSeason3Calls::IsNftTypeAndRankRedeemed2(var)
        }
    }
    impl ::std::convert::From<IsNftTypeAndRankRedeemed3Call> for HoprStakeSeason3Calls {
        fn from(var: IsNftTypeAndRankRedeemed3Call) -> Self {
            HoprStakeSeason3Calls::IsNftTypeAndRankRedeemed3(var)
        }
    }
    impl ::std::convert::From<IsNftTypeAndRankRedeemed4Call> for HoprStakeSeason3Calls {
        fn from(var: IsNftTypeAndRankRedeemed4Call) -> Self {
            HoprStakeSeason3Calls::IsNftTypeAndRankRedeemed4(var)
        }
    }
    impl ::std::convert::From<OnERC721ReceivedCall> for HoprStakeSeason3Calls {
        fn from(var: OnERC721ReceivedCall) -> Self {
            HoprStakeSeason3Calls::OnERC721Received(var)
        }
    }
    impl ::std::convert::From<OnTokenTransferCall> for HoprStakeSeason3Calls {
        fn from(var: OnTokenTransferCall) -> Self {
            HoprStakeSeason3Calls::OnTokenTransfer(var)
        }
    }
    impl ::std::convert::From<OwnerCall> for HoprStakeSeason3Calls {
        fn from(var: OwnerCall) -> Self {
            HoprStakeSeason3Calls::Owner(var)
        }
    }
    impl ::std::convert::From<OwnerBlockNftTypeCall> for HoprStakeSeason3Calls {
        fn from(var: OwnerBlockNftTypeCall) -> Self {
            HoprStakeSeason3Calls::OwnerBlockNftType(var)
        }
    }
    impl ::std::convert::From<OwnerUnblockNftTypeCall> for HoprStakeSeason3Calls {
        fn from(var: OwnerUnblockNftTypeCall) -> Self {
            HoprStakeSeason3Calls::OwnerUnblockNftType(var)
        }
    }
    impl ::std::convert::From<ReclaimErc20TokensCall> for HoprStakeSeason3Calls {
        fn from(var: ReclaimErc20TokensCall) -> Self {
            HoprStakeSeason3Calls::ReclaimErc20Tokens(var)
        }
    }
    impl ::std::convert::From<ReclaimErc721TokensCall> for HoprStakeSeason3Calls {
        fn from(var: ReclaimErc721TokensCall) -> Self {
            HoprStakeSeason3Calls::ReclaimErc721Tokens(var)
        }
    }
    impl ::std::convert::From<RedeemedFactorCall> for HoprStakeSeason3Calls {
        fn from(var: RedeemedFactorCall) -> Self {
            HoprStakeSeason3Calls::RedeemedFactor(var)
        }
    }
    impl ::std::convert::From<RedeemedFactorIndexCall> for HoprStakeSeason3Calls {
        fn from(var: RedeemedFactorIndexCall) -> Self {
            HoprStakeSeason3Calls::RedeemedFactorIndex(var)
        }
    }
    impl ::std::convert::From<RedeemedNftCall> for HoprStakeSeason3Calls {
        fn from(var: RedeemedNftCall) -> Self {
            HoprStakeSeason3Calls::RedeemedNft(var)
        }
    }
    impl ::std::convert::From<RedeemedNftIndexCall> for HoprStakeSeason3Calls {
        fn from(var: RedeemedNftIndexCall) -> Self {
            HoprStakeSeason3Calls::RedeemedNftIndex(var)
        }
    }
    impl ::std::convert::From<RenounceOwnershipCall> for HoprStakeSeason3Calls {
        fn from(var: RenounceOwnershipCall) -> Self {
            HoprStakeSeason3Calls::RenounceOwnership(var)
        }
    }
    impl ::std::convert::From<StakedHoprTokensCall> for HoprStakeSeason3Calls {
        fn from(var: StakedHoprTokensCall) -> Self {
            HoprStakeSeason3Calls::StakedHoprTokens(var)
        }
    }
    impl ::std::convert::From<SyncCall> for HoprStakeSeason3Calls {
        fn from(var: SyncCall) -> Self {
            HoprStakeSeason3Calls::Sync(var)
        }
    }
    impl ::std::convert::From<TokensReceivedCall> for HoprStakeSeason3Calls {
        fn from(var: TokensReceivedCall) -> Self {
            HoprStakeSeason3Calls::TokensReceived(var)
        }
    }
    impl ::std::convert::From<TotalLockedCall> for HoprStakeSeason3Calls {
        fn from(var: TotalLockedCall) -> Self {
            HoprStakeSeason3Calls::TotalLocked(var)
        }
    }
    impl ::std::convert::From<TransferOwnershipCall> for HoprStakeSeason3Calls {
        fn from(var: TransferOwnershipCall) -> Self {
            HoprStakeSeason3Calls::TransferOwnership(var)
        }
    }
    impl ::std::convert::From<UnlockCall> for HoprStakeSeason3Calls {
        fn from(var: UnlockCall) -> Self {
            HoprStakeSeason3Calls::Unlock(var)
        }
    }
    impl ::std::convert::From<UnlockForCall> for HoprStakeSeason3Calls {
        fn from(var: UnlockForCall) -> Self {
            HoprStakeSeason3Calls::UnlockFor(var)
        }
    }
    ///Container type for all return fields from the `BASIC_FACTOR_NUMERATOR` function with signature `BASIC_FACTOR_NUMERATOR()` and selector `0x6aa8d4cf`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct BasicFactorNumeratorReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `BOOST_CAP` function with signature `BOOST_CAP()` and selector `0xef0526a2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct BoostCapReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `FACTOR_DENOMINATOR` function with signature `FACTOR_DENOMINATOR()` and selector `0x5ef73d58`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct FactorDenominatorReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `LOCK_TOKEN` function with signature `LOCK_TOKEN()` and selector `0xd0da6801`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct LockTokenReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `NFT_CONTRACT` function with signature `NFT_CONTRACT()` and selector `0x1fda9a02`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct NftContractReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `PROGRAM_END` function with signature `PROGRAM_END()` and selector `0xcbffa3c7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct ProgramEndReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `PROGRAM_START` function with signature `PROGRAM_START()` and selector `0x5bbb63a6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct ProgramStartReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `REWARD_TOKEN` function with signature `REWARD_TOKEN()` and selector `0x99248ea7`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct RewardTokenReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `accounts` function with signature `accounts(address)` and selector `0x5e5c06e2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct AccountsReturn {
        pub actual_locked_token_amount: ::ethers::core::types::U256,
        pub last_sync_timestamp: ::ethers::core::types::U256,
        pub cumulated_rewards: ::ethers::core::types::U256,
        pub claimed_rewards: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `availableReward` function with signature `availableReward()` and selector `0x4ad84b34`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct AvailableRewardReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `getCumulatedRewardsIncrement` function with signature `getCumulatedRewardsIncrement(address)` and selector `0x70af0934`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct GetCumulatedRewardsIncrementReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `isBlockedNft` function with signature `isBlockedNft(uint256)` and selector `0x42c93361`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct IsBlockedNftReturn(pub bool);
    ///Container type for all return fields from the `isNftTypeAndRankRedeemed1` function with signature `isNftTypeAndRankRedeemed1(string,string,address)` and selector `0xce23177e`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct IsNftTypeAndRankRedeemed1Return(pub bool);
    ///Container type for all return fields from the `isNftTypeAndRankRedeemed2` function with signature `isNftTypeAndRankRedeemed2(uint256,string,address)` and selector `0x96a9cd7d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct IsNftTypeAndRankRedeemed2Return(pub bool);
    ///Container type for all return fields from the `isNftTypeAndRankRedeemed3` function with signature `isNftTypeAndRankRedeemed3(uint256,uint256,address)` and selector `0xa83d1ed6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct IsNftTypeAndRankRedeemed3Return(pub bool);
    ///Container type for all return fields from the `isNftTypeAndRankRedeemed4` function with signature `isNftTypeAndRankRedeemed4(string,uint256,address)` and selector `0x8c24add4`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct IsNftTypeAndRankRedeemed4Return(pub bool);
    ///Container type for all return fields from the `onERC721Received` function with signature `onERC721Received(address,address,uint256,bytes)` and selector `0x150b7a02`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct OnERC721ReceivedReturn(pub [u8; 4]);
    ///Container type for all return fields from the `onTokenTransfer` function with signature `onTokenTransfer(address,uint256,bytes)` and selector `0xa4c0ed36`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct OnTokenTransferReturn(pub bool);
    ///Container type for all return fields from the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct OwnerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `redeemedFactor` function with signature `redeemedFactor(address,uint256)` and selector `0x81128c1d`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct RedeemedFactorReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `redeemedFactorIndex` function with signature `redeemedFactorIndex(address)` and selector `0x1f014d83`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct RedeemedFactorIndexReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `redeemedNft` function with signature `redeemedNft(address,uint256)` and selector `0x0a1a257a`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct RedeemedNftReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `redeemedNftIndex` function with signature `redeemedNftIndex(address)` and selector `0xd0c02d63`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct RedeemedNftIndexReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `stakedHoprTokens` function with signature `stakedHoprTokens(address)` and selector `0xf978fff1`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct StakedHoprTokensReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `totalLocked` function with signature `totalLocked()` and selector `0x56891412`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct TotalLockedReturn(pub ::ethers::core::types::U256);
}
