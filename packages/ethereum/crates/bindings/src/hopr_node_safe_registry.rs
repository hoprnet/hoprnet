pub use hopr_node_safe_registry::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod hopr_node_safe_registry {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NodeAddressZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NodeHasSafe\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NodeIsContract\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NodeNotModuleMember\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NotValidSafe\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NotValidSignatureFromNode\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"SafeAddressZero\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeAddress\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"DergisteredNodeSafe\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeAddress\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"RegisteredNodeSafe\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"NODE_SAFE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deregisterNodeBySafe\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"struct HoprNodeSafeRegistry.NodeSafe\",\"name\":\"nodeSafe\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"address\",\"name\":\"safeAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"nodeChainKeyAddress\",\"type\":\"address\",\"components\":[]}]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isNodeSafeRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nodeSigNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nodeToSafe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeAddr\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"registerSafeByNode\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"struct HoprNodeSafeRegistry.NodeSafe\",\"name\":\"nodeSafe\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"address\",\"name\":\"safeAddress\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"nodeChainKeyAddress\",\"type\":\"address\",\"components\":[]}]},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"registerSafeWithNodeSig\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateDomainSeparator\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static HOPRNODESAFEREGISTRY_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(|| {
        ::ethers::core::utils::__serde_json::from_str(__ABI)
            .expect("ABI is always valid")
    });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        241,
        96,
        64,
        128,
        81,
        128,
        130,
        1,
        130,
        82,
        96,
        16,
        129,
        82,
        111,
        78,
        111,
        100,
        101,
        83,
        97,
        102,
        101,
        82,
        101,
        103,
        105,
        115,
        116,
        114,
        121,
        96,
        128,
        27,
        96,
        32,
        145,
        130,
        1,
        82,
        129,
        81,
        128,
        131,
        1,
        131,
        82,
        96,
        5,
        129,
        82,
        100,
        3,
        18,
        227,
        2,
        227,
        96,
        220,
        27,
        144,
        130,
        1,
        82,
        129,
        81,
        127,
        139,
        115,
        195,
        198,
        155,
        184,
        254,
        61,
        81,
        46,
        204,
        76,
        247,
        89,
        204,
        121,
        35,
        159,
        123,
        23,
        155,
        15,
        250,
        202,
        169,
        167,
        93,
        82,
        43,
        57,
        64,
        15,
        129,
        131,
        1,
        82,
        127,
        68,
        127,
        186,
        212,
        212,
        107,
        188,
        4,
        89,
        12,
        186,
        108,
        44,
        5,
        142,
        114,
        145,
        14,
        164,
        3,
        152,
        205,
        52,
        8,
        83,
        115,
        185,
        142,
        164,
        218,
        160,
        232,
        129,
        132,
        1,
        82,
        127,
        6,
        192,
        21,
        189,
        34,
        180,
        198,
        150,
        144,
        147,
        60,
        16,
        88,
        135,
        142,
        189,
        254,
        243,
        31,
        154,
        170,
        228,
        11,
        190,
        134,
        216,
        160,
        159,
        225,
        178,
        151,
        44,
        96,
        96,
        130,
        1,
        82,
        70,
        96,
        128,
        130,
        1,
        82,
        48,
        96,
        160,
        128,
        131,
        1,
        145,
        144,
        145,
        82,
        131,
        81,
        128,
        131,
        3,
        144,
        145,
        1,
        129,
        82,
        96,
        192,
        144,
        145,
        1,
        144,
        146,
        82,
        129,
        81,
        145,
        1,
        32,
        96,
        0,
        85,
        86,
        91,
        97,
        13,
        98,
        128,
        97,
        1,
        0,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        158,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        170,
        144,
        242,
        165,
        17,
        97,
        0,
        102,
        87,
        128,
        99,
        170,
        144,
        242,
        165,
        20,
        97,
        2,
        41,
        87,
        128,
        99,
        197,
        118,
        29,
        105,
        20,
        97,
        2,
        98,
        87,
        128,
        99,
        198,
        184,
        178,
        97,
        20,
        97,
        2,
        117,
        87,
        128,
        99,
        246,
        152,
        218,
        37,
        20,
        97,
        2,
        152,
        87,
        128,
        99,
        255,
        161,
        173,
        116,
        20,
        97,
        2,
        161,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        127,
        147,
        89,
        49,
        20,
        97,
        0,
        163,
        87,
        128,
        99,
        132,
        176,
        222,
        194,
        20,
        97,
        0,
        184,
        87,
        128,
        99,
        137,
        151,
        140,
        64,
        20,
        97,
        0,
        242,
        87,
        128,
        99,
        137,
        204,
        254,
        137,
        20,
        97,
        1,
        54,
        87,
        128,
        99,
        145,
        96,
        124,
        76,
        20,
        97,
        2,
        22,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        182,
        97,
        0,
        177,
        54,
        96,
        4,
        97,
        9,
        248,
        86,
        91,
        97,
        2,
        210,
        86,
        91,
        0,
        91,
        97,
        0,
        223,
        127,
        168,
        172,
        122,
        237,
        18,
        141,
        26,
        45,
        160,
        119,
        63,
        236,
        200,
        11,
        98,
        101,
        209,
        95,
        126,
        98,
        191,
        68,
        1,
        235,
        35,
        189,
        70,
        195,
        252,
        245,
        210,
        248,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        1,
        30,
        97,
        1,
        0,
        54,
        96,
        4,
        97,
        9,
        248,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        22,
        144,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        233,
        86,
        91,
        97,
        0,
        182,
        96,
        64,
        128,
        81,
        128,
        130,
        1,
        130,
        82,
        96,
        16,
        129,
        82,
        111,
        78,
        111,
        100,
        101,
        83,
        97,
        102,
        101,
        82,
        101,
        103,
        105,
        115,
        116,
        114,
        121,
        96,
        128,
        27,
        96,
        32,
        145,
        130,
        1,
        82,
        129,
        81,
        128,
        131,
        1,
        131,
        82,
        96,
        5,
        129,
        82,
        100,
        3,
        18,
        227,
        2,
        227,
        96,
        220,
        27,
        144,
        130,
        1,
        82,
        129,
        81,
        127,
        139,
        115,
        195,
        198,
        155,
        184,
        254,
        61,
        81,
        46,
        204,
        76,
        247,
        89,
        204,
        121,
        35,
        159,
        123,
        23,
        155,
        15,
        250,
        202,
        169,
        167,
        93,
        82,
        43,
        57,
        64,
        15,
        129,
        131,
        1,
        82,
        127,
        68,
        127,
        186,
        212,
        212,
        107,
        188,
        4,
        89,
        12,
        186,
        108,
        44,
        5,
        142,
        114,
        145,
        14,
        164,
        3,
        152,
        205,
        52,
        8,
        83,
        115,
        185,
        142,
        164,
        218,
        160,
        232,
        129,
        132,
        1,
        82,
        127,
        6,
        192,
        21,
        189,
        34,
        180,
        198,
        150,
        144,
        147,
        60,
        16,
        88,
        135,
        142,
        189,
        254,
        243,
        31,
        154,
        170,
        228,
        11,
        190,
        134,
        216,
        160,
        159,
        225,
        178,
        151,
        44,
        96,
        96,
        130,
        1,
        82,
        70,
        96,
        128,
        130,
        1,
        82,
        48,
        96,
        160,
        128,
        131,
        1,
        145,
        144,
        145,
        82,
        131,
        81,
        128,
        131,
        3,
        144,
        145,
        1,
        129,
        82,
        96,
        192,
        144,
        145,
        1,
        144,
        146,
        82,
        129,
        81,
        145,
        1,
        32,
        96,
        0,
        85,
        86,
        91,
        97,
        0,
        182,
        97,
        2,
        36,
        54,
        96,
        4,
        97,
        9,
        248,
        86,
        91,
        97,
        2,
        250,
        86,
        91,
        97,
        0,
        223,
        97,
        2,
        55,
        54,
        96,
        4,
        97,
        9,
        248,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        1,
        96,
        160,
        27,
        144,
        4,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        22,
        144,
        86,
        91,
        97,
        0,
        182,
        97,
        2,
        112,
        54,
        96,
        4,
        97,
        10,
        198,
        86,
        91,
        97,
        3,
        169,
        86,
        91,
        97,
        2,
        136,
        97,
        2,
        131,
        54,
        96,
        4,
        97,
        11,
        74,
        86,
        91,
        97,
        5,
        35,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        233,
        86,
        91,
        97,
        0,
        223,
        96,
        0,
        84,
        129,
        86,
        91,
        97,
        2,
        197,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        5,
        129,
        82,
        96,
        32,
        1,
        100,
        3,
        18,
        227,
        2,
        227,
        96,
        220,
        27,
        129,
        82,
        80,
        129,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        233,
        145,
        144,
        97,
        11,
        102,
        86,
        91,
        96,
        64,
        128,
        81,
        128,
        130,
        1,
        144,
        145,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        129,
        82,
        51,
        96,
        32,
        130,
        1,
        82,
        97,
        2,
        247,
        144,
        97,
        5,
        124,
        86,
        91,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        22,
        51,
        20,
        97,
        3,
        52,
        87,
        96,
        64,
        81,
        99,
        21,
        191,
        161,
        85,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        128,
        81,
        128,
        130,
        1,
        144,
        145,
        82,
        51,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        32,
        130,
        1,
        82,
        97,
        3,
        89,
        144,
        97,
        6,
        244,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        129,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        128,
        130,
        32,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        144,
        85,
        81,
        51,
        145,
        127,
        232,
        55,
        243,
        57,
        99,
        146,
        150,
        190,
        201,
        244,
        188,
        152,
        97,
        84,
        245,
        255,
        118,
        187,
        190,
        252,
        49,
        73,
        165,
        18,
        146,
        14,
        19,
        17,
        65,
        78,
        61,
        161,
        145,
        163,
        80,
        86,
        91,
        96,
        32,
        131,
        129,
        1,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        132,
        82,
        96,
        64,
        128,
        130,
        32,
        84,
        129,
        81,
        127,
        168,
        172,
        122,
        237,
        18,
        141,
        26,
        45,
        160,
        119,
        63,
        236,
        200,
        11,
        98,
        101,
        209,
        95,
        126,
        98,
        191,
        68,
        1,
        235,
        35,
        189,
        70,
        195,
        252,
        245,
        210,
        248,
        129,
        136,
        1,
        82,
        137,
        81,
        133,
        22,
        129,
        132,
        1,
        82,
        148,
        81,
        144,
        147,
        22,
        96,
        96,
        133,
        1,
        82,
        96,
        1,
        96,
        160,
        27,
        144,
        146,
        4,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        22,
        96,
        128,
        128,
        133,
        1,
        145,
        144,
        145,
        82,
        130,
        81,
        128,
        133,
        3,
        144,
        145,
        1,
        129,
        82,
        96,
        160,
        132,
        1,
        131,
        82,
        128,
        81,
        144,
        133,
        1,
        32,
        129,
        84,
        96,
        25,
        96,
        248,
        27,
        96,
        192,
        134,
        1,
        82,
        96,
        1,
        96,
        248,
        27,
        96,
        193,
        134,
        1,
        82,
        96,
        194,
        133,
        1,
        82,
        96,
        226,
        128,
        133,
        1,
        130,
        144,
        82,
        131,
        81,
        128,
        134,
        3,
        144,
        145,
        1,
        129,
        82,
        97,
        1,
        2,
        133,
        1,
        128,
        133,
        82,
        129,
        81,
        145,
        135,
        1,
        145,
        144,
        145,
        32,
        96,
        31,
        136,
        1,
        135,
        144,
        4,
        144,
        150,
        2,
        133,
        1,
        97,
        1,
        34,
        144,
        129,
        1,
        144,
        148,
        82,
        134,
        129,
        82,
        144,
        148,
        147,
        145,
        146,
        131,
        146,
        97,
        4,
        183,
        146,
        134,
        146,
        144,
        145,
        138,
        145,
        138,
        145,
        130,
        145,
        1,
        131,
        130,
        128,
        130,
        132,
        55,
        96,
        0,
        146,
        1,
        145,
        144,
        145,
        82,
        80,
        97,
        8,
        218,
        146,
        80,
        80,
        80,
        86,
        91,
        144,
        146,
        80,
        144,
        80,
        96,
        0,
        129,
        96,
        4,
        129,
        17,
        21,
        97,
        4,
        208,
        87,
        97,
        4,
        208,
        97,
        11,
        180,
        86,
        91,
        20,
        21,
        128,
        97,
        4,
        243,
        87,
        80,
        134,
        96,
        32,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        130,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        21,
        91,
        21,
        97,
        5,
        17,
        87,
        96,
        64,
        81,
        99,
        180,
        201,
        31,
        251,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        5,
        26,
        135,
        97,
        5,
        124,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        32,
        128,
        130,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        144,
        146,
        82,
        96,
        64,
        130,
        32,
        84,
        22,
        97,
        5,
        80,
        87,
        80,
        96,
        0,
        145,
        144,
        80,
        86,
        91,
        80,
        128,
        81,
        96,
        32,
        145,
        130,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        144,
        147,
        82,
        96,
        64,
        144,
        146,
        32,
        84,
        130,
        22,
        145,
        22,
        20,
        144,
        86,
        91,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        5,
        164,
        87,
        96,
        64,
        81,
        99,
        20,
        231,
        146,
        33,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        32,
        129,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        5,
        207,
        87,
        96,
        64,
        81,
        99,
        62,
        135,
        106,
        147,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        32,
        129,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        59,
        21,
        97,
        5,
        252,
        87,
        96,
        64,
        81,
        99,
        31,
        130,
        159,
        3,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        32,
        128,
        130,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        144,
        146,
        82,
        96,
        64,
        144,
        145,
        32,
        84,
        22,
        21,
        97,
        6,
        60,
        87,
        96,
        64,
        81,
        99,
        103,
        220,
        48,
        1,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        6,
        69,
        129,
        97,
        6,
        244,
        86,
        91,
        96,
        32,
        129,
        129,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        146,
        131,
        144,
        82,
        96,
        64,
        144,
        32,
        131,
        81,
        129,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        146,
        22,
        145,
        144,
        145,
        23,
        128,
        130,
        85,
        144,
        145,
        97,
        6,
        152,
        145,
        96,
        1,
        96,
        160,
        27,
        144,
        4,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        22,
        144,
        97,
        11,
        224,
        86,
        91,
        129,
        84,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        145,
        144,
        145,
        22,
        96,
        1,
        96,
        160,
        27,
        2,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        145,
        130,
        22,
        23,
        130,
        85,
        96,
        32,
        131,
        1,
        81,
        131,
        81,
        96,
        64,
        81,
        145,
        131,
        22,
        146,
        22,
        144,
        127,
        119,
        109,
        164,
        12,
        191,
        44,
        34,
        53,
        82,
        102,
        27,
        212,
        133,
        2,
        206,
        183,
        36,
        9,
        179,
        54,
        43,
        176,
        198,
        109,
        137,
        137,
        189,
        126,
        32,
        228,
        73,
        125,
        144,
        96,
        0,
        144,
        163,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        96,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        1,
        20,
        97,
        8,
        193,
        87,
        130,
        81,
        96,
        64,
        81,
        99,
        102,
        23,
        194,
        41,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        4,
        130,
        1,
        82,
        96,
        100,
        96,
        36,
        130,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        144,
        99,
        204,
        47,
        132,
        82,
        144,
        96,
        68,
        1,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        7,
        89,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        0,
        130,
        62,
        96,
        31,
        61,
        144,
        129,
        1,
        96,
        31,
        25,
        22,
        130,
        1,
        96,
        64,
        82,
        97,
        7,
        129,
        145,
        144,
        129,
        1,
        144,
        97,
        12,
        23,
        86,
        91,
        146,
        80,
        144,
        80,
        96,
        0,
        91,
        129,
        81,
        129,
        16,
        21,
        97,
        8,
        187,
        87,
        129,
        129,
        129,
        81,
        129,
        16,
        97,
        7,
        163,
        87,
        97,
        7,
        163,
        97,
        12,
        219,
        86,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        74,
        27,
        164,
        8,
        96,
        64,
        81,
        129,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        7,
        232,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        8,
        12,
        145,
        144,
        97,
        12,
        241,
        86,
        91,
        128,
        21,
        97,
        8,
        158,
        87,
        80,
        129,
        129,
        129,
        81,
        129,
        16,
        97,
        8,
        37,
        87,
        97,
        8,
        37,
        97,
        12,
        219,
        86,
        91,
        96,
        32,
        144,
        129,
        2,
        145,
        144,
        145,
        1,
        129,
        1,
        81,
        144,
        133,
        1,
        81,
        96,
        64,
        81,
        98,
        186,
        128,
        169,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        145,
        130,
        22,
        96,
        4,
        130,
        1,
        82,
        145,
        22,
        144,
        99,
        1,
        117,
        1,
        82,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        8,
        122,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        8,
        158,
        145,
        144,
        97,
        12,
        241,
        86,
        91,
        21,
        97,
        8,
        169,
        87,
        80,
        80,
        80,
        80,
        86,
        91,
        128,
        97,
        8,
        179,
        129,
        97,
        13,
        19,
        86,
        91,
        145,
        80,
        80,
        97,
        7,
        136,
        86,
        91,
        80,
        97,
        6,
        249,
        86,
        91,
        96,
        64,
        81,
        99,
        11,
        165,
        215,
        235,
        96,
        228,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        128,
        130,
        81,
        96,
        65,
        3,
        97,
        9,
        16,
        87,
        96,
        32,
        131,
        1,
        81,
        96,
        64,
        132,
        1,
        81,
        96,
        96,
        133,
        1,
        81,
        96,
        0,
        26,
        97,
        9,
        4,
        135,
        130,
        133,
        133,
        97,
        9,
        31,
        86,
        91,
        148,
        80,
        148,
        80,
        80,
        80,
        80,
        97,
        9,
        24,
        86,
        91,
        80,
        96,
        0,
        144,
        80,
        96,
        2,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        127,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        93,
        87,
        110,
        115,
        87,
        164,
        80,
        29,
        223,
        233,
        47,
        70,
        104,
        27,
        32,
        160,
        131,
        17,
        21,
        97,
        9,
        86,
        87,
        80,
        96,
        0,
        144,
        80,
        96,
        3,
        97,
        9,
        218,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        0,
        128,
        130,
        82,
        96,
        32,
        130,
        1,
        128,
        132,
        82,
        137,
        144,
        82,
        96,
        255,
        136,
        22,
        146,
        130,
        1,
        146,
        144,
        146,
        82,
        96,
        96,
        129,
        1,
        134,
        144,
        82,
        96,
        128,
        129,
        1,
        133,
        144,
        82,
        96,
        1,
        144,
        96,
        160,
        1,
        96,
        32,
        96,
        64,
        81,
        96,
        32,
        129,
        3,
        144,
        128,
        132,
        3,
        144,
        133,
        90,
        250,
        21,
        128,
        21,
        97,
        9,
        170,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        96,
        64,
        81,
        96,
        31,
        25,
        1,
        81,
        145,
        80,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        97,
        9,
        211,
        87,
        96,
        0,
        96,
        1,
        146,
        80,
        146,
        80,
        80,
        97,
        9,
        218,
        86,
        91,
        145,
        80,
        96,
        0,
        144,
        80,
        91,
        148,
        80,
        148,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        2,
        247,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        10,
        10,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        10,
        21,
        129,
        97,
        9,
        227,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        22,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        10,
        91,
        87,
        97,
        10,
        91,
        97,
        10,
        28,
        86,
        91,
        96,
        64,
        82,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        64,
        130,
        132,
        3,
        18,
        21,
        97,
        10,
        117,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        64,
        81,
        96,
        64,
        129,
        1,
        129,
        129,
        16,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        23,
        21,
        97,
        10,
        152,
        87,
        97,
        10,
        152,
        97,
        10,
        28,
        86,
        91,
        96,
        64,
        82,
        144,
        80,
        128,
        130,
        53,
        97,
        10,
        169,
        129,
        97,
        9,
        227,
        86,
        91,
        129,
        82,
        96,
        32,
        131,
        1,
        53,
        97,
        10,
        185,
        129,
        97,
        9,
        227,
        86,
        91,
        96,
        32,
        145,
        144,
        145,
        1,
        82,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        96,
        132,
        134,
        3,
        18,
        21,
        97,
        10,
        219,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        10,
        229,
        133,
        133,
        97,
        10,
        99,
        86,
        91,
        146,
        80,
        96,
        64,
        132,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        11,
        2,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        134,
        1,
        145,
        80,
        134,
        96,
        31,
        131,
        1,
        18,
        97,
        11,
        22,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        11,
        37,
        87,
        96,
        0,
        128,
        253,
        91,
        135,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        11,
        55,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        148,
        80,
        128,
        147,
        80,
        80,
        80,
        80,
        146,
        80,
        146,
        80,
        146,
        86,
        91,
        96,
        0,
        96,
        64,
        130,
        132,
        3,
        18,
        21,
        97,
        11,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        10,
        21,
        131,
        131,
        97,
        10,
        99,
        86,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        82,
        131,
        81,
        128,
        130,
        133,
        1,
        82,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        11,
        147,
        87,
        133,
        129,
        1,
        131,
        1,
        81,
        133,
        130,
        1,
        96,
        64,
        1,
        82,
        130,
        1,
        97,
        11,
        119,
        86,
        91,
        80,
        96,
        0,
        96,
        64,
        130,
        134,
        1,
        1,
        82,
        96,
        64,
        96,
        31,
        25,
        96,
        31,
        131,
        1,
        22,
        133,
        1,
        1,
        146,
        80,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        129,
        129,
        22,
        131,
        130,
        22,
        1,
        144,
        128,
        130,
        17,
        21,
        97,
        12,
        0,
        87,
        97,
        12,
        0,
        97,
        11,
        202,
        86,
        91,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        128,
        81,
        97,
        12,
        18,
        129,
        97,
        9,
        227,
        86,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        12,
        42,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        81,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        12,
        66,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        133,
        1,
        145,
        80,
        133,
        96,
        31,
        131,
        1,
        18,
        97,
        12,
        86,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        96,
        32,
        130,
        130,
        17,
        21,
        97,
        12,
        106,
        87,
        97,
        12,
        106,
        97,
        10,
        28,
        86,
        91,
        129,
        96,
        5,
        27,
        146,
        80,
        97,
        12,
        123,
        129,
        132,
        1,
        97,
        10,
        50,
        86,
        91,
        130,
        129,
        82,
        146,
        132,
        1,
        129,
        1,
        146,
        129,
        129,
        1,
        144,
        137,
        133,
        17,
        21,
        97,
        12,
        149,
        87,
        96,
        0,
        128,
        253,
        91,
        148,
        130,
        1,
        148,
        91,
        132,
        134,
        16,
        21,
        97,
        12,
        191,
        87,
        133,
        81,
        147,
        80,
        97,
        12,
        175,
        132,
        97,
        9,
        227,
        86,
        91,
        131,
        130,
        82,
        148,
        130,
        1,
        148,
        144,
        130,
        1,
        144,
        97,
        12,
        154,
        86,
        91,
        150,
        80,
        97,
        12,
        206,
        144,
        80,
        135,
        130,
        1,
        97,
        12,
        7,
        86,
        91,
        148,
        80,
        80,
        80,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        13,
        3,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        128,
        21,
        21,
        129,
        20,
        97,
        10,
        21,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        13,
        37,
        87,
        97,
        13,
        37,
        97,
        11,
        202,
        86,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        172,
        187,
        171,
        136,
        185,
        108,
        41,
        46,
        138,
        116,
        194,
        133,
        159,
        208,
        24,
        80,
        229,
        23,
        153,
        55,
        164,
        97,
        23,
        148,
        132,
        10,
        164,
        20,
        69,
        159,
        225,
        51,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static HOPRNODESAFEREGISTRY_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        158,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        170,
        144,
        242,
        165,
        17,
        97,
        0,
        102,
        87,
        128,
        99,
        170,
        144,
        242,
        165,
        20,
        97,
        2,
        41,
        87,
        128,
        99,
        197,
        118,
        29,
        105,
        20,
        97,
        2,
        98,
        87,
        128,
        99,
        198,
        184,
        178,
        97,
        20,
        97,
        2,
        117,
        87,
        128,
        99,
        246,
        152,
        218,
        37,
        20,
        97,
        2,
        152,
        87,
        128,
        99,
        255,
        161,
        173,
        116,
        20,
        97,
        2,
        161,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        127,
        147,
        89,
        49,
        20,
        97,
        0,
        163,
        87,
        128,
        99,
        132,
        176,
        222,
        194,
        20,
        97,
        0,
        184,
        87,
        128,
        99,
        137,
        151,
        140,
        64,
        20,
        97,
        0,
        242,
        87,
        128,
        99,
        137,
        204,
        254,
        137,
        20,
        97,
        1,
        54,
        87,
        128,
        99,
        145,
        96,
        124,
        76,
        20,
        97,
        2,
        22,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        182,
        97,
        0,
        177,
        54,
        96,
        4,
        97,
        9,
        248,
        86,
        91,
        97,
        2,
        210,
        86,
        91,
        0,
        91,
        97,
        0,
        223,
        127,
        168,
        172,
        122,
        237,
        18,
        141,
        26,
        45,
        160,
        119,
        63,
        236,
        200,
        11,
        98,
        101,
        209,
        95,
        126,
        98,
        191,
        68,
        1,
        235,
        35,
        189,
        70,
        195,
        252,
        245,
        210,
        248,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        1,
        30,
        97,
        1,
        0,
        54,
        96,
        4,
        97,
        9,
        248,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        22,
        144,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        233,
        86,
        91,
        97,
        0,
        182,
        96,
        64,
        128,
        81,
        128,
        130,
        1,
        130,
        82,
        96,
        16,
        129,
        82,
        111,
        78,
        111,
        100,
        101,
        83,
        97,
        102,
        101,
        82,
        101,
        103,
        105,
        115,
        116,
        114,
        121,
        96,
        128,
        27,
        96,
        32,
        145,
        130,
        1,
        82,
        129,
        81,
        128,
        131,
        1,
        131,
        82,
        96,
        5,
        129,
        82,
        100,
        3,
        18,
        227,
        2,
        227,
        96,
        220,
        27,
        144,
        130,
        1,
        82,
        129,
        81,
        127,
        139,
        115,
        195,
        198,
        155,
        184,
        254,
        61,
        81,
        46,
        204,
        76,
        247,
        89,
        204,
        121,
        35,
        159,
        123,
        23,
        155,
        15,
        250,
        202,
        169,
        167,
        93,
        82,
        43,
        57,
        64,
        15,
        129,
        131,
        1,
        82,
        127,
        68,
        127,
        186,
        212,
        212,
        107,
        188,
        4,
        89,
        12,
        186,
        108,
        44,
        5,
        142,
        114,
        145,
        14,
        164,
        3,
        152,
        205,
        52,
        8,
        83,
        115,
        185,
        142,
        164,
        218,
        160,
        232,
        129,
        132,
        1,
        82,
        127,
        6,
        192,
        21,
        189,
        34,
        180,
        198,
        150,
        144,
        147,
        60,
        16,
        88,
        135,
        142,
        189,
        254,
        243,
        31,
        154,
        170,
        228,
        11,
        190,
        134,
        216,
        160,
        159,
        225,
        178,
        151,
        44,
        96,
        96,
        130,
        1,
        82,
        70,
        96,
        128,
        130,
        1,
        82,
        48,
        96,
        160,
        128,
        131,
        1,
        145,
        144,
        145,
        82,
        131,
        81,
        128,
        131,
        3,
        144,
        145,
        1,
        129,
        82,
        96,
        192,
        144,
        145,
        1,
        144,
        146,
        82,
        129,
        81,
        145,
        1,
        32,
        96,
        0,
        85,
        86,
        91,
        97,
        0,
        182,
        97,
        2,
        36,
        54,
        96,
        4,
        97,
        9,
        248,
        86,
        91,
        97,
        2,
        250,
        86,
        91,
        97,
        0,
        223,
        97,
        2,
        55,
        54,
        96,
        4,
        97,
        9,
        248,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        1,
        96,
        160,
        27,
        144,
        4,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        22,
        144,
        86,
        91,
        97,
        0,
        182,
        97,
        2,
        112,
        54,
        96,
        4,
        97,
        10,
        198,
        86,
        91,
        97,
        3,
        169,
        86,
        91,
        97,
        2,
        136,
        97,
        2,
        131,
        54,
        96,
        4,
        97,
        11,
        74,
        86,
        91,
        97,
        5,
        35,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        233,
        86,
        91,
        97,
        0,
        223,
        96,
        0,
        84,
        129,
        86,
        91,
        97,
        2,
        197,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        5,
        129,
        82,
        96,
        32,
        1,
        100,
        3,
        18,
        227,
        2,
        227,
        96,
        220,
        27,
        129,
        82,
        80,
        129,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        233,
        145,
        144,
        97,
        11,
        102,
        86,
        91,
        96,
        64,
        128,
        81,
        128,
        130,
        1,
        144,
        145,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        129,
        82,
        51,
        96,
        32,
        130,
        1,
        82,
        97,
        2,
        247,
        144,
        97,
        5,
        124,
        86,
        91,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        22,
        51,
        20,
        97,
        3,
        52,
        87,
        96,
        64,
        81,
        99,
        21,
        191,
        161,
        85,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        128,
        81,
        128,
        130,
        1,
        144,
        145,
        82,
        51,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        32,
        130,
        1,
        82,
        97,
        3,
        89,
        144,
        97,
        6,
        244,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        129,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        128,
        130,
        32,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        144,
        85,
        81,
        51,
        145,
        127,
        232,
        55,
        243,
        57,
        99,
        146,
        150,
        190,
        201,
        244,
        188,
        152,
        97,
        84,
        245,
        255,
        118,
        187,
        190,
        252,
        49,
        73,
        165,
        18,
        146,
        14,
        19,
        17,
        65,
        78,
        61,
        161,
        145,
        163,
        80,
        86,
        91,
        96,
        32,
        131,
        129,
        1,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        132,
        82,
        96,
        64,
        128,
        130,
        32,
        84,
        129,
        81,
        127,
        168,
        172,
        122,
        237,
        18,
        141,
        26,
        45,
        160,
        119,
        63,
        236,
        200,
        11,
        98,
        101,
        209,
        95,
        126,
        98,
        191,
        68,
        1,
        235,
        35,
        189,
        70,
        195,
        252,
        245,
        210,
        248,
        129,
        136,
        1,
        82,
        137,
        81,
        133,
        22,
        129,
        132,
        1,
        82,
        148,
        81,
        144,
        147,
        22,
        96,
        96,
        133,
        1,
        82,
        96,
        1,
        96,
        160,
        27,
        144,
        146,
        4,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        22,
        96,
        128,
        128,
        133,
        1,
        145,
        144,
        145,
        82,
        130,
        81,
        128,
        133,
        3,
        144,
        145,
        1,
        129,
        82,
        96,
        160,
        132,
        1,
        131,
        82,
        128,
        81,
        144,
        133,
        1,
        32,
        129,
        84,
        96,
        25,
        96,
        248,
        27,
        96,
        192,
        134,
        1,
        82,
        96,
        1,
        96,
        248,
        27,
        96,
        193,
        134,
        1,
        82,
        96,
        194,
        133,
        1,
        82,
        96,
        226,
        128,
        133,
        1,
        130,
        144,
        82,
        131,
        81,
        128,
        134,
        3,
        144,
        145,
        1,
        129,
        82,
        97,
        1,
        2,
        133,
        1,
        128,
        133,
        82,
        129,
        81,
        145,
        135,
        1,
        145,
        144,
        145,
        32,
        96,
        31,
        136,
        1,
        135,
        144,
        4,
        144,
        150,
        2,
        133,
        1,
        97,
        1,
        34,
        144,
        129,
        1,
        144,
        148,
        82,
        134,
        129,
        82,
        144,
        148,
        147,
        145,
        146,
        131,
        146,
        97,
        4,
        183,
        146,
        134,
        146,
        144,
        145,
        138,
        145,
        138,
        145,
        130,
        145,
        1,
        131,
        130,
        128,
        130,
        132,
        55,
        96,
        0,
        146,
        1,
        145,
        144,
        145,
        82,
        80,
        97,
        8,
        218,
        146,
        80,
        80,
        80,
        86,
        91,
        144,
        146,
        80,
        144,
        80,
        96,
        0,
        129,
        96,
        4,
        129,
        17,
        21,
        97,
        4,
        208,
        87,
        97,
        4,
        208,
        97,
        11,
        180,
        86,
        91,
        20,
        21,
        128,
        97,
        4,
        243,
        87,
        80,
        134,
        96,
        32,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        130,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        21,
        91,
        21,
        97,
        5,
        17,
        87,
        96,
        64,
        81,
        99,
        180,
        201,
        31,
        251,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        5,
        26,
        135,
        97,
        5,
        124,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        32,
        128,
        130,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        144,
        146,
        82,
        96,
        64,
        130,
        32,
        84,
        22,
        97,
        5,
        80,
        87,
        80,
        96,
        0,
        145,
        144,
        80,
        86,
        91,
        80,
        128,
        81,
        96,
        32,
        145,
        130,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        144,
        147,
        82,
        96,
        64,
        144,
        146,
        32,
        84,
        130,
        22,
        145,
        22,
        20,
        144,
        86,
        91,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        5,
        164,
        87,
        96,
        64,
        81,
        99,
        20,
        231,
        146,
        33,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        32,
        129,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        5,
        207,
        87,
        96,
        64,
        81,
        99,
        62,
        135,
        106,
        147,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        32,
        129,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        59,
        21,
        97,
        5,
        252,
        87,
        96,
        64,
        81,
        99,
        31,
        130,
        159,
        3,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        32,
        128,
        130,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        144,
        146,
        82,
        96,
        64,
        144,
        145,
        32,
        84,
        22,
        21,
        97,
        6,
        60,
        87,
        96,
        64,
        81,
        99,
        103,
        220,
        48,
        1,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        6,
        69,
        129,
        97,
        6,
        244,
        86,
        91,
        96,
        32,
        129,
        129,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        146,
        131,
        144,
        82,
        96,
        64,
        144,
        32,
        131,
        81,
        129,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        146,
        22,
        145,
        144,
        145,
        23,
        128,
        130,
        85,
        144,
        145,
        97,
        6,
        152,
        145,
        96,
        1,
        96,
        160,
        27,
        144,
        4,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        22,
        144,
        97,
        11,
        224,
        86,
        91,
        129,
        84,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        145,
        144,
        145,
        22,
        96,
        1,
        96,
        160,
        27,
        2,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        145,
        130,
        22,
        23,
        130,
        85,
        96,
        32,
        131,
        1,
        81,
        131,
        81,
        96,
        64,
        81,
        145,
        131,
        22,
        146,
        22,
        144,
        127,
        119,
        109,
        164,
        12,
        191,
        44,
        34,
        53,
        82,
        102,
        27,
        212,
        133,
        2,
        206,
        183,
        36,
        9,
        179,
        54,
        43,
        176,
        198,
        109,
        137,
        137,
        189,
        126,
        32,
        228,
        73,
        125,
        144,
        96,
        0,
        144,
        163,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        96,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        1,
        20,
        97,
        8,
        193,
        87,
        130,
        81,
        96,
        64,
        81,
        99,
        102,
        23,
        194,
        41,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        4,
        130,
        1,
        82,
        96,
        100,
        96,
        36,
        130,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        144,
        99,
        204,
        47,
        132,
        82,
        144,
        96,
        68,
        1,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        7,
        89,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        0,
        130,
        62,
        96,
        31,
        61,
        144,
        129,
        1,
        96,
        31,
        25,
        22,
        130,
        1,
        96,
        64,
        82,
        97,
        7,
        129,
        145,
        144,
        129,
        1,
        144,
        97,
        12,
        23,
        86,
        91,
        146,
        80,
        144,
        80,
        96,
        0,
        91,
        129,
        81,
        129,
        16,
        21,
        97,
        8,
        187,
        87,
        129,
        129,
        129,
        81,
        129,
        16,
        97,
        7,
        163,
        87,
        97,
        7,
        163,
        97,
        12,
        219,
        86,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        74,
        27,
        164,
        8,
        96,
        64,
        81,
        129,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        7,
        232,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        8,
        12,
        145,
        144,
        97,
        12,
        241,
        86,
        91,
        128,
        21,
        97,
        8,
        158,
        87,
        80,
        129,
        129,
        129,
        81,
        129,
        16,
        97,
        8,
        37,
        87,
        97,
        8,
        37,
        97,
        12,
        219,
        86,
        91,
        96,
        32,
        144,
        129,
        2,
        145,
        144,
        145,
        1,
        129,
        1,
        81,
        144,
        133,
        1,
        81,
        96,
        64,
        81,
        98,
        186,
        128,
        169,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        145,
        130,
        22,
        96,
        4,
        130,
        1,
        82,
        145,
        22,
        144,
        99,
        1,
        117,
        1,
        82,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        8,
        122,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        8,
        158,
        145,
        144,
        97,
        12,
        241,
        86,
        91,
        21,
        97,
        8,
        169,
        87,
        80,
        80,
        80,
        80,
        86,
        91,
        128,
        97,
        8,
        179,
        129,
        97,
        13,
        19,
        86,
        91,
        145,
        80,
        80,
        97,
        7,
        136,
        86,
        91,
        80,
        97,
        6,
        249,
        86,
        91,
        96,
        64,
        81,
        99,
        11,
        165,
        215,
        235,
        96,
        228,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        128,
        130,
        81,
        96,
        65,
        3,
        97,
        9,
        16,
        87,
        96,
        32,
        131,
        1,
        81,
        96,
        64,
        132,
        1,
        81,
        96,
        96,
        133,
        1,
        81,
        96,
        0,
        26,
        97,
        9,
        4,
        135,
        130,
        133,
        133,
        97,
        9,
        31,
        86,
        91,
        148,
        80,
        148,
        80,
        80,
        80,
        80,
        97,
        9,
        24,
        86,
        91,
        80,
        96,
        0,
        144,
        80,
        96,
        2,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        127,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        93,
        87,
        110,
        115,
        87,
        164,
        80,
        29,
        223,
        233,
        47,
        70,
        104,
        27,
        32,
        160,
        131,
        17,
        21,
        97,
        9,
        86,
        87,
        80,
        96,
        0,
        144,
        80,
        96,
        3,
        97,
        9,
        218,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        0,
        128,
        130,
        82,
        96,
        32,
        130,
        1,
        128,
        132,
        82,
        137,
        144,
        82,
        96,
        255,
        136,
        22,
        146,
        130,
        1,
        146,
        144,
        146,
        82,
        96,
        96,
        129,
        1,
        134,
        144,
        82,
        96,
        128,
        129,
        1,
        133,
        144,
        82,
        96,
        1,
        144,
        96,
        160,
        1,
        96,
        32,
        96,
        64,
        81,
        96,
        32,
        129,
        3,
        144,
        128,
        132,
        3,
        144,
        133,
        90,
        250,
        21,
        128,
        21,
        97,
        9,
        170,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        96,
        64,
        81,
        96,
        31,
        25,
        1,
        81,
        145,
        80,
        80,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        97,
        9,
        211,
        87,
        96,
        0,
        96,
        1,
        146,
        80,
        146,
        80,
        80,
        97,
        9,
        218,
        86,
        91,
        145,
        80,
        96,
        0,
        144,
        80,
        91,
        148,
        80,
        148,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        2,
        247,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        10,
        10,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        10,
        21,
        129,
        97,
        9,
        227,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        22,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        10,
        91,
        87,
        97,
        10,
        91,
        97,
        10,
        28,
        86,
        91,
        96,
        64,
        82,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        64,
        130,
        132,
        3,
        18,
        21,
        97,
        10,
        117,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        64,
        81,
        96,
        64,
        129,
        1,
        129,
        129,
        16,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        23,
        21,
        97,
        10,
        152,
        87,
        97,
        10,
        152,
        97,
        10,
        28,
        86,
        91,
        96,
        64,
        82,
        144,
        80,
        128,
        130,
        53,
        97,
        10,
        169,
        129,
        97,
        9,
        227,
        86,
        91,
        129,
        82,
        96,
        32,
        131,
        1,
        53,
        97,
        10,
        185,
        129,
        97,
        9,
        227,
        86,
        91,
        96,
        32,
        145,
        144,
        145,
        1,
        82,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        96,
        132,
        134,
        3,
        18,
        21,
        97,
        10,
        219,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        10,
        229,
        133,
        133,
        97,
        10,
        99,
        86,
        91,
        146,
        80,
        96,
        64,
        132,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        11,
        2,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        134,
        1,
        145,
        80,
        134,
        96,
        31,
        131,
        1,
        18,
        97,
        11,
        22,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        11,
        37,
        87,
        96,
        0,
        128,
        253,
        91,
        135,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        11,
        55,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        148,
        80,
        128,
        147,
        80,
        80,
        80,
        80,
        146,
        80,
        146,
        80,
        146,
        86,
        91,
        96,
        0,
        96,
        64,
        130,
        132,
        3,
        18,
        21,
        97,
        11,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        10,
        21,
        131,
        131,
        97,
        10,
        99,
        86,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        82,
        131,
        81,
        128,
        130,
        133,
        1,
        82,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        11,
        147,
        87,
        133,
        129,
        1,
        131,
        1,
        81,
        133,
        130,
        1,
        96,
        64,
        1,
        82,
        130,
        1,
        97,
        11,
        119,
        86,
        91,
        80,
        96,
        0,
        96,
        64,
        130,
        134,
        1,
        1,
        82,
        96,
        64,
        96,
        31,
        25,
        96,
        31,
        131,
        1,
        22,
        133,
        1,
        1,
        146,
        80,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        96,
        27,
        3,
        129,
        129,
        22,
        131,
        130,
        22,
        1,
        144,
        128,
        130,
        17,
        21,
        97,
        12,
        0,
        87,
        97,
        12,
        0,
        97,
        11,
        202,
        86,
        91,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        128,
        81,
        97,
        12,
        18,
        129,
        97,
        9,
        227,
        86,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        12,
        42,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        81,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        12,
        66,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        133,
        1,
        145,
        80,
        133,
        96,
        31,
        131,
        1,
        18,
        97,
        12,
        86,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        96,
        32,
        130,
        130,
        17,
        21,
        97,
        12,
        106,
        87,
        97,
        12,
        106,
        97,
        10,
        28,
        86,
        91,
        129,
        96,
        5,
        27,
        146,
        80,
        97,
        12,
        123,
        129,
        132,
        1,
        97,
        10,
        50,
        86,
        91,
        130,
        129,
        82,
        146,
        132,
        1,
        129,
        1,
        146,
        129,
        129,
        1,
        144,
        137,
        133,
        17,
        21,
        97,
        12,
        149,
        87,
        96,
        0,
        128,
        253,
        91,
        148,
        130,
        1,
        148,
        91,
        132,
        134,
        16,
        21,
        97,
        12,
        191,
        87,
        133,
        81,
        147,
        80,
        97,
        12,
        175,
        132,
        97,
        9,
        227,
        86,
        91,
        131,
        130,
        82,
        148,
        130,
        1,
        148,
        144,
        130,
        1,
        144,
        97,
        12,
        154,
        86,
        91,
        150,
        80,
        97,
        12,
        206,
        144,
        80,
        135,
        130,
        1,
        97,
        12,
        7,
        86,
        91,
        148,
        80,
        80,
        80,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        13,
        3,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        128,
        21,
        21,
        129,
        20,
        97,
        10,
        21,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        13,
        37,
        87,
        97,
        13,
        37,
        97,
        11,
        202,
        86,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        172,
        187,
        171,
        136,
        185,
        108,
        41,
        46,
        138,
        116,
        194,
        133,
        159,
        208,
        24,
        80,
        229,
        23,
        153,
        55,
        164,
        97,
        23,
        148,
        132,
        10,
        164,
        20,
        69,
        159,
        225,
        51,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static HOPRNODESAFEREGISTRY_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct HoprNodeSafeRegistry<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for HoprNodeSafeRegistry<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for HoprNodeSafeRegistry<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for HoprNodeSafeRegistry<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for HoprNodeSafeRegistry<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(HoprNodeSafeRegistry))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> HoprNodeSafeRegistry<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    HOPRNODESAFEREGISTRY_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                HOPRNODESAFEREGISTRY_ABI.clone(),
                HOPRNODESAFEREGISTRY_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `NODE_SAFE_TYPEHASH` (0x84b0dec2) function
        pub fn node_safe_typehash(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([132, 176, 222, 194], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `VERSION` (0xffa1ad74) function
        pub fn version(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::std::string::String> {
            self.0
                .method_hash([255, 161, 173, 116], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `deregisterNodeBySafe` (0x91607c4c) function
        pub fn deregister_node_by_safe(
            &self,
            node_addr: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([145, 96, 124, 76], node_addr)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `domainSeparator` (0xf698da25) function
        pub fn domain_separator(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([246, 152, 218, 37], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isNodeSafeRegistered` (0xc6b8b261) function
        pub fn is_node_safe_registered(
            &self,
            node_safe: NodeSafe,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([198, 184, 178, 97], (node_safe,))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `nodeSigNonce` (0xaa90f2a5) function
        pub fn node_sig_nonce(
            &self,
            node_address: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([170, 144, 242, 165], node_address)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `nodeToSafe` (0x89978c40) function
        pub fn node_to_safe(
            &self,
            node_address: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([137, 151, 140, 64], node_address)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `registerSafeByNode` (0x7f935931) function
        pub fn register_safe_by_node(
            &self,
            safe_addr: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([127, 147, 89, 49], safe_addr)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `registerSafeWithNodeSig` (0xc5761d69) function
        pub fn register_safe_with_node_sig(
            &self,
            node_safe: NodeSafe,
            sig: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([197, 118, 29, 105], (node_safe, sig))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `updateDomainSeparator` (0x89ccfe89) function
        pub fn update_domain_separator(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([137, 204, 254, 137], ())
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `DergisteredNodeSafe` event
        pub fn dergistered_node_safe_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            DergisteredNodeSafeFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `RegisteredNodeSafe` event
        pub fn registered_node_safe_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            RegisteredNodeSafeFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            HoprNodeSafeRegistryEvents,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for HoprNodeSafeRegistry<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `NodeAddressZero` with signature `NodeAddressZero()` and selector `0x7d0ed526`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NodeAddressZero", abi = "NodeAddressZero()")]
    pub struct NodeAddressZero;
    ///Custom Error type `NodeHasSafe` with signature `NodeHasSafe()` and selector `0x67dc3001`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NodeHasSafe", abi = "NodeHasSafe()")]
    pub struct NodeHasSafe;
    ///Custom Error type `NodeIsContract` with signature `NodeIsContract()` and selector `0x7e0a7c0c`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NodeIsContract", abi = "NodeIsContract()")]
    pub struct NodeIsContract;
    ///Custom Error type `NodeNotModuleMember` with signature `NodeNotModuleMember()` and selector `0xba5d7eb0`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NodeNotModuleMember", abi = "NodeNotModuleMember()")]
    pub struct NodeNotModuleMember;
    ///Custom Error type `NotValidSafe` with signature `NotValidSafe()` and selector `0x56fe8554`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NotValidSafe", abi = "NotValidSafe()")]
    pub struct NotValidSafe;
    ///Custom Error type `NotValidSignatureFromNode` with signature `NotValidSignatureFromNode()` and selector `0xb4c91ffb`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NotValidSignatureFromNode", abi = "NotValidSignatureFromNode()")]
    pub struct NotValidSignatureFromNode;
    ///Custom Error type `SafeAddressZero` with signature `SafeAddressZero()` and selector `0x14e79221`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "SafeAddressZero", abi = "SafeAddressZero()")]
    pub struct SafeAddressZero;
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum HoprNodeSafeRegistryErrors {
        NodeAddressZero(NodeAddressZero),
        NodeHasSafe(NodeHasSafe),
        NodeIsContract(NodeIsContract),
        NodeNotModuleMember(NodeNotModuleMember),
        NotValidSafe(NotValidSafe),
        NotValidSignatureFromNode(NotValidSignatureFromNode),
        SafeAddressZero(SafeAddressZero),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for HoprNodeSafeRegistryErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded)
                = <NodeAddressZero as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::NodeAddressZero(decoded));
            }
            if let Ok(decoded)
                = <NodeHasSafe as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::NodeHasSafe(decoded));
            }
            if let Ok(decoded)
                = <NodeIsContract as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::NodeIsContract(decoded));
            }
            if let Ok(decoded)
                = <NodeNotModuleMember as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::NodeNotModuleMember(decoded));
            }
            if let Ok(decoded)
                = <NotValidSafe as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::NotValidSafe(decoded));
            }
            if let Ok(decoded)
                = <NotValidSignatureFromNode as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::NotValidSignatureFromNode(decoded));
            }
            if let Ok(decoded)
                = <SafeAddressZero as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::SafeAddressZero(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for HoprNodeSafeRegistryErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::NodeAddressZero(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NodeHasSafe(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NodeIsContract(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NodeNotModuleMember(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NotValidSafe(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NotValidSignatureFromNode(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SafeAddressZero(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for HoprNodeSafeRegistryErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <NodeAddressZero as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <NodeHasSafe as ::ethers::contract::EthError>::selector() => true,
                _ if selector
                    == <NodeIsContract as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <NodeNotModuleMember as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <NotValidSafe as ::ethers::contract::EthError>::selector() => true,
                _ if selector
                    == <NotValidSignatureFromNode as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <SafeAddressZero as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for HoprNodeSafeRegistryErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::NodeAddressZero(element) => ::core::fmt::Display::fmt(element, f),
                Self::NodeHasSafe(element) => ::core::fmt::Display::fmt(element, f),
                Self::NodeIsContract(element) => ::core::fmt::Display::fmt(element, f),
                Self::NodeNotModuleMember(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::NotValidSafe(element) => ::core::fmt::Display::fmt(element, f),
                Self::NotValidSignatureFromNode(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::SafeAddressZero(element) => ::core::fmt::Display::fmt(element, f),
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for HoprNodeSafeRegistryErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<NodeAddressZero> for HoprNodeSafeRegistryErrors {
        fn from(value: NodeAddressZero) -> Self {
            Self::NodeAddressZero(value)
        }
    }
    impl ::core::convert::From<NodeHasSafe> for HoprNodeSafeRegistryErrors {
        fn from(value: NodeHasSafe) -> Self {
            Self::NodeHasSafe(value)
        }
    }
    impl ::core::convert::From<NodeIsContract> for HoprNodeSafeRegistryErrors {
        fn from(value: NodeIsContract) -> Self {
            Self::NodeIsContract(value)
        }
    }
    impl ::core::convert::From<NodeNotModuleMember> for HoprNodeSafeRegistryErrors {
        fn from(value: NodeNotModuleMember) -> Self {
            Self::NodeNotModuleMember(value)
        }
    }
    impl ::core::convert::From<NotValidSafe> for HoprNodeSafeRegistryErrors {
        fn from(value: NotValidSafe) -> Self {
            Self::NotValidSafe(value)
        }
    }
    impl ::core::convert::From<NotValidSignatureFromNode>
    for HoprNodeSafeRegistryErrors {
        fn from(value: NotValidSignatureFromNode) -> Self {
            Self::NotValidSignatureFromNode(value)
        }
    }
    impl ::core::convert::From<SafeAddressZero> for HoprNodeSafeRegistryErrors {
        fn from(value: SafeAddressZero) -> Self {
            Self::SafeAddressZero(value)
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "DergisteredNodeSafe",
        abi = "DergisteredNodeSafe(address,address)"
    )]
    pub struct DergisteredNodeSafeFilter {
        #[ethevent(indexed)]
        pub safe_address: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub node_address: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "RegisteredNodeSafe", abi = "RegisteredNodeSafe(address,address)")]
    pub struct RegisteredNodeSafeFilter {
        #[ethevent(indexed)]
        pub safe_address: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub node_address: ::ethers::core::types::Address,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum HoprNodeSafeRegistryEvents {
        DergisteredNodeSafeFilter(DergisteredNodeSafeFilter),
        RegisteredNodeSafeFilter(RegisteredNodeSafeFilter),
    }
    impl ::ethers::contract::EthLogDecode for HoprNodeSafeRegistryEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = DergisteredNodeSafeFilter::decode_log(log) {
                return Ok(
                    HoprNodeSafeRegistryEvents::DergisteredNodeSafeFilter(decoded),
                );
            }
            if let Ok(decoded) = RegisteredNodeSafeFilter::decode_log(log) {
                return Ok(HoprNodeSafeRegistryEvents::RegisteredNodeSafeFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for HoprNodeSafeRegistryEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::DergisteredNodeSafeFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RegisteredNodeSafeFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<DergisteredNodeSafeFilter>
    for HoprNodeSafeRegistryEvents {
        fn from(value: DergisteredNodeSafeFilter) -> Self {
            Self::DergisteredNodeSafeFilter(value)
        }
    }
    impl ::core::convert::From<RegisteredNodeSafeFilter> for HoprNodeSafeRegistryEvents {
        fn from(value: RegisteredNodeSafeFilter) -> Self {
            Self::RegisteredNodeSafeFilter(value)
        }
    }
    ///Container type for all input parameters for the `NODE_SAFE_TYPEHASH` function with signature `NODE_SAFE_TYPEHASH()` and selector `0x84b0dec2`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "NODE_SAFE_TYPEHASH", abi = "NODE_SAFE_TYPEHASH()")]
    pub struct NodeSafeTypehashCall;
    ///Container type for all input parameters for the `VERSION` function with signature `VERSION()` and selector `0xffa1ad74`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "VERSION", abi = "VERSION()")]
    pub struct VersionCall;
    ///Container type for all input parameters for the `deregisterNodeBySafe` function with signature `deregisterNodeBySafe(address)` and selector `0x91607c4c`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "deregisterNodeBySafe", abi = "deregisterNodeBySafe(address)")]
    pub struct DeregisterNodeBySafeCall {
        pub node_addr: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `domainSeparator` function with signature `domainSeparator()` and selector `0xf698da25`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "domainSeparator", abi = "domainSeparator()")]
    pub struct DomainSeparatorCall;
    ///Container type for all input parameters for the `isNodeSafeRegistered` function with signature `isNodeSafeRegistered((address,address))` and selector `0xc6b8b261`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "isNodeSafeRegistered",
        abi = "isNodeSafeRegistered((address,address))"
    )]
    pub struct IsNodeSafeRegisteredCall {
        pub node_safe: NodeSafe,
    }
    ///Container type for all input parameters for the `nodeSigNonce` function with signature `nodeSigNonce(address)` and selector `0xaa90f2a5`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "nodeSigNonce", abi = "nodeSigNonce(address)")]
    pub struct NodeSigNonceCall {
        pub node_address: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `nodeToSafe` function with signature `nodeToSafe(address)` and selector `0x89978c40`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "nodeToSafe", abi = "nodeToSafe(address)")]
    pub struct NodeToSafeCall {
        pub node_address: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `registerSafeByNode` function with signature `registerSafeByNode(address)` and selector `0x7f935931`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "registerSafeByNode", abi = "registerSafeByNode(address)")]
    pub struct RegisterSafeByNodeCall {
        pub safe_addr: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `registerSafeWithNodeSig` function with signature `registerSafeWithNodeSig((address,address),bytes)` and selector `0xc5761d69`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "registerSafeWithNodeSig",
        abi = "registerSafeWithNodeSig((address,address),bytes)"
    )]
    pub struct RegisterSafeWithNodeSigCall {
        pub node_safe: NodeSafe,
        pub sig: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `updateDomainSeparator` function with signature `updateDomainSeparator()` and selector `0x89ccfe89`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "updateDomainSeparator", abi = "updateDomainSeparator()")]
    pub struct UpdateDomainSeparatorCall;
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum HoprNodeSafeRegistryCalls {
        NodeSafeTypehash(NodeSafeTypehashCall),
        Version(VersionCall),
        DeregisterNodeBySafe(DeregisterNodeBySafeCall),
        DomainSeparator(DomainSeparatorCall),
        IsNodeSafeRegistered(IsNodeSafeRegisteredCall),
        NodeSigNonce(NodeSigNonceCall),
        NodeToSafe(NodeToSafeCall),
        RegisterSafeByNode(RegisterSafeByNodeCall),
        RegisterSafeWithNodeSig(RegisterSafeWithNodeSigCall),
        UpdateDomainSeparator(UpdateDomainSeparatorCall),
    }
    impl ::ethers::core::abi::AbiDecode for HoprNodeSafeRegistryCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <NodeSafeTypehashCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::NodeSafeTypehash(decoded));
            }
            if let Ok(decoded)
                = <VersionCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Version(decoded));
            }
            if let Ok(decoded)
                = <DeregisterNodeBySafeCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::DeregisterNodeBySafe(decoded));
            }
            if let Ok(decoded)
                = <DomainSeparatorCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::DomainSeparator(decoded));
            }
            if let Ok(decoded)
                = <IsNodeSafeRegisteredCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::IsNodeSafeRegistered(decoded));
            }
            if let Ok(decoded)
                = <NodeSigNonceCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::NodeSigNonce(decoded));
            }
            if let Ok(decoded)
                = <NodeToSafeCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::NodeToSafe(decoded));
            }
            if let Ok(decoded)
                = <RegisterSafeByNodeCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RegisterSafeByNode(decoded));
            }
            if let Ok(decoded)
                = <RegisterSafeWithNodeSigCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RegisterSafeWithNodeSig(decoded));
            }
            if let Ok(decoded)
                = <UpdateDomainSeparatorCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::UpdateDomainSeparator(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for HoprNodeSafeRegistryCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::NodeSafeTypehash(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Version(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::DeregisterNodeBySafe(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::DomainSeparator(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::IsNodeSafeRegistered(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NodeSigNonce(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NodeToSafe(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RegisterSafeByNode(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RegisterSafeWithNodeSig(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::UpdateDomainSeparator(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for HoprNodeSafeRegistryCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::NodeSafeTypehash(element) => ::core::fmt::Display::fmt(element, f),
                Self::Version(element) => ::core::fmt::Display::fmt(element, f),
                Self::DeregisterNodeBySafe(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::DomainSeparator(element) => ::core::fmt::Display::fmt(element, f),
                Self::IsNodeSafeRegistered(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::NodeSigNonce(element) => ::core::fmt::Display::fmt(element, f),
                Self::NodeToSafe(element) => ::core::fmt::Display::fmt(element, f),
                Self::RegisterSafeByNode(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RegisterSafeWithNodeSig(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::UpdateDomainSeparator(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<NodeSafeTypehashCall> for HoprNodeSafeRegistryCalls {
        fn from(value: NodeSafeTypehashCall) -> Self {
            Self::NodeSafeTypehash(value)
        }
    }
    impl ::core::convert::From<VersionCall> for HoprNodeSafeRegistryCalls {
        fn from(value: VersionCall) -> Self {
            Self::Version(value)
        }
    }
    impl ::core::convert::From<DeregisterNodeBySafeCall> for HoprNodeSafeRegistryCalls {
        fn from(value: DeregisterNodeBySafeCall) -> Self {
            Self::DeregisterNodeBySafe(value)
        }
    }
    impl ::core::convert::From<DomainSeparatorCall> for HoprNodeSafeRegistryCalls {
        fn from(value: DomainSeparatorCall) -> Self {
            Self::DomainSeparator(value)
        }
    }
    impl ::core::convert::From<IsNodeSafeRegisteredCall> for HoprNodeSafeRegistryCalls {
        fn from(value: IsNodeSafeRegisteredCall) -> Self {
            Self::IsNodeSafeRegistered(value)
        }
    }
    impl ::core::convert::From<NodeSigNonceCall> for HoprNodeSafeRegistryCalls {
        fn from(value: NodeSigNonceCall) -> Self {
            Self::NodeSigNonce(value)
        }
    }
    impl ::core::convert::From<NodeToSafeCall> for HoprNodeSafeRegistryCalls {
        fn from(value: NodeToSafeCall) -> Self {
            Self::NodeToSafe(value)
        }
    }
    impl ::core::convert::From<RegisterSafeByNodeCall> for HoprNodeSafeRegistryCalls {
        fn from(value: RegisterSafeByNodeCall) -> Self {
            Self::RegisterSafeByNode(value)
        }
    }
    impl ::core::convert::From<RegisterSafeWithNodeSigCall>
    for HoprNodeSafeRegistryCalls {
        fn from(value: RegisterSafeWithNodeSigCall) -> Self {
            Self::RegisterSafeWithNodeSig(value)
        }
    }
    impl ::core::convert::From<UpdateDomainSeparatorCall> for HoprNodeSafeRegistryCalls {
        fn from(value: UpdateDomainSeparatorCall) -> Self {
            Self::UpdateDomainSeparator(value)
        }
    }
    ///Container type for all return fields from the `NODE_SAFE_TYPEHASH` function with signature `NODE_SAFE_TYPEHASH()` and selector `0x84b0dec2`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct NodeSafeTypehashReturn(pub [u8; 32]);
    ///Container type for all return fields from the `VERSION` function with signature `VERSION()` and selector `0xffa1ad74`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct VersionReturn(pub ::std::string::String);
    ///Container type for all return fields from the `domainSeparator` function with signature `domainSeparator()` and selector `0xf698da25`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct DomainSeparatorReturn(pub [u8; 32]);
    ///Container type for all return fields from the `isNodeSafeRegistered` function with signature `isNodeSafeRegistered((address,address))` and selector `0xc6b8b261`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct IsNodeSafeRegisteredReturn(pub bool);
    ///Container type for all return fields from the `nodeSigNonce` function with signature `nodeSigNonce(address)` and selector `0xaa90f2a5`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct NodeSigNonceReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `nodeToSafe` function with signature `nodeToSafe(address)` and selector `0x89978c40`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct NodeToSafeReturn(pub ::ethers::core::types::Address);
    ///`NodeSafe(address,address)`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct NodeSafe {
        pub safe_address: ::ethers::core::types::Address,
        pub node_chain_key_address: ::ethers::core::types::Address,
    }
}
