openapi: 3.0.3
servers:
  - url: /api/v2
info:
  description: This Rest API enables developers to interact with a hoprd node programatically.
  version: 2.0.0
  title: HOPRd Rest API v2
  contact:
    email: tech@hoprnet.org
  license:
    name: GPL-3.0
    url: https://github.com/hoprnet/hoprnet/blob/master/LICENSE
paths: {}
security:
  - keyScheme:
      - write
  - passwordScheme:
      - write
externalDocs:
  description: Find out more about HOPR and HOPRd.
  url: http://docs.hoprnet.org
components:
  responses:
    NotFound:
      description: The specified resource was not found
    Unauthorized:
      description: authentication failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: authorization failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnknownFailure:
      description: Unknown failure
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      properties:
        status:
          type: string
        error:
          type: string
      required:
        - status
        - error
    RequestStatus:
      type: object
      properties:
        status:
          type: string
          description: Status declaring success/failure of the request.
      example:
        status: success
    Token:
      type: object
      required:
        - id
        - capabilities
      properties:
        id:
          type: string
          description: Unique ID of the token
        description:
          type: string
          description: Some description for the token
        valid_until:
          type: integer
          description: Seconds since epoch until the token is valid
        capabilities:
          type: array
          description: Array of capabilities associated with the token
          minItems: 1
          items:
            $ref: '#/components/schemas/TokenCapability'
      example:
        id: someTOKENid1223
        description: this is an interesting token
        capabilities:
          - endpoint: tokensGetToken
            limits:
              - type: calls
                conditions:
                  max: 100
    TokenCapabilityLimit:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: Limit type
        conditions:
          type: object
          description: Limit conditions, if any
          properties:
            max:
              type: integer
              description: Upper ceiling. Applies to limit type calls.
      example:
        type: calls
        conditions:
          max: 100
    TokenCapability:
      type: object
      required:
        - endpoint
      properties:
        endpoint:
          type: string
          description: Short reference of the operation this capability is tied to.
          enum:
            - tokensCreate
            - tokensGetToken
            - ticketsGetStatistics
            - ticketsRedeemTickets
            - ticketsGetTickets
            - settingsGetSettings
            - nodeGetVersion
            - nodeStreamWebsocket
            - nodePing
            - nodeGetPeers
            - nodeGetMetrics
            - nodeGetInfo
            - nodeGetEntryNodes
            - messagesWebsocket
            - messagesSign
            - messagesSendMessage
            - messageSign
            - channelsFundChannels
            - channelsOpenChannel
            - channelsGetChannels
            - aliasesSetAlias
            - aliasesGetAliases
            - accountWithdraw
            - accountGetBalances
            - accountGetAddresses
            - accountGetAddress
            - tokensDelete
            - settingsSetSetting
            - peerInfoGetPeerInfo
            - channelsRedeemTickets
            - channelsGetTickets
            - channelsGetChannel
            - channelsCloseChannel
            - aliasesGetAlias
            - aliasesRemoveAlias
        limits:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/TokenCapabilityLimit'
      example:
        endpoint: tokensGetToken
        limits:
          - type: calls
            conditions:
              max: 100
    Signature:
      type: string
      description: Signature from requested message.
      example: 0x304402201065a95fd22fc3e48266c3b270ace032489b0177e07d33c59e0d13dccc89108402205f41fb911bcfe485a8e58162ebce90382dc96ccafff378e5c8960e07efcf9e92
    MultiAddress:
      type: string
      description: A multi address is a composable and future-proof network address, usually announced by Public HOPR nodes.
      example:
        - /ip4/128.0.215.32/tcp/9080/p2p/16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit
        - /p2p/16Uiu2HAmLpqczAGfgmJchVgVk233rmB2T3DSn2gPG6JMa5brEHZ1/p2p-circuit/p2p/16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit
        - /ip4/127.0.0.1/tcp/9080/p2p/16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit
        - /ip4/192.168.178.56/tcp/9080/p2p/16Uiu2HAm91QFjPepnwjuZWzK5pb5ZS8z8qxQRfKZJNXjkgGNUAit
    Currency:
      type: string
      enum:
        - NATIVE
        - HOPR
      description: Supported currencies, NATIVE used for the interacting with blockchain or HOPR used to fund channels.
      example: NATIVE
    NativeAddress:
      type: string
      format: address
      description: Blockchain-native account address. Can be funded from external wallets (starts with **0x...**). It **can't be used** internally to send / receive messages, open / close payment channels.
      example: 0xEA9eDAE5CfC794B75C45c8fa89b605508A03742a
    HoprAddress:
      format: peerId
      type: string
      description: HOPR account address, also called a PeerId. Used to send / receive messages, open / close payment channels.
      example: 16Uiu2HAmVfV4GKQhdECMqYmUMGLy84RjTJQxTWDcmUX5847roBar
    NativeBalance:
      type: string
      example: '1000000000000000000'
      description: Amount of NATIVE (ETH) balance in the smallest unit. Used only for gas fees on the blockchain the current release is running on. For example, when you will open or close the payment channel, it will use gas fees to execute this action.
    HoprBalance:
      type: string
      example: '10000000000000000000'
      description: Amount of HOPR tokens in the smallest unit. Used for funding payment channels.
    Channel:
      type: object
      properties:
        type:
          type: string
          enum:
            - incoming
            - outgoing
          description: Channel can be either incomming or outgoing. Incomming means that other node can send messages using this node as relay. Outgoing means that this node can use other node to send message as realy.
          example: incoming
        channelId:
          type: string
          description: Channel ID that can be used in other calls, not to confuse with transaction hash.
          example: 0x04e50b7ddce9770f58cebe51f33b472c92d1c40384759f5a0b1025220bf15ec5
        peerId:
          $ref: '#/components/schemas/HoprAddress'
        status:
          type: string
          enum:
            - WaitingForCommitment
            - Open
            - PendingToClose
            - Closed
          description: 'Status of the channel can be: WaitingForCommitment, Open, PendingToClose, or Closed.'
          example: Open
        balance:
          $ref: '#/components/schemas/HoprBalance'
    Ticket:
      type: object
      properties:
        counterparty:
          $ref: '#/components/schemas/HoprAddress'
        challenge:
          type: string
          description: The ticket's challenge which needs to be solved before being able to claim the embedded incentive.
        epoch:
          type: string
          description: Ticket redemption relies on providing the value opening to a series of commitments that have previously been stored on-chain by the ticket recipient.
        index:
          type: string
          description: Each ticket is labeled by an ongoing serial number named ticket index i and its current value is stored in the smart contract.
        amount:
          type: string
          description: The ticket's value in HOPR.
        winProb:
          type: string
          description: The ticket's winning probability normalized with the common base of Ethereum which is 2^256-1.
        channelEpoch:
          type: string
          description: Payment channels might run through multiple open and close sequences, this epoch tracks the sequence.
        signature:
          $ref: '#/components/schemas/Signature'
    Settings:
      type: object
      description: Various settings that affects how this node is interacting with the network.
      properties:
        includeRecipient:
          type: boolean
          description: Prepends your address to all messages so that receiver of the message can know that you sent that message.
          example: true
        strategy:
          type: string
          enum:
            - passive
            - promiscuous
          example: passive
          description: By default, hoprd runs in **passive** mode, this means that your node will not attempt to open or close any channels automatically. When you set your strategy to **promiscuous** mode, your node will attempt to open channels to a _randomly_ selected group of nodes which you have a healthy connection to. At the same time, your node will also attempt to close channels that are running low on balance or are unhealthy.
  securitySchemes:
    keyScheme:
      type: apiKey
      name: x-auth-token
      in: header
      description: A valid API token which had been configured at node startup or through the token API.
    passwordScheme:
      type: http
      scheme: basic
      description: A valid API token is used as the user which had been configured at node startup. No password is required.
