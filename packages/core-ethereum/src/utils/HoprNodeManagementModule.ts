/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common.js";

export interface HoprNodeManagementModuleInterface extends utils.Interface {
  functions: {
    "addChannelsAndTokenTarget(uint256)": FunctionFragment;
    "addNode(address)": FunctionFragment;
    "decodeFunctionSigsAndPermissions(bytes32,uint256)": FunctionFragment;
    "encodeFunctionSigsAndPermissions(bytes4[],uint8[])": FunctionFragment;
    "execTransactionFromModule(address,uint256,bytes,uint8)": FunctionFragment;
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)": FunctionFragment;
    "includeNode(uint256)": FunctionFragment;
    "initialize(bytes)": FunctionFragment;
    "isHoprNodeManagementModule()": FunctionFragment;
    "isNode(address)": FunctionFragment;
    "multisend()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeNode(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeTarget(address)": FunctionFragment;
    "scopeChannelsCapabilities(address,bytes32,bytes32)": FunctionFragment;
    "scopeSendCapability(address,address,uint8)": FunctionFragment;
    "scopeTargetChannels(uint256)": FunctionFragment;
    "scopeTargetSend(uint256)": FunctionFragment;
    "scopeTargetToken(uint256)": FunctionFragment;
    "scopeTokenCapabilities(address,address,address,bytes32)": FunctionFragment;
    "setMultisend(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addChannelsAndTokenTarget"
      | "addNode"
      | "decodeFunctionSigsAndPermissions"
      | "encodeFunctionSigsAndPermissions"
      | "execTransactionFromModule"
      | "execTransactionFromModuleReturnData"
      | "includeNode"
      | "initialize"
      | "isHoprNodeManagementModule"
      | "isNode"
      | "multisend"
      | "owner"
      | "proxiableUUID"
      | "removeNode"
      | "renounceOwnership"
      | "revokeTarget"
      | "scopeChannelsCapabilities"
      | "scopeSendCapability"
      | "scopeTargetChannels"
      | "scopeTargetSend"
      | "scopeTargetToken"
      | "scopeTokenCapabilities"
      | "setMultisend"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addChannelsAndTokenTarget",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addNode", values: [string]): string;
  encodeFunctionData(
    functionFragment: "decodeFunctionSigsAndPermissions",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeFunctionSigsAndPermissions",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModule",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModuleReturnData",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "includeNode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isHoprNodeManagementModule",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isNode", values: [string]): string;
  encodeFunctionData(functionFragment: "multisend", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "removeNode", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeTarget",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeChannelsCapabilities",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeSendCapability",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeTargetChannels",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeTargetSend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeTargetToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeTokenCapabilities",
    values: [string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultisend",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addChannelsAndTokenTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodeFunctionSigsAndPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeFunctionSigsAndPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModuleReturnData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isHoprNodeManagementModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multisend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeChannelsCapabilities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeSendCapability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeTargetChannels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeTargetSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeTargetToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeTokenCapabilities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultisend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NodeAdded(address)": EventFragment;
    "NodeRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetMultisendAddress(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMultisendAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NodeAddedEventObject {
  node: string;
}
export type NodeAddedEvent = TypedEvent<[string], NodeAddedEventObject>;

export type NodeAddedEventFilter = TypedEventFilter<NodeAddedEvent>;

export interface NodeRemovedEventObject {
  node: string;
}
export type NodeRemovedEvent = TypedEvent<[string], NodeRemovedEventObject>;

export type NodeRemovedEventFilter = TypedEventFilter<NodeRemovedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetMultisendAddressEventObject {
  multisendAddress: string;
}
export type SetMultisendAddressEvent = TypedEvent<
  [string],
  SetMultisendAddressEventObject
>;

export type SetMultisendAddressEventFilter =
  TypedEventFilter<SetMultisendAddressEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface HoprNodeManagementModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HoprNodeManagementModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addChannelsAndTokenTarget(
      defaultTarget: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    decodeFunctionSigsAndPermissions(
      encoded: BytesLike,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], number[]] & { functionSigs: string[]; permissions: number[] }
    >;

    encodeFunctionSigsAndPermissions(
      functionSigs: BytesLike[],
      permissions: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { encoded: string; length: BigNumber }>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    includeNode(
      nodeDefaultTarget: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      initParams: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isHoprNodeManagementModule(overrides?: CallOverrides): Promise<[boolean]>;

    isNode(nodeAddress: string, overrides?: CallOverrides): Promise<[boolean]>;

    multisend(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeTarget(
      targetAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    scopeChannelsCapabilities(
      targetAddress: string,
      channelId: BytesLike,
      encodedSigsPermissions: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    scopeSendCapability(
      nodeAddress: string,
      beneficiary: string,
      permission: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    scopeTargetChannels(
      defaultTarget: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    scopeTargetSend(
      defaultTarget: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    scopeTargetToken(
      defaultTarget: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    scopeTokenCapabilities(
      nodeAddress: string,
      targetAddress: string,
      beneficiary: string,
      encodedSigsPermissions: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMultisend(
      _multisend: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addChannelsAndTokenTarget(
    defaultTarget: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addNode(
    nodeAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  decodeFunctionSigsAndPermissions(
    encoded: BytesLike,
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], number[]] & { functionSigs: string[]; permissions: number[] }
  >;

  encodeFunctionSigsAndPermissions(
    functionSigs: BytesLike[],
    permissions: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { encoded: string; length: BigNumber }>;

  execTransactionFromModule(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  execTransactionFromModuleReturnData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  includeNode(
    nodeDefaultTarget: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    initParams: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isHoprNodeManagementModule(overrides?: CallOverrides): Promise<boolean>;

  isNode(nodeAddress: string, overrides?: CallOverrides): Promise<boolean>;

  multisend(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeNode(
    nodeAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeTarget(
    targetAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  scopeChannelsCapabilities(
    targetAddress: string,
    channelId: BytesLike,
    encodedSigsPermissions: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  scopeSendCapability(
    nodeAddress: string,
    beneficiary: string,
    permission: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  scopeTargetChannels(
    defaultTarget: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  scopeTargetSend(
    defaultTarget: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  scopeTargetToken(
    defaultTarget: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  scopeTokenCapabilities(
    nodeAddress: string,
    targetAddress: string,
    beneficiary: string,
    encodedSigsPermissions: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMultisend(
    _multisend: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addChannelsAndTokenTarget(
      defaultTarget: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addNode(nodeAddress: string, overrides?: CallOverrides): Promise<void>;

    decodeFunctionSigsAndPermissions(
      encoded: BytesLike,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], number[]] & { functionSigs: string[]; permissions: number[] }
    >;

    encodeFunctionSigsAndPermissions(
      functionSigs: BytesLike[],
      permissions: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { encoded: string; length: BigNumber }>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    includeNode(
      nodeDefaultTarget: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(initParams: BytesLike, overrides?: CallOverrides): Promise<void>;

    isHoprNodeManagementModule(overrides?: CallOverrides): Promise<boolean>;

    isNode(nodeAddress: string, overrides?: CallOverrides): Promise<boolean>;

    multisend(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeNode(nodeAddress: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeTarget(
      targetAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    scopeChannelsCapabilities(
      targetAddress: string,
      channelId: BytesLike,
      encodedSigsPermissions: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    scopeSendCapability(
      nodeAddress: string,
      beneficiary: string,
      permission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    scopeTargetChannels(
      defaultTarget: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    scopeTargetSend(
      defaultTarget: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    scopeTargetToken(
      defaultTarget: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    scopeTokenCapabilities(
      nodeAddress: string,
      targetAddress: string,
      beneficiary: string,
      encodedSigsPermissions: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultisend(_multisend: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NodeAdded(address)"(node?: string | null): NodeAddedEventFilter;
    NodeAdded(node?: string | null): NodeAddedEventFilter;

    "NodeRemoved(address)"(node?: string | null): NodeRemovedEventFilter;
    NodeRemoved(node?: string | null): NodeRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SetMultisendAddress(address)"(
      multisendAddress?: string | null
    ): SetMultisendAddressEventFilter;
    SetMultisendAddress(
      multisendAddress?: string | null
    ): SetMultisendAddressEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    addChannelsAndTokenTarget(
      defaultTarget: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    decodeFunctionSigsAndPermissions(
      encoded: BytesLike,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeFunctionSigsAndPermissions(
      functionSigs: BytesLike[],
      permissions: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    includeNode(
      nodeDefaultTarget: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(
      initParams: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isHoprNodeManagementModule(overrides?: CallOverrides): Promise<BigNumber>;

    isNode(nodeAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    multisend(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeTarget(
      targetAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    scopeChannelsCapabilities(
      targetAddress: string,
      channelId: BytesLike,
      encodedSigsPermissions: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    scopeSendCapability(
      nodeAddress: string,
      beneficiary: string,
      permission: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    scopeTargetChannels(
      defaultTarget: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    scopeTargetSend(
      defaultTarget: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    scopeTargetToken(
      defaultTarget: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    scopeTokenCapabilities(
      nodeAddress: string,
      targetAddress: string,
      beneficiary: string,
      encodedSigsPermissions: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMultisend(
      _multisend: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addChannelsAndTokenTarget(
      defaultTarget: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    decodeFunctionSigsAndPermissions(
      encoded: BytesLike,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeFunctionSigsAndPermissions(
      functionSigs: BytesLike[],
      permissions: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    includeNode(
      nodeDefaultTarget: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      initParams: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isHoprNodeManagementModule(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNode(
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multisend(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeTarget(
      targetAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    scopeChannelsCapabilities(
      targetAddress: string,
      channelId: BytesLike,
      encodedSigsPermissions: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    scopeSendCapability(
      nodeAddress: string,
      beneficiary: string,
      permission: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    scopeTargetChannels(
      defaultTarget: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    scopeTargetSend(
      defaultTarget: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    scopeTargetToken(
      defaultTarget: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    scopeTokenCapabilities(
      nodeAddress: string,
      targetAddress: string,
      beneficiary: string,
      encodedSigsPermissions: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMultisend(
      _multisend: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
