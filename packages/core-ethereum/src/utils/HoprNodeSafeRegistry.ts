/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common.js";

export declare namespace HoprNodeSafeRegistry {
  export type NodeSafeStruct = {
    safeAddress: string;
    nodeChainKeyAddress: string;
  };

  export type NodeSafeStructOutput = [string, string] & {
    safeAddress: string;
    nodeChainKeyAddress: string;
  };
}

export interface HoprNodeSafeRegistryInterface extends utils.Interface {
  functions: {
    "NODE_SAFE_TYPEHASH()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "deregisterNodeBySafe(address)": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "isNodeSafeRegistered((address,address))": FunctionFragment;
    "nodeToSafe(address)": FunctionFragment;
    "registerSafeByNode(address)": FunctionFragment;
    "registerSafeWithNodeSig((address,address),bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NODE_SAFE_TYPEHASH"
      | "VERSION"
      | "deregisterNodeBySafe"
      | "domainSeparator"
      | "isNodeSafeRegistered"
      | "nodeToSafe"
      | "registerSafeByNode"
      | "registerSafeWithNodeSig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "NODE_SAFE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deregisterNodeBySafe",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isNodeSafeRegistered",
    values: [HoprNodeSafeRegistry.NodeSafeStruct]
  ): string;
  encodeFunctionData(functionFragment: "nodeToSafe", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerSafeByNode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSafeWithNodeSig",
    values: [HoprNodeSafeRegistry.NodeSafeStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "NODE_SAFE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deregisterNodeBySafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNodeSafeRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nodeToSafe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerSafeByNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSafeWithNodeSig",
    data: BytesLike
  ): Result;

  events: {
    "DergisteredNodeSafe(address,address)": EventFragment;
    "RegisteredNodeSafe(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DergisteredNodeSafe"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredNodeSafe"): EventFragment;
}

export interface DergisteredNodeSafeEventObject {
  safeAddress: string;
  nodeAddress: string;
}
export type DergisteredNodeSafeEvent = TypedEvent<
  [string, string],
  DergisteredNodeSafeEventObject
>;

export type DergisteredNodeSafeEventFilter =
  TypedEventFilter<DergisteredNodeSafeEvent>;

export interface RegisteredNodeSafeEventObject {
  safeAddress: string;
  nodeAddress: string;
}
export type RegisteredNodeSafeEvent = TypedEvent<
  [string, string],
  RegisteredNodeSafeEventObject
>;

export type RegisteredNodeSafeEventFilter =
  TypedEventFilter<RegisteredNodeSafeEvent>;

export interface HoprNodeSafeRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HoprNodeSafeRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NODE_SAFE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    deregisterNodeBySafe(
      nodeAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    isNodeSafeRegistered(
      nodeSafe: HoprNodeSafeRegistry.NodeSafeStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nodeToSafe(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    registerSafeByNode(
      safeAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerSafeWithNodeSig(
      nodeSafe: HoprNodeSafeRegistry.NodeSafeStruct,
      sig: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  NODE_SAFE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  deregisterNodeBySafe(
    nodeAddr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  isNodeSafeRegistered(
    nodeSafe: HoprNodeSafeRegistry.NodeSafeStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nodeToSafe(arg0: string, overrides?: CallOverrides): Promise<string>;

  registerSafeByNode(
    safeAddr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerSafeWithNodeSig(
    nodeSafe: HoprNodeSafeRegistry.NodeSafeStruct,
    sig: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    NODE_SAFE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    deregisterNodeBySafe(
      nodeAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    isNodeSafeRegistered(
      nodeSafe: HoprNodeSafeRegistry.NodeSafeStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nodeToSafe(arg0: string, overrides?: CallOverrides): Promise<string>;

    registerSafeByNode(
      safeAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerSafeWithNodeSig(
      nodeSafe: HoprNodeSafeRegistry.NodeSafeStruct,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DergisteredNodeSafe(address,address)"(
      safeAddress?: string | null,
      nodeAddress?: string | null
    ): DergisteredNodeSafeEventFilter;
    DergisteredNodeSafe(
      safeAddress?: string | null,
      nodeAddress?: string | null
    ): DergisteredNodeSafeEventFilter;

    "RegisteredNodeSafe(address,address)"(
      safeAddress?: string | null,
      nodeAddress?: string | null
    ): RegisteredNodeSafeEventFilter;
    RegisteredNodeSafe(
      safeAddress?: string | null,
      nodeAddress?: string | null
    ): RegisteredNodeSafeEventFilter;
  };

  estimateGas: {
    NODE_SAFE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    deregisterNodeBySafe(
      nodeAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    isNodeSafeRegistered(
      nodeSafe: HoprNodeSafeRegistry.NodeSafeStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodeToSafe(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    registerSafeByNode(
      safeAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerSafeWithNodeSig(
      nodeSafe: HoprNodeSafeRegistry.NodeSafeStruct,
      sig: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NODE_SAFE_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deregisterNodeBySafe(
      nodeAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isNodeSafeRegistered(
      nodeSafe: HoprNodeSafeRegistry.NodeSafeStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeToSafe(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerSafeByNode(
      safeAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerSafeWithNodeSig(
      nodeSafe: HoprNodeSafeRegistry.NodeSafeStruct,
      sig: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
