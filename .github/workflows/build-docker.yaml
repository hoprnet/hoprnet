---
#################################################################################
# Child pipeline to build hoprnet docker images
#################################################################################
name: Build Docker

env:
  RUST_BACKTRACE: "1"
  needs_nix_setup: false

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
      package:
        required: true
        type: string
      production:
        required: false
        type: boolean
        default: false
        description: 'Build for production'

concurrency:
  group: ${{ github.ref }}-build-docker-${{ inputs.package }}
  cancel-in-progress: true
jobs:
  docker:
    runs-on: self-hosted-hoprnet-bigger
    timeout-minutes: 60
    steps:
      - name: Checkout hoprnet repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Setup GCP
        id: gcp
        uses: hoprnet/hopr-workflows/actions/setup-gcp@master
        with:
          google-credentials: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}
          login-artifact-registry: 'true'
          install-sdk: 'false'

      - name: Install Nix
        if: env.needs_nix_setup == true
        uses: cachix/install-nix-action@v29
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v15
        if: env.needs_nix_setup == true
        with:
          name: hoprnet
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
        env:
          USER: runner

      - name: Get PR labels
        id: pr-labels
        uses: joerick/pr-labels-action@v1.0.9

      - name: Determine build options
        id: options
        run: |
          nix_debug_option="-debug"
          if ${{ inputs.production }}; then
            nix_debug_option=""
          fi
          declare docker_tag docker_tag_pr docker_release_latest_tag
          if ${{ contains(steps.pr-labels.outputs.labels, ' release ') }}; then
            docker_tag=$(./scripts/get-current-version.sh docker)
            docker_tag_pr=${docker_tag}-pr.${{ github.event.pull_request.number }}
            echo "DOCKER_TAG=${docker_tag}" >> $GITHUB_OUTPUT
            echo "DOCKER_TAG_PR=${docker_tag_pr}" >> $GITHUB_OUTPUT
            echo "NIX_BUILD_TARGET=${{ inputs.package }}${nix_debug_option}-docker-build-and-upload" >> $GITHUB_OUTPUT
          else
            next_version=$(./scripts/get-next-version.sh Build)
            ./scripts/bump-version.sh ${next_version}
            docker_tag=$(echo "${next_version}" | sed 's/+/-/')
            docker_tag_pr=$(echo "${next_version}" | sed 's/+.*/-pr.'${{ github.event.pull_request.number }}'/')
            echo "DOCKER_TAG=${docker_tag}" >> $GITHUB_OUTPUT
            echo "DOCKER_TAG_PR=${docker_tag_pr}" >> $GITHUB_OUTPUT
            echo "NIX_BUILD_TARGET=${{ inputs.package }}${nix_debug_option}-docker-build-and-upload" >> $GITHUB_OUTPUT
          fi
          base_branch=${{ github.event.pull_request.base.ref }}
          if [ "${base_branch}" == "master" ]; then
            docker_release_latest_tag=${{ vars.BRANCH_MASTER_RELEASE_NAME }}-latest
          else
            docker_release_latest_tag=${{ vars.BRANCH_RELEASE_RELEASE_NAME }}-latest
          fi
          if ${{ inputs.production }}; then
            echo "HOPRD_CLUSTER_NAME=core-node" >> $GITHUB_OUTPUT
          else
            echo "HOPRD_CLUSTER_NAME=hoprd-node-${docker_tag_pr//./-}" >> $GITHUB_OUTPUT
          fi
          echo "DOCKER_RELEASE_LATEST_TAG=${docker_release_latest_tag}" >> $GITHUB_OUTPUT
        env:
          COMMIT_SHA: ${{ github.event.pull_request.head.sha }}

      - name: Build and push ${{ inputs.package }} docker image - Default
        run: nix run .#${{ steps.options.outputs.NIX_BUILD_TARGET }}
        env:
          GOOGLE_ACCESS_TOKEN: ${{ steps.gcp.outputs.access_token }}
          IMAGE_TARGET: ${{ vars.DOCKER_IMAGE_REGISTRY }}/${{ inputs.package }}:${{ steps.options.outputs.DOCKER_TAG }}

      - name: Build and push ${{ inputs.package }} docker image - PR
        run: nix run .#${{ steps.options.outputs.NIX_BUILD_TARGET }}
        env:
          GOOGLE_ACCESS_TOKEN: ${{ steps.gcp.outputs.access_token }}
          IMAGE_TARGET: ${{ vars.DOCKER_IMAGE_REGISTRY }}/${{ inputs.package }}:${{ steps.options.outputs.DOCKER_TAG_PR }}

      - name: Build and push ${{ inputs.package }} docker image - latest
        run: nix run .#${{ steps.options.outputs.NIX_BUILD_TARGET }}
        if: inputs.production && github.event.pull_request.base.ref == 'master'
        env:
          GOOGLE_ACCESS_TOKEN: ${{ steps.gcp.outputs.access_token }}
          IMAGE_TARGET: ${{ vars.DOCKER_IMAGE_REGISTRY }}/${{ inputs.package }}:latest

      - name: Build and push ${{ inputs.package }} docker image - release-latest
        run: nix run .#${{ steps.options.outputs.NIX_BUILD_TARGET }}
        if: inputs.production
        env:
          GOOGLE_ACCESS_TOKEN: ${{ steps.gcp.outputs.access_token }}
          IMAGE_TARGET: ${{ vars.DOCKER_IMAGE_REGISTRY }}/${{ inputs.package }}:${{ steps.options.outputs.DOCKER_RELEASE_LATEST_TAG }}

      - name: Trigger deploy workflow if needed
        if: (contains(github.event.pull_request.labels.*.name, 'deploy_nodes') || inputs.production ) && contains(inputs.package,'hoprd')
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          event-type: deploy_nodes
          client-payload: '{"hoprd_cluster_name": "${{ steps.options.outputs.HOPRD_CLUSTER_NAME }}"}'
