---
#################################################################################
# Child pipeline to build hoprnet docker images
#################################################################################
name: Build Docker

env:
  RUST_BACKTRACE: "1"
  needs_nix_setup: false
permissions:
  contents: read
on:
  workflow_call:
    inputs:
      source_repo:
        required: true
        type: string
      source_branch:
        required: true
        type: string
      package:
        required: true
        type: string
      production:
        required: false
        type: boolean
        default: false
        description: 'Build for production'

concurrency:
  group: ${{ inputs.source_branch || github.ref_name }}-build-docker-${{ inputs.package }}
  cancel-in-progress: true
jobs:
  docker:
    name: Docker
    runs-on: self-hosted-hoprnet-bigger
    # Skip hopr-pluto builds unless explicitly enabled via BUILD_HOPR_PLUTO_DOCKER variable
    if: inputs.package != 'hopr-pluto' || vars.BUILD_HOPR_PLUTO_DOCKER == 'true'
    timeout-minutes: 60
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          disable-sudo: true
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Checkout hoprnet repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          repository: ${{ inputs.source_repo }}
          ref: ${{ inputs.source_branch }}

      # - name: Replace the crates.io registry with a private proxy registry
      #   env:
      #     PRIVATE_CARGO_REGISTRY_PROXY_URL: ${{ secrets.PRIVATE_CARGO_REGISTRY_PROXY_URL }}
      #   run: "cat >> .cargo/config.toml<< EOF        \n[source.hopr-cargo-registry-cache]\nregistry = \"sparse+${PRIVATE_CARGO_REGISTRY_PROXY_URL}\"\n#magic___^_^___line\n[source.crates-io]\nreplace-with = \"hopr-cargo-registry-cache\"\nEOF\n#magic___^_^___line\n"

      - name: Setup GCP
        id: gcp
        uses: hoprnet/hopr-workflows/actions/setup-gcp@12c56020e16036982e6cc529848edeedfc705865 # master
        with:
          google-credentials: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}
          login-artifact-registry: 'true'
          install-sdk: 'false'

      - name: Install Nix
        if: env.needs_nix_setup == true
        uses: cachix/install-nix-action@c134e4c9e34bac6cab09cf239815f9339aaaf84e # v31
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@0fc020193b5a1fa3ac4575aa3a7d3aa6a35435ad # v16
        if: env.needs_nix_setup == true
        with:
          name: hoprnet
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
        env:
          USER: runner

      - name: Get PR labels
        id: pr-labels
        uses: joerick/pr-labels-action@0543b277721e852d821c6738d449f2f4dea03d5f # v1.0.9

      - name: Determine build options
        id: options
        run: |
          nix_debug_option="-dev"
          nix_profile_build="false"
          if [[ "${{ inputs.production }}" = "true" || -n "${GITHUB_PR_LABEL_DOCKER_PRODUCTION_BUILD}" ]]; then
            nix_debug_option=""
            nix_profile_build="true"
          fi
          if [[ -n "${GITHUB_PR_LABEL_DOCKER_PROFILE_BUILD}" ]]; then
            nix_profile_build="true"
          fi
          declare docker_tag docker_tag_pr docker_release_latest_tag
          if [ "${GITHUB_PR_LABEL_RELEASE:-0}" == '1' ]; then
            docker_tag=$(./scripts/get-current-version.sh docker)
            docker_tag_pr=${docker_tag}-pr.${{ github.event.pull_request.number }}
            echo "DOCKER_TAG=${docker_tag}" >> $GITHUB_OUTPUT
            echo "DOCKER_TAG_PR=${docker_tag_pr}" >> $GITHUB_OUTPUT
            echo "NIX_BUILD_TARGET=${{ inputs.package }}${nix_debug_option}-docker-build-and-upload" >> $GITHUB_OUTPUT
            echo "NIX_BUILD_TARGET_PROFILE=${{ inputs.package }}-profile-docker-build-and-upload" >> $GITHUB_OUTPUT
          else
            next_version=$(./scripts/get-next-version.sh Build)
            ./scripts/bump-version.sh ${next_version}
            docker_tag=$(echo "${next_version}" | sed 's/+/-/')
            docker_tag_pr=$(echo "${next_version}" | sed 's/+.*/-pr.'${{ github.event.pull_request.number }}'/')
            echo "DOCKER_TAG=${docker_tag}" >> $GITHUB_OUTPUT
            echo "DOCKER_TAG_PR=${docker_tag_pr}" >> $GITHUB_OUTPUT
            echo "NIX_BUILD_TARGET=${{ inputs.package }}${nix_debug_option}-docker-build-and-upload" >> $GITHUB_OUTPUT
            if [[ "${nix_profile_build}" = "true" ]]; then
              echo "NIX_BUILD_TARGET_PROFILE=${{ inputs.package }}-profile-docker-build-and-upload" >> $GITHUB_OUTPUT
            fi
          fi
          base_branch=${{ github.event.pull_request.base.ref }}
          if [ "${base_branch}" == "master" ]; then
            docker_release_latest_tag=${{ vars.BRANCH_MASTER_RELEASE_NAME }}-latest
            echo "DOCKER_RELEASE_LATEST_TAG=${docker_release_latest_tag}" >> $GITHUB_OUTPUT
          elif [[ "${base_branch}" =~ ^release/ ]]; then
            docker_release_latest_tag=${{ vars.BRANCH_RELEASE_RELEASE_NAME }}-latest
            echo "DOCKER_RELEASE_LATEST_TAG=${docker_release_latest_tag}" >> $GITHUB_OUTPUT
          fi
          if ${{ inputs.production }}; then
            echo "HOPRD_CLUSTER_NAME=core-node" >> $GITHUB_OUTPUT
          else
            echo "HOPRD_CLUSTER_NAME=hoprd-node-${docker_tag_pr//./-}" >> $GITHUB_OUTPUT
          fi
        env:
          COMMIT_SHA: ${{ github.event.pull_request.head.sha }}

      - name: Build and push ${{ inputs.package }} docker image - Commit
        run: nix run -L .#${{ steps.options.outputs.NIX_BUILD_TARGET }}
        env:
          GOOGLE_ACCESS_TOKEN: ${{ steps.gcp.outputs.access_token }}
          IMAGE_TARGET: ${{ vars.DOCKER_IMAGE_REGISTRY }}/${{ inputs.package }}:${{ steps.options.outputs.DOCKER_TAG }}

      - name: Build and push ${{ inputs.package }} docker image - PR
        run: nix run -L .#${{ steps.options.outputs.NIX_BUILD_TARGET }}
        env:
          GOOGLE_ACCESS_TOKEN: ${{ steps.gcp.outputs.access_token }}
          IMAGE_TARGET: ${{ vars.DOCKER_IMAGE_REGISTRY }}/${{ inputs.package }}:${{ steps.options.outputs.DOCKER_TAG_PR }}

      - name: Build and push ${{ inputs.package }} docker image - latest
        run: nix run -L .#${{ steps.options.outputs.NIX_BUILD_TARGET }}
        if: inputs.production && github.event.pull_request.base.ref == 'master'
        env:
          GOOGLE_ACCESS_TOKEN: ${{ steps.gcp.outputs.access_token }}
          IMAGE_TARGET: ${{ vars.DOCKER_IMAGE_REGISTRY }}/${{ inputs.package }}:latest

      - name: Build and push ${{ inputs.package }} docker image - release-latest
        run: nix run -L .#${{ steps.options.outputs.NIX_BUILD_TARGET }}
        if: inputs.production && steps.options.outputs.DOCKER_RELEASE_LATEST_TAG != ''
        env:
          GOOGLE_ACCESS_TOKEN: ${{ steps.gcp.outputs.access_token }}
          IMAGE_TARGET: ${{ vars.DOCKER_IMAGE_REGISTRY }}/${{ inputs.package }}:${{ steps.options.outputs.DOCKER_RELEASE_LATEST_TAG }}

      - name: Build and push ${{ inputs.package }}-profile docker image - Commit
        run: nix run -L .#${{ steps.options.outputs.NIX_BUILD_TARGET_PROFILE }}
        if: steps.options.outputs.NIX_BUILD_TARGET_PROFILE != '' && inputs.package != 'hopr-pluto'
        env:
          GOOGLE_ACCESS_TOKEN: ${{ steps.gcp.outputs.access_token }}
          IMAGE_TARGET: ${{ vars.DOCKER_IMAGE_REGISTRY }}/${{ inputs.package }}:${{ steps.options.outputs.DOCKER_TAG }}-profile

      - name: Build and push ${{ inputs.package }}-profile docker image - PR
        run: nix run -L .#${{ steps.options.outputs.NIX_BUILD_TARGET_PROFILE }}
        if: steps.options.outputs.NIX_BUILD_TARGET_PROFILE != '' && inputs.package != 'hopr-pluto'
        env:
          GOOGLE_ACCESS_TOKEN: ${{ steps.gcp.outputs.access_token }}
          IMAGE_TARGET: ${{ vars.DOCKER_IMAGE_REGISTRY }}/${{ inputs.package }}:${{ steps.options.outputs.DOCKER_TAG_PR }}-profile

      - name: Build and push ${{ inputs.package }}-profile docker image - latest
        run: nix run -L .#${{ steps.options.outputs.NIX_BUILD_TARGET_PROFILE }}
        if: steps.options.outputs.NIX_BUILD_TARGET_PROFILE != '' && inputs.production && github.event.pull_request.base.ref == 'master' && inputs.package != 'hopr-pluto'
        env:
          GOOGLE_ACCESS_TOKEN: ${{ steps.gcp.outputs.access_token }}
          IMAGE_TARGET: ${{ vars.DOCKER_IMAGE_REGISTRY }}/${{ inputs.package }}:latest-profile

      - name: Build and push ${{ inputs.package }}-profile docker image - release-latest
        run: nix run -L .#${{ steps.options.outputs.NIX_BUILD_TARGET_PROFILE }}
        if: steps.options.outputs.NIX_BUILD_TARGET_PROFILE != '' && inputs.production && steps.options.outputs.DOCKER_RELEASE_LATEST_TAG != '' && inputs.package != 'hopr-pluto'
        env:
          GOOGLE_ACCESS_TOKEN: ${{ steps.gcp.outputs.access_token }}
          IMAGE_TARGET: ${{ vars.DOCKER_IMAGE_REGISTRY }}/${{ inputs.package }}:${{ steps.options.outputs.DOCKER_RELEASE_LATEST_TAG }}-profile

      - name: Trigger deploy workflow if needed
        if: vars.CONTINUOUS_DEPLOYMENT_ENABLED == 'true' && inputs.package == 'hoprd' && env.GITHUB_PR_LABEL_DEPLOY_NODES == '1'
        uses: peter-evans/repository-dispatch@ff45666b9427631e3450c54a1bcbee4d9ff4d7c0 # v3.0.0
        with:
          token: ${{ secrets.GH_RUNNER_TOKEN }}
          repository: ${{ github.repository }}
          event-type: deploy_nodes
          client-payload: |-
            {
              "hoprd_cluster_name": "${{ steps.options.outputs.HOPRD_CLUSTER_NAME }}"
            }
