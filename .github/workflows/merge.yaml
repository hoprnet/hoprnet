name: Merge

on:
  pull_request:
    types:
      - closed
      # - synchronize

concurrency:
  group: merge
  cancel-in-progress: false

permissions:
  contents: write

env:
  MATRIX_ROOM: ${{ secrets.MATRIX_ROOM }}
  MATRIX_CLUSTER_INFO_ROOM: ${{ secrets.MATRIX_CLUSTER_INFO_ROOM }}
  MATRIX_SERVER: ${{ secrets.MATRIX_SERVER }}
  MATRIX_ACCESS_TOKEN: ${{ secrets.MATRIX_ACCESS_TOKEN }}

jobs:
  cleanup-actions:
    name: Cleanup Actions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout hoprnet repository
        uses: actions/checkout@v3
      - name: Cleanup
        run: |
          gh extension install actions/gh-actions-cache

          REPO=${{ github.repository }}
          BRANCH="refs/pull/${{ github.event.pull_request.number }}/merge"

          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 )

          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
            gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tag:
    name: Tag images
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && (github.event.pull_request.base.ref == 'master' || contains(github.event.pull_request.base.ref,'release/'))
    steps:
      - name: Checkout hoprnet repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Google Cloud Credentials
        id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          credentials_json: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}

      - name: Login Google Container Registry
        uses: docker/login-action@v2
        with:
          registry: europe-west3-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Tag docker images
        run: |
          docker_registry="europe-west3-docker.pkg.dev/${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}/docker-images"
          # Set docker PR tag
          if ${{ contains(github.event.pull_request.labels.*.name, 'release') }}; then
            docker_pr_tag=$(jq -r '.version' packages/hoprd/package.json | sed 's/+/-/')
          else
            docker_pr_tag=$(./scripts/get-next-version.sh Build ${{ github.event.pull_request.number }} | sed 's/+/-/')
          fi
          # Set docker stable tag
          declare base_branch=${{ github.event.pull_request.base.ref }}
          if [ "${base_branch}" == "master" ]; then
            docker_stable_tag=latest
          else
            docker_stable_tag=${base_branch/release\//}
          fi

          # Tag images
          images=(hopr-toolchain hopli hoprd hopr-anvil hopr-pluto)
          for image in ${images[@]}; 
          do
            echo "Tagging ${image}:${docker_stable_tag}"
            gcloud artifacts docker tags add ${docker_registry}/${image}:${docker_pr_tag} ${docker_registry}/${image}:${docker_stable_tag}
          done

  deploy_prn_nodes:
    name: Deploy PRN nodes
    runs-on: ubuntu-latest
    if: needs.tag.result == 'success'
    needs:
      - tag
    steps:
      - name: Checkout hoprnet repository
        uses: actions/checkout@v3

      - name: Set up Google Cloud Credentials
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}
          install_components: beta

      - name: Deploy on GCP
        run: |
          declare base_branch=${{ github.event.pull_request.base.ref }}
          if [[ "${base_branch}" == "master" ]]; then
            ./scripts/deploy.sh rotsee
          elif [[ "${base_branch}" =~ ^"release" ]]; then
            ./scripts/deploy.sh "${base_branch/release\/}-dufour"
          else
            echo "Skipping deployment"
          fi
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_WALLET_PRIVATE_KEY }}
          HOPRD_PASSWORD: ${{ secrets.BS_PASSWORD }}
          HOPRD_API_TOKEN: ${{ secrets.HOPRD_API_TOKEN }}
          FAUCET_SECRET_API_KEY: ${{ secrets.FAUCET_SECRET_API_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN }}

      - name: Add ssh key to deploy to Hetzner
        uses: webfactory/ssh-agent@v0.7.0
        with:
            ssh-private-key: ${{ secrets.HETZNER_ROTSEE_SSH_PRIVATE_KEY }}

      - name: Deploy on Hetzner
        run: |
          declare base_branch=${{ github.event.pull_request.base.ref }}
          if [ "${base_branch}" == "master" ]; then
            hosts=($(echo "${{ vars.HETZNER_ROTSEE_NODES }}" | sed 's/\r//'  | sed 's/\n/ /'))
          else
            hosts=""
          fi
          echo "Restarting hosts: ${hosts}"
          for host in ${hosts[@]}; do
            ssh -o StrictHostKeyChecking=no root@${host} "service hoprd restart"
          done
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_WALLET_PRIVATE_KEY }}
          IDENTITY_PASSWORD: ${{ secrets.BS_PASSWORD }}
          API_TOKEN: ${{ secrets.HOPRD_API_TOKEN }}
          FAUCET_SECRET_API_KEY: ${{ secrets.FAUCET_SECRET_API_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN }}

      - name: Notify Success
        if: ${{ success() }}
        run: |
          ./scripts/notify-matrix-cluster-info.sh
        env:
          MATRIX_ROOM: ${{ env.MATRIX_CLUSTER_INFO_ROOM }}
          HOPRD_API_TOKEN: ${{ secrets.HOPRD_API_TOKEN }}

      - name: Notify Failure
        if: ${{ failure() }}
        run: |
          ./scripts/notify-matrix-github-workflow-failure.sh "${MATRIX_ROOM}" "${{ github.repository }}" \
            "${{ github.workflow }}" "${{ github.run_id }}"

# FIXME: Disabled until hoprd nodes can work in Kubernetes
#  deploy_natted_nodes:
#    name: Deploy Natted nodes
#    runs-on: ubuntu-latest
#    if: needs.tag.result == 'success'
#    needs:
#      - tag
#    steps:
#      - name: Checkout hoprnet repository
#        uses: actions/checkout@v3

#       - name: "Restart deployments"
#        run: |
#          prBase="${{ github.event.pull_request.base.ref }}"
#          # Identify the network to deploy nodes
#          network=$(jq -r "to_entries[] | select(.value.git_ref | test(\"${prBase/*\/}\")).value.network" packages/hoprd/releases.json | sed 's/_/-/')
#          # In case the base PR is pointing to an unknown branch/release, we deploy to the default network "rotsee"
#          if [ -z $network ]; then
#            echo "No network selected"
#            exit 1;
#          fi
#          echo "[INFO] Restarting deployments on ${network} from pr-${{ github.event.pull_request.number }}"
#          # Get list of deployments to restart
#          export deployments=($(kubectl get deployments -n ${network} -l hoprds.hoprnet.org/cluster=hoprd-${network} -o jsonpath="{.items[*].metadata.name}"))
#          for deployment in "${deployments[@]}"; do
#            echo "[INFO] Restarting hoprd node ${deployments}"
#            kubectl rollout restart deployments -n ${network} $deployment;
#          done

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'release')
    needs:
      - tag
    steps:
      - name: Checkout hoprnet repository
        uses: actions/checkout@v3

      - name: Setup variables
        id: setup
        run: |
          current_version=$(jq -r '.version' packages/hoprd/package.json)
          echo "current_version=${current_version}" >> $GITHUB_OUTPUT
          if [[ $current_version == *"-rc."* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Tag repository
        id: tag
        run: |
          git tag v${{ steps.setup.outputs.current_version }}
          git push origin v${{ steps.setup.outputs.current_version }}

      - name: Generate Changelog
        id: changelog
        run: |
          milestone_number=$(gh api repos/${{ github.repository }}/milestones | jq -r --arg version "${{ steps.setup.outputs.current_version }}"  ' to_entries[] | select(.value.title | test($version)).value.number')
          ./scripts/generate-changelog.sh ${milestone_number} | tee docs/changelog/changelog.md
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: docs/changelog/changelog.md
          prerelease: ${{ steps.setup.outputs.prerelease }}
          name: HOPR - v${{ steps.setup.outputs.current_version }}
          tag_name: v${{ steps.setup.outputs.current_version }}