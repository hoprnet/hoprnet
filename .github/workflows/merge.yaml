name: Merge

on:
  pull_request:
    types:
      - closed
      # - synchronize

concurrency:
  group: merge
  cancel-in-progress: false

env:
  HOPR_GITHUB_REF: ${{ github.ref }}
  MATRIX_ROOM: ${{ secrets.MATRIX_ROOM }}
  MATRIX_CLUSTER_INFO_ROOM: ${{ secrets.MATRIX_CLUSTER_INFO_ROOM }}
  MATRIX_SERVER: ${{ secrets.MATRIX_SERVER }}
  MATRIX_ACCESS_TOKEN: ${{ secrets.MATRIX_ACCESS_TOKEN }}

jobs:
  cleanup-actions:
    name: Cleanup Actions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout hoprnet repository
        uses: actions/checkout@v3
      - name: Cleanup
        run: |
          gh extension install actions/gh-actions-cache

          REPO=${{ github.repository }}
          BRANCH="refs/pull/${{ github.event.pull_request.number }}/merge"

          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 )

          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
            gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tag:
    name: Tag images
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && (github.event.pull_request.base.ref == 'master' || contains(github.event.pull_request.base.ref,'release/'))
    steps:
      - name: Checkout hoprnet repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check PR changes
        id: check_pr_changeset
        run: |
          git fetch -u --progress origin pull/${{ github.event.pull_request.number }}/head:${{ github.event.pull_request.head.ref }}
          ./scripts/check-pr.sh --base-branch ${{ github.event.pull_request.base.sha }} --head-branch ${{ github.event.pull_request.head.sha }}
          cat check_pr.log >> $GITHUB_OUTPUT
          cat check_pr.log
          declare base_branch=${{ github.event.pull_request.base.ref }}
          if [ "${base_branch}" == "master" ]; then
            echo "DOCKER_STABLE_TAG=latest"  >> $GITHUB_ENV
          else
            echo "DOCKER_STABLE_TAG=${base_branch/release\//}" >> $GITHUB_ENV
          fi
          if [ "${{ github.event.pull_request.number }}" == "${{ vars.RELEASE_PR }}" ]; then
            ./scripts/bump-version.sh ${{ github.event.pull_request.base.ref }} ${{ github.event.pull_request.number }} true
          else
            ./scripts/bump-version.sh ${{ github.event.pull_request.base.ref }} ${{ github.event.pull_request.number }}
          fi
          echo "DOCKER_PR_TAG=$(./scripts/get-package-version.sh | sed 's/+/-/' )" >> $GITHUB_ENV
          echo "DOCKER_REGISTRY=europe-west3-docker.pkg.dev/${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}/docker-images" >> $GITHUB_ENV

      - name: Set up Google Cloud Credentials
        id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          credentials_json: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}

      - name: Login Google Container Registry
        uses: docker/login-action@v2
        with:
          registry: europe-west3-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Docker Tag Toolchain
        if: steps.check_pr_changeset.outputs.build_toolchain
        run: |
          docker pull ${{ env.DOCKER_REGISTRY }}/hopr-toolchain:${{ env.DOCKER_PR_TAG }}
          docker tag ${{ env.DOCKER_REGISTRY }}/hopr-toolchain:${{ env.DOCKER_PR_TAG }} ${{ env.DOCKER_REGISTRY }}/hopr-toolchain:${{ env.DOCKER_STABLE_TAG }}
          docker push ${{ env.DOCKER_REGISTRY }}/hopr-toolchain:${{ env.DOCKER_STABLE_TAG }}
      - name: Docker Tag Hopli
        if: steps.check_pr_changeset.outputs.build_toolchain || steps.check_pr_changeset.outputs.build_hopli
        run: |
          docker pull ${{ env.DOCKER_REGISTRY }}/hopli:${{ env.DOCKER_PR_TAG }}
          docker tag ${{ env.DOCKER_REGISTRY }}/hopli:${{ env.DOCKER_PR_TAG }} ${{ env.DOCKER_REGISTRY }}/hopli:${{ env.DOCKER_STABLE_TAG }}
          docker push ${{ env.DOCKER_REGISTRY }}/hopli:${{ env.DOCKER_STABLE_TAG }}
      - name: Docker Tag Hoprd
        if: steps.check_pr_changeset.outputs.build_toolchain || steps.check_pr_changeset.outputs.build_hoprd
        run: |
          docker pull ${{ env.DOCKER_REGISTRY }}/hoprd:${{ env.DOCKER_PR_TAG }}
          docker tag ${{ env.DOCKER_REGISTRY }}/hoprd:${{ env.DOCKER_PR_TAG }} ${{ env.DOCKER_REGISTRY }}/hoprd:${{ env.DOCKER_STABLE_TAG }}
          docker push ${{ env.DOCKER_REGISTRY }}/hoprd:${{ env.DOCKER_STABLE_TAG }}
      - name: Docker Tag Anvil
        if: steps.check_pr_changeset.outputs.build_toolchain || steps.check_pr_changeset.outputs.build_anvil
        run: |
          docker pull ${{ env.DOCKER_REGISTRY }}/hopr-anvil:${{ env.DOCKER_PR_TAG }}
          docker tag ${{ env.DOCKER_REGISTRY }}/hopr-anvil:${{ env.DOCKER_PR_TAG }} ${{ env.DOCKER_REGISTRY }}/hopr-anvil:${{ env.DOCKER_STABLE_TAG }}
          docker push ${{ env.DOCKER_REGISTRY }}/hopr-anvil:${{ env.DOCKER_STABLE_TAG }}
      - name: Docker Tag Pluto
        run: |
          docker pull ${{ env.DOCKER_REGISTRY }}/hopr-pluto:${{ env.DOCKER_PR_TAG }}
          docker tag ${{ env.DOCKER_REGISTRY }}/hopr-pluto:${{ env.DOCKER_PR_TAG }} ${{ env.DOCKER_REGISTRY }}/hopr-pluto:${{ env.DOCKER_STABLE_TAG }}
          docker push ${{ env.DOCKER_REGISTRY }}/hopr-pluto:${{ env.DOCKER_STABLE_TAG }}

  deploy_prn_nodes:
    name: Deploy PRN nodes
    runs-on: ubuntu-latest
    if: needs.tag.result == 'success'
    needs:
      - tag
    steps:
      - name: Checkout hoprnet repository
        uses: actions/checkout@v3

      - name: Set up Google Cloud Credentials
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}
          install_components: beta

      - name: Deploy on GCP
        run: |
          declare base_branch=${{ github.event.pull_request.base.ref }}
          if [[ "${base_branch}" == "master" ]]; then
            ./scripts/deploy.sh rotsee
          elif [[ "${base_branch}" =~ ^"release" ]]; then
            ./scripts/deploy.sh "${base_branch/release\/}-dufour"
          else
            echo "Skipping deployment"
          fi
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_WALLET_PRIVATE_KEY }}
          HOPRD_PASSWORD: ${{ secrets.BS_PASSWORD }}
          HOPRD_API_TOKEN: ${{ secrets.HOPRD_API_TOKEN }}
          FAUCET_SECRET_API_KEY: ${{ secrets.FAUCET_SECRET_API_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN }}

      - name: Add ssh key to deploy to Hetzner
        uses: webfactory/ssh-agent@v0.7.0
        with:
            ssh-private-key: ${{ secrets.HETZNER_ROTSEE_SSH_PRIVATE_KEY }}

      - name: Deploy on Hetzner
        run: |
          declare base_branch=${{ github.event.pull_request.base.ref }}
          if [ "${base_branch}" == "master" ]; then
            hosts=($(echo "${{ vars.HETZNER_ROTSEE_NODES }}" | sed 's/\r//'  | sed 's/\n/ /'))
          else
            hosts=""
          fi
          echo "Restarting hosts: ${hosts}"
          for host in ${hosts[@]}; do
            ssh -o StrictHostKeyChecking=no root@${host} "service hoprd restart"
          done
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_WALLET_PRIVATE_KEY }}
          IDENTITY_PASSWORD: ${{ secrets.BS_PASSWORD }}
          API_TOKEN: ${{ secrets.HOPRD_API_TOKEN }}
          FAUCET_SECRET_API_KEY: ${{ secrets.FAUCET_SECRET_API_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN }}

      - name: Notify Success
        if: ${{ success() }}
        run: |
          ./scripts/notify-matrix-cluster-info.sh
        env:
          MATRIX_ROOM: ${{ env.MATRIX_CLUSTER_INFO_ROOM }}
          HOPRD_API_TOKEN: ${{ secrets.HOPRD_API_TOKEN }}

      - name: Notify Failure
        if: ${{ failure() }}
        run: |
          ./scripts/notify-matrix-github-workflow-failure.sh "${MATRIX_ROOM}" "${{ github.repository }}" \
            "${{ github.workflow }}" "${{ github.run_id }}"

# FIXME: Disabled until self-hosted workers work again
#  deploy_natted_nodes:
#    name: Deploy Natted nodes
#    runs-on: ubuntu-latest
#    if: needs.tag.result == 'success'
#    needs:
#      - tag
#    steps:
#      - name: Checkout hoprnet repository
#        uses: actions/checkout@v3
#
#      - name: "Restart deployments"
#        run: |
#          prBase="${{ github.event.pull_request.base.ref }}"
#          # Identify the network to deploy nodes
#          network=$(jq -r "to_entries[] | select(.value.git_ref | test(\"${prBase/*\/}\")).value.network" packages/hoprd/releases.json | sed 's/_/-/')
#          # In case the base PR is pointing to an unknown branch/release, we deploy to the default network "rotsee"
#          if [ -z $network ]; then
#            echo "No network selected"
#            exit 1;
#          fi
#          echo "[INFO] Restarting deployments on ${network} from pr-${{ github.event.pull_request.number }}"
#          # Get list of deployments to restart
#          export deployments=($(kubectl get deployments -n ${network} -l hoprds.hoprnet.org/cluster=hoprd-${network} -o jsonpath="{.items[*].metadata.name}"))
#          for deployment in "${deployments[@]}"; do
#            echo "[INFO] Restarting hoprd node ${deployments}"
#            kubectl rollout restart deployments -n ${network} $deployment;
#          done

  cleanup-docker:
    name: Cleanup Docker
    runs-on: ubuntu-latest
    needs:
      - tag
    steps:
      - name: Checkout hoprnet repository
        uses: actions/checkout@v3

      - name: Set up Google Cloud Credentials
        id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          credentials_json: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}
          install_components: beta

      - name: Cleanup Docker images
        run: |
          images=('hopli' 'hoprd' 'hopr-anvil' 'hopr-pluto' 'hopr-toolchain' 'hoprd')
          for image in "${images[@]}"; do
            image_tags=$(gcloud artifacts docker images list --include-tags europe-west3-docker.pkg.dev/${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}/docker-images/${image} --format="json" 2> /dev/null | jq -r --arg date "$date"  '.[] | select(.tags | length > 0) | select(.tags | contains("-pr.${{ github.event.pull_request.number }}")).version')
            for image_tag in $image_tags; do
              gcloud artifacts docker images delete --quiet --delete-tags --async europe-west3-docker.pkg.dev/${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}/docker-images/${image}@${image_tag}
            done
          done

