name: HOPR Deploy

env:
  HOPR_IN_CI: 1
  HOPR_GITHUB_REF: ${{ github.ref }}

on:
  push:
    branches: ['master', 'release/**', 'avado', 'debug-deploy/**']
    paths-ignore:
      - '**/docs/**/*'

jobs:
  build:
    name: Build, Publish etc
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure Git info
        run: bash -x scripts/configure-git-info.sh

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14
          registry-url: https://registry.npmjs.org/

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - name: Restore cache of node modules and yarn cache
        uses: actions/cache@v2
        id: nodejs-cache
        with:
          path: |
            node_modules
            */*/node_modules
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-nodejs-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-nodejs-

      - name: Install dependencies
        run: |
          yarn
          yarn lerna bootstrap

      - name: Link & Build
        run: |
          yarn util:link
          yarn build

      - name: Publish prerelease version (On pushes to master)
        if: github.ref == 'refs/heads/master'
        run: |
          # skip releasing for changes from our bots to prevent circular change propagation
          [ "noreply@hoprnet.org" = "$(git show -s --format='%ae' ${HOPR_GITHUB_REF})" ] && exit 0
          HOPR_PACKAGE_VERSION=$(./scripts/get-package-version.sh) \
            bash -x scripts/publish-pre-release.sh
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          HOPR_PACKAGE: hoprd

      # Pushing a PR to a release branch should increment the patch version in
      # accordance with semver.
      - name: Publish patch version (On pushes to release branches)
        if: startsWith(github.ref, 'refs/heads/release/')
        run: |
          # skip releasing for changes from our bots to prevent circular change propagation
          [ "noreply@hoprnet.org" = "$(git show -s --format='%ae' ${HOPR_GITHUB_REF})" ] && exit 0
          HOPR_PACKAGE_VERSION=$(./scripts/get-package-version.sh) \
            bash -x scripts/publish-patch-release.sh
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          HOPR_PACKAGE: hoprd

      - name: Get version from package.json
        run: echo "RELEASE=$(./scripts/get-package-version.sh)" >> $GITHUB_ENV
        env:
          HOPR_PACKAGE: hoprd

      - name: Debug release number
        run: echo ${{ env.RELEASE }}

      - name: Wait for NPM
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')
        run: bash -x scripts/wait-for-npm-package.sh
        env:
          HOPR_PACKAGE: hoprd
          HOPR_PACKAGE_VERSION: ${{ env.RELEASE }}

  release:
    name: Create Github Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/heads/release/')
    steps:
      - uses: actions/checkout@v2

      - name: Configure Git info
        run: bash -x scripts/configure-git-info.sh

      - name: Update repo from latest pushes.
        run: |
          git pull origin ${{ github.ref }} # This should pull new packages with versions etc.

      - name: Get version from package.json
        run: echo "RELEASE_NAME=v$(node -p -e "require('./packages/hoprd/package.json').version")" >> $GITHUB_ENV

      - uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_NAME }}
          name: HOPR - ${{ env.RELEASE_NAME }}
          draft: false
          prerelease: false

  build_hoprd_docker:
    name: Build HOPRD Docker
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2

      - name: Configure Git info
        run: bash -x scripts/configure-git-info.sh

      - name: Update repo from latest pushes.
        run: |
          git pull origin ${{ github.ref }} # This should pull new packages with versions etc.

      - name: Setup Google Cloud Credentials
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}
          service_account_key: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}
          export_default_credentials: true

      - name: Get version from package.json
        run : echo "RELEASE=$(node -p -e "require('./packages/hoprd/package.json').version")" >> $GITHUB_ENV

      - name: Building Docker image using Google Cloud Build
        working-directory: packages/hoprd
        run: | # TODO - actually parse semver to tag v1
          gcloud builds submit --tag gcr.io/hoprassociation/hoprd:${{ env.RELEASE }}
          gcloud container images add-tag gcr.io/hoprassociation/hoprd:${{ env.RELEASE }} gcr.io/hoprassociation/hoprd:1
          gcloud container images add-tag gcr.io/hoprassociation/hoprd:${{ env.RELEASE }} gcr.io/hoprassociation/hoprd:latest

  avado:
    name: Build Avado (master or release pushes)
    runs-on: ubuntu-latest
    needs: [build_hoprd_docker]
    steps:
      - uses: actions/checkout@v2

      - name: Configure Git info
        run: bash -x scripts/configure-git-info.sh

      - name: Update repo from latest pushes.
        run: |
          git pull origin ${{ github.ref }} # This should pull new packages with versions etc.

      - name: Get version from package.json
        run: |
          echo "RELEASE=$(node -p -e "require('./packages/hoprd/package.json').version")" >> $GITHUB_ENV

      - name: Avado hack version if we are in master (they don't support prerelease versions)
        if: github.ref == 'refs/heads/master'
        run: |
          echo "RELEASE=0.100.0" >> $GITHUB_ENV # Set this to an arbitrary number less than 1

      - name: Build Avado
        working-directory: packages/avado
        run: |
          docker-compose build
          sudo npm install -g git+https://github.com/AvadoDServer/AVADOSDK.git#c11c4bd
          avadosdk increase minor
          sed -i 's/version"[ ]*:[ ]*"[0-9]*\.[0-9]*\.[0-9]*"/version": "${{ env.RELEASE }}"/' ./dappnode_package.json
          cat ./dappnode_package.json | grep 'version'
          sudo avadosdk build --provider http://80.208.229.228:5001
          git add dappnode_package.json docker-compose.yml releases.json
          git commit -m "Avado CI: new release"
          git pull origin ${{ github.ref }}
          git push origin ${{ github.ref }}

          # http://go.ava.do/install/<IPFS HASH>

  deploy_instances:
    name: 'Continuous Deployment: Deploy instances'
    runs-on: ubuntu-latest
    needs: [build_hoprd_docker]
    steps:
      - uses: actions/checkout@v2

      - name: Configure Git info
        run: bash -x scripts/configure-git-info.sh

      - name: Use Node.js 14
        uses: actions/setup-node@v2
        with:
          node-version: 14
          registry-url: https://registry.npmjs.org/

      - name: Update repo from latest pushes.
        run: |
          git pull origin ${{ github.ref }} # This should pull new packages with versions etc.

      - name: Setup Google Cloud Credentials
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}
          service_account_key: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}
          export_default_credentials: true

      - name: Run start script
        run: bash -x scripts/deploy.sh
        env:
          FUNDING_PRIV_KEY: ${{ secrets.FUNDING_WALLET_PRIVATE_KEY }}
          GITHUB_REF: ${{ github.ref }}
          BS_PASSWORD: ${{ secrets.BS_PASSWORD }}
