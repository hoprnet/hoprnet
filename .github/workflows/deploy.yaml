---
name: HOPR Deploy

env:
  HOPR_GITHUB_REF: ${{ github.ref }}
  MATRIX_ROOM: ${{ secrets.MATRIX_ROOM }}
  MATRIX_CLUSTER_INFO_ROOM: ${{ secrets.MATRIX_CLUSTER_INFO_ROOM }}
  MATRIX_SERVER: ${{ secrets.MATRIX_SERVER }}
  MATRIX_ACCESS_TOKEN: ${{ secrets.MATRIX_ACCESS_TOKEN }}

on:
  push:
    branches:
      [
        "integration/**",
        "master",
        "release/**",
        "staging/**",
        "avado",
        "debug-deploy/**",
      ]
    paths-ignore:
      - ".processes/**/*"
      - "docs/**/*"
      - "packages/*/docs/**/*"

concurrency:
  # limit invocations of this workflow to one at a time to prevent race
  # conditions
  group: deploy
  # just canceling could lead to side-effects of incomplete runs, so let's just
  # run through each invocation completely
  cancel-in-progress: false

jobs:
  build_deploy_sc_npm:
    name: Build / Deploy SCs / Publish NPM
    strategy:
      matrix:
        os: ["ubuntu-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "[SETUP] Configure Git info"
        run: ./scripts/configure-git-info.sh

      - name: install toolchain
        run: ./scripts/toolchain/install-toolchain.sh

      - name: get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: restore yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: restore cargo cache
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', 'rust-toolchain.toml') }}
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            .cargo/.package-cache/
            .cargo/bin/
            .foundry/bin/

      - name: "[BUILD] Install dependencies / link / build"
        run: |
          make -j deps-ci
          make -j build

      - name: "Cache built artifacts (for later use)"
        uses: actions/cache@v3
        with:
          path: packages/
          key: hoprnet-build-${{ github.run_id }}

      - name: "[SMART-CONTRACTS] Deploy for known environments"
        if: ${{ !env.ACT }}
        run: ./scripts/deploy-smart-contracts.sh
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_WALLET_PRIVATE_KEY }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN }}
          GNOSISSCAN_API_KEY: ${{ secrets.GNOSISSCAN_API_KEY }}

      - name: "[SMART-CONTRACTS] Commit & push changes"
        if: ${{ !env.ACT }}
        run: |
          make lint-fix
          ./scripts/commit-and-push-all-changes.sh
        env:
          HOPR_GIT_MSG: "chore(release): update smart contract deployments"

      - name: "[NPM] Publish prerelease version (On pushes to master, debug-deploy/* or staging/*)"
        if: ${{ (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/debug-deploy/')  || startsWith(github.ref, 'refs/heads/staging/')) && !env.ACT }}
        run: ./scripts/publish-version.sh prerelease
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Pushing a PR to a release branch should increment the patch version in
      # accordance with semver.
      - name: "[NPM] Publish patch version (On pushes to release branches)"
        if: ${{ startsWith(github.ref, 'refs/heads/release/') && !env.ACT }}
        run: ./scripts/publish-version.sh patch
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: "[FINISH] Send notification if anything failed on master or release/staging branches"
        if: ${{ failure() && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/staging/')) && !env.ACT }}
        run: |
          ./scripts/notify-matrix-github-workflow-failure.sh "${MATRIX_ROOM}" "${{ github.repository }}" \
            "${{ github.workflow }}" "${{ github.run_id }}"

  github_release:
    name: Create Github Release
    runs-on: ubuntu-latest
    needs: [build_deploy_sc_npm]
    if: ${{ startsWith(github.ref, 'refs/heads/release/') }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure Git info
        run: ./scripts/configure-git-info.sh

      - name: Get version from package.json
        id: get-package-version
        run: echo "tag=v$(./scripts/get-package-version.sh)" >> $GITHUB_OUTPUT
        env:
          HOPR_PACKAGE: hoprd

      - uses: softprops/action-gh-release@v0.1.15
        if: ${{ !env.ACT }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-package-version.outputs.tag }}
          name: HOPR - ${{ steps.get-package-version.outputs.tag }}
          draft: false
          prerelease: false

      - name: Send notification if anything failed on master or release/staging branches
        if: ${{ failure() && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/staging/')) && !env.ACT }}
        run: |
          ./scripts/notify-matrix-github-workflow-failure.sh "${MATRIX_ROOM}" "${{ github.repository }}" \
            "${{ github.workflow }}" "${{ github.run_id }}"

  build_docker:
    name: Build Docker Images
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: [build_deploy_sc_npm]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git info
        run: ./scripts/configure-git-info.sh

      - name: Set up Google Cloud Credentials
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}
          install_components: beta

      - name: Pull recent Git changes
        if: ${{ !env.ACT }}
        run: |
          # need to pull changes because we've updated the package versions in
          # the job publish_npm beforehand
          branch=$(git rev-parse --abbrev-ref HEAD)
          git pull origin "${branch}" --rebase

      - name: Build Docker images
        run: ./scripts/build-docker.sh

      - name: Send notification if anything failed on master or release/staging branches
        if: ${{ failure() && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/staging/')) && !env.ACT }}
        run: |
          ./scripts/notify-matrix-github-workflow-failure.sh "${MATRIX_ROOM}" "${{ github.repository }}" \
            "${{ github.workflow }}" "${{ github.run_id }}"

  avado:
    name: Build Avado (master or release pushes)
    runs-on: ubuntu-latest
    needs: [build_deploy_sc_npm, build_docker]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "[SETUP] Configure Git info"
        run: ./scripts/configure-git-info.sh

      - name: install toolchain
        run: ./scripts/toolchain/install-toolchain.sh

      - name: get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: restore yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Pull recent Git changes
        if: ${{ !env.ACT }}
        run: |
          # need to pull changes because we've updated the package versions in
          # the job publish_npm beforehand
          branch=$(git rev-parse --abbrev-ref HEAD)
          git pull origin "${branch}" --rebase

      - name: Set avado version
        id: set-version
        run: |
          # Hack version if we are in master (they don't support prerelease versions)
          # Set this to an arbitrary number less than 1
          declare version="0.100.0"
          if [[ "${HOPR_GITHUB_REF}" == refs/heads/release/* ]]; then
             # assign the proper version only on release branches because
             # only there we have simple semver versions
            version="$(scripts/get-package-version.sh)"
          elif [[ "${HOPR_GITHUB_REF}" == refs/heads/staging/* ]]; then
            # staging releases get different special version
            version="0.200.0"
          fi
          echo "vsn=${version}" >> $GITHUB_OUTPUT
        env:
          HOPR_PACKAGE: hoprd

      - name: Build Avado
        env:
          HOPR_GITHUB_REF: ${{ github.ref }}
          AVADO_VERSION: ${{ steps.set-version.outputs.vsn }}
        run: |
          make deps-ci
          ./scripts/build-avado.sh ${AVADO_VERSION}

      - name: Commit & Push changes
        if: ${{ !env.ACT }}
        env:
          HOPR_GIT_MSG: "chore(release): publish Avado ${{ steps.set-version.outputs.vsn }}"
          HOPR_GITHUB_REF: ${{ github.ref }}
        run: ./scripts/commit-and-push-all-changes.sh

      - name: Send notification if anything failed on master or release/staging branches
        if: ${{ failure() && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/staging/')) && !env.ACT }}
        run: |
          ./scripts/notify-matrix-github-workflow-failure.sh "${MATRIX_ROOM}" "${{ github.repository }}" \
            "${{ github.workflow }}" "${{ github.run_id }}"

  set_failed_deployment_flag:
    name: "Set failed deployment flag"
    runs-on: ubuntu-latest
    needs: [build_docker]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Google Cloud Credentials
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}
          install_components: beta

      - name: Set deployment failure flag
        if: ${{ !env.ACT }}
        run: |
          ./scripts/deployment-gater.sh set

  deploy_public_instances:
    name: "Continuous Deployment: Deploy public instances"
    strategy:
      matrix:
        os: ["ubuntu-latest"]
    runs-on: ${{ matrix.os }}
    needs: [set_failed_deployment_flag]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "[SETUP] Configure Git info"
        run: ./scripts/configure-git-info.sh

      - name: install toolchain
        run: ./scripts/toolchain/install-toolchain.sh

      - name: get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: restore yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: restore cargo cache
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', 'rust-toolchain.toml') }}
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            .cargo/.package-cache/
            .cargo/bin/
            .foundry/bin/

      - name: Set up Google Cloud Credentials
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}
          install_components: beta

      - name: Initialize, install packages and build
        run: |
          # get latest version
          git pull
          # need to build our packages which might by used by the scripts, such as the fund script
          make -j deps-ci

      - name: Restore built artifacts
        uses: actions/cache@v3
        with:
          path: packages/
          key: hoprnet-build-${{ github.run_id }}

      - name: Run deploy script for public nodes (non-staging)
        if: ${{ !startsWith(github.ref, 'refs/heads/staging/') && !env.ACT }}
        run: |
          ./scripts/deploy.sh "gcr.io/hoprassociation/hoprd" 3
        env:
          DEPLOYER_WALLET_PRIVATE_KEY: ${{ secrets.DEPLOYER_WALLET_PRIVATE_KEY }}
          HOPRD_PASSWORD: ${{ secrets.BS_PASSWORD }}
          HOPRD_API_TOKEN: ${{ secrets.HOPRD_API_TOKEN }}
          FAUCET_SECRET_API_KEY: ${{ secrets.FAUCET_SECRET_API_KEY }}

      - name: Run deploy script for public nodes (staging-only)
        if: ${{ startsWith(github.ref, 'refs/heads/staging/') && !env.ACT }}
        run: |
          HOPRD_SKIP_UNSTAKED=true ./scripts/deploy.sh "gcr.io/hoprassociation/hoprd" 1
        env:
          DEPLOYER_WALLET_PRIVATE_KEY: ${{ secrets.DEPLOYER_WALLET_PRIVATE_KEY }}
          HOPRD_PASSWORD: ${{ secrets.BS_PASSWORD }}
          HOPRD_API_TOKEN: ${{ secrets.HOPRD_API_TOKEN }}
          FAUCET_SECRET_API_KEY: ${{ secrets.FAUCET_SECRET_API_KEY }}

      - name: Send cluster info to Matrix
        if: ${{ success() && !env.ACT }}
        run: |
          ./scripts/notify-matrix-cluster-info.sh
        env:
          MATRIX_ROOM: ${{ env.MATRIX_CLUSTER_INFO_ROOM }}
          HOPRD_API_TOKEN: ${{ secrets.HOPRD_API_TOKEN }}

      - name: Send notification if anything failed on master or release/staging branches
        if: ${{ failure() && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/staging/')) && !env.ACT }}
        run: |
          ./scripts/notify-matrix-github-workflow-failure.sh "${MATRIX_ROOM}" "${{ github.repository }}" \
            "${{ github.workflow }}" "${{ github.run_id }}"

  deploy_nat_instances:
    name: "Continuous Deployment: Deploy NAT instances"
    strategy:
      matrix:
        os: ["ubuntu-latest"]
    runs-on: ${{ matrix.os }}
    needs: [deploy_public_instances] # Public nodes need to be deployed first
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "[SETUP] Configure Git info"
        run: ./scripts/configure-git-info.sh

      - name: install toolchain
        run: ./scripts/toolchain/install-toolchain.sh

      - name: get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: restore yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: restore cargo cache
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', 'rust-toolchain.toml') }}
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            .cargo/.package-cache/
            .cargo/bin/
            .foundry/bin/

      - name: Set up Google Cloud Credentials
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}
          install_components: beta

      - name: Initialize, install packages and build
        run: |
          # get latest version
          git pull
          # need to build our packages which might by used by the scripts, such as the fund script
          make -j deps-ci

      - name: Restore built artifacts
        uses: actions/cache@v3
        with:
          path: packages/
          key: hoprnet-build-${{ github.run_id }}

      - name: Run deploy script for nodes behind NAT
        if: ${{ !startsWith(github.ref, 'refs/heads/staging/') && !env.ACT }}
        run: |
          ./scripts/deploy.sh "gcr.io/hoprassociation/hoprd" 2 "-nat"
        env:
          DEPLOYER_WALLET_PRIVATE_KEY: ${{ secrets.DEPLOYER_WALLET_PRIVATE_KEY }}
          HOPRD_PASSWORD: ${{ secrets.BS_PASSWORD }}
          HOPRD_API_TOKEN: ${{ secrets.HOPRD_API_TOKEN }}
          FAUCET_SECRET_API_KEY: ${{ secrets.FAUCET_SECRET_API_KEY }}

      - name: Run deploy script for nodes behind NAT (staging-only)
        if: ${{ startsWith(github.ref, 'refs/heads/staging/') && !env.ACT }}
        run: |
          HOPRD_SKIP_UNSTAKED=true ./scripts/deploy.sh "gcr.io/hoprassociation/hoprd" 1 "-nat"
        env:
          DEPLOYER_WALLET_PRIVATE_KEY: ${{ secrets.DEPLOYER_WALLET_PRIVATE_KEY }}
          HOPRD_PASSWORD: ${{ secrets.BS_PASSWORD }}
          HOPRD_API_TOKEN: ${{ secrets.HOPRD_API_TOKEN }}
          FAUCET_SECRET_API_KEY: ${{ secrets.FAUCET_SECRET_API_KEY }}

      - name: Send cluster info to Matrix
        if: ${{ success() && !env.ACT }}
        run: |
          ./scripts/notify-matrix-cluster-info.sh "-nat"
        env:
          MATRIX_ROOM: ${{ env.MATRIX_CLUSTER_INFO_ROOM }}
          HOPRD_API_TOKEN: ${{ secrets.HOPRD_API_TOKEN }}

      - name: Send notification if anything failed on master or release/staging branches
        if: ${{ failure() && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/staging/')) && !env.ACT }}
        run: |
          ./scripts/notify-matrix-github-workflow-failure.sh "${MATRIX_ROOM}" "${{ github.repository }}" \
            "${{ github.workflow }}" "${{ github.run_id }}"

  unset_failed_deployment_flag:
    name: "Unset failed deployment flag"
    runs-on: ubuntu-latest
    needs: [avado, deploy_public_instances, deploy_nat_instances]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Google Cloud Credentials
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}
          install_components: beta

      - name: Unset deployment failure flag
        if: ${{ !env.ACT }}
        run: |
          ./scripts/deployment-gater.sh unset
