---
#################################################################################
# Manual pipeline to start a load testing scenario
#################################################################################
name: Load Tests

on:
  workflow_call:
    inputs:
      test_id:
        type: string
        required: true
      nodes:
        type: string
        required: true
      workload:
        type: string
        required: true
      duration:
        type: string
        required: true
      rate:
        type: string
        required: true
  workflow_dispatch:
    inputs:
      test_id:
        type: string
        required: true
        description: 'Test name'
      nodes:
        type: choice
        options:
          - rotsee
          - dufour
          - team
          - relayer
        required: true
        description: 'Cluster of hoprd nodes'
      workload:
        type: choice
        options:
          - one-hop
          - sanity-check
          - incremental
          - multiple-hops
        required: true
        description: 'Workload type'
      duration:
        type: string
        default: 30m
        required: true
        description: 'Test duration'
      rate:
        type: string
        default: "200"
        required: true
        description: 'Number of messages per seconds'
concurrency:
  group: load-tests
  cancel-in-progress: true

jobs:

  load-tests:
    name: Load Tests
    runs-on: self-hosted-hoprnet-small
    steps:

      - name: Set environment variables
        id: vars
        run: |
          if [ -z "${{ github.event.inputs.test_id }}" ]; then 
            echo "The workflow is triggered by other pipeline"
            echo "NODES=${{ inputs.nodes }}" >> $GITHUB_OUTPUT
            echo "WORKLOAD_NAME=${{ inputs.workload }}" >> $GITHUB_OUTPUT
            echo "SCENARIO_ITERATIONS=${{ github.event.inputs.rate }}" >> $GITHUB_OUTPUT
            echo "TESTID=${{ inputs.test_id }}" >> $GITHUB_OUTPUT
            echo "SCENARIO_DURATION=${{ inputs.duration }}" >> $GITHUB_OUTPUT
          else
            echo "The workflow is triggered manually"
            echo "NODES=${{ github.event.inputs.nodes }}" >> $GITHUB_OUTPUT
            echo "WORKLOAD_NAME=${{ github.event.inputs.workload }}" >> $GITHUB_OUTPUT
            echo "SCENARIO_ITERATIONS=${{ github.event.inputs.rate }}" >> $GITHUB_OUTPUT
            echo "TESTID=${{ github.event.inputs.test_id }}" >> $GITHUB_OUTPUT
            echo "SCENARIO_DURATION=${{ github.event.inputs.duration }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout hoprd-test repository
        uses: actions/checkout@v4
        with:
          repository: hoprnet/hoprd-test
          ref: main

      - name: Set up Google Cloud Credentials
        uses: google-github-actions/auth@v2
        with:
          token_format: "access_token"
          credentials_json: ${{ secrets.GCP_SA_TERRAFORM_JSON }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: hopr-staging
          install_components: beta

      - name: Get credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: cluster-staging
          location: europe-west3
          project_id: hopr-staging

      - name: Setup NodeJs
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Get Hoprd Api token
        id: token
        run: |
          hoprdApiToken=$(kubectl get secret -n k6-operator-system -o json hoprd-api-tokens | jq -r '.data.${{ steps.vars.outputs.NODES }}' | base64 -d)
          echo "HOPRD_API_TOKEN=${hoprdApiToken}" >> $GITHUB_OUTPUT

      - name: Setup Load Testing environment
        run: |
          npm install
          npm run test:${{ steps.vars.outputs.NODES }}:setup
        working-directory: "./k6"
        env:
          HOPRD_API_TOKEN: ${{ steps.token.outputs.HOPRD_API_TOKEN }}
          NODES: ${{ steps.vars.outputs.NODES }}
          WORKLOAD_NAME: ${{ steps.vars.outputs.WORKLOAD_NAME }}
          SCENARIO_ITERATIONS: ${{ steps.vars.outputs.SCENARIO_ITERATIONS }}
          TESTID: ${{ steps.vars.outputs.TESTID }}
          SCENARIO_DURATION: ${{ steps.vars.outputs.SCENARIO_DURATION }}

      - name: Run Load test
        run: |
          kubectl delete -f k6-test-run.yaml 2> /dev/null || true
          kubectl apply -f k6-test-run.yaml
          echo "Waiting for test to bootstrap..."
          sleep 2m # Wait for test to bootstrap
          echo "Waiting for test to finish..."
          sleep ${{ steps.vars.outputs.SCENARIO_DURATION }} # wait for the test to finish
        working-directory: "./k6"

      - name: Parse results
        run: |
          kubectl delete -f k6-test-results.yaml 2> /dev/null || true
          kubectl apply -f k6-test-results.yaml
        working-directory: "./k6"
