---
#################################################################################
# Manual pipeline to start a load testing scenario
#################################################################################
name: Load Tests

on:
  workflow_call:
    inputs:
      test_id:
        type: string
        required: true
      cluster_nodes:
        type: string
        required: true
      topology:
        type: string
        required: true
      workload:
        type: string
        required: true
      duration:
        type: number
        required: true
      rate:
        type: number
        required: true
      vu:
        type: number
        required: true
  workflow_dispatch:
    inputs:
      test_id:
        type: string
        required: true
        description: 'Test name'
      cluster_nodes:
        type: choice
        options:
          - core
          - uhttp
          - team
        required: true
        description: 'Cluster of nodes to test'
      topology:
        type: choice
        options:
          - many2many
          - sender
          - relayer
          - receiver
        required: true
        description: 'Nodes channel topology'
      workload:
        type: choice
        options:
          - constant
          - incremental
          - hysteresis
          - sanity-check
          - multiple-hops
        required: true
        description: 'Workload type'
      duration:
        type: number
        default: 30
        required: true
        description: 'Test duration in minutes'
      vu:
        type: number
        default: 1
        required: true
        description: 'Virtual Users per route'
      rate:
        type: number
        default: 20
        required: true
        description: 'Messages per seconds per Virtual User per routes'


concurrency:
  group: load-tests
  cancel-in-progress: true

jobs:
  load-tests:
    name: Load Tests
    runs-on: self-hosted-hoprnet-small
    steps:
      - name: Set environment variables
        id: vars
        run: |
          if [ -z "${{ github.event.inputs.test_id }}" ]; then
            echo "The workflow is triggered by other pipeline"
            {
              echo "TESTID=${{ inputs.test_id }}"
              echo "K6_CLUSTER_NODES=${{ inputs.cluster_nodes }}"
              echo "K6_TOPOLOGY_NAME=${{ inputs.topology }}"
              echo "K6_WORKLOAD_NAME=${{ inputs.workload }}"
              echo "K6_TEST_DURATION=${{ inputs.duration }}"
              echo "K6_VU_PER_ROUTE=${{ inputs.vu }}"
              echo "K6_REQUESTS_PER_SECOND_PER_VU=${{inputs.rate }}"
            } >> $GITHUB_ENV
          else
            echo "The workflow is triggered manually"
            {
              echo "TESTID=${{ github.event.inputs.test_id }}"
              echo "K6_CLUSTER_NODES=${{ github.event.inputs.cluster_nodes }}"
              echo "K6_TOPOLOGY_NAME=${{ github.event.inputs.topology }}"
              echo "K6_WORKLOAD_NAME=${{ github.event.inputs.workload }}"
              echo "K6_TEST_DURATION=${{ github.event.inputs.duration }}"
              echo "K6_VU_PER_ROUTE=${{ github.event.inputs.vu }}"
              echo "K6_REQUESTS_PER_SECOND_PER_VU=${{ github.event.inputs.rate }}"
            } >> $GITHUB_ENV
          fi

      - name: Checkout hoprd-test repository
        uses: actions/checkout@v4
        with:
          repository: hoprnet/hoprd-test
          ref: main # Use different branch if needed to test a new development

      - name: Setup GCP
        id: gcp
        uses: hoprnet/hopr-workflows/actions/setup-gcp@master
        with:
          google-credentials: ${{ secrets.GCP_SA_TERRAFORM_JSON }}
          login-artifact-registry: 'true'
          install-sdk: 'true'
          login-gke: 'true'
          project: hopr-staging

      - name: Setup NodeJs
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Get Hoprd Api token
        id: token
        run: |
          hoprdApiToken=$(kubectl get secret -n k6-operator-system -o json hoprd-api-tokens | jq --arg entry "${K6_CLUSTER_NODES}" -r '.data[$entry]' | base64 -d)
          echo "HOPRD_API_TOKEN=${hoprdApiToken}" >> $GITHUB_ENV

      - name: Setup Load Testing environment
        run: |
          npm install
          npm run setup:${K6_TOPOLOGY_NAME}
        working-directory: "./k6"

      - name: Run Load test
        run: |
          kubectl delete -f k6-test-run.yaml 2> /dev/null || true
          kubectl apply -f k6-test-run.yaml
          echo "Waiting for test to bootstrap..."
          sleep 2m # Wait for test to bootstrap
          echo "Waiting for test to finish..."
          sleep ${K6_TEST_DURATION}m # wait for the test to finish
        working-directory: "./k6"

      - name: Collect Load test results
        run: |
          kubectl delete -f k6-test-results.yaml 2> /dev/null || true
          kubectl apply -f k6-test-results.yaml
        working-directory: "./k6"
