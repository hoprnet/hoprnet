name: HOPR End-to-end tests

env:
  HOPR_GITHUB_REF: ${{ github.ref }}
  MATRIX_ROOM: ${{ secrets.MATRIX_ROOM }}
  MATRIX_SERVER: ${{ secrets.MATRIX_SERVER }}
  MATRIX_ACCESS_TOKEN: ${{ secrets.MATRIX_ACCESS_TOKEN }}
  RUST_BACKTRACE: "1"
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

on:
  push:
    branches: ['**']
    paths-ignore:
      - '.processes/**/*'
      - 'docs/**/*'
      - 'packages/*/docs/**/*'

jobs:
  source-e2e:
    runs-on: ubuntu-latest-8-cores
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Disable sccache (act-only)
        if: ${{ env.ACT }}
        run: |
          echo "SCCACHE_GHA_ENABLED=false" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=" >> $GITHUB_ENV

      - name: Sccache Setup
        if: ${{ !env.ACT }}
        uses: mozilla-actions/sccache-action@v0.0.1
        with:
          version: "v0.4.0"

      - name: Install Nix
        uses: cachix/install-nix-action@v17

      - uses: cachix/cachix-action@v12
        if: ${{ !env.ACT }}
        with:
          name: hoprnet
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        continue-on-error: true

      - name: get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: restore yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: restore cargo cache
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', 'rust-toolchain.toml') }}
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            .cargo/.package-cache/
            .cargo/bin/
            .foundry/bin/

      - name: Install dependencies
        run: nix develop -c make -j deps-ci

      - name: Build application
        run: nix develop -c make -j build

      - name: Test with pytest
        run: |
          nix develop -c make smoke-test
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN }}

      - name: Upload node logs (Linux)
        uses: actions/upload-artifact@v3
        if: ${{ always() && runner.os == 'Linux' }}
        with:
          name: hopr-linux-e2e-source-node-logs
          path: |
            /tmp/hopr-source-node-*.log
            /tmp/hopr-source-anvil-rpc.log

      - name: Send notification if anything failed on master or release branches
        if: ${{ failure() && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')) && !env.ACT }}
        run: |
          ./scripts/notify-matrix-github-workflow-failure.sh "${MATRIX_ROOM}" "${{ github.repository }}" \
            "${{ github.workflow }}" "${{ github.run_id }}"
